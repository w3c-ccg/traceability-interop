{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "ecf91a9d-3512-4ed7-9edd-78978c9ac268",
        "name": "Clear Cache",
        "item": [
          {
            "id": "2ff34100-4c77-4cf3-b934-9ffe7679d46e",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a4b6c2bc-6ac5-469d-a8a5-c39adfc897af",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "8dfc7626-7710-4a2a-b8e2-f9bbedb31327"
                }
              }
            ]
          },
          {
            "id": "f7e9a0bb-6626-4abe-a3a5-5f58edd43d49",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a28c28c5-024e-48f3-bc22-18d33d55f747",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "552fdc66-edaa-4c4a-8b2d-aa4d9917ac7c"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "2858fc43-0c91-4783-809f-6af7a4657715",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "0e2c7e69-919d-4469-9592-43d97957e1a5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1abffd88-3c3b-40e2-b6ee-ab83f5b74b34",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9fe7451b-fa47-424d-8d59-d51ac947411e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "02d67fcc-065c-4984-add3-9c1d5e013cef"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e603fcaf-931f-4352-91f5-c40aafd163c2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f6bb5d26-3acb-40b6-831d-74561a514311"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3052f210-a2a7-44ee-8b9e-97b6bdeb5000",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5b1ddc88-4cd2-4bf2-999c-6aa017bfc484"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "89395cb9-9351-4ee6-88f9-c25c557fbf7a",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "67f4f2bc-1f0d-49dd-8d3a-2105a76dfc71"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "976cf95a-513e-4f78-93e2-3985873a5b91",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7d936448-d265-4f3f-9c1b-d9962cd5ee81"
            }
          }
        ]
      },
      {
        "id": "c79ce806-c431-4e34-90ac-54ece0f9fff4",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "fe84952d-7a91-420f-b10d-ba9f04494d54",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e9b1cbda-36de-4e90-9b40-b2a9f6997758",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "18859222-6c00-426d-bb5a-acd8f6c1f12d",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78bbec13-eb80-4f98-92b1-f041c758aee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5643e3d1-5fe5-45d4-a216-4200f8c27360"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58af92b5-f756-469a-b0c3-18f7e338f622",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7206a683-d7d9-4b6f-8320-4250e2cfb699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ed5eb9ec-f4b6-4380-a25b-6e493cbf9b2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dffdcd3-858b-42f8-bbb0-27c833949207",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f12b98c0-1231-4776-b13c-5fa6e0dcac58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b5128066-741c-4871-83dc-46c5c1457dd8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fe7cedc8-4f01-45d6-a363-118076ea87e0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9da17a37-fef1-4b6d-bee0-b64939096c7b",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e85e01ef-4d11-4cbf-a807-269b80752c7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ea9be265-1fba-4560-b278-0fec4a321c58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0e912ba-3471-4140-97a4-ecf299204000",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2126b81-8718-43e1-8c45-2db827b96239"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "8a82be99-7b7d-44c9-8942-6d5da34895ca",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0e9e01b3-c665-4873-bcb5-9a497f24936f",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c0d2605a-a639-4503-bf1b-2abef955973e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "7a69ec1a-77f9-4e83-a20d-f9a648ff32c1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b9c80913-0868-491f-a64e-0bfca4a22d8b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "674d1c0f-61ef-4a41-b56f-5e73359db696"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "322045fa-b0ee-414d-bbc5-1eaadb10893c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "37bb8ada-049f-4cee-b762-b56bf52c7168"
            }
          }
        ]
      },
      {
        "id": "1337a0d6-ab85-47a3-b616-02cfd74ea67f",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "01e6534c-2e8d-40bc-9140-832d1dd3530b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ff087483-eb81-4946-9dc1-79ea1939c1c4",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "e9cd760c-cbda-4dfd-81fc-9e9ad9d7ce19",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4135c74-7a5e-4bea-951b-8ba6220896d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83fe9b54-d985-4b4f-beb3-153372a2f0f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "631d4cfa-36f3-4862-af2c-9bbd9477d547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "917ef04e-664f-4b2e-9c33-abaaae96f276"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35747746-97ac-4573-a267-17446844415b",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f221fe5-b96f-417b-a698-c34af3e4d71f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9f7b748-36ea-43d8-887f-2f0087e451da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a3698c9-c8d2-475e-949e-11edb8fa6a8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a9846d0f-0952-4899-97c7-fae949ff9d56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebb83b9f-dbfe-497d-b871-0f2aef81600d",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bbf247b-b2a3-42f9-bbd8-3a10f25c1449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad2042b2-b47d-4396-8c9a-5cf7a6e37f5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "750bf187-5556-4d8b-8dee-e02e7712f3ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d99df477-b1b2-4435-832b-e285f49e5e8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5d7492d-0b81-4cf7-859f-b4b3d0117939",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a282b32e-944b-47c6-9193-db0c02ba1410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38ba46a1-d0a2-482a-a031-49c9a2e68f13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5c8fd9c-69b3-4d1a-ae3f-b39677e8a0ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d8a6af83-75f6-4862-93eb-05ee9dd94898"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbe90dbc-d694-405b-be4e-65597b6e6c86",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e287edaf-586b-42f8-84d6-ce49b394cdc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a2ee052-e894-4490-bc16-72e7743fd7ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04ff1c93-f58d-4a84-b2bc-56350f02edf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5dc24761-39a2-4f21-a108-45530aaea2cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aa58069-bd6b-439f-8fe3-69256ab5d8b6",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08d41b2b-088a-47a6-9da5-56a58f5cbcf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43dca572-bf01-48e7-a448-8556d8bae616"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "154fe2ac-aa3a-4a6f-bf0f-df9d1f03b334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ea48ea3f-5d6d-409a-9492-01ce9e49f332"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37b63b99-a0c3-473b-af86-fdb1d628ee09",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d898de17-4db9-4b4d-a1cd-1e572a01b38a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e455872-3501-4d6e-8dd8-04b9f87395c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02edf48b-2ab5-41c0-b5e7-93e2f3152c09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "918dd9c5-41e0-4d97-ba4c-efad2f948cb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c7f5910-7e92-4fde-84e0-22bc48397f5d",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc643d85-c2a3-4809-ae3a-8954ab613165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "287a2af9-1c54-43cb-aead-b0bfde5dc7e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7aefb82-566b-495c-b63e-892373d6c776",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d54e270f-8295-4bd1-b0cb-c937ef5f4334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "348fea69-94a2-47b0-a2c0-87ee67f1454c",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4f81e3b-f142-4f20-9718-8e317273d3ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aedb4ad9-96f1-4cbc-9d5c-6a21fdd4264e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5e877f6-eea0-4fa7-ac37-b00db85d9398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ba553739-ea03-4f6c-93d8-654cd65d72ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30a99a6f-1179-412e-bb69-37796494efa8",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5484120e-99c0-4c12-afb7-6f6273139a30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61a31e12-e580-4af5-8f4a-5c28f2d4d282"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87ad9630-e0b7-439e-a404-79a747628cc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "60b91d23-f9eb-41ee-8d57-d8ad7665cc10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dde84ed2-165e-4380-81e4-3f569324df6e",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c98e9757-e79d-47f4-8c7d-b9347267e0ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "061ca2fa-834d-49a8-a414-85bb783e27f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e73465e-205d-4f6d-8d92-d26e428b3c5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b847cdc4-ac2c-407c-98b5-857869e9f088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "609a550d-f8d6-4d93-8fb2-6c52f04be3d1",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09a9bc76-8850-4745-90cc-4b658157c358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e94fe996-345b-479c-8736-0647ea1170ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0592dda1-7b0a-40a3-ad14-7a94c4e54064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ae4fe280-6432-4580-a652-36ce4a35d340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8221f8cf-34d4-4b48-8a91-371bf111d98a",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8308089-0450-43a5-a2d5-ffc02726aa9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21804045-9e68-4308-ac4c-714376aa85be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c49c684e-e434-4dd7-9cc8-c4fd08ffc1b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2ff26bbb-6d76-4492-95fe-df85628a8bd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ef7a0ed-6390-4311-b69c-8a80fec23cb1",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82faf261-78e5-4126-9707-8c9c2e26631a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff696a63-2d70-4312-91d2-6e94317024f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf02f24b-2ec7-41fb-92cf-47a6a9757be3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d5f61f42-9a2f-425c-a585-7931305aaedb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8b8fc3e-e020-423e-a78c-f47b59e6e14b",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20a29f54-ff8c-400c-a50f-0c9b7c2660c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0783e19-b05f-434e-8d26-003b70b21474"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d191a73c-f2b4-4a12-a703-83be21f44109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "addaaf0e-b62d-4706-bad6-cc410b3e46f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab8694a8-b472-4a68-9c84-d5e4ff4409d0",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c078d597-490d-42aa-bc39-9e92d15dcbea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a482a04-30af-4f69-aa86-77c0a270099c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1acddb5-b3c3-4b76-ba2f-d2e4465efe78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7e1d7dd0-f146-4ec2-9287-7df3d33b93fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee573e2d-da2e-4e74-81e7-96349bee1fc4",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e0ece82-78f4-496f-81c5-9c6e66be79c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e13f5291-7e5f-4ce8-88fd-48ca52c395b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ab9a00a-ac2a-4ffb-8cc5-25217b34c6b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "019b1dc5-10e7-438b-a6cd-fe8c5100c005"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8b7661f-c247-4fd1-8bad-7a052674f55b",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4c1aa6f-2f97-4a94-a6c0-93659408d1a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0bcbf50-2d5a-4e4a-8610-110ca7a7ced2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54162bd8-c2c9-4881-b620-55d218c0bb65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3d013f8-51e0-4ea2-a350-c72811aa4263"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86d58e56-24df-43dc-9117-1698d080927a",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93639419-e87f-4d20-aa1f-597e30139657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dc8f303-02c1-49da-9711-ee0f39e73509"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f4349bf-a54b-4350-ab68-01826bbd5a7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4221062-0ffe-4b61-9344-e846785d3d4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5c7d172-abe0-4751-b0fe-b729548e6bee",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58f1e324-3471-40b3-af6a-b7f1ac891fae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aac35e23-d7ce-4815-8492-6d8cb4802ea9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82da7826-1c2e-4be4-bf67-390adb714145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f8c3f4e-4fd0-434d-8e6c-275a61f40cae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d7da963-b438-47ff-ba75-7bca3e4d4fea",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4c38dbd-5fb1-4e22-9a68-84229ddbdbd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74f81f9a-62de-4ad5-a703-8bad5a1f8e4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95546135-1fad-4ee4-8a60-75e8ff7aae95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c183a19-5294-42b1-9f2e-684f30d1bd57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8edf978-0a79-4808-816d-aac55817e90d",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9054bc02-1cf8-45bc-9e43-411544758a7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0514cc6a-3546-4b2a-9f05-fc503ed9c1ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "003d0c10-855f-4737-8a6a-167323459e02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "df63a270-c6a1-4be7-9a72-3cf8f06b582e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2cdee50-8b62-4395-ae1d-7c5a8ddb30ce",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c7176b8-6c29-4609-8836-844c1a086e03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e883a83-c4b3-43e7-88eb-d3c302b5e1fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b19e8caf-5bcc-431a-bb65-512f318bd43a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b82510b1-61ad-4710-b29a-fd90e7381beb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b822f222-17a1-4392-956d-57ccabd2d618",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26dbca92-6be6-480b-85c5-093670ac1f32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c876c13c-868b-40dd-a0ce-863c9dd71b09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34b67a63-9e1f-4fa7-b2f6-15dc10315a2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "89965ab3-dec5-42da-a751-51de2e0f7a6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e34a711-14b0-46c8-9810-7befb96009d3",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f093f797-7696-473b-8a0d-5d18739c2d17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03c4e2bb-f9dd-47b6-8599-904dad0d733a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91cb87be-d004-4bf2-b562-6639b4ca48fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "26d0e1a4-8ea6-45b0-b54a-82e0f3808a78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b749a21-dfd4-44ee-a0b6-a0a43c79fca3",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14c1b239-3abc-4581-a366-3b35a4ae023e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d975d5b-8967-40e2-ba2d-39beab211740"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d358193-fbb7-42d8-b645-975c2e40c812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c9b8ff1-c799-49a3-9e4d-7480c3599cfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "535846f9-36e0-4076-8470-6f67255dfd49",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3411e634-6769-4cc6-95e4-4fd605ed50a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08b27d75-6bd9-4229-bd69-db214589dadb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "672759cc-ba1f-4b1d-95d6-503d0addd34a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb101df7-f937-4bac-8d4a-593f9860e15f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32a3ffcc-7150-47be-8e8d-bf10c6ecb776",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b59ceef-8603-4a98-aaae-761245ccb092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f16b3fc8-a190-44a5-8830-bbdf91bc5c16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aa5f2b0-c0c6-4e2c-862d-b352900fe564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "80e9a3cf-0033-4abd-bb59-2da587dff7cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92e250cc-b39f-4670-9251-66f5f31e4090",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a366b7f-c449-4bd7-a237-85252cabb095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f0ef5e4-fe00-49b0-a373-ddeabd3d73d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25a0fc2a-d6da-4617-9f92-24d1f673c8dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "55261e2e-5d8a-49cb-bc0b-a8bfec75c4ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6142e52e-dd20-42da-8052-b5a99128f97a",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb047800-aeb2-4e17-8f16-c8836eee082d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ceb4c29-62e5-42c9-9a0a-0eff4583e9f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28575a02-904d-45ca-a053-6c7a09248804",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "84f9178d-da85-40b6-9c67-55b4229d2412"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5bac420-67d3-4389-bf69-9db9bb815288",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77023646-911f-493c-8bb3-0660ee69a620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8462cb63-9520-42a8-9437-fa8b08b96084"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf3f9337-aa81-4a17-bb84-6fbcc65f8d2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "73c53567-e77d-4b6a-aea2-8d07e70d93f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b25c4cfb-d556-4233-9912-9d9c8d36cc2e",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14dd7cc9-2261-4cd2-8354-a30c7aecda87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d2e28a1-e549-4e00-8585-cbad16586f7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "131e1ee3-dcdc-4a2b-8648-0890b65acb27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4de30f88-c664-46eb-8388-4575d1513be1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32181da5-134a-41c2-9d76-322f08f280b0",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "819e7a39-9ab3-4047-9093-fb3d895bdb4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c68b22f1-140a-4b5d-82ac-4ec89e37cc93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ebd0efe-ae86-474a-9d4b-14aafb62aa2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c1f7254-0778-4c9e-90e0-ff6dd725d6ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0890efb1-cdbf-4971-b7ed-c9292f3d4fa4",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cb1eccc-c2c5-4853-8cea-6ae0bff9a119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "181032cb-d3a9-4a57-88c5-2a7fcdb8236c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ed535dd-4e24-4e86-a883-fe9cd60c9406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "32bd7d02-d2b7-49b1-bd6b-f7e69a6b6a63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "227ea876-fd72-4788-b322-a3969994367d",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e9e9c8e-ac20-4594-b3a5-6c3444b06875",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30b24ca7-cb5f-484c-89ad-7f74c37e8f43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fc0df0e-1f16-4d40-9f20-ff52c19dd9aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "201b7b6c-aeaa-4fb9-a973-3a95a6716e5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7611708f-2714-4059-8360-12b2d2e90c91",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74ec9dfc-fb13-4908-a799-b4b75772a1c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6fac5940-7bfd-4ec8-b150-9534a11dc031"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9f8a0af-5653-4e35-a481-20e453e7d664",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "59611b5f-209c-4ace-b780-a6926b7715fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90595f2b-752d-4797-8acd-d54355520896",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2073f5c8-5bda-4257-9b53-a77f16b03293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0414ae9-191e-4284-b38e-5a2fdba60d6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d6d9c36-d8b1-41aa-945a-996195a66cfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "44919bc3-7a6e-4dd6-84b7-5e3811beaa86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "956a5452-cec0-4efa-93c6-90b5d09cc96a",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc9e7ee0-dfe2-4e52-a334-de3e71d0e623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17a2867f-8668-4295-bfe4-0c987be6078a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2de62026-f472-421e-a2a8-c5460589b4b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3bb140c4-a356-4905-9434-2b64c603eace"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f825a422-3f68-410c-ab4d-21c8844e0d61",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12c6de67-b7bf-4d30-8b09-3a63daeb3c52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22e0f7df-959c-4737-a255-11931584cb7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a38d41df-c220-40b9-bfff-9456864315c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a44b5913-d5d0-465f-a6eb-a3fd041850fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ef42efe-0d72-44a3-8f94-fedf8b6eae4e",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b437c3c3-4982-404c-b263-74b6c41ab230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f7017ce-ad87-4ae2-b6da-007674a74450"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c12da3bc-a053-4ebb-a5f8-0b3ec08f8d8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "15069a02-a9ab-4ea2-810b-2a1f29478c40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af905f60-532f-4d75-a3ea-0a3d7534dbe1",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05439942-c1bf-47cb-8118-0a53a8bbf0d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3eade122-4745-41b3-af66-9f331e0b0fb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e322812-d872-405f-ae02-bb58456d2c13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "87ddbf74-d2cf-459a-88bb-3d818c84755d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60d1f136-7d28-44f4-a18a-bebce4e3ad85",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78b51174-279a-4d3f-9f94-62c7fd16fe81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afcdab6a-59c2-4b69-87a6-a7744784de6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dc6c813-114c-4caa-8bf9-3cd744a39c04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "b1ec74f7-68db-47cd-9e96-31118bb9cdb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "458a7a05-7151-4f73-93e3-6884b86f2143",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "655a1ee2-f10c-491a-8c9a-2876cddda9d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "455478f9-2335-43d9-9068-14781da1239d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98753220-a9b2-405e-ba90-f2cb6e559bc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "a5b4fb9a-9bd3-41c1-a337-96bd8c03b65a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15d4314b-4cf9-41d1-8640-132c8d3b015a",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bad17a0b-0a22-4306-b286-f5586418d713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b571c975-78c5-49e3-85b7-33ecde139090"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da55b6ae-dde1-403f-a267-11d7cf216625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "cba38bd4-16bd-4c4c-a33e-0d998c5ace3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92687b2f-bf75-432d-8b50-c6d0d5fa4563",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89ddab7f-9a38-446a-ad52-37533f8cdc96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b49d55e6-7b3f-4a22-986b-addf7c2ad18a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be25ac94-68d4-4151-8f69-c92a8ebfbab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "71e3fcf7-3fd0-427a-bb4c-33d0444c0c5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1747c08-0a20-4797-a031-536303ae326b",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2224f0f8-dd92-4c11-83c2-f1bb99e2928a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28ed3270-ff3b-41a8-93c3-2138c6889e18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20f05982-1294-4585-9f12-76cf36a26689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f073471-f2c3-4476-92e5-c8173a364d3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c394b43-afa2-4293-8a60-32d31edf545a",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a92f01e9-ff34-4978-942f-2d507760931f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "823c7be0-0a25-461a-9371-c54d0e24dd4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f390558-fd1f-4280-bc0d-ae441f53bfd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "215383eb-7341-4492-971b-ac40d0ec195c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bb6f4ef-a9a5-45de-a7c7-d244148c7478",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f71ba338-f01f-4c6f-8a70-044d2113319b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1fceeca-a77c-4561-b02d-cac824f79bc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fde0d0f9-67b8-44d9-bb0e-1cc9dad692f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5a80044-4aaf-4963-8d89-3032ac512ae7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a91f8ec-f90b-4d41-9572-3c48f257d9ec",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfd9b45e-b00f-466f-a1aa-5bebb52fff42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cea594b-3c5a-4ddd-a34e-e54576cd9cce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f1d42db-b86f-4df3-aa55-71d43a46b8fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8f29256a-ee12-4637-992d-67498935895e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb2b5a30-a1ab-4b25-8183-20e850092e6f",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6504a6bc-96e1-48a3-a644-71a80b59a6f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9e00498-1532-41c1-922f-4f0eda1bcb90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a15d7b4-37a3-42e8-8a00-cd0f44ebf84e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8e03fcfb-7064-455e-9f00-629d4fe9a554"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af8ee070-887b-4cd4-914d-a827aee6220b",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "802e0770-04af-4459-a0d6-bb010ee6a36b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1de89fea-5423-432e-b1c6-7e9545471146"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d38f943-62cc-42b0-aa0f-8df413177961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c510bfb-b466-4451-9f25-bb1162808be9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da2b228d-3be7-4913-803d-69df4cefe958",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52108777-ce29-412e-b062-9f7f9c5d0283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d898afc1-05c6-4e43-897b-2690aabc681a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b102b77-5eca-4db1-a3e3-1e6fc605aa41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6b955ee-d1e5-4be2-8e61-e98e09a9dd91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdbb5068-e934-4412-9e6c-3ddf2f9ec190",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e758994-81e8-4e23-8fad-ed50ffed1723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dadd04ec-3527-4e7a-b974-9f95ab9d671c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29062fe7-f32d-4224-bec4-7fffff345f3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "368d449c-f7f8-4f45-b6f3-f8024c1dd1f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "593d56ec-75a6-4e90-b352-1e099aff241f",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46c130b6-8a5c-41fa-b654-52e8ac326825",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97923dff-dd6f-4206-9fa4-9ff547e2941e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ad4ab8e-9a36-4833-8eb1-4a5d1329d859",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "74d80a69-2cbc-43d5-b945-c3bba97087a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c99a388-63af-43d4-bc17-4bc4453dce38",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "972c1578-c0a1-4d4a-99f8-ed6a450102cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22d895f1-60e4-4e77-86a0-efcb7478f3ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8da7590-ff39-4316-9700-89901170a7d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2fab7572-7736-46a6-b17b-3640e27033de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62b1262a-c28f-4072-8c52-cb4d14ea8dfe",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6abebb11-dbb7-4209-8b4b-6fc1c7cab0bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79c5fa3d-f992-4c23-9c46-73d6f289fa99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b54d2cb2-82ce-4cd6-a876-3b19e101e171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "6bbb0253-fd86-4ce6-846e-77ff11297082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62b9b490-46db-4642-8215-9d0d693f13e8",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3badc453-776a-4eff-8f46-3b11977f7e87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "407b6c30-c962-48ae-baec-5257fdacd1e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3066290-310a-4b77-a284-3cb8850cfb2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d2c6f7bd-55ba-4680-ab86-3b6c68145149"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f21a1b03-cde0-4071-a060-b87fdf9c8ae0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8897f3d7-bf25-4388-b0e5-69f0ac387fd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "938c6571-5c17-495d-bb10-cb931189735e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61e62aed-438c-45fd-89c5-f21cc8a2626b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a223d26-84e8-4d57-9556-0fc41addef1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60cb1cbc-58dd-457b-8e16-8a63fc8de3b4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "138c0318-451a-4fb6-a77e-2d0a602c0b58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5cda299-6739-42f5-993c-e7c9d63b8d5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05ba271a-2c34-4350-9c4f-58170c71d454",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "cd6f1a25-9d57-46ac-9763-09c008d8ab0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d22dc821-d122-4e46-af92-b6d5a798391b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c35ffef6-c730-457b-9c27-bd52c1983345",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c23296d8-98c1-4b6a-8e6f-7ce9371e4fb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "642f6d60-d2bf-441b-9460-fa046d5a8757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "158eedb7-b385-4a14-8af4-96d875b89929"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6465fa2b-aeaa-433e-905f-abeca7c7cd44",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4d8a607-1291-4db6-b435-228df445a42f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b142ffca-ffcf-45ef-8125-069557fb8bf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7d0cc09-2af3-42fa-8f18-c9638a4c6bb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "4d2ef82b-7c25-4017-ae28-5745604c66d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30b033e0-e298-41a3-849e-db44b2d9e9a8",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcaf2b35-c6be-4c92-bd5d-ff2413794be0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "993063af-2438-4bdd-a412-d995d0f222b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3ed3cd6-4630-48f7-b03f-feee4b1252f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "471d1830-ecb0-474a-a174-55ffe0dfe6b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1d381dc-18cb-4a9c-8683-6cdbac186580",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c70281c-004a-4d67-bcf1-69968e2123bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1eec6429-858a-4c14-b562-a0a99732d36d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b974fdf5-6caf-42d4-b5c1-c8992954603c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "290f1eb0-1cf3-4ebe-afe2-2f9ab04093d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c133cf13-f067-4f28-857f-91de3cdae079",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd60a6cb-0020-4331-96ec-c2c93d5c0fe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12ffffb9-40c7-47bb-9ce6-8925960764cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d75f82e5-f167-443e-8c56-8239a60c7d7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9e3febd-e0cd-4ae0-b974-b93ed1758c63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5ba8a0a-2ca0-4291-8b58-64f8ef38f4ca",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4ed2848-a01f-41fe-abc1-c2a6d96b75bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "907af185-a1cf-45f6-9f35-ade30bdc8151"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2830768a-1d48-4d5e-93a8-6cb639f9215d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee20c7e0-2ae6-4507-a7dc-2e8969a7e271"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e30ceb86-efc4-4571-962b-c5d979cddb6e",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f7e052b-a774-4ea3-9d11-ad32c03d70a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0b40dfa-50a4-496e-bc94-7c7f28c17d85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb00f8f8-6bda-419a-9bc5-e7b5568a80ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "10eb138c-41ae-4237-a2dd-3062aa33362b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37478845-722e-4f86-b6d9-f30e9ac2a655",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7822b455-3e1a-4d2f-a526-f101ab0061b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4c3b8c7-859d-4358-a519-4db06edc2a32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8009684-9150-4b71-be0f-ea1b56558edd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "597374cc-b448-4ef7-86b2-890de3ca7169"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7962fb30-12db-4219-9d69-f6bb762caacd",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a48f4a74-8f69-4e42-aea3-4f356a4b85f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bf594a0-652a-4112-af81-32fc04c5c73e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cd2a1f0-c698-4692-a234-39773bae1ae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4680c9f-4f86-43ce-a613-8cd9b88d9063"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f307e9b-717e-422d-bb9f-bbc7fd307af5",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d058905a-ecb8-49d8-9538-77b5183fe1f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3fc055d-9925-48f7-9a7e-2f9e93ee266a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1db6d03-84a2-4bbe-acef-63526354208a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d368bf03-b6ff-43ef-b5bb-4c7c0787e615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d03b9b0-e34a-4c1f-b89c-5e2463c49df6",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c25ffc4b-20be-4e6e-9980-4d7d089e7fe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed9bdd62-f1b2-44a6-89c6-0fe10574a298"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e9e53e8-acf8-41d7-b8ae-bc1bf9b989fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "45e8acba-b74a-4e07-832a-ff00d1e08491"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b7e09c6-42a5-4fc0-ba72-b2a945d81e06",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c098614-96b7-460d-93be-bef20e9010c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4bac55c-8e67-44e3-8128-bf77b5eda1df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a878c5d-e55a-41c2-b1b3-6a386e0d4834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8f30580-48c5-424d-a1d6-1412adfce60d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b600c953-376a-451d-ac76-c329cd4c936a",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12b8ff54-3f3e-431c-9d19-138c8cc49ccb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e28121cd-ba78-4fba-ae81-226c8ca0e59a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8db84b2d-3382-49ed-a069-d57e4d45c144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "63a13dd4-5299-4f31-b04e-3020a33a49ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02e1c07e-378c-418a-92d4-13476fe05d8a",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49cd2f19-4e1a-4645-bc27-9df796fb16bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "224b93ef-7cb7-4f59-8471-cd03432df2c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a9c0378-3a6c-49dc-91a2-0ce080cc596a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c41dfc1c-3700-4569-adc4-a2d37640daf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90be4791-268c-494a-ad39-2edcb72c56b8",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "607852ff-d6ef-422e-be0e-22eb8b962d64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ce869a1-2e0c-4645-8436-9e88fdcfdfa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d486f552-6131-44fe-8fdb-187007b5336b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a78ba7d3-59ca-40e7-bf4c-03b5e77fff7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b53e337-4b73-436e-80f7-181a00c280d8",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9017dd39-46b6-4a18-ab90-6a673a3e2747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1c1e67b-0f31-4b12-a97e-c4e9fd231ea8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c416b389-712b-441a-b9b1-c137a9f13b1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bfbced52-2e8b-4393-9730-b7f5126a2475"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3e744da-b518-4eb5-8763-937f4f4f140c",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32852ef0-4e22-42d1-a404-ac6cbf94833c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7313c05-5ee5-4a43-9164-00be77e547a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbd75b0b-5e19-403d-921e-584146ece9eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6fa4d6c9-79f2-4a42-9876-46a1e35ef3f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "759f6ad4-b7f2-4549-b84f-3e9ab200a0c5",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1e861d8-cafb-498a-ace7-ecb0ed3bbab0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd344938-8cae-46a2-9766-3087178c5fbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4775ec28-c6b3-45c5-90af-b69803bcd978",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "847f9f62-0274-49b0-9a47-7f535df761a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d74dcee6-4ae0-466c-a3f5-79aaa4b1c907",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b10e976-53c4-45a7-8c0e-2ec9f346c15a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff3d7cc9-7dec-4c76-805f-0b1ca070ee37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92fb2908-4ee0-4030-ac85-03053add73d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e88d079-5ec5-4289-8a67-aa519ab040ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e74ab2ee-63ee-4ff6-8e1f-ca389ad6d622",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59f1facf-c17e-41e3-9a93-eaecd0a1d42c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f24b863-1fc2-438f-aac9-94ffc91ba4f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d43d189-ee72-4597-bf9e-86273cd7531d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b4ae03ae-c197-4ec8-aa1b-f764a66a9748"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aec95531-22ce-4467-8440-2d3f732a48d2",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3839042-a3b4-41c8-b556-c69ece3e23ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df6465cf-01be-4e51-9025-fd28705c71e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb3f0b35-d4c6-4b0a-a36e-af7a209a1a7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6e2ed924-290d-42be-8f9f-05fb9ddf79fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbd251a2-1f2a-4e9d-a6ab-5408ea2ed334",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37254e8f-137f-41d2-add3-5ce24f28fa94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "030dcd89-5e57-4dc4-91b3-a3ac668807c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78855b66-7d08-4cbb-af18-2e570646766a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c29b9b1-486e-468a-a4bb-3bc16b965d54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4a9b607-e73e-4b5d-afdf-2cedc172a67c",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3310f4d9-2576-4ec1-b09c-bfc6c3ed294a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f21afa6-d8d0-4578-b95c-457eb519dc54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e0fdd99-6cac-444e-aa74-d43e07925910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff2f95b2-e221-4e17-8efb-fbf6c470a0ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54f1d369-bd8d-45d9-943e-fc458af2f84a",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07a73dbc-4c40-4022-a49c-4edfadf7299b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa9d8ba2-0368-4358-9d24-a40113ae8aa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e59f8d4d-66d0-44d0-8683-97dc78e16c5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1262194e-8ca9-4c8e-914c-bd16f0ba8cd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff417a8d-a536-4557-b19b-95827ae7db6c",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e21ae7c-a0a0-42c5-877a-cab2c8856722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "535e6059-ed4c-45b7-ac2e-35656c803daf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f6d4141-57d6-49a7-b1cd-9fa41fe34e54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "739eb6e0-a8fc-4192-b0bb-a0523f22477c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0cdbac7-2710-4336-b836-a2e419d08952",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eab1f11-ce28-4baa-9ae6-e95fe37ec332",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9e4ede3-7932-4792-bef2-440c9ab11b47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6f33a2f-20dc-40d3-8995-4d3571565987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2b4c5837-8d18-49dd-b961-49baa4cb3a55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d57e4092-72b3-486f-8295-fca41ccaa5de",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6449096c-8865-4dbf-b2de-e08ab39e0357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fbcda21-d022-48e4-829a-15f8fcc84adc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a990f5d2-4fad-4e24-855b-8bd1408a77d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1bcc5183-782c-4be8-aae0-0216f0e9b65d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1400fdf8-feda-4847-a46b-77e7fab05082",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b22b914-49e0-4d4a-a1d1-9d31f461bf9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6889305b-e294-41a7-a309-a0d16e7a2b22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec6d6818-f947-4c5f-833c-6352eba9fbf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "39bab29a-ef9a-4388-9074-fb1b2586c76e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c81a4c84-f195-4153-8c99-3c992e3179e6",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a135a923-a4bc-457d-830b-71f1ecda502b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "700fb973-246a-41c5-953d-468f1ff826d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcbed2e0-1258-456e-9d80-495e17bd1a5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "38bb51bb-f6e6-40cf-b076-dc11395c2bac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7a65692-6cc3-4d87-8335-30affd54353a",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1207f23d-999e-4e66-8067-af71a7881297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b237fec7-b4a4-4a4c-9395-5a814a1ae891"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adf4c6d3-3376-4a3f-b3fd-f564cdd3aed4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8e239a4d-11a3-4475-9b26-765a0877d7e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0014bf3-add6-432c-bf5a-f07c2bdfc68c",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d3ef273-f9b4-48ad-958e-31c86b1dd51d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e59e66b-9cea-4134-847d-1959283e5b1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33965024-d14e-4674-b9a4-6d06b7a5488e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "976bdea9-2b5a-42b8-be50-191bccf1db2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1f465eb-b2dc-4775-8e6d-8c94c2277ebf",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44d64ec8-e9d5-45ee-8e6f-82d4567c6732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5290bc98-3b76-43a6-aa12-13252d36d0b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4a1bd68-384d-4ab3-ac12-d4e71530e2a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "9f208a24-3b31-4f72-9ba9-73fa4cf6bd7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca4f9dfb-b63f-47f0-afa0-513c9b92cc1c",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "825c6ad2-2a7c-4e05-b12b-7797d8245957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "8089fc83-c6a0-4c2a-90d9-661784ab9adf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c59301dc-6a03-4de6-bc32-a256896579e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "95139e6e-813a-41e0-abf5-1c300e48293f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5abf6f5b-fcca-4c87-a807-0186ec7da14f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3e1ca0ae-3c8b-452f-8eaf-de54f49ef231",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c35d9ed9-6e8a-4e40-a46c-547bbde111ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6131d8cf-5209-4741-b8f2-f4f957104a80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6df2624e-65c3-4b79-9ae2-700a070eec89",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0355a988-f2a6-4231-889f-a9bc91dd64a8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fcbf6d6f-cbbd-47aa-8011-70c4042e3c31",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c26420b9-358a-41b9-a182-c8e3f67ae18f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "786b300a-fd4d-40da-8c67-d0c503acdb6a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8ad9ff03-540e-4e1b-a27a-f1b2a19d477b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7cb423a4-ecd4-418e-8f98-8acbf11c0f8e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "88530e81-377f-4068-ad6c-a0bb03ef2f5d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ad12061c-7315-4512-bbfb-461338001468",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ab0ea96e-9808-4589-8a38-fcb7fe7eeadc"
                }
              }
            ]
          },
          {
            "id": "ebbb3b0e-1291-4832-b28b-a6d39b05c598",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f8b5cd95-b769-4de7-b0ac-0a8de93394fc",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "62474b03-dd29-41e2-8259-1dfebba4f4aa",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4789b14-2dc5-49d4-8fd1-b004bae2a9ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "bd538630-059a-4939-be55-20e3bd09b109"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95106e6b-62a3-4123-84d2-28f4f72aabbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fce346dc-ad15-46c5-a298-6fcae0c9393b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "773034e8-8c0e-4ab7-b9e7-59d54a17feec",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ae25315b-988f-4a77-ade6-5830e116c08a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0c4804dd-3120-427c-826c-8db22f08a7ff"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3b84fedd-7194-482a-922b-0d6347d2ccb9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3e9ca152-66d1-41b5-a038-bc6ead131815"
                    }
                  }
                ]
              },
              {
                "id": "40cf7ad9-12c6-4a7e-9203-40e1943b1dec",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6c5cd150-81b8-423e-9402-eed2a2f76f04",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e5f35f34-8d67-45d9-b1cc-35eab56b5f19"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "325b7c73-f7f6-4568-971c-5f381c8f9e37",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "22799335-b11c-4956-b7c8-1d1b4eca3198"
                    }
                  }
                ]
              },
              {
                "id": "4a4d2b8c-8959-411a-a257-c82ca950309c",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4dbaee7f-5f4c-40b4-8562-e53187bf24d9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6795095c-df60-4eac-995b-4ab75c9f06ef"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "559df4d9-595c-40df-90e8-a2e96671f573",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5b99a8c9-4f7e-46a0-a37f-502eea86d993"
                    }
                  }
                ]
              },
              {
                "id": "1aa6f16f-c067-4859-8017-2d7041f4a2b7",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "702f4b45-cd51-417e-96b3-f18d1b784690",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a56ef82c-5019-4e25-be53-bb7eb6e5ded6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a59b1660-e172-45ec-9fbd-11de393d9841",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "17373a71-db1b-4a3b-b906-d342b70b499c"
                    }
                  }
                ]
              },
              {
                "id": "a5ce4f2b-af40-49cb-8820-175f1f248ed2",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4746a6f7-a5ce-471a-900f-ae0f7282ad7f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6941335e-32cb-4a3d-a054-b16d98510e9e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ca4898cc-1e3b-4a76-b8ae-51c7bd6343e6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "bbe0b428-8db5-4d09-b790-aa7edf1630f9"
                    }
                  }
                ]
              },
              {
                "id": "cb9002b2-659c-4dbc-807a-558716ceddc4",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "11bed732-5bc6-444c-a644-3703d3efb3d1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f4be0fe1-0d97-4db2-a8e2-5bdf2aadc9f5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0bc34337-d623-4401-8ecd-ec982c526550",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0d8dbf2e-f7e9-41f1-95ae-46c3ac7425d4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "24c319a3-803a-4a23-97f0-ee9d6d2403aa",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f09325f5-aa27-416c-931c-cf8c98a5a9d5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6b99b8b7-46db-4cbf-b1db-586461ea8094",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2726f6be-52e3-490d-995f-94d9e2a9cf65"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "33b65e5d-791c-40f4-9017-0c8fb8b6cfbb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "fd9574a6-2cc1-4513-8493-c1c1f3cc6f19"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7c767fcb-14c5-4dd2-a4d1-995124c39639",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "415cd8d4-d2a0-4027-8c5d-fe940a444138"
            }
          }
        ]
      },
      {
        "id": "ec62bc7e-c2a9-4402-ac34-fb76c55335b7",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "561846f9-7b1d-4cce-8446-36301d43ba2b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1424a8d2-595e-46a8-8a1a-7ac17074c9de",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "63f30b71-986e-47e6-8729-3728c03a79f5",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3b4a3ca-ab74-40ec-98cf-bd783cbc183b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7efac510-205b-452b-bd84-cd178e7cae97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9ea2065-8419-401c-bf5e-4cbbb7d744f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "af0d93b8-a4fb-4ce7-9ee4-b5fe53f5f538"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2218dde7-ef77-4096-b0c9-0fba5e243069",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20e57918-909c-4ef3-9acf-4e53efb2ad55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41b1b629-91b2-4adf-a96e-36cff4528d24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a9ac8e5-15cb-4cbe-a5bc-eca77583f714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6226ee21-2abb-43ca-bad7-f5bcd34b2172"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e58941c0-d622-4b2c-a04a-64cc36c88d2e",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "138143d9-47a5-4d33-b81d-239226fca176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a986216-ccf6-4860-a5b8-bbcba1200dfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d245fdfe-dcaa-4739-86fe-80cb211ad88f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ebac5cd-0a0d-4ba5-ac35-5ee64dc4de30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c1d5cf2-f3dd-4b18-bb83-4db41a565303",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d45c65ff-1d67-4211-9a9d-2a07d0eab756",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6c9ce50-6e5a-4eea-bb88-20f78e9c71f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8baa4de-3298-46ee-a36b-894a4fb91d89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "93ab27cb-7b3c-4bed-9e04-e9b2af79782c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "040d98aa-5d61-4ef2-aa15-a61378b3a5e2",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d420bce4-0493-43f6-92ef-5cc50dc48b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24cd4214-d392-4bfa-8d5d-01e51afe4a2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "316d0bc7-de86-4db6-9e4a-31fe6f2e2421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "25142bea-cf58-4253-96c7-aec3bc8aa49d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6779e092-4456-4f29-b779-d4a1d74ca933",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c37bfb4-80aa-44c9-b7a6-2584012f6a70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6da9c55-7c2a-4553-8267-9ebab0d86aa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0029324-14d5-4b82-b2d5-e42b5a094f28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "00683ace-cc1e-4d83-8355-4210517eac6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd8bdcff-4986-47ed-8518-e0157415a8d9",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d03458cb-ec07-465b-9faf-f97d89488cde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a591ef58-a252-4188-8e4f-ee838d7190eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a58e852-2834-48c3-8417-c91aa28aee3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d6d61d0-eefb-4b83-898b-84b72c2d5c55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9eed758-03b6-4007-a0f1-fed9efdff60e",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d98cc8d-086b-464b-93f8-6b527281eafa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d6787e6-07c0-4ab7-b24c-891bed6a8da6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3a3f0c8-1925-46ac-b293-91f12d6caf4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0166fb80-8ff6-4836-9557-79e2f5d4ce85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b518ed4-b42c-42cf-a392-654973013aff",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5ddbed2-2aad-447f-8e8c-85ff7664dbef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cfcc1f2-3be9-4dcd-8ed2-44d17c57f916"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ec7d6e7-3b04-4e6b-b36c-27361725b356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b1668ac-36ee-483e-90d9-73c9e9d1ac7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6911008-c3f9-48b2-a680-d865cab28d25",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6168df1d-386b-4c02-a153-6e269225d651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2483edd6-d45e-4268-8109-0d4c1ed1a906"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2716d550-40f2-4b5e-b575-f5253f31b994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a82e7970-3bd5-4ca5-8c5e-5b0b303c8319"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bae0cbbb-684e-4f44-a6d5-65a37c1e43ef",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d088d7f-1fc4-4200-9443-7b1c0c64233f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53443638-40b8-4573-ae42-228fda7b9911"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9de497c0-eec0-412f-bc83-37b4fb1783c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "2539ad31-c6f5-4e7b-a264-e13a13082a1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eeddf10-21ef-466a-975f-ce8d3b58e692",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46c19f5a-0c86-4bba-8fce-69a67d0cc042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9a2fbe6-3f5a-46ae-8af1-c14bdc09b55f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd8eca2c-5964-481b-9c59-fca59b06f94f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "43921189-2365-40ba-863c-051006c8de2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16e5c5c7-2cc6-417d-bea3-9f3bfa46cb23",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c861b99-89ff-4706-9ac5-f70f5ac446d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a0a2adb-bf64-4f9f-b64a-cd026d2aae7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b58b2ead-a1a7-4cae-a5f0-32f25869b4bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3da079f-06ca-455f-be19-abf49b85d459"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c809a2c6-bead-4487-b320-fd6bfddb9596",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "211a72ec-d089-4531-94fd-9f57f988d058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92be5fc3-e273-4533-809e-45cf1298133e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be12ffb2-5a97-434e-a55f-b9d88eb32771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "66c09e78-5917-4862-a6bd-69be75216cff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "760116bb-06d4-4645-b391-f397d2cbe161",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b147532-7890-427a-8a74-12685124ab8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a16c6b61-41de-4797-aebc-a9895ef1de66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdbb605e-a169-4c54-8219-d7471f73ced8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d238d3e-5354-42f0-ac13-01278eabf6c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20608438-de78-4ec2-bc7a-108dba1245e7",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df9f6b2a-4cb9-429c-8a72-d5ff22f53e85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3674d79-3ab6-4ac3-9a90-65c3aa85793c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1ce7333-5db7-4cfe-97b1-38c1423d0765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d1ed390-0669-4392-85a3-a54391dcb26f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21cd7189-7cd1-4d4b-a1ad-869cccf5f51b",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa002860-3af8-4084-bd3a-776e00c6b461",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3d1e956-6ff8-4f83-abce-d94450d91503"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd676f86-24b5-48aa-bf60-d7c8f3c49527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "b32ebc85-147e-442d-bd79-40437948e455"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b316013e-d991-47c1-a175-b703cd2f24d6",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5c66df6-4af2-4458-833f-835ac61fea9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24bab771-5810-4d2b-bd0e-57b9b04bf503"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "190bd013-fcb5-40c1-88d2-6e9712c37e61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e54a439c-5000-4d3a-9ecf-00930479ceba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88a32f9a-0992-45e5-8413-93f202e4b0b8",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff482890-770a-4200-96fd-f171e614b1be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9998081-9db7-4d5f-b23b-29024fa82d3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27011172-d12e-44a0-bd0e-dd1f20a1d228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "30a3a5f1-44c3-4ee0-b85b-ca0feaebe129"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aafe578-d6e0-4754-989f-d45cdcfdcfa6",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72771a2c-43bb-4e50-8c52-b41423380b42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4bd5301-8247-40e7-b644-d232ffd54cc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99b632a5-ad64-48b5-b1e8-d32316e8a00c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa29f87a-5f9b-40f3-bab0-25fd0382feff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5c47ee4-f9db-4dc7-afb6-bcf8ac3b1b90",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7fafbc3-2035-4271-8473-48c62f2a9b8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97f83a62-3e33-4837-a387-fb8c8df22be3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21937732-6e27-425f-9f05-411300af17f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e7323a7-f8a6-4b77-85b5-07e4679c12cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "834503c3-dc83-415a-99a9-d3abe4126415",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "066a69a7-65da-4264-954e-815768dcaa7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "432c6b28-c4aa-4f04-93de-d2d6591a1627"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43e2fda4-0015-4473-ad3f-4e70a38e1f9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad683497-e6a7-43f9-a072-2b488eba6237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "406cfca9-984f-49a9-bff1-8a8ab4cc1de1",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f765e62f-ba63-489c-b12e-6795ff70ece1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dffcc38-708b-4c82-8619-9888255e4974"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1488ece-e56a-4983-96d4-36a7a9d4d369",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "58a5cf12-09bb-45a8-a97e-17c323bcf065"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b873f12-ad03-4f0d-9610-29d56c653ab9",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95ce29ca-16ae-4878-99c0-04d5617812f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4115bb6-0d9d-44a9-b28b-60a9be10c588"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a64bbc6-79a8-4dbb-ae62-ed18a5cf6983",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "23e6a592-8d66-4b94-91d7-7dc563c9ebb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9756ae92-a124-412e-97c8-ba025d495870",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44fe6f01-8557-4db7-8b82-ee98bae888e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17553ad3-b1a7-43a9-b264-455b5e349d62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fcb78a5-6fc8-4d5c-8392-6a768e719f09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4eff59be-f479-4c2e-b0a4-b8530d128938"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8698a59-475d-4888-867f-b1fa608757a8",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83367dc4-e67c-4da4-8e06-439263331ac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ac8361c-5e19-4ab4-9e65-ff3b93e8a405"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10911390-b54c-4331-b953-681585d10bab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d338efb-1657-40e4-b911-b4949ce3ecd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7052926-4794-48b5-b5b1-8864d18a9a3c",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1acd8107-eb8a-4674-b780-e2933c7aed5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "733cc184-ebe2-497b-bd94-fd0cc0952d20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f879b26-ee7f-4bb2-a074-742ffc301ac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "48e440dd-b1d0-479e-a55a-8f900e88b0fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b470b65f-a7ea-4829-8cf2-33979a29a882",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d39d5d59-2613-4f61-9fd5-ab329b728999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fc5e0cd-b62c-4fe4-b260-7e7bc8ece3ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e19c40c-a557-4c30-9213-4f97496f6f4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9fd2751b-4263-47ef-b316-c5c0f851c926"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d92327d-ed74-4c07-a6a5-3b6097f5252e",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d36088e-f6ae-4cbf-8b4d-f5b4c89d3698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc54995d-d0a9-4f97-95f6-adae304af7a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f09782d-05f3-41d3-be39-868bd0ade2dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "28cd98fe-aef0-473e-bc17-3ff5fdda1c69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ecee379-d770-4dff-8f14-ffddc8ca969c",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30466315-9adb-421d-acfd-39238584b067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e038b29f-eed1-4e33-a462-e91d26210c38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96d4cbd5-fa10-4310-9326-9fdbdcd1f9f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b852add-2678-4847-a425-32955b18a14e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94d1f91e-2881-4bfd-8ed5-91c220f525c9",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daf109c4-aa4c-48e2-9614-b6dfe5df99d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80ea8c0e-e10a-436b-9802-ac3c5c16cadd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9adba0fc-0171-4109-befd-670393418d60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "500d74f0-8733-49f5-900c-8968a129e4df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4be5717-74ac-4aa0-892c-eae2575631b0",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1567deb1-d86f-449e-adb7-5ee518926694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86e1c245-5b5e-4d7a-8ca6-be3052416442"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adb45056-bd62-45d9-9852-83ca3fe34449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "39e25fb5-59bd-4af1-a644-331713527f2c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c7199314-b266-4cf8-8f4f-8a42d535f42c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8a05d4eb-be7f-41fa-8a4c-db012ab295db",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b4695e9-3851-4a5c-81c2-b442dac25b81",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "8900153e-7934-43aa-acec-f97bf233d62f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2f59c31-7215-4bb2-b5c5-87d9b0051d70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "add9a5d9-47e1-48ee-9435-7a4861ae0e0d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7042a09b-a401-4e91-8cc2-76a4c087fb37",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b52b0f45-7d8f-45a3-babf-19775f97861a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "839eb33a-f362-427b-847b-ae182c86289b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "60cf8640-b5d1-4d8e-aeb8-8a7dc4b7f419"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f4cd46c1-d173-4eb2-bb8e-dc9b23d5ed11",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d0309a34-6cb8-4603-ab20-f4475f756d94"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7222b4c0-5dd9-461c-8e06-9ed6f3937b8f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "77537689-89e7-424b-869f-756595a6791c"
            }
          }
        ]
      },
      {
        "id": "e13933d0-b99a-4203-b0a8-ea09c5af8569",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "767b619c-afe0-48ef-8e01-3e3ceb4adfc5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "471a6ae2-e79e-4863-9b61-4b4456ee52a1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "74823158-aad6-4003-9983-4e8f0926f039",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e6c8bda-3549-4f41-89b2-4e0f2044cfd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b8e4e82-a11e-471e-9430-2848fe6f497a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfbc6fac-6548-41cc-ad56-342be9fa1966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "51ad2fc2-a616-4634-8519-0ba205e75ca0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62821333-1859-4403-806a-b649fe365e14",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a8183ea-c214-45f7-b196-2987690fe251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4e1bd98-423b-4249-832c-7cd496cc5573"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d87c833f-5819-48d8-ba33-61140c1c4d1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "954b2136-7fe1-483d-ac8b-0a1f5dbd8fa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ca6d368-25de-4c4b-822d-cc18020e984c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c88799f-8b21-46d6-8125-6a70e95a0881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37670dde-b019-48f5-911f-12fa08eeb74d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25b98a28-a6b3-4809-9d23-b744ce607b6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f668d3e-13c8-4342-b11f-4dbf2e193066"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12b105de-4393-422f-8671-e651095a206f",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de46c8f3-50b5-487f-b238-67a1dc34b558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e8c77b1-febf-4a86-902b-d7ed996aae0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e7e2bf9-278c-4dfc-b1ee-30811f081580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4bef4f3-b206-4354-8ba6-12d6b29b079a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31011a95-9c05-4f26-ab21-4e1dfad1e7a1",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09b96b9f-101e-4073-89c4-c9f1bb1437ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ace33f4-e6dd-47d4-9e00-088137993c5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "651de268-d072-4b2b-860a-3bc326f916a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8d6e862-b234-4d74-b36c-035d9f88027e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae865d6a-54a7-4273-97ea-1920cc38c2f7",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cd4b1d6-d895-4a5f-8786-1746fa4f1a2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f0815f3-b8b1-487f-ab3f-2f005525e94e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84e6bc01-b7c4-4914-b2a0-903875468a35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b05f0cd1-bf65-4b07-8a0e-5ae561e729c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b128783b-c115-4337-a11d-ab408baa7c1e",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1f0fc1b-65ff-44bd-8bad-c6f06884013c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfecc0a5-7df3-4408-ab7a-9e4b4dc35e48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a767fe3-309b-4e04-82dc-91cd9f26d087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "a90eec58-3db0-45ea-8d7a-73a8af1ab3dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7a1531f-2366-4d6d-97c1-f37e8042aeb4",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f878544b-8b3c-493d-b3a4-a215d8595ee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab98a683-4a10-406b-9626-5a1032b61593"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baa165da-0fff-4f05-a504-1a0a2d2b7c7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7dc07a2c-febe-4838-89a2-e1259bf92605"
                        }
                      }
                    ]
                  },
                  {
                    "id": "144eeb6d-cab2-4573-8026-0aa7a931b722",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c34329b1-9b7a-4a87-8d23-1fcfb57c6ca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad00e3bb-b1d1-4216-b2ea-55f5b3b1a730"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01be18c0-0f89-430f-97f8-fffe9b735d23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "667537d8-839b-42ed-b10e-64de7597e4a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2971641c-be8e-4c38-9274-dacebf3abf2d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b04b4026-816e-44db-a38e-42ce4b78d2d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cee7686f-9532-4c87-9d03-2d64e1515b78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8254436c-ecb5-4de9-813b-03ed678921bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b983c570-00a5-4ff6-8a6d-a6021f612b54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71b48fb6-7993-4fe2-817f-518c215502a9",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5349ba3b-8834-4b50-b9be-2a8ba0404b58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99fc8252-f0c4-48c0-9542-dce3a6963fdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "896e8373-4bb0-41df-a355-7f2f6fd370ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "45a41102-8728-4320-8fdd-2230ecd746a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18619093-f541-4d72-b454-dbeb4d78e46d",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ec73b23-25fa-48f6-a761-22df0b84e19d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "072445b7-eff2-4f4f-9665-4481df7ec5ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eacbd04e-a5df-41a8-9505-30feed026bc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "355c2d18-b579-4204-b794-12e90f24a8ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e07cee7b-355f-4180-b257-66720be91538",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd2e08a1-9f4c-475c-88bb-153db6eb5cc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "052e419c-f0da-4700-83f8-07173fdddb84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e8a4bd0-5c0f-4f0d-921c-62e108ac1af1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "21643446-da7f-47d1-8e56-afadeb9923bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "960f0541-ee21-41af-bb61-9801ffe9e076",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1191722f-771a-4ba0-bdf9-a59d570eddef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ecfee99-c124-4901-851c-3a89df3bb9e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92afd65e-1acd-4979-b43f-abd8bba03ff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5d760e5-cb8a-4979-922a-a6c1e8b96109"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4402cd0e-761d-4a8f-b84b-e50e31e987fd",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39833f78-52d6-47a2-a5bd-f9b39e5f4aef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2887472c-2d7d-4553-9b36-74d6a4ed46e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "592e321d-0586-452e-b994-8338f65ebc7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4aea04b-beac-4191-b0c2-ac9ad79c22e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff3c3c01-56b9-49b5-9133-b06f1b6efa05",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "766c62c2-e674-4e64-93f7-76415ff47057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "620214b4-0ac4-4cac-9451-f8fe69862887"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ce7de67-8cb1-469a-aed1-5d3b6fb6e64f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb1f601b-04ec-4b73-9cbd-164238cf0647"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09b7aeff-8baa-40e6-98f5-cbd2e64cff7a",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fdba36e-e281-4d13-b422-a8c5db3c363a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13927e2a-c0c5-44c0-a38d-891ff7b3b2d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "451bfce7-4edd-422b-8ca0-cb6f3623ad5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "f11bfc4b-6be7-4c58-bc4b-8f37649db31b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "869e5d10-0ce1-4db4-973d-1424af07b182",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "193ce818-e0dd-4ae7-b2d4-a24c81287e66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8da4c6a-6592-4d07-abf9-721a42169229"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fad0f864-a956-4574-8991-1670043ed01b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea62d4b0-39eb-490e-92d3-1fa89ddd4ccf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef0ac403-83b1-4b1e-b4da-f0e7a78deeb7",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05eb6c88-b907-4e72-8a81-7c2d8d50c0c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cddc6aa-6fa4-426d-8de1-9c7f61764eea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65c8aee3-3c36-4d58-9311-dabe99c69ea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ea5ab09-9c1e-43b6-9a44-3fe4bd090bd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0e66604-a9e8-4a66-913b-76f958020113",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac4b64b4-72b3-4ec0-b3b4-95a764cd4cc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3735fbf0-52f7-4c8a-b1ed-9d19bb0f4814"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd9b6431-edb1-4825-bee6-c7391c0840c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a45d0ab-2e22-44ac-a10f-58836362cd91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbb65be6-1aa3-48dc-9018-dff674e8d820",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc63f336-9604-4716-bf5e-5596031bc59c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d53bc8a3-7934-4723-9e83-66b7b2ccb413"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fcf0402-94a2-4c07-8ea9-d1506dec78b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ed0dbc5-3d00-4cec-8939-8d1b4e6b8514"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcc74f59-e05b-459b-9e9b-493256ac59dd",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1b6ed34-5e3d-49c2-bb5b-f54b53f211c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cfe6b27-fa40-412b-8128-ccfaed2ee095"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "618c0952-725d-44d6-b431-4a1f778183d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe1a36b2-cc65-4675-8f50-f72afd62b9cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d30d7a88-980c-41d7-835f-ce32a6436987",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8feaec93-d206-4fd2-af87-d90af59ea446",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1b962dd-35ac-41f5-9caf-bd26975b94a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29ef37d1-f0e1-4800-931f-f975ead06fb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "03301571-9147-4fec-aa30-30927738d00d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "930db26d-33e3-44e4-92fb-d0d473a163e3",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5fb8c80-33d6-41e6-9517-6c4c2880fc55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55bda26e-a468-40d2-a558-ff08f90d4a25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39e4217a-89a0-483d-964e-d97f3df63b46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b420504-188b-47d7-b333-ef8bf194ab22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90b834cc-e9b4-4a0a-9715-0f674e7512d7",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c76cf62-c9c8-40a3-9ff1-703c907b46c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "027ecf8a-5388-4de5-9dbe-18045903c048"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd2b3c54-7b1c-42f7-bbdd-bf3a2c7503fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d743f816-f3e4-46d9-8964-e13393c48981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4530663-ac24-4805-9acd-2962e1381a6c",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c126fad-0850-4b22-b151-ae1e62ea1ab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c94472e-0332-4137-9f17-8067e31ce48c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8310bc76-9459-4979-9bed-5181993eb0a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6a86fa2-7cf6-436e-b144-7247a101cda2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ab63f71-bf63-461a-85cf-a17f580ff865",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "990470d5-639e-494f-bdc4-1b8eb2237899",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88c5989e-19b0-4691-b6de-a50f1bdd6c0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d46f50f9-18d1-4115-9d0f-0695adefd7f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8512fa6-9f67-416b-abc5-c275b9642c8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3678227-9fe0-44bf-b20c-0737ac4dafed",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71ece389-5de0-4dca-a12d-088351d638db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d9cc83c-7cba-4f0c-bef2-888d3561e1e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36036057-9522-4de4-a05f-1b65fd86a667",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ba23140-08cb-4690-bda2-37a351f12649"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2c15be7-bc08-4894-98e2-2e3d525f7594",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54414eca-de65-42b4-a23c-1200a7fde3ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45d26631-a2fa-4484-84c2-0181cd1cf1a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e14c4722-5c16-4e64-ba99-2c4b4a617c20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1adf203-40ef-4173-a00b-8c8c9ae8c465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daaf2f33-5293-4451-86eb-32349d24cbd0",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e41ca2e2-99d1-470b-95a9-7daee3fad73b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "899d4034-030d-4982-9e85-aca6ac724f93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fdd9c60-ae00-4a00-a0a4-979efb77d5ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f60ddd1-f875-46ae-841f-950a750b0ec5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aa29e71-6214-46b1-b89e-e7a4dcae8bae",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b28a48c1-aa1f-4e08-ba6b-fa7dfeb1ec29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32905c93-70a1-4f9e-a11c-de33a13c80be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe14b409-fa35-4336-aaf1-8678a8c13226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53c9b479-97f8-4e19-876b-974fd261a0bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76f8700f-943a-48ba-b421-f805a56be96a",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf00b922-46b9-4fce-bafc-f09a006634e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14130569-5c5c-4e51-b46a-77fe13b86d14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ee61491-b85f-4c0c-9cc2-8a9325cad7b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d342579-5f7b-4343-b84c-ea1fa32a0739"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f358b11-c6b3-473c-9eb0-8403a849ba92",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dd1dde8-4722-4a78-97fd-ae035e7d584a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b24063c-ea9c-44f1-9c4f-f5f855feee0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a7e573f-c031-4818-9515-4caf13000c1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c1557f9-a1c3-488a-a3de-c43d1cd37aa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1cdb70c-14fd-4480-8f6e-94dd97f43e61",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cb971fa-95a2-48b3-9f77-a0b4ab97050d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cf04066-c858-4fb1-9ab1-5603171626d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be0c83e1-d52c-4103-b3f4-0c54a67a0428",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ceaebe1b-6abc-48c7-9ab4-370baf8e14e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a045671d-3e9c-4df1-adea-b180f47e7f0b",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1ceb553-9cb9-4115-88d8-70d32ef10205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7327c8cd-a5e7-499f-a754-01ee4370e8e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1173c7d7-1634-4482-85dd-b38f4a5a5a8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d43afef-f6f7-4ae9-8ea8-4a6e6a6f5077"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a19f08b7-45cf-4a0e-a8d1-8a5fccd74a2e",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bdddfa2-3527-4660-815a-54306d32c3a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3808578d-2298-47c6-a074-ddfb2c8ef197"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36c735f9-c08f-40a5-88c3-fb9d5006ff63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea97fee9-5211-4a55-929f-4317dc84fd61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aafd3d16-bf66-4dab-9b1f-e513a82b1508",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dea1fd12-576f-4acf-a0c9-c4bbc9d22d73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e76897d-2c7e-41e1-9c0b-e80112d79dcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15b480da-0d04-425b-b0a9-8b022dd847dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "044d5084-2ff5-489d-aa8c-f13c7f0c9ab7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a5968d1f-a6f9-416e-a8bc-6c8679a7ba5b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dbeeb678-3243-41f8-b653-965b412fbb86",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fcd653b-35fe-4e58-ab90-61f4a8163185",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "627e5bbf-bed2-499f-b83f-3f06ed52640e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae310b6a-e9b0-4046-945f-60c29fc68153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bba66bd1-846d-4ff0-bc5d-05f421ca2770"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b7a14b7b-1ef7-439d-938c-d4c1fb8bde8e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6402648a-12ad-47b6-8830-9550a6190706"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f18dba8b-fbdb-4d11-8de0-d0bd471dad0e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "12fe6b3e-a2ac-40a2-accf-e1d37ddb66e1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7f5b4e3b-366f-4d29-b239-6fe13861c9a1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c84432db-fa70-483f-942d-f1b1f0d053a9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1f0b57f3-6400-4828-8193-c674c4e18479",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9d148898-8a6b-4e77-af93-2d196ff02125"
            }
          }
        ]
      },
      {
        "id": "8946f1ea-9565-496a-95bc-5042e562fe98",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "9bdf907b-0849-4a82-9d30-34f02282631f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a92fefdb-d87c-4337-aed6-948808f39aad",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "139269a3-6800-4336-8741-33281a682b43",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daff4474-5906-4a17-b754-a12f842488a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f1d8075-75c4-4051-b653-0b92b8bffb16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fed942c-9875-4e1f-95d8-910352c9c1e6",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d49f87e2-3932-4d6c-ba9d-d1e18697af13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49641917-db19-4a77-9454-204f1210f049"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1a1f2d0-3960-4b0b-9d64-47abd5e4d4c3",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "063d439f-d32e-4203-bc6d-a1708be14520",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9716a22c-4e64-446e-8ab4-1e512940d66a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "963a92eb-f0e4-4251-b10e-55b782015e35",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b2dcb7a-23a9-494d-9d00-a7566830bf13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dfa4f31-3f0a-42a9-b794-f4bdba4428e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb4b0444-4c5e-4bb0-acf4-17becfddb8e1",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b8e135e-c1cc-4298-9ded-8ad66eb95036",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9241e075-9cdf-4362-9aac-2e7877d5d085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a5e6c0c-df1c-440b-94f2-50d6bada9a54",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99a18116-d084-4f5d-a971-b750bb0113a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03446d2e-d4ce-4cf2-99cc-a886520835d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43580ef8-52dc-49ea-98dc-313e80fd7139",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "228b3451-83b0-4185-9d0f-62c15eef24ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28d62ede-ab86-40ba-a87f-161be0c8f332"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be80be30-96b5-47ff-a7aa-8b584e480f0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f2377f5-3b32-471f-8def-a6534e3ea92f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "827668b2-1134-4d04-a2da-6732f045b977",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29497e9c-addf-4b29-b8b6-174fcf9eb280",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "209f8b24-9450-4229-8266-97c5db9db004"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2daad1f-5767-4818-ac9a-8ab92616c233",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c654365-c3aa-4045-93b9-ceee991610fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64d73792-ebf1-4605-a622-e67a2ba1d395",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87f8cbd0-8d28-4cfe-be13-053eca5ccdb3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60972d1b-d995-433a-bb95-79b2a61a0b7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26202b69-bc73-4303-ba28-399de4373be9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "390170d7-9061-4793-a986-8e522f75afc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37a63f97-5829-4623-bd1e-e0d0c14e9ea7",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e697181-4a34-4973-9025-cde5b58c05e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d33f611-7a54-4a7a-8825-18612b342d96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4703dcb4-61e7-4809-9004-3a7d34f57069",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8230f49e-f1b0-4f34-9cfa-e7f3f6314af5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12540437-f1d8-4f68-bfb2-0b2ce7b64ce0",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "760d1fa3-a1ed-4df5-be02-e2b671cd4099",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0877ccba-bc72-46c1-bd09-211a9f020d96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fca4a31-8625-4510-b089-94267e0b79e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ea2d13d-7d4e-4e84-8f19-a33b876bf9b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3850166-fa37-4262-a73d-304b53ff71e1",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e6c7179-72f6-4339-9fc2-a244ac16273a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6917e2c5-15ad-4db0-93e6-7da24fff3934"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e677891b-385c-4ed6-bde2-d4a76a653b7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22e47316-61d6-41eb-8dbb-945c52cee322"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab6c0559-68fc-456a-9e97-2f699c9b4b26",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0e9210d-7a1b-454e-a1f2-d81868d6335f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1dab6189-17c3-4376-b168-87f6833323ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ea9b371-4fb1-4353-8418-db76552f3d34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "259f13f0-5a0b-4be4-ab9a-1b5dbe940743"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0fe1686-dd9d-4948-b93a-9d524dc12281",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "555f5554-12dc-4ca2-b495-b21718fe9a20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f087c48-a92a-4765-a009-5a34ba18fa8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb96de0d-cd38-45d6-8093-ebe98dde9def",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba615ed4-7807-46be-87e9-1dcaed0d792f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db2d4d21-342b-4e26-8998-240e62946e23",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b16341f2-81d0-4e10-8c56-7e6c5aa0758d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36d147d3-522e-4237-87dd-fd82b5cf0fe7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93b0a633-9a7a-4cfe-b195-5e0cde138ef4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5193661e-bd27-4caa-9362-6f77e47b277d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ab41d8c-0675-4687-8e78-4be68144eddf",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2df02390-fa19-41ff-a8f4-340dce765e2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "290af306-f885-4748-9d16-d33ddd6edcb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeed2ed8-38ae-47ae-9d87-93e737cb7707",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eac0172b-3f68-476e-8571-8278e0bac71c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e95beac7-7152-44d1-b0d2-da6c583a60c5",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ae823bf-00b4-45bf-a625-8a3c93b79f44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58922d72-6c9f-445c-9cf7-983c627a0a18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "963b92f9-ddc0-4815-809f-1de2c779181a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3112ec2f-75eb-448c-833e-d1c037312668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d57b9e4e-7edf-4f99-bbca-84d81cfa10af",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74c24f28-920b-47d4-a236-a67c434aca30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a56d3cf-5c66-47df-94a0-c8a93145dc2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79da52d6-7d31-44fb-ae19-16a20480c84f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dff7f60-31b9-40d9-9acf-ae9401d68f1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "893db169-31bc-4489-a004-4ab03b7ca904",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f7b7e37-7e1b-4955-8a8b-449abcfa1c29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcbaea3d-1219-414f-a4e6-7d9fc5a7c8a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4abe395d-04fc-4b44-b197-827fdeb3fb36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d784c346-1f7d-4c89-8754-292a7c3241af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85557914-d613-4731-9709-5e223750986d",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edbb573b-4b38-409d-a5da-60fdbecc7842",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecd24451-b49c-410a-b5ed-6a6d9cd77404"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57640a43-bf05-4324-a22b-46d801ca1abe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a408c21c-99cb-41b5-8daf-68d194919290"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de51444e-9e17-4ae5-8d58-5ab604f070a8",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "111127f6-97f4-43e1-bbca-620fed4695a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f4672bd-2ece-432e-a857-671410767ff2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3ec56ef-c918-4ba6-aee4-b3ab136ef74c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d47a865c-3add-4bca-b1ae-fec4bb4a25d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54dd07e2-d423-44d1-8def-0ea2c131dfc4",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac40252b-ccc8-4587-b63d-68c875f584e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abad49be-bb6e-41e0-b65f-20cc5ede20b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6430254e-4239-4ac9-804c-34c42b86cc5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8e2db1b-83a6-4b5c-b5e9-b0724b746ca0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "444d2197-bbc9-4438-b7fb-c62e0eaed62f",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72b2dff5-2912-4e3a-a3ce-f2cb0bd2a917",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df600280-e0c1-463e-ab48-f5df6cdc62ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "760fa770-6c4d-4c7e-afc3-c2a3ede90dcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68206edb-1114-4f5a-b9c0-089f6886aa99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c062b5e2-d3b3-46d3-9555-638686f67695",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27430cfb-5dcd-4a2e-b176-fda67d2b6e4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8625a65a-e91e-4540-829a-e945a4cb808e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dade2c23-6a8b-48a0-ba3e-e3a1c1f9b276",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc933f9d-efc5-457b-90ef-7ac288302d5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "000c954c-8e90-411e-9665-2020b9255404",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db48c1cd-3bba-4a70-a697-341fb1a57615",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef8a9267-f4bb-42fc-92eb-4a51dcdbb6ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8785b374-a977-4a93-9f6d-3ed03e02ec2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37c26eb3-2ceb-48cb-b9ba-e30b5d19daf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cfaa4e1-4115-4d6b-987a-d4b4c510b158",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b3bb9b4-2a1e-4b58-a0f4-184aa76f8a61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2e3a6ad-f566-46d1-b3ad-334b81f95b3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b0fe274-684e-481c-907c-d1a57a54dc5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b35d8f8d-aa5c-4c38-a6e9-32c9cfba4e19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dddd1545-128a-4555-a237-ffa2881a2633",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7b4d345-e872-40ca-afe8-f4829b592e7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91af88f8-506e-4dbf-8eab-7381ac3c69be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1f7d78c-961f-4776-8b18-b0858edba251",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "362b25b6-c9c3-4462-873e-c67437025cfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "721be6d6-0108-4aa2-8648-754b6ef12dfa",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa962882-62d7-49dc-ba18-0fd194fa501d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ceebc41b-0011-4914-9dc6-a3f21d13ced0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92dee32d-71b4-4f24-9a0e-9fde50e2911f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a3c6733-631e-495e-bf38-9b1d90082b66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "921de1df-1833-49c8-a26f-5a885f4e2290",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7e67d28-6e7a-4273-afcc-62ff8325e6f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb92c419-96ab-4143-ad29-d09b20552321"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d71bf01e-cc35-4be0-af01-573ccaa539ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f343f9c1-f589-4b29-9e92-9f276292e81a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f358539a-80ac-4cfb-91e7-039182057b1a",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc514f2f-6ca0-4172-87e1-c03e497adcd0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31f19e97-10f1-4553-a0a9-b6ce1989a763"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "821cff66-c6de-4266-a2c3-127d5edce7a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8eda2c6-6a62-43ff-be39-43dd75b3cf8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43fd078d-7e54-47ba-81cb-d05231b92e86",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df635f23-408a-4f73-84ce-c82c6663f44b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21aa9f2c-75de-48dd-b66f-a7cae2820fd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0415376-8349-4c3f-990a-44b9cf84de49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39b9f6a6-ae6c-48b4-86d0-2192c9f4341d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "599ddcb1-c0e7-4845-b0e8-5188baf910ba",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "297179f4-e3bd-4615-b6cc-8a656b55ae8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b4ab302-e595-4b24-a74b-5557869a0f71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27629538-fc4c-499e-8978-c061b3efae8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3c40280-e8b6-4e44-91ed-afa2c027eebd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21c04f5c-7b08-4bad-ab8c-9afda3fb3106",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fde328a4-5c89-4608-b4ff-6145d0c10b51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4988302e-6631-4e1a-aa35-07460b250ac9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "172b335e-cefa-47f5-80f7-db1eb8c10675",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1607a043-ff71-4805-9279-2fb8594dc399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dffe6546-0a07-4316-9fcd-2277b2d03216",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a85f790b-df79-46c3-9e40-129249572c3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c120028-65f6-43e3-a9b4-2127cfc86d98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76160686-a7b4-4287-b431-c73f9ea4c7d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "829bfee9-347e-4b10-8d49-bb898490c234"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5919e273-63c1-4b98-864b-c3542f4b5bb5",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "697ab968-5384-40bc-960c-aa4f8d549bee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed615bca-c957-40d9-8a3e-7d3c1e68c13d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7997898d-00cb-46c8-a0ae-145f87bb9153",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55e756d2-1b86-4399-ae15-8ec717124fd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f0fa15e-a2b5-4ada-b593-d07c2b4a471d",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "598ce1bd-38fd-4eb1-abfd-499856e5daa3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4791a838-a6b3-48e3-a380-72a03657447d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97d7e62d-44be-4ad9-a74d-b30f2e55e4ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1abf6051-f2aa-4987-a38f-8f4e663e14cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1c1f43c-d61e-4507-a4c7-79d753d43a7f",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "911f8ce2-5602-4da1-818d-46579272be4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "747a95b3-8fb4-4ad5-befe-5f7fc51d2813"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1faa537-7760-43e6-b9fa-8d0c4c7ab12e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3223a961-bf59-4adc-9e1c-c4d54bad6ac2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ae88118-205e-47f0-8ab9-37eebf9950dd",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e828c339-5a04-49fc-8bb1-18f66fbad26a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a07d941-1c38-41ff-9b94-01d2a4314c9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "984a3dd5-0cf2-4bee-83f4-0bf395804e98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa54ba9d-7d6e-41ff-a75b-860b76735705"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32768b1f-d303-4967-acc1-0c59ffa20038",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dcc3551-c58a-458a-ace9-3fc90c221160",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0b17e2e-21af-4c37-ad43-923858bf006f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a88c1d9-f702-4982-8239-c54ec7db790e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b91b631-4243-4dfd-a103-467dcd6a456c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d92a577a-4103-4dfa-af83-47b16f6b6b12",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb4b9247-8b65-4d63-b0e1-2755652234ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "309f2085-c34f-4ace-9931-bf66cde9018e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aa15a43-3513-4022-af70-df8f0ea83e3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08a70090-4b69-46a5-a1d8-d668ccf93bdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f0a5648-c6e5-4227-b5ff-953ab6318c38",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c159696-f511-4b1b-a257-b79f7324060a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "571ae39c-1f5d-449b-927c-a220e17f175f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4c42442-55b4-4f36-8a13-60636f50e49d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c702948c-08db-4062-9e43-18db06e32d72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0252091b-a633-441f-b8d1-94f115397aad",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61b99e2e-a8d6-454c-98f7-d7a3116fd6fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "810a8a79-5476-4915-b260-ee2f78695e06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "016e48d2-e4c4-41bf-ad50-2e4f4a1d61ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58e22e60-0ef4-4f1c-8409-9a6e4b469bb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec3cf0dc-bfda-4da8-afb8-fbcdf339d114",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "760a16ab-7add-4d5c-8798-fa9b19791820",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2585af7-3b78-43e2-bb92-4046a677694a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f526761-99b0-4715-86c2-bb6047d071d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d35d953-6a6b-4b9d-807e-7b85fc2d11ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f93511fc-3f1e-49af-9754-460db6305ed6",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd9414e0-2c9e-4dca-b6d6-eb761d535fe5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7905ef81-9249-4f32-9f39-911772a9e2d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9256abcf-5958-4b13-b98c-e71fe054e418",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "496c207f-5632-4e56-8803-5df4cfb352b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b515095-c3e4-4338-819e-e09478dc3a3a",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d6d87fe-00c0-42c2-b46e-07ee81a9eb60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7aa6fb1-a79c-4d06-ae2e-a07e2a4df1c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14777f1d-d115-4424-8e2f-783e582b8d81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b6080c9-bec1-4a76-8630-f0a8be3037f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2070eec-112d-451d-a093-4004333ed938",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5df534f5-1bb7-4977-95a4-d22f04163daf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "709a1bad-b53f-4bcd-89f8-b8cb539fdcb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa20a352-3c05-4055-8bf6-085e991f57e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a7efc67-2674-4092-ad09-6ea963453b8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caf20ac1-1e66-4f6b-a777-c8088e1e674e",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18210a4f-9b8c-4d9f-b910-5bd9dfae5b7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdf32e7e-fb72-491e-b5e0-9665dae961b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e154345-c180-425a-b04f-e04438879127",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c88590b7-eb56-43d6-bd2d-9d5dc1acaa90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3717a0d-af26-4e99-a28f-7734b056b5ce",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "641954d5-1adb-4cdc-ba4c-5db112a77648",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f17795ee-6dee-4dde-aae2-65d208d76241"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9030ab64-5249-49a7-88ff-5a0808cd989e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd791d03-2445-4fa1-b7f8-5f2abed69bb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e210a01-f711-42d0-ae97-9cf813dfb659",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f925aaf9-2c2e-48cb-b5b2-c426ba0941a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55fe32fd-e758-456f-b597-754d95f38964"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "575b2909-3cbb-442a-9cb5-721ad271c939",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7a3b04c-55ea-4499-9b0f-45410b23b7ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56426901-4b1a-4e1a-9ed0-197808170cc3",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88cc3745-50d4-4cd6-b092-a0913892bae5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68f5fd31-bcfb-42d7-b214-f96309ec1b41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b40edf00-eadb-4b5e-ae53-4e4d5611b314",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78b9541a-c944-4b24-9274-563f10d21a63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb7ab0c6-79b0-41b0-8a68-2d2e3c5a80ca",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a7fcf9f-4b6c-4555-82f2-fa7c0c1caa6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4bca9b4-659e-4425-85c7-3f1db3e2460b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61cf58b3-82a8-4024-81d0-6067b05a369a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "440fe55a-184a-44e7-9fea-1de88a6f1552"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93281353-8fbe-4dc0-9a71-2ae6ecda91b4",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afd11a1a-084d-4349-8635-1907eaf7dc01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b9a677b-3327-4aae-bc66-cf850da6a9cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2ba6593-ee46-4d07-861e-ccd5aca86e6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b940f2d5-dfc1-4b92-aae6-5312d7f21858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e76aef5b-5805-4c54-b970-58f39246423d",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e3e9e85-50de-4797-994e-2010ed3462a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9da93c5-deac-4bd3-8ddc-a9c473cd5691"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db56127b-5010-4a06-a4a0-32f060514418",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98be1cb8-3afd-4945-83fd-f9637204ce33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58bc02cc-026d-421c-b9e8-40c258b22d6c",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "829e9535-ae50-4733-8150-26438d70fe3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fa35ac1-7e67-4c2c-935f-bc317ee41bd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aff4e9e3-fffa-4cbb-9f1d-ad03e8c32f13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7eeb157-2a9a-4773-adbe-0bc1565b64f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79048626-53b6-46ba-8954-d591ad3cb0a9",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d8e6f99-09b4-466d-879d-821d8395cd31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e46a8953-c58f-43c4-9b04-3f80324101ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e0768f2-189a-4c9c-ba5d-e05383261965",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ede7f4f-5785-40e4-ab83-b8e4c17d97c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ae35b01-9218-4edd-877b-15d03d076e53",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1220f503-1ee9-4d31-ab73-19cdff08e66f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a1d0c2c-5651-4040-8d53-6fcd6812ec6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68551290-e611-47c1-9e0c-d09871562da4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5388efa-f188-4716-947a-aa37e7d918f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8471b3ae-16ab-42d0-9326-46e143f5c7ed",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73350a0d-b430-4187-94b3-b27c788a80ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7b03f00-22fb-41fe-a58a-27a5f9a844de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ada55dd-be26-4f0c-a398-dc4fb195e947",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a9cb7c5-0c44-48a8-9ce5-7f09b0d32517"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c16cc82f-9753-4d4e-a922-9fbbfc14c294",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7ac4280-987d-41c9-8ff3-6cc1901b4120",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2212644e-fe9c-4358-b7d0-ab236dfca47b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58ee702f-1e90-4731-b3a2-1f17c80b7436",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ef2fc10-df80-457a-a922-f23eb96edd7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cca30997-7393-4cea-b909-6e46177dbd6f",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78f3de34-82e4-489a-9980-d3109adef6ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d10f2898-3d84-48f8-b771-7c1dea4ffe92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1154c1dd-b6b5-4b69-a1b4-8d155f917afc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73e03525-bf85-468b-88b7-4dd466be8ef3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa9cd234-5b97-4f54-8b7f-2847ddf34c8c",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60ceec0e-17f4-42c9-8fcd-3f5132ceedb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "322f8637-c936-448d-9e6e-ad6537ba2605"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30feddb5-9706-4f5b-8f0c-3ab87ce5e8e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2769c76-980f-4310-80ed-d0c93af62cb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49b32063-2261-4468-9fbb-6e3da71617c8",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85b45f8b-aadc-41cc-9824-08a3cb95d50c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cfa68e5-2b00-4847-adf2-d531c7bfb02c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbff5ba3-4e6d-48a7-9a74-ddd45b0825ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daafa2b8-77ec-4a34-a574-8b700383259a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f374761-a4a1-4597-b5e8-cd1e77dde4dd",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a5f7f42-e184-4223-9edc-1d469feb403e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b51a655d-63af-43bf-9e88-10976e3bbc05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0757e0b0-783c-47a0-a057-032dab582e63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43730c18-6506-404b-8534-b1b49fe63dc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c1c0e08-76c3-4e13-a580-042c91862b48",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0000b02-afb9-4649-8228-85524b30ec99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f554e0b-26c3-4fb6-980f-35ce274b820c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f5f0fa3-601f-4bf7-8575-983654b30d25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc514e00-380f-41d7-ad8a-5786453fc796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98deb5e5-def3-4e51-beea-51cf820ac531",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "440023ee-91cc-4026-b250-5614daa80c61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa27550f-6ede-4f09-8060-3c1e12cd0f2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fea3f0a-09b5-4a92-9001-d50c41611171",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86509828-c6a4-46a3-8786-120d431236be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5df1f103-a617-442a-9485-ac54cf464c7f",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94fcc221-b0a7-4e4e-a0bd-56b3a040d0ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e95dfa1-3e57-49b2-aef3-2a68dd3451d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47a46714-15dc-4f69-a87e-d927f558b345",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b62a565-6206-45cf-973e-cfd10660389a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15a9ca6d-2e0e-4ab0-a864-22a8f4e7795c",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "691246a0-92df-47f0-bff7-4f483addcddf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d2b9da4-895d-4c32-b07a-2c30b70db787"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d34577cd-d673-4e22-9588-95077a784d09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16b4c017-93d1-48f5-9796-3f8a4fe759e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0c5d950-50af-4dd2-bb62-e60684cc9072",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e27d4ab-7970-4f81-9592-90cf6d3e2399",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "273c1027-8488-4bf9-b8bf-853cad4d06a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2406cc1-308f-49a3-bf75-a8c7ac7c8458",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32b20fb7-0c6b-42ce-9e0b-1e4fc129882b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3339ea30-46ee-4653-bcf3-0f7e9e66f310",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4027564-18fe-4f68-8523-29490b1343d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40ed2e98-c0ec-4633-8295-b78a4aff9138"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15bb51cb-ec02-45e2-83b1-4f74240cc933",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cc4a9a0-3bf8-497f-946c-e78376ddb3ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa2aa86c-41fe-419b-9c04-fe9d9aa1868e",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9d55982-93f3-48ae-b1e1-002117fce84d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad930c2f-f619-489f-93f1-def64f09b868"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99c11b33-3f15-4f06-b9b4-dfc6511bd697",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc986feb-d7ed-4281-88a9-42d24e738142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "058c3bb6-468c-4438-925b-e62e24393c5b",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0451a066-d799-4bea-8450-6bfbbf34ea47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "431966b1-bcc3-4b8e-9392-d2ff438001f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "daed4e00-1793-40b6-b4d1-522a807edb99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "317f6ed7-99cd-42ff-8701-8c70a62b7570"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79b1d08a-6ba3-4b31-a0f1-5b9c54b609a7",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d830c2af-f816-4fcc-8bde-3acbc9667423",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6c04649-94c5-41af-9c92-3ab9814fb487"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "741d88e5-d600-4289-876e-a6f45e52c9a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dfed55e-9433-4543-a496-a79cd97fbd23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ac3b05e-fd26-41f7-94b7-328f926df664",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bf09e43-8245-4365-96b0-825047b32dbe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af6171fb-ef4d-486b-84fa-62a2f6897bde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e13d0be-31d3-4558-ad64-5fda34c10015",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ef9efe7-90b1-4fe3-800f-90c96b401939"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faa7d034-73e8-43e6-a819-277b069a8e02",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "489ecfa9-e282-4188-943f-d5167fd2f442",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa12d2bd-6ebb-496d-96ab-3a30dea66718"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3dcc046-c83c-4671-9266-30a01b9f9c0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6934b7a2-b257-4eda-adc6-8a69ba9bb249"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ec2d1de-934f-4b6c-8cea-36ef56b4d948",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b8b9e3b-f049-4be9-a6bf-02da584cdc01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "daf04b95-27b8-4bb0-bcda-e4e6104f0ec8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b70b1400-47f2-4578-9b59-e9f7dc796299",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1d6e736-2586-43b2-a636-6560cbe485f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db61220b-e1d7-42dd-b77f-138c3c0eac4e",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6afab38-2be9-409d-a851-2c6392ff0cd6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94741f81-46a0-4dff-8f1e-07a005b42d9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ff26c18-e27c-4e5e-8618-40f4cc1c7c09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2efd72d-88af-4dd8-a0b6-a0635102496d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6466d252-3775-4141-a8ba-0816eb0802cc",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a088214f-6ff6-4ab7-8c7c-1391ac876fa6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54b9800a-868f-43a3-b244-94150c9698b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c837add0-5498-4352-9388-a9c131825259",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "751d0510-658e-4108-9f70-27706fd4053e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c59fe52-c937-48f9-92d0-3aed0e6ae741",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "196fb996-118d-4e6e-8f2c-9a97c6f864a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a569735-d4de-40ff-8fcd-eb54e7d4ac21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a031c798-5640-4593-8252-5653f8c36490",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1425227b-f6ab-4f87-aa63-c9f9941d76a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d0d17e9-ecc8-4a47-b7c4-ba3387d759a3",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f184538d-0f9f-4954-a258-bff402d93b1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b40292f5-e620-4181-bccf-f079ca3501d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d425827c-f82f-44e8-8b8f-6da150f6c6cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6aa7af8-46e7-4411-85de-ca191a15b14d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8da7ceed-3ceb-481b-8d54-7f3933c19636",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c01ac2f2-1315-4587-a1ea-5ec8b9f22296",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd9ea055-22a9-48c9-b643-75c3b3545b14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a230bce9-4725-4ed1-b95e-f6be3a7bece8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8ec4d94-73b8-4d9f-a49e-9f12f9d2c3ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c375e9e1-b91a-40e6-ae20-d6d9f3f32a6e",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1461e237-c2bb-4f21-8122-c30a9c09eecc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96c9a7fc-82e6-4388-9133-0e03bc06dfc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78889e77-0fdc-4876-a10b-29529b91db8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b7b62cc-3952-4b8c-b423-efb3908571e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "655641b2-0544-47be-8293-7ecb7c91c75e",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "990f5705-d99c-4d36-9502-6ebca7fc3cd3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c478fe85-b801-4a71-8ee8-203e589186d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae1852c4-387a-459e-98e4-e7bd00c82eee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da4e17cb-4915-4593-bc4a-ffff344be4c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2b0871a-8851-4092-9d16-d1a975a2624c",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbaf12d5-281c-463f-a9ec-7d19d38a616f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb42aa3d-68c8-4699-961a-33acb349b9f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38b5197c-8d72-406d-9fa5-8db93e9c5000",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee99f567-5e26-4d17-9688-de510317f8a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b36dbb00-f77a-4d3e-a4e3-6ca48e903c23",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68909e4a-ec6d-46f3-8b4d-f4c7f42d7bed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8850b62f-8374-43c9-bbe4-f4cb0c6bde81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "364ca29c-2cf8-4c09-829c-5515b73a54b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d7c14e6-e9d1-4fb3-af9a-f27d04eb9c0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "225207ab-2a50-4a89-b98d-406e3af06480",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed284d21-9ff1-4916-a4d5-7f58d0f38c9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "847407e8-db6b-429f-9fe5-a256beea501d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdb995ab-0754-40cb-b452-abd8d4b86c93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49dbca6f-126e-4805-b2e6-894bc82391cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4713351d-0419-450f-856b-945d392a4b07",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a402e34-1440-4c81-b0a3-ee3b478a722d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f7c2b17-0dba-420c-8de8-37b017b6600a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "208892a1-c990-48ad-bbb1-bd8e4bd2ff7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9693b554-e17b-40b6-8520-a76484226f54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cc28f1b-60eb-4a1c-93e2-9e377715ac41",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "714ef51d-1c01-4316-a83d-2d26b138bb22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "354665d7-f84d-4b97-b540-4dfbc3c30f71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8086d6e8-7092-4b74-8db2-2b89c6277598",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3adfe11a-3d79-4c9f-86a6-b9089573a908"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ed58462-d574-416e-8b96-a2a14e19b014",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba6ffd9d-02db-4390-9c4f-3da4bceffeb8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ddb1dcc-d2e6-4b37-9e3e-3dde3abc3820"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3eb8343-b320-45e7-beda-a182c82f9f86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7692d98-3867-48b7-9a7f-405f07e542d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4797d16f-d49b-41a5-8eea-801bffa843b6",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22a2afd4-f620-4ae0-86d7-693060bfaa2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8112e086-98e7-41ce-8ec0-af3ed9bddec7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbaee5cf-3dd0-413f-9291-02e7d4b0592e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a983d922-491a-4402-a6c6-46c3093ad7c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ccc0b3d-39d0-4964-98e0-87970d78f24e",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cf789da-d09b-41ed-bbc5-be8a7d3d5e64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8601beef-3bd0-4a6e-82d7-e527875c01ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "439b1ce0-797a-4be5-ad0c-d5c87da3b086",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a1b456f-7f2c-4578-b7f0-81759bd82353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "322b0658-5969-4a95-ac5c-f5b52fe7a2ce",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0b714ef-e497-466c-add5-72efbb191907",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "493bd323-7e56-4441-b816-cde0f4c54ad2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fdcb780-fa7a-40c2-bf12-049fec679bb4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eab94426-beb6-4b79-9caf-d1e8d954b9f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d9525aa-dc4f-4c30-85d5-60ddd3b489eb",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d146e84-c61f-4fd4-837e-34341a5eb8bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b41b92d2-7bfb-40af-b53c-9d051c05d705"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6d46a67-151d-423c-adf1-4c11f57079c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56c6c629-6cb4-468c-825d-201496ab9729"
                        }
                      }
                    ]
                  },
                  {
                    "id": "545e7327-eb35-4553-9222-7bce10b40133",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f378d192-d8f0-4801-9a4b-1d7fe3c7f990",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fefb05a7-4100-4531-a0d3-04ed3bc53132"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30fc3851-7880-419d-9694-f5885f786338",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3ae6d49-2310-48e2-ab18-ab1d7b9e2293"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d99bf575-65f0-408c-a584-0e286c7e318c",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19911165-612a-4fbc-aa30-6ee686ab3e88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11231b69-4f33-4baf-be19-cd431be6d493"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad8b4f62-6acc-4eb3-bf05-f565122a075a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f620c1a-0de9-4b7d-a80b-687c033c1f40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f72a6ca-b103-42a5-a43e-eb99cdbc8f84",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd259315-05b1-47f9-a92f-ee67c0652f00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74af6563-775d-4def-aeef-d0c1fb3d1dd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3bcedbe-e525-42ff-b4c4-8489c625ccc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3b71404-2218-4348-9c98-8620e297d365"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e83bec0-32c9-4e7f-8ffd-7616eac6ea29",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a1d33e8-5cf1-4d18-8c68-188d89fb5d9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23958728-5f14-4bf9-84eb-61cd685ab2db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "858b47f7-ccdb-4b7c-b4f9-197da0977366",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12b6eefd-4708-423a-a4f4-9b7c54fc77ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36d98b6b-a293-453e-98ed-5d1b0f25d8be",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f90e8c66-b0d9-4ba5-9ca6-6b753ca6e270",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c749fcc-aaa0-4480-8a14-549cbccf3956"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f84de2b7-1f52-4e09-a8b6-645f0130f675",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7ffbbf3-7799-4459-9bdf-a1c200124fd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6497b62-f622-4ee3-9713-871f65e996c6",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5d4f341-0da5-4da3-9d4c-7f47ba774ca0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4033e51f-86f0-4d06-bb2c-dc3ed1384386"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12da0c60-2d82-4997-b964-e08798dc641c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be21cffc-6990-454f-b7e3-7c4169115f15"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e52ebf74-a89e-4827-807f-fc4e1373ddd4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b28e26c8-ead3-4e62-9b8a-1ebeec386b80"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1c9c8c5c-d343-402c-9a07-3ae658d9e537",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "35403321-0e4c-42c3-b452-4a16fda0b0e6"
                    }
                  }
                ]
              },
              {
                "id": "e92c51be-f639-47f0-b5e8-2090d939affb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e84c1e27-1bbe-4cef-b0d4-d542e1be96d6",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29ba1ebb-4ba6-4b23-9b27-a7e3ee79c1ec",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "8b733841-fb34-4830-8100-3e89f7cce7ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4108e121-340b-4c84-876e-dd96a19d6e76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c98ffa2c-a299-43ed-b72d-e58dce433ea9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f009a4f3-78be-48ab-9e06-1fa7ac963423",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3340eb34-7139-4971-a5f9-1dfeb386d885"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c5ddcc2d-b69a-453c-86da-3a1b5399eac0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0d01bcfc-ff66-4307-bf42-54dc1e3186a6"
                    }
                  }
                ]
              },
              {
                "id": "6c328998-fe38-4636-8a8d-799e68131c6d",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "a59313f0-6ee6-473d-a3cf-c136ef5b4987",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf777e5d-d7d5-4d79-85e0-af8bc0de7b1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "935ce388-3d0e-44c7-91f7-056a9ed89a6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcea3e8a-1267-4a84-9d3c-2adb4dcf01c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc28d94f-81bb-45d6-97e4-809048886dd2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6390b86a-bbfb-4663-bcbb-f336070217f2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f9eb875a-3f27-4b83-a07e-df61660fb9a3",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c3e20217-64ed-44f7-9fc2-8d822689387d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "589363d4-1277-4b68-a4b6-e9404f15360b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dee523e6-5d73-4bee-9ccf-3777f754e751",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "25614264-2996-4353-8f4c-ae6af3d76840"
                    }
                  }
                ]
              },
              {
                "id": "10f188b1-ee75-4121-be27-29946b4b6c1b",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b8ee38b3-0c27-43e8-8b80-a077b28cb271",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ef97720d-b8f9-4503-a059-3e5588b32195"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0251738c-8b23-47d2-99d4-fde30f19ed77",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bd906866-e11a-40f9-98d1-2585187f8fe6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "28203bc5-faf1-466a-b45b-e8103cb80b9d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "34f1cff8-47df-44c2-8b02-aa112e2ad0f9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7b59f228-5700-4876-9031-2b972159047f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a8333c2d-6450-44d5-86cf-fc3d8d57643f"
            }
          }
        ]
      },
      {
        "id": "d96c3c0c-57a1-4701-857d-5cb8d5f35b3f",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "c83b35d9-1900-4ed6-9e16-5de01835196e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "758b8bbf-d8a1-4b02-ac69-64742a5fd9b1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "37fe243d-2c40-4ff8-bfc3-67aab52bef5a",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd281f1d-f26e-4877-bfae-4c8d58ce9859",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d55f4601-2c11-4f8d-85d5-07c8a19bbe1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43d85c39-7d79-4a20-ab4f-d16beee638cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e9ec456e-04c8-465e-bdc4-afcd72cbb101"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "99ebe8a3-9af6-45ae-b178-03d2532e4dcf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b3fd76ea-4091-49e1-8a33-cdaf44066e4f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b54529f2-9d8a-4b0e-99c0-45239ba7f360",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ea308589-256b-4d26-b2db-b1f8477f99ff"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "35ba2469-63be-4883-aecf-b4ace94f4a4d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "9a133bbe-34c0-4b67-b081-bc21e2906388"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b04ba54d-25b0-4a2e-8ee2-7c259c8f0ba1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3f2bcdba-ff2f-4469-bc87-16351fceee3c"
            }
          }
        ]
      },
      {
        "id": "96de7d3a-f811-4b39-bea3-51e9a7490ea1",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "1497d88b-a8f9-49c2-8270-43354267063b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "61ea91e0-380a-4810-bbad-df00e36b11fb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "58081345-62ea-47af-b3d7-d7d05c54e47b",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78a5f2d2-45ef-48dd-8392-57b8c8f6c094",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6a0cb94b-751d-4e75-983b-a12d1e82f743"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "493cd3c1-6c8e-423e-9514-1037a04e9f61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "75ad2cdc-3de5-4fdd-afc0-7a06aa59c89d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fe307fc8-777e-4096-95bc-a0a76d3afca7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5ee9fb66-10a6-4060-8717-efcbd844cbd6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "44a80244-3b52-430e-b86d-ba7a8d402e37",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d7790713-d0fd-408a-bd47-8a9cb599da29"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d004bbba-ee8b-490f-a45b-549e997dc4e8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8c6a8bee-f99f-4adb-8119-8a420635fd14"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9af2b669-7752-46aa-bb5f-b6139128e4ea",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1c3d1a35-8cac-46e0-8da9-f36093a7d704"
            }
          }
        ]
      },
      {
        "id": "39711984-e4b2-4531-9f10-ce9b29d73c0c",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "0dc0d12c-3bf4-41ee-bb2e-ccd308288ba1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2eb77bc5-9b77-41ea-a170-daa01dcb60c5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dd015538-303b-40f3-b2dc-30c080bccf10",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00cf4687-d6be-4114-9b3a-1847a302aac4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d0b716fd-3fef-4dc9-bb40-4d1a3b0b1b00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bee9937f-42e5-4c66-a5a6-e74d5bf4a086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "02b5e080-0fe5-4439-a5fb-e148e629c6ce"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7bd636cb-477a-45aa-9349-29bf87205c4b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "272feb09-a432-4027-a0ad-c3d5daed2621"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "30f2cde0-267c-49bb-a3c1-806541d74d4c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f731c087-2556-46ce-822f-35f6e6db8a2e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4c6f3334-517b-4c73-90f7-58af4010c47d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "503862f2-11bf-4386-a351-eebecfb67ac0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bc127b1a-c9ff-402d-ac44-b71116bbbf97",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7c96f3f9-9b53-47da-a34a-b08cfd06b05f"
            }
          }
        ]
      },
      {
        "id": "da9e2860-57cf-4eb1-9dce-b6696fc600c2",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5b260c5e-57ea-4534-993a-347cf62c2979",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "24f55612-e0f9-4b27-b9c3-a135d8fef41f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "31a3267b-ffbe-40c7-9cc9-f70006099ba2",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "84645828-a2a3-4bd2-82a4-a820e46b665f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "88eebafa-cfcd-44ec-a582-01ed7f4ee8df",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 51.39298245614036,
      "responseMin": 9,
      "responseMax": 760,
      "responseSd": 66.10969050619018,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1711758788679,
      "completed": 1711758812746
    },
    "executions": [
      {
        "id": "2ff34100-4c77-4cf3-b934-9ffe7679d46e",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "bf315808-c19c-42af-89c2-bfe0731ff1f8",
          "httpRequestId": "e02ebd8b-cfc2-4601-83bc-fcbe67e7d4df"
        },
        "item": {
          "id": "2ff34100-4c77-4cf3-b934-9ffe7679d46e",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "6e2937f8-87d6-40fe-98b1-498eed744ce7",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 0
        }
      },
      {
        "id": "f7e9a0bb-6626-4abe-a3a5-5f58edd43d49",
        "cursor": {
          "ref": "8f3dd007-44e2-4a3d-a95c-93f567fed702",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "2fe9e89c-28a0-40a8-b5d5-8c9f62a0b1a0"
        },
        "item": {
          "id": "f7e9a0bb-6626-4abe-a3a5-5f58edd43d49",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "984fa053-9dc4-4724-ac6a-3e535f9724ba",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "1abffd88-3c3b-40e2-b6ee-ab83f5b74b34",
        "cursor": {
          "ref": "a5734da8-4a58-4971-b6b9-6c3a7b0c4e28",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "bf54d870-341c-425e-97f2-8be5496acc66"
        },
        "item": {
          "id": "1abffd88-3c3b-40e2-b6ee-ab83f5b74b34",
          "name": "did_json"
        },
        "response": {
          "id": "2591158d-5efa-4e46-ad5c-e5314066cc43",
          "status": "OK",
          "code": 200,
          "responseTime": 152,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18859222-6c00-426d-bb5a-acd8f6c1f12d",
        "cursor": {
          "ref": "2d8836ad-cb70-4c46-8808-04bdda4af4fd",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ad524395-7b28-4f4c-a237-f977a83e086a"
        },
        "item": {
          "id": "18859222-6c00-426d-bb5a-acd8f6c1f12d",
          "name": "did:invalid"
        },
        "response": {
          "id": "278fddc6-12e6-4973-aacd-766d84fc2164",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18859222-6c00-426d-bb5a-acd8f6c1f12d",
        "cursor": {
          "ref": "2d8836ad-cb70-4c46-8808-04bdda4af4fd",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ad524395-7b28-4f4c-a237-f977a83e086a"
        },
        "item": {
          "id": "18859222-6c00-426d-bb5a-acd8f6c1f12d",
          "name": "did:invalid"
        },
        "response": {
          "id": "278fddc6-12e6-4973-aacd-766d84fc2164",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58af92b5-f756-469a-b0c3-18f7e338f622",
        "cursor": {
          "ref": "4af9940f-9741-47ee-8b24-898f45a56c5b",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "b4c95a97-07ed-4bbe-94af-88b95e6925f2"
        },
        "item": {
          "id": "58af92b5-f756-469a-b0c3-18f7e338f622",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "f70175a9-181a-49f6-9ee4-34386610a127",
          "status": "Not Found",
          "code": 404,
          "responseTime": 86,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dffdcd3-858b-42f8-bbb0-27c833949207",
        "cursor": {
          "ref": "312b2251-9296-40c3-8aa1-397e38a1eeb6",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "cfb5002d-a37a-4c27-85f2-4ae9272e71ac"
        },
        "item": {
          "id": "9dffdcd3-858b-42f8-bbb0-27c833949207",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "15d7f599-0403-4d72-850e-eb6db02ed1d0",
          "status": "Not Found",
          "code": 404,
          "responseTime": 36,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9da17a37-fef1-4b6d-bee0-b64939096c7b",
        "cursor": {
          "ref": "6eb79578-e1dc-457e-be91-6944bf1e79e5",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "421fcec7-d30e-4ce6-8863-c286498f984a"
        },
        "item": {
          "id": "9da17a37-fef1-4b6d-bee0-b64939096c7b",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "86bee502-36c3-411e-8ef3-a877de1d20d7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e9e01b3-c665-4873-bcb5-9a497f24936f",
        "cursor": {
          "ref": "06f2e609-6cef-483d-8fca-96ab3a49110a",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "bb95443e-8f77-4c92-82f6-86616dfce490"
        },
        "item": {
          "id": "0e9e01b3-c665-4873-bcb5-9a497f24936f",
          "name": "identifiers"
        },
        "response": {
          "id": "3eb44f0f-316b-4573-8f37-98739be400fa",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9cd760c-cbda-4dfd-81fc-9e9ad9d7ce19",
        "cursor": {
          "ref": "b2a9de48-24ed-495f-bdc7-6811cff6eac3",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "07927946-58d0-4789-9e10-ae26b9737c84"
        },
        "item": {
          "id": "e9cd760c-cbda-4dfd-81fc-9e9ad9d7ce19",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "96d26643-ae6e-4e23-830c-1e2a046c873f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35747746-97ac-4573-a267-17446844415b",
        "cursor": {
          "ref": "941c24bc-2ff0-486d-b443-5e7ead53f2a9",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "61109b02-f597-44cd-a1ec-a36e7822d962"
        },
        "item": {
          "id": "35747746-97ac-4573-a267-17446844415b",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "3b69daf2-db4a-4874-8485-95aecbce9b31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebb83b9f-dbfe-497d-b871-0f2aef81600d",
        "cursor": {
          "ref": "7ece6c9a-3c91-4742-9ccd-8d1b26b43722",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "534479ef-9c9a-4834-bc80-83c35a31463a"
        },
        "item": {
          "id": "ebb83b9f-dbfe-497d-b871-0f2aef81600d",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "0a4c7cae-61a0-4100-95b1-3dd8eb0c4da5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5d7492d-0b81-4cf7-859f-b4b3d0117939",
        "cursor": {
          "ref": "6ff0de1e-1ad3-4383-8c35-d06aab2ab753",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "39d7e2b8-c8c1-4d16-b010-a0370a60140e"
        },
        "item": {
          "id": "b5d7492d-0b81-4cf7-859f-b4b3d0117939",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "3a9760d6-4357-4ee0-a245-53f2d574f2b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbe90dbc-d694-405b-be4e-65597b6e6c86",
        "cursor": {
          "ref": "314a64ba-f306-453b-9bbb-fb9db05b3572",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "d6742f20-096f-4eaa-a6fb-a51d41ee66b8"
        },
        "item": {
          "id": "fbe90dbc-d694-405b-be4e-65597b6e6c86",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "8557085f-3c67-4228-a60f-123a1ce8076c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aa58069-bd6b-439f-8fe3-69256ab5d8b6",
        "cursor": {
          "ref": "e3b62c76-05bf-4318-80cd-081ea723ada0",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "e2ff4bd3-12f3-48de-a1e5-687e5144ff43"
        },
        "item": {
          "id": "8aa58069-bd6b-439f-8fe3-69256ab5d8b6",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "3c13689e-d265-4893-aa2d-020a965899a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37b63b99-a0c3-473b-af86-fdb1d628ee09",
        "cursor": {
          "ref": "df5224db-427f-4173-8fdc-9aafc4f4d6de",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "204e26bf-6a45-42aa-b35c-b13c13d31241"
        },
        "item": {
          "id": "37b63b99-a0c3-473b-af86-fdb1d628ee09",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "7b19a168-f19d-4c34-9551-f57f116f5536",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c7f5910-7e92-4fde-84e0-22bc48397f5d",
        "cursor": {
          "ref": "bc349404-f6e0-4f06-984a-e5637493e3eb",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "feda889d-4869-428c-b3d0-d72eca6f55b3"
        },
        "item": {
          "id": "4c7f5910-7e92-4fde-84e0-22bc48397f5d",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "01840f81-beae-4b9a-bbf7-4f4e19210781",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "348fea69-94a2-47b0-a2c0-87ee67f1454c",
        "cursor": {
          "ref": "136f69dd-2e28-4ffa-a544-f3808b002b70",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "1142ceef-865e-4dcf-853e-4cc52753fdbe"
        },
        "item": {
          "id": "348fea69-94a2-47b0-a2c0-87ee67f1454c",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "606771d2-574d-4908-8b2e-c24444d386bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30a99a6f-1179-412e-bb69-37796494efa8",
        "cursor": {
          "ref": "3b59d761-ac3f-45b9-a805-e58a90226a10",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "bda3923c-f53b-4699-b24c-fbd46875aaae"
        },
        "item": {
          "id": "30a99a6f-1179-412e-bb69-37796494efa8",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "9b51a0a5-1a37-4ab5-acfb-e7370ae46d9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dde84ed2-165e-4380-81e4-3f569324df6e",
        "cursor": {
          "ref": "ab9adf3c-320e-40bb-9466-e11c26b3371d",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "1619b4f5-28d4-42aa-a81a-e50ba11699d7"
        },
        "item": {
          "id": "dde84ed2-165e-4380-81e4-3f569324df6e",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "aa1fd2c2-32ec-4015-a174-1e1e4176aba1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "609a550d-f8d6-4d93-8fb2-6c52f04be3d1",
        "cursor": {
          "ref": "a5215a02-be27-413e-847d-c38d532dd5bf",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "17992cb3-adea-47a9-a362-45ecab623c46"
        },
        "item": {
          "id": "609a550d-f8d6-4d93-8fb2-6c52f04be3d1",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "a7f5da10-2d49-4b0f-9f76-8400660b4797",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8221f8cf-34d4-4b48-8a91-371bf111d98a",
        "cursor": {
          "ref": "26816778-4392-4ab7-9fe9-ece093983f0f",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "9117cd7b-5bcf-4e99-bf58-95300388fbbe"
        },
        "item": {
          "id": "8221f8cf-34d4-4b48-8a91-371bf111d98a",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "c307e2cc-f268-411b-b899-00a939b108b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ef7a0ed-6390-4311-b69c-8a80fec23cb1",
        "cursor": {
          "ref": "2ef47921-a9b6-409d-bbb0-e34e2fab95ee",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "75952a3f-915e-480b-a282-c3dc7d2b7371"
        },
        "item": {
          "id": "1ef7a0ed-6390-4311-b69c-8a80fec23cb1",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "386b477c-3597-4069-a22a-96b13accb730",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8b8fc3e-e020-423e-a78c-f47b59e6e14b",
        "cursor": {
          "ref": "f13ab49d-facd-424c-95c7-2beb34f95c47",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "2ba9cc07-aa69-410a-ad7b-a9868f1086f0"
        },
        "item": {
          "id": "b8b8fc3e-e020-423e-a78c-f47b59e6e14b",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "7fb28ed0-c2c5-4a66-a552-e87dc8fabad0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab8694a8-b472-4a68-9c84-d5e4ff4409d0",
        "cursor": {
          "ref": "29620520-8a13-4d77-b805-7bd394a81a8c",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "a778e2a7-a267-4016-870c-8f1680c09038"
        },
        "item": {
          "id": "ab8694a8-b472-4a68-9c84-d5e4ff4409d0",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "96f83e21-8dfc-4cc9-a14c-998ed3019bf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee573e2d-da2e-4e74-81e7-96349bee1fc4",
        "cursor": {
          "ref": "5e25d9aa-446b-439a-92de-0efc49fddc36",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "6be1d474-1cba-495b-b1cb-49936e4d0097"
        },
        "item": {
          "id": "ee573e2d-da2e-4e74-81e7-96349bee1fc4",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "bb52f1c0-efb6-450c-9675-0c674b76040b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8b7661f-c247-4fd1-8bad-7a052674f55b",
        "cursor": {
          "ref": "2379c6fd-a3f7-4163-8327-2ce20c54cf31",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "86199a1f-164d-41a0-93f0-141e00c1afa2"
        },
        "item": {
          "id": "e8b7661f-c247-4fd1-8bad-7a052674f55b",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "1e5deff1-a7cb-4cd3-92d5-f97455857547",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86d58e56-24df-43dc-9117-1698d080927a",
        "cursor": {
          "ref": "243043ee-ea69-492d-a4fb-7e0e267d2708",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "986e37e7-bb0e-4df9-bfd4-c51ff9d7dc0f"
        },
        "item": {
          "id": "86d58e56-24df-43dc-9117-1698d080927a",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "146b6168-f06e-4c77-9d0d-dff3c50c9441",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5c7d172-abe0-4751-b0fe-b729548e6bee",
        "cursor": {
          "ref": "e92d8a57-364d-4f2e-96ae-d38e65dafcd4",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "087ee138-a0e3-4ba6-bd2b-00755559867a"
        },
        "item": {
          "id": "a5c7d172-abe0-4751-b0fe-b729548e6bee",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "8ad53781-b046-453a-9f2f-4000fea34606",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d7da963-b438-47ff-ba75-7bca3e4d4fea",
        "cursor": {
          "ref": "c99e48d5-eaad-4619-b753-a32e281c39f5",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "3225c1ba-94f8-4bd8-a715-f91bf7b580fd"
        },
        "item": {
          "id": "1d7da963-b438-47ff-ba75-7bca3e4d4fea",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "8eec1698-3174-4e2e-aa33-f65116010e44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8edf978-0a79-4808-816d-aac55817e90d",
        "cursor": {
          "ref": "2673d6bf-d042-4c10-8511-cab6110e36ad",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "58b8a601-b1f0-43d2-b448-09aa54f4c3ea"
        },
        "item": {
          "id": "b8edf978-0a79-4808-816d-aac55817e90d",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "0120747d-6808-4166-a4d4-10d2e0b606db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2cdee50-8b62-4395-ae1d-7c5a8ddb30ce",
        "cursor": {
          "ref": "6c173a43-516c-4d06-b14a-3a176ef8bb24",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "b5db1faa-ec38-4da9-bc90-6c065095d48f"
        },
        "item": {
          "id": "f2cdee50-8b62-4395-ae1d-7c5a8ddb30ce",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "e958d7a7-a5c2-4c9d-b1a6-db07b7b96c0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b822f222-17a1-4392-956d-57ccabd2d618",
        "cursor": {
          "ref": "669e2095-1248-4d75-b66f-c994c009518f",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "581a49dd-0fbb-4a3c-afa0-4551ab9ff8e9"
        },
        "item": {
          "id": "b822f222-17a1-4392-956d-57ccabd2d618",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "2ea8df4d-8d85-4962-8924-6b720880deec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e34a711-14b0-46c8-9810-7befb96009d3",
        "cursor": {
          "ref": "370f6fd9-7288-464c-b04f-f69aba965485",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "1deadd74-7350-448d-9f70-07cf16d211a6"
        },
        "item": {
          "id": "6e34a711-14b0-46c8-9810-7befb96009d3",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "c7cd01cb-61b2-4cb8-8510-96ebfa23a62a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b749a21-dfd4-44ee-a0b6-a0a43c79fca3",
        "cursor": {
          "ref": "5dc1aee0-c451-4e16-b031-c077a7770e08",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "bbee967c-6c40-4135-8f6b-c52268af121b"
        },
        "item": {
          "id": "3b749a21-dfd4-44ee-a0b6-a0a43c79fca3",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "d1cf7b7f-02f1-410b-b94e-1920f20163b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "535846f9-36e0-4076-8470-6f67255dfd49",
        "cursor": {
          "ref": "0b9dc8c7-c435-4b80-99a0-9e8d870fa1a0",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "d5a62900-27f6-4ab3-990b-8741c4084cfd"
        },
        "item": {
          "id": "535846f9-36e0-4076-8470-6f67255dfd49",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "a5283693-9268-4299-8a32-b8436201387c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32a3ffcc-7150-47be-8e8d-bf10c6ecb776",
        "cursor": {
          "ref": "ad4212f7-b72b-4a4a-94c8-0f2ac5fe0318",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "11b1dcc9-62b3-4f9f-ab7c-e3b455a04ab6"
        },
        "item": {
          "id": "32a3ffcc-7150-47be-8e8d-bf10c6ecb776",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "2281f906-51b6-4fe7-9b2a-fed85662c8ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92e250cc-b39f-4670-9251-66f5f31e4090",
        "cursor": {
          "ref": "a72d90a6-272a-4dc2-ad67-0610b3bb8eeb",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a5d1064c-1278-4247-8754-4c1f4775ad0f"
        },
        "item": {
          "id": "92e250cc-b39f-4670-9251-66f5f31e4090",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "a773954c-6de6-40e3-8f6d-d1560afcefdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6142e52e-dd20-42da-8052-b5a99128f97a",
        "cursor": {
          "ref": "8ee7f1fe-9b3b-4d18-ada5-d145cf9f8f6f",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "3102509f-2d48-4dcd-9852-b479381d3932"
        },
        "item": {
          "id": "6142e52e-dd20-42da-8052-b5a99128f97a",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "cbc6083c-3352-454a-9c7d-62cf3bcb77e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5bac420-67d3-4389-bf69-9db9bb815288",
        "cursor": {
          "ref": "cb4784df-dfbb-48f7-834f-bda509ef6697",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "9f5f0ecb-93e2-40ff-8b78-589a940be9f8"
        },
        "item": {
          "id": "a5bac420-67d3-4389-bf69-9db9bb815288",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "9f860684-e31a-4e3b-abf7-dd45a2846f36",
          "status": "Created",
          "code": 201,
          "responseTime": 760,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "b25c4cfb-d556-4233-9912-9d9c8d36cc2e",
        "cursor": {
          "ref": "cb05753f-f7dd-4863-a5e9-df79463bff78",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "711a82a2-26d6-45e7-bdca-1e0d17018921"
        },
        "item": {
          "id": "b25c4cfb-d556-4233-9912-9d9c8d36cc2e",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "87f310a9-4129-4b2d-b145-0529ce22193f",
          "status": "Created",
          "code": 201,
          "responseTime": 210,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "32181da5-134a-41c2-9d76-322f08f280b0",
        "cursor": {
          "ref": "80e776c4-bd3c-4b19-a12b-db480c4d82f9",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "598bd300-b049-48f3-81fa-b17005af72c7"
        },
        "item": {
          "id": "32181da5-134a-41c2-9d76-322f08f280b0",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "59b10367-b0f4-4ffb-9a84-c9bb39a425d0",
          "status": "Created",
          "code": 201,
          "responseTime": 200,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "0890efb1-cdbf-4971-b7ed-c9292f3d4fa4",
        "cursor": {
          "ref": "ff62592d-1c90-4b89-8fda-46be28216b4e",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "4312d5fc-f6fc-4544-baad-0a8eedfb86a9"
        },
        "item": {
          "id": "0890efb1-cdbf-4971-b7ed-c9292f3d4fa4",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "536022a1-473d-440f-8bf7-280f2ae6ed79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "227ea876-fd72-4788-b322-a3969994367d",
        "cursor": {
          "ref": "c3394f4a-08a0-4e66-8df9-fdd80d5e5fb4",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "81f2c9a2-ead2-4aec-91cd-6af2dbaf72a3"
        },
        "item": {
          "id": "227ea876-fd72-4788-b322-a3969994367d",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "db455cb8-2581-4e12-bdbb-abcee5127566",
          "status": "Created",
          "code": 201,
          "responseTime": 229,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "7611708f-2714-4059-8360-12b2d2e90c91",
        "cursor": {
          "ref": "5b737115-aab4-4337-aefb-b4f800dc1a9d",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "50353b6e-e102-4278-882e-a15313a41bbe"
        },
        "item": {
          "id": "7611708f-2714-4059-8360-12b2d2e90c91",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "ca34ad40-51ac-4bd4-9f27-c78709c4b340",
          "status": "Created",
          "code": 201,
          "responseTime": 202,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "90595f2b-752d-4797-8acd-d54355520896",
        "cursor": {
          "ref": "7ccff0d2-836c-4938-b1e5-4df334034ee3",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "7c1f2cf5-de22-47f3-b9ba-a00d068d9a32"
        },
        "item": {
          "id": "90595f2b-752d-4797-8acd-d54355520896",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "8afb3681-2710-46a1-b5b0-25be28b2d1bf",
          "status": "Created",
          "code": 201,
          "responseTime": 240,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "956a5452-cec0-4efa-93c6-90b5d09cc96a",
        "cursor": {
          "ref": "83b879d5-0050-4122-9412-4e405471dbfb",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "ea16f999-b54e-46d9-927b-40109a06fce4"
        },
        "item": {
          "id": "956a5452-cec0-4efa-93c6-90b5d09cc96a",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "f6355b8c-0111-440c-9ee0-612ffe2afe77",
          "status": "Created",
          "code": 201,
          "responseTime": 209,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "f825a422-3f68-410c-ab4d-21c8844e0d61",
        "cursor": {
          "ref": "9c97d0e1-d7a9-4534-b7b5-9e7d8eef9c2e",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "ce78f02b-0cd8-4650-a6fe-01ccbf17f3ac"
        },
        "item": {
          "id": "f825a422-3f68-410c-ab4d-21c8844e0d61",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "0c928462-aece-43da-b1f2-b24ad6b56317",
          "status": "Created",
          "code": 201,
          "responseTime": 195,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "9ef42efe-0d72-44a3-8f94-fedf8b6eae4e",
        "cursor": {
          "ref": "35279615-e712-406c-afe6-cf346af9cdcd",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "df1e5187-db2b-4cff-940b-4162c463b22f"
        },
        "item": {
          "id": "9ef42efe-0d72-44a3-8f94-fedf8b6eae4e",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "173690a5-6bb0-45ef-be9a-f024353df7fe",
          "status": "Created",
          "code": 201,
          "responseTime": 192,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "af905f60-532f-4d75-a3ea-0a3d7534dbe1",
        "cursor": {
          "ref": "5633883c-018e-4ace-b826-37af8d2b18c2",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "c1bedabe-6507-47dc-b3f4-920982e19dc1"
        },
        "item": {
          "id": "af905f60-532f-4d75-a3ea-0a3d7534dbe1",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "ca77bb65-7dc4-4c54-bb1d-23794eb44075",
          "status": "Created",
          "code": 201,
          "responseTime": 199,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "60d1f136-7d28-44f4-a18a-bebce4e3ad85",
        "cursor": {
          "ref": "170f84a6-464c-4703-9392-b093771e460f",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "99f717a6-4c4e-4cde-a17d-c4df26689b36"
        },
        "item": {
          "id": "60d1f136-7d28-44f4-a18a-bebce4e3ad85",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "f42de1c3-744b-4309-9a8d-aaaec105956d",
          "status": "Created",
          "code": 201,
          "responseTime": 190,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "458a7a05-7151-4f73-93e3-6884b86f2143",
        "cursor": {
          "ref": "9c34ceb8-9223-413c-9e62-e895b21f0603",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "715771e2-5cc6-4251-9e8c-e0957a8a8c51"
        },
        "item": {
          "id": "458a7a05-7151-4f73-93e3-6884b86f2143",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "733bb89b-fb6c-45ee-b8e9-f8c85fd3a0a1",
          "status": "Created",
          "code": 201,
          "responseTime": 223,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "15d4314b-4cf9-41d1-8640-132c8d3b015a",
        "cursor": {
          "ref": "55554997-c688-4520-a6fc-1c310c16b14e",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "6403dce2-dfd7-402a-b24f-a9feb9e090fc"
        },
        "item": {
          "id": "15d4314b-4cf9-41d1-8640-132c8d3b015a",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "d70d6c19-41bc-4ceb-93c2-3605e9e63e56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92687b2f-bf75-432d-8b50-c6d0d5fa4563",
        "cursor": {
          "ref": "d30e139e-a569-44e7-88fd-4e8a48290bcd",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "103fc8ba-0e26-4b23-aa84-ef77db149cd5"
        },
        "item": {
          "id": "92687b2f-bf75-432d-8b50-c6d0d5fa4563",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "9c80d755-1877-4794-ac66-849be12da7a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1747c08-0a20-4797-a031-536303ae326b",
        "cursor": {
          "ref": "889feea6-af37-483a-a40f-0673989d7041",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "2917cb47-1f3a-4349-a39e-314687893bc9"
        },
        "item": {
          "id": "f1747c08-0a20-4797-a031-536303ae326b",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "db6c829f-12ff-48ee-96b4-4c9c4cce4a77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c394b43-afa2-4293-8a60-32d31edf545a",
        "cursor": {
          "ref": "f312f673-540f-4555-a25e-3e36992943ee",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "a008667c-7212-48c8-a5e2-4b3ba9950d7e"
        },
        "item": {
          "id": "5c394b43-afa2-4293-8a60-32d31edf545a",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "2177c71c-213c-4a8b-b09b-8d9df4244849",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bb6f4ef-a9a5-45de-a7c7-d244148c7478",
        "cursor": {
          "ref": "7c78f5a3-4c18-45fa-8238-3f18c10af638",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "d5d8f7f2-5899-4952-96c5-1d47023f8905"
        },
        "item": {
          "id": "7bb6f4ef-a9a5-45de-a7c7-d244148c7478",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "2af4e10e-29fe-4ae1-a291-7fe183cd4668",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a91f8ec-f90b-4d41-9572-3c48f257d9ec",
        "cursor": {
          "ref": "193f42ba-aa1f-4913-9148-c766011b5037",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "5d40478c-29d8-45c1-b8f1-055999a82de5"
        },
        "item": {
          "id": "5a91f8ec-f90b-4d41-9572-3c48f257d9ec",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "a67a8bc6-adfb-4ad4-adf0-4510b9a9d509",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb2b5a30-a1ab-4b25-8183-20e850092e6f",
        "cursor": {
          "ref": "a646bf27-7376-45a0-ac20-c45aac1164f5",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "3436441e-3509-47a3-a65a-41cbe45de4f8"
        },
        "item": {
          "id": "cb2b5a30-a1ab-4b25-8183-20e850092e6f",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "bd77d69e-e0d2-4079-a903-b7be8f417fa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af8ee070-887b-4cd4-914d-a827aee6220b",
        "cursor": {
          "ref": "e910e3c0-3c3a-44e4-95b0-a8660818049e",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "92352601-86e2-4f1e-8b66-cb1fd4c53ab0"
        },
        "item": {
          "id": "af8ee070-887b-4cd4-914d-a827aee6220b",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "72fff1db-e560-462d-b04a-27c385e5a1e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da2b228d-3be7-4913-803d-69df4cefe958",
        "cursor": {
          "ref": "5c73e155-a475-4f64-ace7-fc367930ad2d",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "762dbbe6-06dc-4eec-9e92-d559fa896fa2"
        },
        "item": {
          "id": "da2b228d-3be7-4913-803d-69df4cefe958",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "198a41cf-62e9-443d-89b9-c554fa94ce85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdbb5068-e934-4412-9e6c-3ddf2f9ec190",
        "cursor": {
          "ref": "c1f585e8-e4a0-492b-82ec-215e9fabf207",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "0d971d94-0677-4b7e-9520-884a51553a00"
        },
        "item": {
          "id": "cdbb5068-e934-4412-9e6c-3ddf2f9ec190",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "872890d2-a257-4402-8642-512fb2c7778f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "593d56ec-75a6-4e90-b352-1e099aff241f",
        "cursor": {
          "ref": "b2c094d1-178f-4c81-a1d9-d9fd62de7457",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "5336215f-0fd2-40d5-9000-1211299bb53f"
        },
        "item": {
          "id": "593d56ec-75a6-4e90-b352-1e099aff241f",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "74f7054f-9f53-4216-bad3-a74fce2dcf57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c99a388-63af-43d4-bc17-4bc4453dce38",
        "cursor": {
          "ref": "f12348a7-ec53-401e-a747-113c7e31e592",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "9a73a3f3-e348-4a45-8183-6ba3c41005ca"
        },
        "item": {
          "id": "7c99a388-63af-43d4-bc17-4bc4453dce38",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "792dfa26-bfb9-4158-b19a-3be5a8ffddb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62b1262a-c28f-4072-8c52-cb4d14ea8dfe",
        "cursor": {
          "ref": "ac667286-e29a-426e-b689-b491f678edb9",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "a2867d82-4d54-4089-a1d0-af4f7313f3b4"
        },
        "item": {
          "id": "62b1262a-c28f-4072-8c52-cb4d14ea8dfe",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "1b7f5e1a-8611-40f1-8080-00b7efaca9dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62b9b490-46db-4642-8215-9d0d693f13e8",
        "cursor": {
          "ref": "e8c02021-2858-4735-89d8-ddc9afe3f0b6",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "bb1f7b9e-11bb-437c-b689-8ad816b23c35"
        },
        "item": {
          "id": "62b9b490-46db-4642-8215-9d0d693f13e8",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "96877538-72ba-4244-a1ee-f4c24f5a710a",
          "status": "Created",
          "code": 201,
          "responseTime": 210,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "f21a1b03-cde0-4071-a060-b87fdf9c8ae0",
        "cursor": {
          "ref": "5c36815b-e887-41b7-9ff4-633b2228a829",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "c3323aaf-23f3-4fc3-83dc-fe6c90a6bd39"
        },
        "item": {
          "id": "f21a1b03-cde0-4071-a060-b87fdf9c8ae0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "b22336fd-4ec3-4bb4-8826-e0410a63ecbd",
          "status": "Created",
          "code": 201,
          "responseTime": 200,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "60cb1cbc-58dd-457b-8e16-8a63fc8de3b4",
        "cursor": {
          "ref": "ad081df2-531a-43c0-9199-577aa363513c",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "03c560c5-1747-4718-a27d-c279e89e231c"
        },
        "item": {
          "id": "60cb1cbc-58dd-457b-8e16-8a63fc8de3b4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "fbcee12a-7dfa-4257-95d2-b16feed5a920",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "d22dc821-d122-4e46-af92-b6d5a798391b",
        "cursor": {
          "ref": "c2b65271-0b35-4f5a-8501-d7a6382c8636",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "ccc2188d-a901-41d8-a8c9-8da5b454efbc"
        },
        "item": {
          "id": "d22dc821-d122-4e46-af92-b6d5a798391b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "1b685a67-5fab-4d61-8789-579327a4de31",
          "status": "Created",
          "code": 201,
          "responseTime": 210,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "6465fa2b-aeaa-433e-905f-abeca7c7cd44",
        "cursor": {
          "ref": "adab1137-961b-47d8-bc95-25ef1892742e",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "09b65db6-d329-4fd3-99e1-46455030ab45"
        },
        "item": {
          "id": "6465fa2b-aeaa-433e-905f-abeca7c7cd44",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "d264f237-c90e-420b-9693-272483605348",
          "status": "Created",
          "code": 201,
          "responseTime": 210,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "30b033e0-e298-41a3-849e-db44b2d9e9a8",
        "cursor": {
          "ref": "65c9f567-9f58-45ce-8196-fe64af155898",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "4da3e0b6-7580-47d9-979e-a7bd4027a413"
        },
        "item": {
          "id": "30b033e0-e298-41a3-849e-db44b2d9e9a8",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "15a105fc-9f4c-4d63-93bd-a974007278b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1d381dc-18cb-4a9c-8683-6cdbac186580",
        "cursor": {
          "ref": "9575d2c5-a1ff-495f-99fb-9f1f6c57094b",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "f278a664-6887-48d3-a45b-106f62772950"
        },
        "item": {
          "id": "b1d381dc-18cb-4a9c-8683-6cdbac186580",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "eed44be0-1470-416f-874f-19b9f8c90243",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c133cf13-f067-4f28-857f-91de3cdae079",
        "cursor": {
          "ref": "e78ce68a-9f9c-4456-9ef4-c39a6a8bfd1e",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "1f8e70b2-fafc-4f1a-ae2c-c140e2a656a2"
        },
        "item": {
          "id": "c133cf13-f067-4f28-857f-91de3cdae079",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "18f2abd0-30cb-4fe6-8fb0-da5a9054419d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5ba8a0a-2ca0-4291-8b58-64f8ef38f4ca",
        "cursor": {
          "ref": "84d3767e-85e9-48db-acd0-728415838d17",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "9ff0b9ef-68ff-4621-a46f-9628a5a6a9af"
        },
        "item": {
          "id": "e5ba8a0a-2ca0-4291-8b58-64f8ef38f4ca",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "e163b47a-831e-407d-9667-631b930402e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e30ceb86-efc4-4571-962b-c5d979cddb6e",
        "cursor": {
          "ref": "a7b64b69-59e8-4f9e-9999-7b4f9f25dd37",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "2b5419dd-b83c-4578-8075-7fae6cc1ce17"
        },
        "item": {
          "id": "e30ceb86-efc4-4571-962b-c5d979cddb6e",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "c0df2f8a-58cb-4366-ac7e-c8dbc89dd46b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37478845-722e-4f86-b6d9-f30e9ac2a655",
        "cursor": {
          "ref": "c290b72e-15bf-496a-8432-c541d8e72a10",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "92bba248-956d-49f0-9b39-ced5167f2def"
        },
        "item": {
          "id": "37478845-722e-4f86-b6d9-f30e9ac2a655",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "851007b5-d651-416d-a77a-188588463f09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7962fb30-12db-4219-9d69-f6bb762caacd",
        "cursor": {
          "ref": "f9ceaa39-da86-450d-8f48-50e6af3528ba",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "ba0686e8-88b8-4644-8eba-902d4a43f17c"
        },
        "item": {
          "id": "7962fb30-12db-4219-9d69-f6bb762caacd",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "9e32bf85-76dd-4600-b058-b6a1a2b5536c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f307e9b-717e-422d-bb9f-bbc7fd307af5",
        "cursor": {
          "ref": "21ab39f9-27ec-4f7d-a90a-6689926ddd03",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "405eec1b-5e61-4143-a6b6-87a085a9fc49"
        },
        "item": {
          "id": "6f307e9b-717e-422d-bb9f-bbc7fd307af5",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "1b5b9a6c-c648-4987-8497-2518ec5f8cfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d03b9b0-e34a-4c1f-b89c-5e2463c49df6",
        "cursor": {
          "ref": "82200259-3f42-45d7-891a-df50b61114de",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "7d66da9f-3ec4-41ef-86d4-a8a9b985a599"
        },
        "item": {
          "id": "8d03b9b0-e34a-4c1f-b89c-5e2463c49df6",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "6e9a09d3-8169-4081-b8b0-1cfc7360ad9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b7e09c6-42a5-4fc0-ba72-b2a945d81e06",
        "cursor": {
          "ref": "5b5297df-9cb0-4040-9af0-0e146717b7e1",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "b3025061-dbfb-42a5-98dc-95c029c784ce"
        },
        "item": {
          "id": "2b7e09c6-42a5-4fc0-ba72-b2a945d81e06",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "a1c6df35-3357-491f-ae71-d026d808f566",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b600c953-376a-451d-ac76-c329cd4c936a",
        "cursor": {
          "ref": "6e05237a-db71-44b2-821a-504ec1f846c6",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "06c39213-2aa5-481e-acf2-5c0b32fc41b9"
        },
        "item": {
          "id": "b600c953-376a-451d-ac76-c329cd4c936a",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "2c90a979-c2be-4f42-9f26-814a07b8313f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02e1c07e-378c-418a-92d4-13476fe05d8a",
        "cursor": {
          "ref": "151e261f-cb86-48e4-9205-b27a03968f85",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "ee5cf5de-e2a0-46e2-9736-a985607a6ad3"
        },
        "item": {
          "id": "02e1c07e-378c-418a-92d4-13476fe05d8a",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "88c40cc1-271d-4802-8c25-b7ffe681c4c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90be4791-268c-494a-ad39-2edcb72c56b8",
        "cursor": {
          "ref": "696ca80d-adde-425d-93a6-fd0a5820ffa9",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "cbffeb56-f4ce-4504-b7b3-6686f3ca821d"
        },
        "item": {
          "id": "90be4791-268c-494a-ad39-2edcb72c56b8",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "38a8eb8d-2c4d-4869-ab49-17823ad22cc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b53e337-4b73-436e-80f7-181a00c280d8",
        "cursor": {
          "ref": "58210379-7330-408d-bfcd-2b9989d75a48",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "38c2a64a-60fd-4a9e-8fe5-5c018c84fd25"
        },
        "item": {
          "id": "8b53e337-4b73-436e-80f7-181a00c280d8",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "475d5dd5-d17b-4265-a829-0744011c7008",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3e744da-b518-4eb5-8763-937f4f4f140c",
        "cursor": {
          "ref": "09718ab5-338a-4fa8-a460-e6b20168c3f2",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "2993db21-0b0d-468a-9cf6-765213d9de63"
        },
        "item": {
          "id": "b3e744da-b518-4eb5-8763-937f4f4f140c",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "9940a6d3-2ef5-4e7f-8be1-43b64122255c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "759f6ad4-b7f2-4549-b84f-3e9ab200a0c5",
        "cursor": {
          "ref": "36e12372-4521-485b-823c-156acd02b99c",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "8e6c1e21-b1e6-413f-9984-6b1d7b09a2d2"
        },
        "item": {
          "id": "759f6ad4-b7f2-4549-b84f-3e9ab200a0c5",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "4da41d2c-5dec-4779-bee8-988d87a79930",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d74dcee6-4ae0-466c-a3f5-79aaa4b1c907",
        "cursor": {
          "ref": "0c8ef007-31f3-4e08-891b-5125e8f66036",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "16ff325f-de3d-434f-b5bd-d9f0f3804c50"
        },
        "item": {
          "id": "d74dcee6-4ae0-466c-a3f5-79aaa4b1c907",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "ab7eb624-fb66-4f92-a8bd-8adc446c5967",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e74ab2ee-63ee-4ff6-8e1f-ca389ad6d622",
        "cursor": {
          "ref": "30e12172-1165-4c75-b731-ace6d2daadf7",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "a62217e7-45ec-4f5e-b548-57a2d9e60953"
        },
        "item": {
          "id": "e74ab2ee-63ee-4ff6-8e1f-ca389ad6d622",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "1f542140-66d8-40d6-82f9-a5198d6df3e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aec95531-22ce-4467-8440-2d3f732a48d2",
        "cursor": {
          "ref": "3cad2f95-dcd2-4469-b852-7c020b08b068",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "dadee601-2719-46ae-9e13-f9bceab19c4a"
        },
        "item": {
          "id": "aec95531-22ce-4467-8440-2d3f732a48d2",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "44059359-3422-4202-8545-3878d9cc15f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbd251a2-1f2a-4e9d-a6ab-5408ea2ed334",
        "cursor": {
          "ref": "51821bd2-99ca-4efd-a7e9-434512186161",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "8c89475e-d690-4d07-b640-2048c5b13168"
        },
        "item": {
          "id": "fbd251a2-1f2a-4e9d-a6ab-5408ea2ed334",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "4dd7dc93-63e0-429e-8859-e7afbaad05d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4a9b607-e73e-4b5d-afdf-2cedc172a67c",
        "cursor": {
          "ref": "60bce773-1dc0-46cb-9dbd-578d9074816c",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "897c1e4f-6413-47e3-80ba-1ba6c0ac05d1"
        },
        "item": {
          "id": "e4a9b607-e73e-4b5d-afdf-2cedc172a67c",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "77a3ccb6-8fc2-47ca-8d1f-f3ff2a80a5f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54f1d369-bd8d-45d9-943e-fc458af2f84a",
        "cursor": {
          "ref": "aa489f5e-a7be-48f6-9f5a-6ed093f4d41e",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "98cd1d08-b195-4175-bbfe-afa318c2e8ac"
        },
        "item": {
          "id": "54f1d369-bd8d-45d9-943e-fc458af2f84a",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "132d2095-5dd8-4784-a754-fe89c547ceee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff417a8d-a536-4557-b19b-95827ae7db6c",
        "cursor": {
          "ref": "22d5f216-beab-4994-bbca-92ca56a20406",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "fdc006c6-73cd-4d6e-9a3c-33b91d4d251f"
        },
        "item": {
          "id": "ff417a8d-a536-4557-b19b-95827ae7db6c",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "3a4f3789-6b6c-47e9-8841-21dbeed3db48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0cdbac7-2710-4336-b836-a2e419d08952",
        "cursor": {
          "ref": "594ba7a4-df4b-4e40-8a67-b5f9ba2b8821",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "9e63a4ce-731b-449d-9c55-f9ee392fd0a1"
        },
        "item": {
          "id": "c0cdbac7-2710-4336-b836-a2e419d08952",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "fe82e4f7-0632-4f1c-ab7c-9002db177453",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d57e4092-72b3-486f-8295-fca41ccaa5de",
        "cursor": {
          "ref": "7280b553-e3ed-41a2-84b1-0486e1373caa",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "65fe1935-29bb-47da-95de-9fca8b85500e"
        },
        "item": {
          "id": "d57e4092-72b3-486f-8295-fca41ccaa5de",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "3170910e-6ff4-4224-8ea7-a5f44227f125",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1400fdf8-feda-4847-a46b-77e7fab05082",
        "cursor": {
          "ref": "6c8c5b69-8782-4dd4-b944-33ee37745acc",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "c2af037c-9ead-4bee-b8a0-44da26a2cd6e"
        },
        "item": {
          "id": "1400fdf8-feda-4847-a46b-77e7fab05082",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "a12d31e4-9f54-47c3-b4b0-1fbbce65765e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c81a4c84-f195-4153-8c99-3c992e3179e6",
        "cursor": {
          "ref": "b4d7ddc6-a302-4a81-8f86-d68589d7862c",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "d9583041-8006-4b13-b43f-7a38ad2c7a66"
        },
        "item": {
          "id": "c81a4c84-f195-4153-8c99-3c992e3179e6",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "b4bdfd25-9e8b-49ee-8201-d73ae4c9729c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7a65692-6cc3-4d87-8335-30affd54353a",
        "cursor": {
          "ref": "85844c7e-6904-4207-8bb6-09e00c5983a3",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "6a511794-89df-462b-9d7b-d89a950a0e2e"
        },
        "item": {
          "id": "b7a65692-6cc3-4d87-8335-30affd54353a",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "d1eb8e98-24c9-44f8-acc1-71094b638e17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0014bf3-add6-432c-bf5a-f07c2bdfc68c",
        "cursor": {
          "ref": "41758c33-1bc6-4be3-964d-9bdce329dae2",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "481e9c3b-9e6a-4757-b649-8f4a4060ca6b"
        },
        "item": {
          "id": "a0014bf3-add6-432c-bf5a-f07c2bdfc68c",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "b5a01873-49cb-4270-9741-fa67ebc1bb73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1f465eb-b2dc-4775-8e6d-8c94c2277ebf",
        "cursor": {
          "ref": "fa153f47-f22b-4c95-b831-9a0168fdeabe",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "7534bae1-9854-4df3-8a39-79255b3b477c"
        },
        "item": {
          "id": "e1f465eb-b2dc-4775-8e6d-8c94c2277ebf",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "00c890fe-f5b9-4195-bd2a-082a9289b1d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca4f9dfb-b63f-47f0-afa0-513c9b92cc1c",
        "cursor": {
          "ref": "c517d27e-1580-46c3-a86f-4a851f9c99df",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "c314034e-12e2-4c45-a2d1-42c3061bab75"
        },
        "item": {
          "id": "ca4f9dfb-b63f-47f0-afa0-513c9b92cc1c",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "0b7b18fe-8650-45fd-8db0-097bd8d33cb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e1ca0ae-3c8b-452f-8eaf-de54f49ef231",
        "cursor": {
          "ref": "e6314579-a73e-4390-b9b0-f9ab1eb07863",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "520cc9e6-e3cd-434f-9922-949ab19f1721"
        },
        "item": {
          "id": "3e1ca0ae-3c8b-452f-8eaf-de54f49ef231",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "1378bf68-2307-4fd5-ad57-0c27d5d94105",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62474b03-dd29-41e2-8259-1dfebba4f4aa",
        "cursor": {
          "ref": "cb16e29b-873a-41eb-83ed-1073ddf84acd",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "f2a5ee1e-e333-46f3-8b90-43efbfc2594a"
        },
        "item": {
          "id": "62474b03-dd29-41e2-8259-1dfebba4f4aa",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "7dcddab1-97bd-4bdd-ab98-448de8c75dac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "773034e8-8c0e-4ab7-b9e7-59d54a17feec",
        "cursor": {
          "ref": "bb7cc01d-1e5b-49ad-b700-de4d6ab20ecc",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "da1b30d9-0d1f-4740-9a40-cc2e52ece4e3"
        },
        "item": {
          "id": "773034e8-8c0e-4ab7-b9e7-59d54a17feec",
          "name": "credentials_issue"
        },
        "response": {
          "id": "624a97ce-60f9-4a9c-95cb-92a8f032d518",
          "status": "Created",
          "code": 201,
          "responseTime": 204,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "40cf7ad9-12c6-4a7e-9203-40e1943b1dec",
        "cursor": {
          "ref": "c6088e32-ba6f-4328-87f3-80c6ce45ea34",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "8eb4bea1-09af-46c7-835c-f51199ee2faa"
        },
        "item": {
          "id": "40cf7ad9-12c6-4a7e-9203-40e1943b1dec",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "694931d2-ae0d-4745-95cf-aeb1a880619d",
          "status": "Created",
          "code": 201,
          "responseTime": 195,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a4d2b8c-8959-411a-a257-c82ca950309c",
        "cursor": {
          "ref": "61a18b54-3c86-4ab1-b528-f6de4d0b5590",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "f6e0548a-350f-4321-a6c9-95da8fc9c74e"
        },
        "item": {
          "id": "4a4d2b8c-8959-411a-a257-c82ca950309c",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "39515307-f3fe-4e6b-bdc8-c51578d17935",
          "status": "Created",
          "code": 201,
          "responseTime": 211,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aa6f16f-c067-4859-8017-2d7041f4a2b7",
        "cursor": {
          "ref": "68be5885-bfb1-401c-b8b7-6f5c7a8c4322",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "3d4eed32-de87-4e47-809d-e0b058785d40"
        },
        "item": {
          "id": "1aa6f16f-c067-4859-8017-2d7041f4a2b7",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "67255641-cfe1-4597-b417-85d457ab6326",
          "status": "Created",
          "code": 201,
          "responseTime": 213,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5ce4f2b-af40-49cb-8820-175f1f248ed2",
        "cursor": {
          "ref": "d95952ab-b79d-4039-ba9c-789c4f940dc5",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "6afef50f-5682-401e-8c5b-34294f60d03c"
        },
        "item": {
          "id": "a5ce4f2b-af40-49cb-8820-175f1f248ed2",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "23df0d78-09b9-4bda-a1a7-65e1c739512e",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-03-30T00:33:20.771Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-03-30T00:33:20.771Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "cb9002b2-659c-4dbc-807a-558716ceddc4",
        "cursor": {
          "ref": "85fe8fad-254d-4fbd-8052-3743ef75bc7a",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "9b447af5-7311-491a-adbe-157a681faaf4"
        },
        "item": {
          "id": "cb9002b2-659c-4dbc-807a-558716ceddc4",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "ac57c88c-fa2a-41e3-a14e-90785964bb10",
          "status": "Created",
          "code": 201,
          "responseTime": 200,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63f30b71-986e-47e6-8729-3728c03a79f5",
        "cursor": {
          "ref": "bcab3d6f-75fa-4d31-85df-12dd3167559a",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "16dbef7c-e619-439c-b73c-7fb99d44bc5c"
        },
        "item": {
          "id": "63f30b71-986e-47e6-8729-3728c03a79f5",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1fc46617-f3ec-4b81-b2de-ec9e6a301ae1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2218dde7-ef77-4096-b0c9-0fba5e243069",
        "cursor": {
          "ref": "8df44aaa-9e6d-45fc-b033-2c24ae9f4413",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "33b1b383-9f55-469e-b909-7423e742f346"
        },
        "item": {
          "id": "2218dde7-ef77-4096-b0c9-0fba5e243069",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "1f65466e-337a-4859-bb31-45b6ad83abab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e58941c0-d622-4b2c-a04a-64cc36c88d2e",
        "cursor": {
          "ref": "c8964f01-8395-4c97-952d-8b7d238c9f7c",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "59daf7d4-1c13-48f7-9d30-c99899ecc206"
        },
        "item": {
          "id": "e58941c0-d622-4b2c-a04a-64cc36c88d2e",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "854b342d-d046-4392-8ad9-fad41308095c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c1d5cf2-f3dd-4b18-bb83-4db41a565303",
        "cursor": {
          "ref": "120cdba9-a3fb-4d3a-a865-f6a86c9ce728",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "4aa80595-e301-4e92-a1ea-577f295e2d92"
        },
        "item": {
          "id": "8c1d5cf2-f3dd-4b18-bb83-4db41a565303",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ecaa7e2c-43ed-449e-8f9c-54c91fb76a12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "040d98aa-5d61-4ef2-aa15-a61378b3a5e2",
        "cursor": {
          "ref": "694ecf7b-2c1f-4d76-93f9-7e4130e1f4f4",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "017f711c-23ca-4534-83a4-6facd7b0073a"
        },
        "item": {
          "id": "040d98aa-5d61-4ef2-aa15-a61378b3a5e2",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "918924a0-5980-4b94-a232-e932d50f32fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6779e092-4456-4f29-b779-d4a1d74ca933",
        "cursor": {
          "ref": "ec613c81-2bf3-4c89-8d97-1e653bde4582",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "ad87867f-4d7d-4bd9-8601-a4e330dffd11"
        },
        "item": {
          "id": "6779e092-4456-4f29-b779-d4a1d74ca933",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "b7d07d28-00b7-4dca-a0a7-00b3f4f85269",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd8bdcff-4986-47ed-8518-e0157415a8d9",
        "cursor": {
          "ref": "b37f06f1-0f2a-4417-a0de-d6e5ac99b821",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "caa42d30-3a16-451d-8633-555ad4d25dc5"
        },
        "item": {
          "id": "fd8bdcff-4986-47ed-8518-e0157415a8d9",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "2a20bde6-bbd8-415f-aa86-1cf75cc05445",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9eed758-03b6-4007-a0f1-fed9efdff60e",
        "cursor": {
          "ref": "e8e83746-0d04-40a2-bc18-513ceafaf1bf",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "bacb40b2-20ff-4b21-9f7d-2a4eded0a1e9"
        },
        "item": {
          "id": "d9eed758-03b6-4007-a0f1-fed9efdff60e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "de563836-ac06-4e65-935e-14ad981ab9c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b518ed4-b42c-42cf-a392-654973013aff",
        "cursor": {
          "ref": "401c3c3a-abb4-459f-b756-3881130da826",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "f32c495c-d33b-4a60-a27e-eb8b9ce61bcb"
        },
        "item": {
          "id": "4b518ed4-b42c-42cf-a392-654973013aff",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "704e9681-9053-4fdd-9844-bb9ce8e7fa93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6911008-c3f9-48b2-a680-d865cab28d25",
        "cursor": {
          "ref": "49f36a80-24b0-4ad5-9283-5910b750f597",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "226a3e7b-aaac-4e39-b086-970d76bf20b7"
        },
        "item": {
          "id": "e6911008-c3f9-48b2-a680-d865cab28d25",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "e0fc7ae4-6c1c-4314-a208-5359c48f8a24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bae0cbbb-684e-4f44-a6d5-65a37c1e43ef",
        "cursor": {
          "ref": "9656ec14-4b50-4c71-8367-d53339cf8825",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "3ac935f5-7a1c-4656-a758-7b0a376ffb31"
        },
        "item": {
          "id": "bae0cbbb-684e-4f44-a6d5-65a37c1e43ef",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "fbbc19bf-1e1d-4dc6-82d0-31f2680aaad8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eeddf10-21ef-466a-975f-ce8d3b58e692",
        "cursor": {
          "ref": "1dc4aaae-4b22-46e3-b208-1d702ad9d0c7",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "34f339a8-a5ee-439b-a697-4fd81db25e00"
        },
        "item": {
          "id": "3eeddf10-21ef-466a-975f-ce8d3b58e692",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "70932c29-e916-4926-bfd8-ab4f6f9e57c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16e5c5c7-2cc6-417d-bea3-9f3bfa46cb23",
        "cursor": {
          "ref": "7866f4b6-97f4-467f-bbc3-89ab9eabcdee",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "9adb199b-681a-4975-b31a-b8765a7752cd"
        },
        "item": {
          "id": "16e5c5c7-2cc6-417d-bea3-9f3bfa46cb23",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "a07ca24b-77f0-4e2f-b41d-5df74aeadb9f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "c809a2c6-bead-4487-b320-fd6bfddb9596",
        "cursor": {
          "ref": "069640e1-47f5-46d4-9497-16fc0ad684aa",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "0494ed37-2765-446b-b09e-955a438fb5b6"
        },
        "item": {
          "id": "c809a2c6-bead-4487-b320-fd6bfddb9596",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "3fd23317-e098-4a01-8d12-b287c100d755",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "760116bb-06d4-4645-b391-f397d2cbe161",
        "cursor": {
          "ref": "c973e52c-d0b6-4a8f-b141-4eeedc12d44b",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "3e502af8-20a7-4fc5-9638-bbc04c861877"
        },
        "item": {
          "id": "760116bb-06d4-4645-b391-f397d2cbe161",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "bf46735f-7e96-4835-8911-183a427a39a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20608438-de78-4ec2-bc7a-108dba1245e7",
        "cursor": {
          "ref": "26a9a9d5-827e-4e36-8820-a8e48868072e",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "5fa30686-991c-45a5-a368-d84842273878"
        },
        "item": {
          "id": "20608438-de78-4ec2-bc7a-108dba1245e7",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a6d22564-e229-46f7-85f0-bf1262458ad8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21cd7189-7cd1-4d4b-a1ad-869cccf5f51b",
        "cursor": {
          "ref": "70ec8ccc-c0fb-4841-b364-a471432332ec",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "04732615-a419-4af5-9613-945916cd27a3"
        },
        "item": {
          "id": "21cd7189-7cd1-4d4b-a1ad-869cccf5f51b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "10952a9c-5123-4bae-aff6-f87bcf76d002",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b316013e-d991-47c1-a175-b703cd2f24d6",
        "cursor": {
          "ref": "2976a5ba-832d-415c-86ef-3234514c181f",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "2758ec8a-2cfd-4374-ba31-fb70096bb9bd"
        },
        "item": {
          "id": "b316013e-d991-47c1-a175-b703cd2f24d6",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "983c6516-2dc4-4c77-b371-f3f4ebdebbbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88a32f9a-0992-45e5-8413-93f202e4b0b8",
        "cursor": {
          "ref": "77a1720c-5acf-4e98-9e67-f95db6102d52",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "dbec33b4-7ec8-4ec8-baac-537dc860efb0"
        },
        "item": {
          "id": "88a32f9a-0992-45e5-8413-93f202e4b0b8",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "ccab0a36-a406-4ea5-a8f2-fc343b0df720",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aafe578-d6e0-4754-989f-d45cdcfdcfa6",
        "cursor": {
          "ref": "bd9ddf28-b353-4a06-9190-720dae5db4a8",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "dacac1b0-2576-446d-99b0-caed7168c919"
        },
        "item": {
          "id": "6aafe578-d6e0-4754-989f-d45cdcfdcfa6",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "1776c829-7e5f-4b4e-aafd-072a9de0a563",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5c47ee4-f9db-4dc7-afb6-bcf8ac3b1b90",
        "cursor": {
          "ref": "c6731a20-719e-4c81-99ec-28913355ccb0",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "69aca49c-cc93-46ca-846a-59a2b07a6d5b"
        },
        "item": {
          "id": "e5c47ee4-f9db-4dc7-afb6-bcf8ac3b1b90",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "f9301f1c-24ab-4475-91f3-cca23305c6f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "834503c3-dc83-415a-99a9-d3abe4126415",
        "cursor": {
          "ref": "777d1ad7-99e7-4a41-ae5a-800df36dc1ee",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "485c3de4-f620-4f9b-83d7-2cb2bd7dd2e5"
        },
        "item": {
          "id": "834503c3-dc83-415a-99a9-d3abe4126415",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "a0950dd3-5199-4ac0-bbb1-763e0a6ca887",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "406cfca9-984f-49a9-bff1-8a8ab4cc1de1",
        "cursor": {
          "ref": "8fc292a2-f850-4aef-97ef-267b09e5a885",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "3a9afa65-31b1-4950-aeba-d4da105f4e69"
        },
        "item": {
          "id": "406cfca9-984f-49a9-bff1-8a8ab4cc1de1",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "e76f75bd-d228-4fdc-a995-f995819ec9cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b873f12-ad03-4f0d-9610-29d56c653ab9",
        "cursor": {
          "ref": "1a372ff6-817c-4986-b37d-20ea042345fb",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "49f8e9e9-b614-4846-8b3c-f4cf2ae598d0"
        },
        "item": {
          "id": "0b873f12-ad03-4f0d-9610-29d56c653ab9",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "256e2404-02d9-4f43-b14b-ee020a476d95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9756ae92-a124-412e-97c8-ba025d495870",
        "cursor": {
          "ref": "15991514-55be-4eaa-a005-ec42f8171ffb",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "9457c912-189f-45bd-8e50-ae9eeeb2aef3"
        },
        "item": {
          "id": "9756ae92-a124-412e-97c8-ba025d495870",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "2985929c-767c-4d61-b57d-37132d49f6d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8698a59-475d-4888-867f-b1fa608757a8",
        "cursor": {
          "ref": "3992e1c2-cf69-4554-8b7c-47a18cec5e38",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "2883b16c-a171-462c-acc6-a9c0685cf62c"
        },
        "item": {
          "id": "a8698a59-475d-4888-867f-b1fa608757a8",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "25421d93-0323-42b6-9a4b-6279627eca37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7052926-4794-48b5-b5b1-8864d18a9a3c",
        "cursor": {
          "ref": "2a4bc7ad-88e7-4bbb-9bde-3ce68ec93a6f",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "c0be6dfe-b137-4c05-b44e-88c5ee6e28a9"
        },
        "item": {
          "id": "e7052926-4794-48b5-b5b1-8864d18a9a3c",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f69df9c3-5bce-4afd-8e0f-3eb1e6707f44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b470b65f-a7ea-4829-8cf2-33979a29a882",
        "cursor": {
          "ref": "fa47afa7-06f4-4a1c-b7cf-97cd95613227",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "775835ba-8f2f-42d2-ab14-da9a856fb203"
        },
        "item": {
          "id": "b470b65f-a7ea-4829-8cf2-33979a29a882",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "5634cd7a-5fb5-40dc-bc88-ca05feddaab3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d92327d-ed74-4c07-a6a5-3b6097f5252e",
        "cursor": {
          "ref": "dd6e6164-96a2-4bfa-8c08-49d5f5321557",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "0ada8576-aee6-46f3-ab77-8124514d5592"
        },
        "item": {
          "id": "9d92327d-ed74-4c07-a6a5-3b6097f5252e",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "5ee185a4-2b5d-4364-a767-30bed2599c58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ecee379-d770-4dff-8f14-ffddc8ca969c",
        "cursor": {
          "ref": "21c46d97-7d65-40f1-a4f6-766ecc14c5ee",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "50c23882-596f-4fe3-a7d7-420e503230c9"
        },
        "item": {
          "id": "6ecee379-d770-4dff-8f14-ffddc8ca969c",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "8126361b-2175-45ee-80c1-f6060f5277bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94d1f91e-2881-4bfd-8ed5-91c220f525c9",
        "cursor": {
          "ref": "05b7fe5e-2f9b-44f9-84b8-7afc3c7140dd",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "9fa1194a-2261-41e3-9f3f-92933fa4d612"
        },
        "item": {
          "id": "94d1f91e-2881-4bfd-8ed5-91c220f525c9",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "45c21790-050f-4ef8-a414-1d31d2fa4f1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4be5717-74ac-4aa0-892c-eae2575631b0",
        "cursor": {
          "ref": "a8ca9eac-f4c4-40e3-bf28-ec12ad5e2f5c",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "83666b10-0be2-43aa-9170-154acdea0ca8"
        },
        "item": {
          "id": "d4be5717-74ac-4aa0-892c-eae2575631b0",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "6f20a288-cd01-4cd3-a498-39f88a663d9b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "8a05d4eb-be7f-41fa-8a4c-db012ab295db",
        "cursor": {
          "ref": "ac406690-b79d-493c-b3ca-9ac7b25e6d31",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "3f3b141d-9f76-4c8f-bd2d-d0d110432878"
        },
        "item": {
          "id": "8a05d4eb-be7f-41fa-8a4c-db012ab295db",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "69de9d52-62de-4161-af8e-ac337fe27d8a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74823158-aad6-4003-9983-4e8f0926f039",
        "cursor": {
          "ref": "a285854b-2e89-4288-9ff4-5bf1d527b338",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "5230aa78-8147-4af6-8181-f0f1b2acff06"
        },
        "item": {
          "id": "74823158-aad6-4003-9983-4e8f0926f039",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d6af186c-91f3-4c3d-85f4-a1411fc6c3b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62821333-1859-4403-806a-b649fe365e14",
        "cursor": {
          "ref": "11529bc2-fbe0-42bc-8981-7d45ed9a465a",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "056cacba-2d72-466c-b84c-09b817edea34"
        },
        "item": {
          "id": "62821333-1859-4403-806a-b649fe365e14",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "28cd0909-9d95-4346-9542-d1c0008c1007",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ca6d368-25de-4c4b-822d-cc18020e984c",
        "cursor": {
          "ref": "7b1ed5d5-938d-4a4f-84cd-a1135142954f",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "d520f357-dca6-4a3c-a314-35f049e255a6"
        },
        "item": {
          "id": "4ca6d368-25de-4c4b-822d-cc18020e984c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "54e6a477-7412-4e6e-a3dc-a96f87ab19fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12b105de-4393-422f-8671-e651095a206f",
        "cursor": {
          "ref": "48fd267b-a427-4487-a420-d55de31c4f55",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "1640d427-a483-48cd-bfe9-41a9660691b7"
        },
        "item": {
          "id": "12b105de-4393-422f-8671-e651095a206f",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "a64f5642-a6ed-4455-af46-56ffce591db4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31011a95-9c05-4f26-ab21-4e1dfad1e7a1",
        "cursor": {
          "ref": "738d6cf6-4c75-42d6-b472-8b6a5670edf0",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "5b1486b5-2ae9-4665-8853-f974571eda79"
        },
        "item": {
          "id": "31011a95-9c05-4f26-ab21-4e1dfad1e7a1",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "46fa4b23-77a1-43ab-a816-f018daa655d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae865d6a-54a7-4273-97ea-1920cc38c2f7",
        "cursor": {
          "ref": "2640503e-0d3d-4ad3-a0dd-fcf00dbf409d",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "b628b66a-e74d-4906-87ef-f87aca172fce"
        },
        "item": {
          "id": "ae865d6a-54a7-4273-97ea-1920cc38c2f7",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d0e4feb4-f0d9-47b0-ab6b-50357e04b201",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b128783b-c115-4337-a11d-ab408baa7c1e",
        "cursor": {
          "ref": "e7ee3eab-6104-4249-b5b3-b4eca185d341",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "49416389-39e2-4261-961e-28d3365edb1d"
        },
        "item": {
          "id": "b128783b-c115-4337-a11d-ab408baa7c1e",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "9d87b222-432e-4da5-a08c-a21373d6c4a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7a1531f-2366-4d6d-97c1-f37e8042aeb4",
        "cursor": {
          "ref": "db90c1ad-216b-4b36-b84d-3568be1336c0",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "9a9125a4-75d4-43a9-9095-a32cc059ab8c"
        },
        "item": {
          "id": "d7a1531f-2366-4d6d-97c1-f37e8042aeb4",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "16b4a171-2ffb-4ec4-b4a1-e90772458b95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "144eeb6d-cab2-4573-8026-0aa7a931b722",
        "cursor": {
          "ref": "dfe9d722-5a8d-4dab-9d7c-736fe3775d69",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "60d90a92-9e34-4b93-bc3f-5d75da9ae3db"
        },
        "item": {
          "id": "144eeb6d-cab2-4573-8026-0aa7a931b722",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "6eabe33c-0ca2-43de-8b5a-759cacb4ca93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2971641c-be8e-4c38-9274-dacebf3abf2d",
        "cursor": {
          "ref": "202bc07e-15d3-4c63-9ab1-0769b23d41ec",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "0f9b04ad-a07d-41aa-9157-21c12ce8b72e"
        },
        "item": {
          "id": "2971641c-be8e-4c38-9274-dacebf3abf2d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "ad39b905-722f-4200-bd65-3e9474745d75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71b48fb6-7993-4fe2-817f-518c215502a9",
        "cursor": {
          "ref": "1b9e7250-e09f-44a4-8d00-aeccea6cde03",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "ccbad552-c922-4e8f-b4c2-9f1f8593decb"
        },
        "item": {
          "id": "71b48fb6-7993-4fe2-817f-518c215502a9",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "9a0bc8cc-6108-4a7f-a84a-30f2094249c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18619093-f541-4d72-b454-dbeb4d78e46d",
        "cursor": {
          "ref": "fe759783-1664-4bb1-8a2e-61ee3e0fd4f1",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "7d8f5744-ff6e-46f0-96a2-39005fa6872b"
        },
        "item": {
          "id": "18619093-f541-4d72-b454-dbeb4d78e46d",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "11daea81-b729-4351-8dbb-9b232316c68c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e07cee7b-355f-4180-b257-66720be91538",
        "cursor": {
          "ref": "8e2d543e-215b-4cb5-9e83-124cdafa58b0",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "f862683e-f97b-4466-b36a-5fcf97f4b775"
        },
        "item": {
          "id": "e07cee7b-355f-4180-b257-66720be91538",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "e32d9867-e4c9-471d-aca5-2577e230378e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "960f0541-ee21-41af-bb61-9801ffe9e076",
        "cursor": {
          "ref": "ffc0bda6-3b3e-4008-bc84-8b189248032d",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "4b559e9c-b0a0-4eb2-bc60-6ed37a45a0bd"
        },
        "item": {
          "id": "960f0541-ee21-41af-bb61-9801ffe9e076",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9e91d211-c37c-42bd-9d60-6a66e0e7214b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "4402cd0e-761d-4a8f-b84b-e50e31e987fd",
        "cursor": {
          "ref": "50ba906a-b905-4c8f-83b7-ef0603c7859a",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "cf087e1b-f47c-47b0-b25a-847cdc1d49e1"
        },
        "item": {
          "id": "4402cd0e-761d-4a8f-b84b-e50e31e987fd",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "4734bbb9-f15a-4d58-a221-60cd8a6c631a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff3c3c01-56b9-49b5-9133-b06f1b6efa05",
        "cursor": {
          "ref": "4c8ea6e3-dd2d-42e0-89ec-8d93a1f27dd8",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "9526d250-3e16-4cf7-a7e2-554f810f8f78"
        },
        "item": {
          "id": "ff3c3c01-56b9-49b5-9133-b06f1b6efa05",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "7dec2bd2-ecad-4925-b352-2b8a15cead1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09b7aeff-8baa-40e6-98f5-cbd2e64cff7a",
        "cursor": {
          "ref": "11008738-960e-40f6-b1de-0539b4463624",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "dfed1859-1c91-47fa-adea-1bcd24dfd27e"
        },
        "item": {
          "id": "09b7aeff-8baa-40e6-98f5-cbd2e64cff7a",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "96d12aa4-f356-463e-86ec-dd5bff358f55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "869e5d10-0ce1-4db4-973d-1424af07b182",
        "cursor": {
          "ref": "74ace87a-b619-42ef-9e85-2164a15ef6dd",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "b19579af-7ef9-480a-9ce8-85684266417e"
        },
        "item": {
          "id": "869e5d10-0ce1-4db4-973d-1424af07b182",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "77e3d39f-3a34-4d4c-8b20-1b280865f562",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef0ac403-83b1-4b1e-b4da-f0e7a78deeb7",
        "cursor": {
          "ref": "007171c3-65e9-41ac-988a-a54ff66c8dc7",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "304be677-8913-4d57-a807-86a288298720"
        },
        "item": {
          "id": "ef0ac403-83b1-4b1e-b4da-f0e7a78deeb7",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "dd0d3f85-02b7-4e2b-b4ad-673efc821e1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0e66604-a9e8-4a66-913b-76f958020113",
        "cursor": {
          "ref": "73927295-da1f-4a08-a8bd-f269e327ae8d",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "069a6589-575c-419d-896e-39855f7dd33a"
        },
        "item": {
          "id": "d0e66604-a9e8-4a66-913b-76f958020113",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "c42c34b4-77a0-4b02-99ce-83663b1be171",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbb65be6-1aa3-48dc-9018-dff674e8d820",
        "cursor": {
          "ref": "4f42475d-fe3f-4ae7-96eb-008c0b39e895",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "d5ba6ba9-527d-4b51-9730-96d459a1e85c"
        },
        "item": {
          "id": "bbb65be6-1aa3-48dc-9018-dff674e8d820",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d3131052-51bb-442a-a194-21efe0de4d34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcc74f59-e05b-459b-9e9b-493256ac59dd",
        "cursor": {
          "ref": "de2b5464-c8eb-4b8f-8876-6e0c39a98477",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "f644ecbb-0711-46b9-96a6-df724361bd70"
        },
        "item": {
          "id": "bcc74f59-e05b-459b-9e9b-493256ac59dd",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "62b20612-7fcd-4cf0-80f0-138fb093f68a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d30d7a88-980c-41d7-835f-ce32a6436987",
        "cursor": {
          "ref": "dab6d826-255f-4e51-82d6-0ae54046eb10",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "3fe4061e-2cc2-402b-9a40-cbf0b7116a8d"
        },
        "item": {
          "id": "d30d7a88-980c-41d7-835f-ce32a6436987",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "e7af84e1-6e75-4c64-9125-e95960162d4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "930db26d-33e3-44e4-92fb-d0d473a163e3",
        "cursor": {
          "ref": "e91b5c8b-91e0-4452-b931-beee098a1c9e",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "0ac82899-b4fa-4df7-83f1-9673846d48d9"
        },
        "item": {
          "id": "930db26d-33e3-44e4-92fb-d0d473a163e3",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b564cc52-9860-4707-9af5-6fd323217d0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90b834cc-e9b4-4a0a-9715-0f674e7512d7",
        "cursor": {
          "ref": "144a0885-759a-490a-b17b-5884d18347ae",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "436cf4d7-9882-49ab-8a4a-56c95fab10d2"
        },
        "item": {
          "id": "90b834cc-e9b4-4a0a-9715-0f674e7512d7",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "9f2e2f7f-597f-4ea3-9625-08259f513fb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4530663-ac24-4805-9acd-2962e1381a6c",
        "cursor": {
          "ref": "1f919fe0-09b3-48ac-a7ab-c7776e738241",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "c6d009e7-07e4-4532-a13e-db5c13a763f2"
        },
        "item": {
          "id": "c4530663-ac24-4805-9acd-2962e1381a6c",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "1a43913f-b64a-475e-8406-fb76337e991d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ab63f71-bf63-461a-85cf-a17f580ff865",
        "cursor": {
          "ref": "7837a5bd-c5b8-492c-8315-68ecf9e33678",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "af9cd6b4-8efb-4fd2-a789-5b3d2e8b3982"
        },
        "item": {
          "id": "3ab63f71-bf63-461a-85cf-a17f580ff865",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "1380da6c-96ac-4cd3-b503-4c2a5995fcfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3678227-9fe0-44bf-b20c-0737ac4dafed",
        "cursor": {
          "ref": "d80903a7-c664-4d1a-9e76-28459bde1040",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "9caa8745-6379-4fa3-946f-c2f137a69d3a"
        },
        "item": {
          "id": "c3678227-9fe0-44bf-b20c-0737ac4dafed",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "35abe794-8845-42ed-9818-df41e72c5090",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2c15be7-bc08-4894-98e2-2e3d525f7594",
        "cursor": {
          "ref": "77a3f376-3ed1-47fa-9c5f-58117f7509f3",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "398cb05d-bf81-4ba2-8cb5-8383aef851ec"
        },
        "item": {
          "id": "e2c15be7-bc08-4894-98e2-2e3d525f7594",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "0fd50f00-757a-4122-a2b0-4a36b56eba99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daaf2f33-5293-4451-86eb-32349d24cbd0",
        "cursor": {
          "ref": "4a341b62-6970-4e57-8558-8f9a8b5022e6",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "394b61bd-2baf-4793-bac0-bc4cf1b2ff65"
        },
        "item": {
          "id": "daaf2f33-5293-4451-86eb-32349d24cbd0",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "cc2794fa-497b-4e2f-8efe-b6f294994496",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aa29e71-6214-46b1-b89e-e7a4dcae8bae",
        "cursor": {
          "ref": "7187bb5c-da26-4ac2-90f7-3f4dbce1db1c",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "719f1fb9-4d59-463e-84f7-176f8fa8ef9f"
        },
        "item": {
          "id": "8aa29e71-6214-46b1-b89e-e7a4dcae8bae",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ed8cc641-c8f4-4150-9ebd-8b32c2eb236a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76f8700f-943a-48ba-b421-f805a56be96a",
        "cursor": {
          "ref": "0a7c35ae-b7ed-49b8-ac9d-b30cb07e948d",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "1fc6a569-bc3b-47a3-8d21-562efb963d4f"
        },
        "item": {
          "id": "76f8700f-943a-48ba-b421-f805a56be96a",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "5c7d8261-76de-459b-8b45-c872ee3d86f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f358b11-c6b3-473c-9eb0-8403a849ba92",
        "cursor": {
          "ref": "60554d28-5269-40ab-b66d-914c3d892dd4",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "0a75df69-a7cb-4e66-8897-dd10addcd39b"
        },
        "item": {
          "id": "9f358b11-c6b3-473c-9eb0-8403a849ba92",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "bf3b27c6-1458-4cde-8e50-3b1858c3f9b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1cdb70c-14fd-4480-8f6e-94dd97f43e61",
        "cursor": {
          "ref": "55c54a99-0b9e-4edd-93fc-922c0b79e29c",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "2369f5e9-3d92-41f8-a5e0-bb1ec686e7c7"
        },
        "item": {
          "id": "d1cdb70c-14fd-4480-8f6e-94dd97f43e61",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "4dd07e5a-f2f9-4797-b3e1-29862be20156",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a045671d-3e9c-4df1-adea-b180f47e7f0b",
        "cursor": {
          "ref": "8e73d335-a975-474e-b4d8-3747cda88017",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "e56970e4-32dc-4095-b96d-43831f7549f7"
        },
        "item": {
          "id": "a045671d-3e9c-4df1-adea-b180f47e7f0b",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "730d5cab-32ea-47bc-be6e-01cfa0fb2efd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a19f08b7-45cf-4a0e-a8d1-8a5fccd74a2e",
        "cursor": {
          "ref": "1e3b822f-c263-477c-aa59-a693419cf785",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "06f1301b-c63a-43d3-bb8e-bad297000524"
        },
        "item": {
          "id": "a19f08b7-45cf-4a0e-a8d1-8a5fccd74a2e",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "9dd7605b-de7d-4843-8d6f-f9e21ea323e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aafd3d16-bf66-4dab-9b1f-e513a82b1508",
        "cursor": {
          "ref": "f9004db7-2c25-44a5-ad74-b8ad37caca68",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "8def6bcc-4656-475d-bd02-d5d54eabeb74"
        },
        "item": {
          "id": "aafd3d16-bf66-4dab-9b1f-e513a82b1508",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "a609615f-8e9a-445b-a987-afe49e10e1ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbeeb678-3243-41f8-b653-965b412fbb86",
        "cursor": {
          "ref": "97af07e8-382d-48c2-83b8-4c51666ba887",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "6585a941-3cd5-407c-a678-ec41bc80dd27"
        },
        "item": {
          "id": "dbeeb678-3243-41f8-b653-965b412fbb86",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f166a7d3-b5a2-4322-8f42-e8a7848f46aa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "139269a3-6800-4336-8741-33281a682b43",
        "cursor": {
          "ref": "f7dd588e-94b2-4ff1-82e4-5f28e4254ac1",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "ce8c9b66-92e0-495a-856a-22f582d0a333"
        },
        "item": {
          "id": "139269a3-6800-4336-8741-33281a682b43",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "62a3b836-9b95-4ba5-b52b-6eda5fbfc510",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fed942c-9875-4e1f-95d8-910352c9c1e6",
        "cursor": {
          "ref": "2f19189b-82b9-4c9d-b114-dc42a3b42de4",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "64f574e2-ebf6-4772-aeb1-4beb6652f380"
        },
        "item": {
          "id": "9fed942c-9875-4e1f-95d8-910352c9c1e6",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "99acaa8e-d194-4af3-9dd6-f970294d43ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1a1f2d0-3960-4b0b-9d64-47abd5e4d4c3",
        "cursor": {
          "ref": "9d15bfef-c3bd-4e09-a860-e856199f4225",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "e7c0c3ae-d299-4b55-81f5-294a31c23d16"
        },
        "item": {
          "id": "f1a1f2d0-3960-4b0b-9d64-47abd5e4d4c3",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "78ded93f-6957-489f-acbd-3677cc53e9ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "963a92eb-f0e4-4251-b10e-55b782015e35",
        "cursor": {
          "ref": "89df14ac-31db-415d-b244-b4881c860e74",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "63c8a8fd-2381-4481-b0e8-a1e033e4fb32"
        },
        "item": {
          "id": "963a92eb-f0e4-4251-b10e-55b782015e35",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "14075adc-5a44-4a43-bfd0-6e00b4d4d9c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb4b0444-4c5e-4bb0-acf4-17becfddb8e1",
        "cursor": {
          "ref": "1e8fad26-7c77-43e7-a8c0-b6b53e96b6a3",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "1af5a95f-3edb-4cfb-bcb3-11270a97b498"
        },
        "item": {
          "id": "fb4b0444-4c5e-4bb0-acf4-17becfddb8e1",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "47a34554-ec06-41ed-a5a1-0f1610504bcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a5e6c0c-df1c-440b-94f2-50d6bada9a54",
        "cursor": {
          "ref": "f8204fff-3d79-4b20-a11a-0ad51b6963ed",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "a6209c1a-4262-49d5-b7fe-fe7e86fec5a2"
        },
        "item": {
          "id": "4a5e6c0c-df1c-440b-94f2-50d6bada9a54",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "974801fd-a80b-48ad-9cbe-ecc6ffb50f12",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "43580ef8-52dc-49ea-98dc-313e80fd7139",
        "cursor": {
          "ref": "ee8d67e8-3156-4044-bed7-0f3373d287d2",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "a58c259d-791e-4c78-894a-b907f4e122e2"
        },
        "item": {
          "id": "43580ef8-52dc-49ea-98dc-313e80fd7139",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "9c42da99-8cb9-4c42-954f-1682b1f2d4a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "827668b2-1134-4d04-a2da-6732f045b977",
        "cursor": {
          "ref": "5adbfe7c-7696-4e68-bfb1-18cf72768e73",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "2a38eb90-c95e-4748-94c2-b39b38e89726"
        },
        "item": {
          "id": "827668b2-1134-4d04-a2da-6732f045b977",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "56194f90-5751-48a9-a082-f2f5a6e4142d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64d73792-ebf1-4605-a622-e67a2ba1d395",
        "cursor": {
          "ref": "e987b108-8780-4078-9141-7f1e4d870642",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "a825a6f7-51cb-44d2-a728-322f7b300dcb"
        },
        "item": {
          "id": "64d73792-ebf1-4605-a622-e67a2ba1d395",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "4639b972-680a-4c6d-b83b-5222183c76bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37a63f97-5829-4623-bd1e-e0d0c14e9ea7",
        "cursor": {
          "ref": "d534a9be-6c8f-4adb-95e5-44567f7aa4c6",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "9212ec75-e3d2-45d3-82c5-d13f15bc051f"
        },
        "item": {
          "id": "37a63f97-5829-4623-bd1e-e0d0c14e9ea7",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "2fbdd8d8-eaa9-4d24-9eb5-b78a9d93367d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12540437-f1d8-4f68-bfb2-0b2ce7b64ce0",
        "cursor": {
          "ref": "0d3d2134-9e1a-465d-b467-4a1e3e8e7cce",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "7d55992e-c55a-47d8-b134-3c50d1254af2"
        },
        "item": {
          "id": "12540437-f1d8-4f68-bfb2-0b2ce7b64ce0",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "25f5d0a6-cc16-4328-b4b5-736eaa074026",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3850166-fa37-4262-a73d-304b53ff71e1",
        "cursor": {
          "ref": "be83743f-4b70-438a-bce2-e9ce249ff07c",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "91a0a49f-a77a-41a2-9158-6a7a9ed55b00"
        },
        "item": {
          "id": "a3850166-fa37-4262-a73d-304b53ff71e1",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "ccdb75e5-92fe-4780-8bb5-c32ce2dad393",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab6c0559-68fc-456a-9e97-2f699c9b4b26",
        "cursor": {
          "ref": "32f41b72-31bb-438f-84f6-3ecfa4220d9c",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "cd1a6096-8bc8-4587-a5a8-e3685cd56cbd"
        },
        "item": {
          "id": "ab6c0559-68fc-456a-9e97-2f699c9b4b26",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "bdaea9cd-8f36-41e3-8ce3-dd3bfd449413",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0fe1686-dd9d-4948-b93a-9d524dc12281",
        "cursor": {
          "ref": "949e5d05-e6d1-4012-87b5-c6cbf4b6a7dc",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "49965470-3c02-4707-81a4-ec92a5c8c205"
        },
        "item": {
          "id": "b0fe1686-dd9d-4948-b93a-9d524dc12281",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "6e0c67e6-96f9-4bf3-8f38-c813c8790890",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db2d4d21-342b-4e26-8998-240e62946e23",
        "cursor": {
          "ref": "4144065b-ea60-4897-a2b0-ae3c9a1ea50f",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "a2a18ffb-a716-49ae-bbf7-348a17dbee54"
        },
        "item": {
          "id": "db2d4d21-342b-4e26-8998-240e62946e23",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "025a7ed7-3f69-4c54-a528-96967691a892",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ab41d8c-0675-4687-8e78-4be68144eddf",
        "cursor": {
          "ref": "e570835a-c46a-42b4-b5e2-33c01dbf1cc6",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "e6c07c24-6045-4ae6-afdc-9d113620573f"
        },
        "item": {
          "id": "4ab41d8c-0675-4687-8e78-4be68144eddf",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "f492d1ef-d9bb-43a7-8ad4-b4d55aa42180",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e95beac7-7152-44d1-b0d2-da6c583a60c5",
        "cursor": {
          "ref": "0a4fb035-cb62-4a2b-993f-5a03c771787b",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "b1709ef2-0512-4b00-8740-a696fcd3bac9"
        },
        "item": {
          "id": "e95beac7-7152-44d1-b0d2-da6c583a60c5",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "1897b970-3fd2-47c0-bae0-75cf0ff42a5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d57b9e4e-7edf-4f99-bbca-84d81cfa10af",
        "cursor": {
          "ref": "a228953e-6860-466d-8ca0-7549cd1e3883",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "d6d8e3ea-1077-437d-a6f1-063256b0657c"
        },
        "item": {
          "id": "d57b9e4e-7edf-4f99-bbca-84d81cfa10af",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "e7858ae9-92cf-4e1c-8404-6406aa74791b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "893db169-31bc-4489-a004-4ab03b7ca904",
        "cursor": {
          "ref": "5b3ffa63-00c9-48f8-9515-a6fa68bbcc86",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "77ddf052-8d85-4666-9081-98ca6d030cb2"
        },
        "item": {
          "id": "893db169-31bc-4489-a004-4ab03b7ca904",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "4828ea5b-4db8-4b8c-be48-1103176d616f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85557914-d613-4731-9709-5e223750986d",
        "cursor": {
          "ref": "6e8aac39-266b-4be0-a609-0fad360ad8a9",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "48a2089a-f936-499a-a2d1-bc86eb978d86"
        },
        "item": {
          "id": "85557914-d613-4731-9709-5e223750986d",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "94f437be-edff-4c24-9c11-89afa21c7555",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de51444e-9e17-4ae5-8d58-5ab604f070a8",
        "cursor": {
          "ref": "ed82fcfc-02f0-40df-b22f-3fe3dba1c46b",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "e138cf17-1748-4a08-9047-8eba69ad1b40"
        },
        "item": {
          "id": "de51444e-9e17-4ae5-8d58-5ab604f070a8",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "2ddca0d7-c199-4b80-81eb-2294b01de214",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54dd07e2-d423-44d1-8def-0ea2c131dfc4",
        "cursor": {
          "ref": "b3da531c-4a68-474b-804d-e49fd3e8bc52",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "ae8469c0-e372-421c-a98d-802e25001e0e"
        },
        "item": {
          "id": "54dd07e2-d423-44d1-8def-0ea2c131dfc4",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "abd9fb33-2eba-4e3c-8450-334c227bd4ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "444d2197-bbc9-4438-b7fb-c62e0eaed62f",
        "cursor": {
          "ref": "f6bbc3d4-4322-4cb3-9e22-decff3bb1bde",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "5d75b9ef-0b48-4362-aede-56a339833c87"
        },
        "item": {
          "id": "444d2197-bbc9-4438-b7fb-c62e0eaed62f",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "20217f6c-374d-49ce-9073-ca51ba5b56ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c062b5e2-d3b3-46d3-9555-638686f67695",
        "cursor": {
          "ref": "2f8da116-e145-4ed0-9e42-8dd9b66f9c35",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "69788c1b-f7ca-4676-8ced-823e1e34cc05"
        },
        "item": {
          "id": "c062b5e2-d3b3-46d3-9555-638686f67695",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "86edb6a3-f5af-44ad-b089-891bf32be8f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "000c954c-8e90-411e-9665-2020b9255404",
        "cursor": {
          "ref": "4cd01e86-6bad-4936-8a29-abc791cc46e3",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "8fb28e9d-e9f8-4072-89dc-a73bb5948881"
        },
        "item": {
          "id": "000c954c-8e90-411e-9665-2020b9255404",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "135ed109-2af7-483c-9963-5bbd8ba9c80c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cfaa4e1-4115-4d6b-987a-d4b4c510b158",
        "cursor": {
          "ref": "6a941676-fa81-46cf-8ac1-4fe3dca319fb",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "bcfdb50f-a3e6-4921-a7b1-59537a44bc76"
        },
        "item": {
          "id": "3cfaa4e1-4115-4d6b-987a-d4b4c510b158",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "76914090-9844-4951-ade5-4585f373d823",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dddd1545-128a-4555-a237-ffa2881a2633",
        "cursor": {
          "ref": "001175fe-22ab-4624-aad8-dfd9e2bdcd51",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "c1e18952-826a-4b39-8fb5-fa2c6568f4b1"
        },
        "item": {
          "id": "dddd1545-128a-4555-a237-ffa2881a2633",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "17438520-e6e5-421d-8bd4-c209c57e396a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "721be6d6-0108-4aa2-8648-754b6ef12dfa",
        "cursor": {
          "ref": "64a1b12d-591a-406d-a1ea-9febbb0cd9ee",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "a0608412-8152-4d8a-9f09-252aff015402"
        },
        "item": {
          "id": "721be6d6-0108-4aa2-8648-754b6ef12dfa",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "9a6753af-b4ad-4940-a182-aed49bcb286e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "921de1df-1833-49c8-a26f-5a885f4e2290",
        "cursor": {
          "ref": "a77eb2a8-405c-47ae-87c0-46c0c1ed006c",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "455dd5b8-dd8f-4ca8-bd4e-122275169703"
        },
        "item": {
          "id": "921de1df-1833-49c8-a26f-5a885f4e2290",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "66233231-71fe-48bc-abeb-e2c9e7150f9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f358539a-80ac-4cfb-91e7-039182057b1a",
        "cursor": {
          "ref": "c19142e8-c782-40b9-893b-b97b84640916",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "9d8a58ec-cfdd-4764-b60d-342a23ead296"
        },
        "item": {
          "id": "f358539a-80ac-4cfb-91e7-039182057b1a",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "904984c8-1723-45fa-9556-b90b79a3b042",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43fd078d-7e54-47ba-81cb-d05231b92e86",
        "cursor": {
          "ref": "f7f19d0f-6dad-4f8b-a1b9-10a695ae380c",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "97863d16-9eb1-4b3b-94c1-5689f8e69d74"
        },
        "item": {
          "id": "43fd078d-7e54-47ba-81cb-d05231b92e86",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "d9a252c9-aaee-4a1d-b2b2-b65672268bbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "599ddcb1-c0e7-4845-b0e8-5188baf910ba",
        "cursor": {
          "ref": "bccf5710-6985-4c2d-b5b7-bbfb7d5366c6",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "8a88852a-2a37-400d-b027-010e7e979ca3"
        },
        "item": {
          "id": "599ddcb1-c0e7-4845-b0e8-5188baf910ba",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "295b07d1-0a81-4400-83fe-e564d60ce06f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21c04f5c-7b08-4bad-ab8c-9afda3fb3106",
        "cursor": {
          "ref": "23bcbaa1-bbde-4a0f-9503-10891f3462b5",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "d888240a-8589-4a89-9895-252618307726"
        },
        "item": {
          "id": "21c04f5c-7b08-4bad-ab8c-9afda3fb3106",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "12430ff8-7a91-4269-87e4-566c665847c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dffe6546-0a07-4316-9fcd-2277b2d03216",
        "cursor": {
          "ref": "8137b20a-10ea-4b13-9375-2b8141868192",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "9110130b-d8ef-4246-b55f-e23b72d84ae9"
        },
        "item": {
          "id": "dffe6546-0a07-4316-9fcd-2277b2d03216",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "d408152b-83dc-4e00-ac03-e03a5b59877c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5919e273-63c1-4b98-864b-c3542f4b5bb5",
        "cursor": {
          "ref": "ac74cc10-72df-4783-aa7e-dc9de43ee0c2",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "e772c933-08cc-44c5-be69-4e67acd9e764"
        },
        "item": {
          "id": "5919e273-63c1-4b98-864b-c3542f4b5bb5",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "bcd96b35-1bac-44ee-a48d-58da981eab39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f0fa15e-a2b5-4ada-b593-d07c2b4a471d",
        "cursor": {
          "ref": "fb3ee760-0961-4e03-a92f-9fbb4bc07d1d",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "2bd9a533-18df-431d-b712-7d311a658507"
        },
        "item": {
          "id": "4f0fa15e-a2b5-4ada-b593-d07c2b4a471d",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "37d54fc2-bbba-4bcd-904b-1cc5fccf1f0d",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "b1c1f43c-d61e-4507-a4c7-79d753d43a7f",
        "cursor": {
          "ref": "481a4001-9c1c-452b-a332-cda8e6745b26",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "75db32f4-1451-4291-94ab-99a3a6309750"
        },
        "item": {
          "id": "b1c1f43c-d61e-4507-a4c7-79d753d43a7f",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "e8fbccbf-5cc7-4da1-894b-8cadd535e298",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "9ae88118-205e-47f0-8ab9-37eebf9950dd",
        "cursor": {
          "ref": "7784d099-9669-47ff-aef5-b3cd64aab069",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "35827abe-8507-428f-90e7-99c00e81418e"
        },
        "item": {
          "id": "9ae88118-205e-47f0-8ab9-37eebf9950dd",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "3a36cb27-62da-4c92-80db-b450deb2cd94",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "32768b1f-d303-4967-acc1-0c59ffa20038",
        "cursor": {
          "ref": "2a843338-52f5-405f-b419-ae7f21c83c66",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "16bb99bd-1ebd-4823-821f-cd863d09767e"
        },
        "item": {
          "id": "32768b1f-d303-4967-acc1-0c59ffa20038",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "2fa74881-4861-4007-a0d9-78cca2e1a3b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d92a577a-4103-4dfa-af83-47b16f6b6b12",
        "cursor": {
          "ref": "f93b898e-c79b-4332-ad1e-7b7b0b6948a9",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "f095f994-de70-4bcc-a681-74ba015e5166"
        },
        "item": {
          "id": "d92a577a-4103-4dfa-af83-47b16f6b6b12",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "ea340b50-0926-4b7c-a1ba-4fd8b90420f1",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "0f0a5648-c6e5-4227-b5ff-953ab6318c38",
        "cursor": {
          "ref": "f2b66fba-9e7c-4120-8797-689472485e20",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "5264fc59-5441-405d-992e-2b3ae6551a78"
        },
        "item": {
          "id": "0f0a5648-c6e5-4227-b5ff-953ab6318c38",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "acb2077f-a3f8-408a-b9f8-bbdd03c90f96",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "0252091b-a633-441f-b8d1-94f115397aad",
        "cursor": {
          "ref": "a54129be-f669-48f2-8255-e2a9de86744d",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "61e3e847-7bb9-4c6a-9204-ce46833637d7"
        },
        "item": {
          "id": "0252091b-a633-441f-b8d1-94f115397aad",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "be3860fd-1b3e-45fe-879c-795cf037abaa",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "ec3cf0dc-bfda-4da8-afb8-fbcdf339d114",
        "cursor": {
          "ref": "8336448e-7eb4-4df8-909b-9ac762ce4480",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "7d843802-7c0c-44d4-932d-ff6130c1eef7"
        },
        "item": {
          "id": "ec3cf0dc-bfda-4da8-afb8-fbcdf339d114",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "4293e2d3-82ff-48dd-8610-921a190e184b",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "f93511fc-3f1e-49af-9754-460db6305ed6",
        "cursor": {
          "ref": "bee0f6a4-bc81-4d76-ab6e-0859827f87e4",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "b6543867-a106-484b-905b-a3ab97e1cad3"
        },
        "item": {
          "id": "f93511fc-3f1e-49af-9754-460db6305ed6",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "d282052e-1be1-4c9a-a690-7d34ddac3913",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "0b515095-c3e4-4338-819e-e09478dc3a3a",
        "cursor": {
          "ref": "94e4adc8-574b-433c-982d-cbb34f5d9edc",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "59c63589-42a8-4e9d-9d37-f7ee881eb296"
        },
        "item": {
          "id": "0b515095-c3e4-4338-819e-e09478dc3a3a",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "2a46fc79-f5f5-4b46-93e8-2560232a6cae",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "c2070eec-112d-451d-a093-4004333ed938",
        "cursor": {
          "ref": "040ab7ff-4869-4b15-bf1e-662df7e7190c",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "2e0d61e4-d0dd-4c6d-aa52-09de0ae0c4c5"
        },
        "item": {
          "id": "c2070eec-112d-451d-a093-4004333ed938",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "325a1488-b925-4d44-8de8-8d31c73fe89d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caf20ac1-1e66-4f6b-a777-c8088e1e674e",
        "cursor": {
          "ref": "2b210338-4e65-4d29-b21a-fb632e5f753c",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "c52799bf-3c24-4f75-a668-069e396e9476"
        },
        "item": {
          "id": "caf20ac1-1e66-4f6b-a777-c8088e1e674e",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "c38dcb53-674a-40e1-8431-b2f2ceee56fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3717a0d-af26-4e99-a28f-7734b056b5ce",
        "cursor": {
          "ref": "61288824-7a52-4f24-9671-5b949ea596df",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "1d71daf6-b675-415e-97e0-cd1ff6389b4c"
        },
        "item": {
          "id": "b3717a0d-af26-4e99-a28f-7734b056b5ce",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "53a5fef7-6b92-4cd7-8074-fb889d735fdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e210a01-f711-42d0-ae97-9cf813dfb659",
        "cursor": {
          "ref": "dab06484-0ea6-4e6f-b10b-4dc462a1a5b2",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "1485a2a3-845c-4a3e-b9cb-3aed5cdeff09"
        },
        "item": {
          "id": "4e210a01-f711-42d0-ae97-9cf813dfb659",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "2a4ee3e2-3981-45d1-9cb2-a912a6509947",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56426901-4b1a-4e1a-9ed0-197808170cc3",
        "cursor": {
          "ref": "912e0994-b18c-49c9-a606-5259448915a4",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "9b7e69ed-fd58-4792-840c-dd6680c5cd38"
        },
        "item": {
          "id": "56426901-4b1a-4e1a-9ed0-197808170cc3",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "9faaba79-d45e-465a-bf17-72640bd7fd39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb7ab0c6-79b0-41b0-8a68-2d2e3c5a80ca",
        "cursor": {
          "ref": "ac74c458-ce45-482f-8d24-dc3f175db360",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "9b90b47a-f022-4d21-bad9-e37f3e69e0ae"
        },
        "item": {
          "id": "fb7ab0c6-79b0-41b0-8a68-2d2e3c5a80ca",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "1ea4ddbe-48c0-49f3-94d7-33252732d28d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93281353-8fbe-4dc0-9a71-2ae6ecda91b4",
        "cursor": {
          "ref": "59c99dc6-44bc-424d-8dec-46bcf5e9dc3c",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "1eda80d7-b247-4423-918c-6ee21af62fb2"
        },
        "item": {
          "id": "93281353-8fbe-4dc0-9a71-2ae6ecda91b4",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "e55de5e0-b13e-4a7d-a6f1-581f70df213b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e76aef5b-5805-4c54-b970-58f39246423d",
        "cursor": {
          "ref": "c8e5f48b-bb29-4025-8cdb-8847a844a261",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "69e842f7-8663-4e83-9daf-53295951103e"
        },
        "item": {
          "id": "e76aef5b-5805-4c54-b970-58f39246423d",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "84d81efe-0002-4500-98d5-0d25d865b698",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58bc02cc-026d-421c-b9e8-40c258b22d6c",
        "cursor": {
          "ref": "f90cea08-8340-4bf1-9f29-b584a4e5d3c5",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "273eaa7f-96e7-4a3c-ada0-ff51e5850b84"
        },
        "item": {
          "id": "58bc02cc-026d-421c-b9e8-40c258b22d6c",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "ddc56adc-55ea-4e4c-bcc4-4d09324d4f6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79048626-53b6-46ba-8954-d591ad3cb0a9",
        "cursor": {
          "ref": "6020a73f-8587-444a-b8d1-8c9a87e36eec",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "9f25ad65-a39c-4557-a5ac-cd2405f6dc23"
        },
        "item": {
          "id": "79048626-53b6-46ba-8954-d591ad3cb0a9",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "dfd584a9-c781-4447-b802-f7f0e73ba880",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ae35b01-9218-4edd-877b-15d03d076e53",
        "cursor": {
          "ref": "fd2c052c-3d31-4658-a966-e4f7614d7f17",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "29504df7-ee57-47c2-8ab4-23d57d461570"
        },
        "item": {
          "id": "1ae35b01-9218-4edd-877b-15d03d076e53",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "17ad2025-c3e5-4e59-9a42-d45bbd73fc07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8471b3ae-16ab-42d0-9326-46e143f5c7ed",
        "cursor": {
          "ref": "ab0c6e93-250f-42dd-b33a-55b287d1f466",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "a75928f0-7e96-4e73-b215-f00e07984072"
        },
        "item": {
          "id": "8471b3ae-16ab-42d0-9326-46e143f5c7ed",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "4e29f2d8-ee83-435b-81d7-87dde70d8723",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c16cc82f-9753-4d4e-a922-9fbbfc14c294",
        "cursor": {
          "ref": "a57ffd80-0b07-4c61-aad1-52dca9467506",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "1f532e8b-ead1-4ecd-8b19-d68b3ede5c80"
        },
        "item": {
          "id": "c16cc82f-9753-4d4e-a922-9fbbfc14c294",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "67d33104-f7d2-4de2-95df-2107f2b33dda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cca30997-7393-4cea-b909-6e46177dbd6f",
        "cursor": {
          "ref": "e64c8e70-f1d7-4e28-bc46-7d6b56448055",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "cc3b90a9-5659-4e8e-9873-df38ef251c36"
        },
        "item": {
          "id": "cca30997-7393-4cea-b909-6e46177dbd6f",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "92764c2c-7f33-431c-991d-ce0b0d7c29a0",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "fa9cd234-5b97-4f54-8b7f-2847ddf34c8c",
        "cursor": {
          "ref": "daa931f9-cdb1-4b1c-9ff6-c54335b2bf33",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "4aff0f97-8aa8-4ae9-9840-71b928c0054f"
        },
        "item": {
          "id": "fa9cd234-5b97-4f54-8b7f-2847ddf34c8c",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "b0561afd-8341-4417-add1-0e3f819b3bc8",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "49b32063-2261-4468-9fbb-6e3da71617c8",
        "cursor": {
          "ref": "c642cfa3-8778-4275-9b8c-c8e791e6cb68",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "22a70c20-15a7-49bb-b2b5-cf7530bef133"
        },
        "item": {
          "id": "49b32063-2261-4468-9fbb-6e3da71617c8",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "c9a6ce23-9418-48e8-8aa4-ae01f7621e95",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "2f374761-a4a1-4597-b5e8-cd1e77dde4dd",
        "cursor": {
          "ref": "52c22bcb-9b66-4700-8de0-18a85210ce43",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "cce08517-edd3-4e83-b5e2-6a1265e66621"
        },
        "item": {
          "id": "2f374761-a4a1-4597-b5e8-cd1e77dde4dd",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "83d66bdd-4116-405a-95bc-841cb9e9c8a0",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "8c1c0e08-76c3-4e13-a580-042c91862b48",
        "cursor": {
          "ref": "132056f0-be0e-49c6-b1c4-0d6e219477d2",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "bde6dd4d-0801-447c-9f85-2d6c66a8fe9c"
        },
        "item": {
          "id": "8c1c0e08-76c3-4e13-a580-042c91862b48",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "5388b22a-9212-47ce-bd59-79888cc24c20",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "98deb5e5-def3-4e51-beea-51cf820ac531",
        "cursor": {
          "ref": "594bf8fa-2cf9-4951-859e-1ed130734b10",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "0245cb21-1170-4a06-b7fc-c7754fd6a290"
        },
        "item": {
          "id": "98deb5e5-def3-4e51-beea-51cf820ac531",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "7982c6fc-1541-42ae-a013-4fe2b7b335d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5df1f103-a617-442a-9485-ac54cf464c7f",
        "cursor": {
          "ref": "9dc9d7ee-fecf-4c08-8702-c3cdf8414a58",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "d1918e28-69b0-480d-a222-ad20b72110cc"
        },
        "item": {
          "id": "5df1f103-a617-442a-9485-ac54cf464c7f",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "e6ceff93-9eaa-41c6-b568-f634fb8ee290",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15a9ca6d-2e0e-4ab0-a864-22a8f4e7795c",
        "cursor": {
          "ref": "3847440b-21c8-4845-8615-da459e0add07",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "e7786dd2-b98b-449f-8d1b-17138e46c047"
        },
        "item": {
          "id": "15a9ca6d-2e0e-4ab0-a864-22a8f4e7795c",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "29172b33-df17-4f36-b69e-26ac2be50d3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0c5d950-50af-4dd2-bb62-e60684cc9072",
        "cursor": {
          "ref": "6fe8fa57-7201-4227-98c1-7f35087a0cb4",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "826b8888-a779-4a56-85ec-b61a730bacdb"
        },
        "item": {
          "id": "b0c5d950-50af-4dd2-bb62-e60684cc9072",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "02d9f152-2297-44e9-9bec-51035730669d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3339ea30-46ee-4653-bcf3-0f7e9e66f310",
        "cursor": {
          "ref": "76b70db4-3d4a-4840-9995-ce6a670267a0",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "d0776dae-a54e-4450-b682-fb2fcf02382a"
        },
        "item": {
          "id": "3339ea30-46ee-4653-bcf3-0f7e9e66f310",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "9b87e1e8-4c3e-4e8c-b2f5-93d8f850550a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa2aa86c-41fe-419b-9c04-fe9d9aa1868e",
        "cursor": {
          "ref": "f8e1ae19-cfb9-4087-ad16-362428343fda",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "562999c3-563e-4627-b868-72088cda994c"
        },
        "item": {
          "id": "fa2aa86c-41fe-419b-9c04-fe9d9aa1868e",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "2241cadc-1fe5-4084-86e9-cd9668daaa7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "058c3bb6-468c-4438-925b-e62e24393c5b",
        "cursor": {
          "ref": "fefcfcb3-f4a3-47fb-9d43-c0256e467640",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "98da970c-4eaa-41eb-afe8-41f99d17cfd9"
        },
        "item": {
          "id": "058c3bb6-468c-4438-925b-e62e24393c5b",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "8f860ed1-8018-409e-bc56-a882604e20e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79b1d08a-6ba3-4b31-a0f1-5b9c54b609a7",
        "cursor": {
          "ref": "50e3d9ed-dbb4-4026-a12a-d5bfa17217d4",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "21482066-d31b-4b6d-8807-33c62db4c2b8"
        },
        "item": {
          "id": "79b1d08a-6ba3-4b31-a0f1-5b9c54b609a7",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "712a88c2-54a4-4238-bee5-da56764ac462",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ac3b05e-fd26-41f7-94b7-328f926df664",
        "cursor": {
          "ref": "7f117ab5-ee90-45fe-b33d-202a908cab78",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "cb6ab88b-30e6-43ec-8981-fa6265cf9770"
        },
        "item": {
          "id": "4ac3b05e-fd26-41f7-94b7-328f926df664",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "22a16b63-0700-4f0b-a6b1-bba5d6f7c5a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faa7d034-73e8-43e6-a819-277b069a8e02",
        "cursor": {
          "ref": "60187b14-3fd6-4b0e-90dc-d52ede1cdc65",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "d9d9eae7-1caa-4aaf-9f75-289d676b5f55"
        },
        "item": {
          "id": "faa7d034-73e8-43e6-a819-277b069a8e02",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "656d9f3e-607d-4c2a-8a84-d25f752a688d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ec2d1de-934f-4b6c-8cea-36ef56b4d948",
        "cursor": {
          "ref": "ad151d87-7aed-4c74-820e-df854258dc82",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "18e48f83-a0c9-4e35-92b3-4ed01911a5c3"
        },
        "item": {
          "id": "7ec2d1de-934f-4b6c-8cea-36ef56b4d948",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "0c1ac88d-4cce-4fa8-a060-dcda5072442d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db61220b-e1d7-42dd-b77f-138c3c0eac4e",
        "cursor": {
          "ref": "88d604cd-dde7-4dc0-95ee-e25c4b00efdd",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "b717b820-2d05-4163-8c23-1bf9a3021b92"
        },
        "item": {
          "id": "db61220b-e1d7-42dd-b77f-138c3c0eac4e",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "c72827e0-b551-4bb6-937b-cec84f2ca048",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6466d252-3775-4141-a8ba-0816eb0802cc",
        "cursor": {
          "ref": "2c36b3e0-665e-4abd-9490-c7dba46e4708",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "955a5fc4-15e0-4570-8664-096acaea70b8"
        },
        "item": {
          "id": "6466d252-3775-4141-a8ba-0816eb0802cc",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "54ea2c6b-2312-40db-b800-fe77247502aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c59fe52-c937-48f9-92d0-3aed0e6ae741",
        "cursor": {
          "ref": "6ee5774e-f196-43c4-a03d-334a23b048c8",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "c29b88d7-db33-4a09-9fe3-dcbebd73cd6a"
        },
        "item": {
          "id": "7c59fe52-c937-48f9-92d0-3aed0e6ae741",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "2c9cdbcd-6d4d-483f-b180-a84fcd0ab2b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d0d17e9-ecc8-4a47-b7c4-ba3387d759a3",
        "cursor": {
          "ref": "3469b2db-0536-449c-9687-2a7d7bbb6fa8",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "5c200d8e-7598-486e-a52d-e062ee15579a"
        },
        "item": {
          "id": "6d0d17e9-ecc8-4a47-b7c4-ba3387d759a3",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "bea3bc41-b04b-4c6f-9002-c25a33e17625",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8da7ceed-3ceb-481b-8d54-7f3933c19636",
        "cursor": {
          "ref": "ac3b5edd-d03b-4f4b-b3b5-509eb420c51f",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "88d853ad-f6e0-456d-be2a-9dee4005a9bb"
        },
        "item": {
          "id": "8da7ceed-3ceb-481b-8d54-7f3933c19636",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "3a6028af-6474-4029-b9a1-53a6f7c914cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c375e9e1-b91a-40e6-ae20-d6d9f3f32a6e",
        "cursor": {
          "ref": "1dbdb1bc-2753-4223-beaa-bb403b6d9ca0",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "1d526e75-1580-457c-b076-0596eb9907d7"
        },
        "item": {
          "id": "c375e9e1-b91a-40e6-ae20-d6d9f3f32a6e",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "3a908af9-8ae7-48ed-8141-2788ec789989",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "655641b2-0544-47be-8293-7ecb7c91c75e",
        "cursor": {
          "ref": "3a135962-7fc7-43e3-9467-86a15f2f79b5",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "b1bab228-059d-46d3-b24e-4276ac53bcac"
        },
        "item": {
          "id": "655641b2-0544-47be-8293-7ecb7c91c75e",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "6da5b4d3-aa8f-465d-9db4-7ac226db4c2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2b0871a-8851-4092-9d16-d1a975a2624c",
        "cursor": {
          "ref": "56cab34d-5f98-487a-95dd-5ab385312902",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "678f22df-6b3f-4afe-8959-9497c5a62132"
        },
        "item": {
          "id": "d2b0871a-8851-4092-9d16-d1a975a2624c",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "d0fd8252-7e11-4682-b5b4-70d5df054297",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b36dbb00-f77a-4d3e-a4e3-6ca48e903c23",
        "cursor": {
          "ref": "f7dc441f-593e-40b6-a475-af1ec95532fe",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "e0dc7f1c-0c5f-43a9-89d5-25a29dcdedff"
        },
        "item": {
          "id": "b36dbb00-f77a-4d3e-a4e3-6ca48e903c23",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "3273200e-750a-46da-94df-5f3f646b3045",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "225207ab-2a50-4a89-b98d-406e3af06480",
        "cursor": {
          "ref": "95604663-238e-4260-bae5-b7882fb93af6",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "4f11a7d3-e884-4f47-a12d-b9ea2fbc1d9b"
        },
        "item": {
          "id": "225207ab-2a50-4a89-b98d-406e3af06480",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "49f1a54b-94fb-4fcf-95a0-a9893e4ddb29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4713351d-0419-450f-856b-945d392a4b07",
        "cursor": {
          "ref": "a74e053b-3b90-4ace-8d0b-bdc589144397",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "d7b832e4-2bd1-4e05-9d34-f2166072eeb0"
        },
        "item": {
          "id": "4713351d-0419-450f-856b-945d392a4b07",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "0688b7f2-1b28-4dbb-a4d8-b8f8a071bc33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cc28f1b-60eb-4a1c-93e2-9e377715ac41",
        "cursor": {
          "ref": "ab75c539-15a6-480b-9000-e3ecc8415210",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "823a0b86-dabe-4744-b272-306f614b4d8a"
        },
        "item": {
          "id": "9cc28f1b-60eb-4a1c-93e2-9e377715ac41",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "ec76fbbe-9225-438b-9f73-b33c372741f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ed58462-d574-416e-8b96-a2a14e19b014",
        "cursor": {
          "ref": "ec7d0a64-b8e6-4d77-960d-12ed9e986236",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "4c439061-a49d-4ac4-966b-4c6adf79e5a8"
        },
        "item": {
          "id": "7ed58462-d574-416e-8b96-a2a14e19b014",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "2b781820-4584-4cec-8e56-e18651181b98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4797d16f-d49b-41a5-8eea-801bffa843b6",
        "cursor": {
          "ref": "78c22d30-c205-4799-a2ce-8bf0093b8c1b",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "4492611a-cbeb-446f-a2ff-6b2502fb29cc"
        },
        "item": {
          "id": "4797d16f-d49b-41a5-8eea-801bffa843b6",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "0e503373-6d94-461a-976d-53c2fb0ba55c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ccc0b3d-39d0-4964-98e0-87970d78f24e",
        "cursor": {
          "ref": "dd8bf785-068c-4664-86d6-497000140cc9",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "40475fec-8ecd-472e-9dcd-83b515880b2f"
        },
        "item": {
          "id": "0ccc0b3d-39d0-4964-98e0-87970d78f24e",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "15d608de-6186-4b5f-828a-025bc80eb0fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "322b0658-5969-4a95-ac5c-f5b52fe7a2ce",
        "cursor": {
          "ref": "e7d435c6-547c-45b7-a9fb-275585c74282",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "fec671b8-7d10-4a2d-9ea5-932c0b474d3b"
        },
        "item": {
          "id": "322b0658-5969-4a95-ac5c-f5b52fe7a2ce",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "40a68e7f-a03b-4972-8d1a-303c8bcc4a94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d9525aa-dc4f-4c30-85d5-60ddd3b489eb",
        "cursor": {
          "ref": "7c6cf988-4577-419f-8de2-72db09d85b1d",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "b887c6e8-7896-456a-9dea-935e08310871"
        },
        "item": {
          "id": "5d9525aa-dc4f-4c30-85d5-60ddd3b489eb",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "4aaa6082-dd44-4788-b496-9d70c646acc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "545e7327-eb35-4553-9222-7bce10b40133",
        "cursor": {
          "ref": "e8ac8ee2-97d7-4cde-8ec2-5dabfb022840",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "90ccfd99-fd22-4f5e-a1a2-de86e045eb41"
        },
        "item": {
          "id": "545e7327-eb35-4553-9222-7bce10b40133",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "af0076f6-dca9-43f1-a873-ba9aee148de4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d99bf575-65f0-408c-a584-0e286c7e318c",
        "cursor": {
          "ref": "81f34e8a-e349-4f1d-b9db-b60700c23fd4",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "7419c240-fc96-4e6b-bec0-692ffa8af7c2"
        },
        "item": {
          "id": "d99bf575-65f0-408c-a584-0e286c7e318c",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "6792f6de-1f0f-468e-9773-5303d8b66606",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f72a6ca-b103-42a5-a43e-eb99cdbc8f84",
        "cursor": {
          "ref": "dfaf1b33-188e-4136-acba-aa062652243a",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "9db346cb-0ff9-45b5-8c6c-09714b1ddd67"
        },
        "item": {
          "id": "4f72a6ca-b103-42a5-a43e-eb99cdbc8f84",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "3b27f427-e2d0-4589-bc41-cebcefa005ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e83bec0-32c9-4e7f-8ffd-7616eac6ea29",
        "cursor": {
          "ref": "4274738c-d3d8-4f13-84b6-f18c17a9de28",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "d70e279f-7834-4c85-99f8-240a9fef4ef1"
        },
        "item": {
          "id": "1e83bec0-32c9-4e7f-8ffd-7616eac6ea29",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "65b85200-d7a5-402b-83f0-cb12bdd900ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36d98b6b-a293-453e-98ed-5d1b0f25d8be",
        "cursor": {
          "ref": "5c318291-74ec-4ef4-8458-1634e17eb115",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "29df21bc-d486-481f-b7ae-0e80ceaf0f40"
        },
        "item": {
          "id": "36d98b6b-a293-453e-98ed-5d1b0f25d8be",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "6ba9246c-b383-4cec-80b8-e40a51a393e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6497b62-f622-4ee3-9713-871f65e996c6",
        "cursor": {
          "ref": "b4b185b3-2ee1-4371-8b7b-0dc24f393059",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "f132edd0-ef50-458a-933f-1a6f9ae1bcc1"
        },
        "item": {
          "id": "c6497b62-f622-4ee3-9713-871f65e996c6",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "8b8fa4e5-ee0f-444b-99e7-ef5a79400dd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e84c1e27-1bbe-4cef-b0d4-d542e1be96d6",
        "cursor": {
          "ref": "61968b80-64da-43d7-8bb0-377a9089f16c",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "77a34eea-df82-419e-98b2-dd55610fabe7"
        },
        "item": {
          "id": "e84c1e27-1bbe-4cef-b0d4-d542e1be96d6",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "9317a058-897d-46c1-8f09-f5234b3d0812",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a59313f0-6ee6-473d-a3cf-c136ef5b4987",
        "cursor": {
          "ref": "269c5dff-1277-41c4-875b-727295a77537",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "4693ff88-191d-4819-9843-a954a331422a"
        },
        "item": {
          "id": "a59313f0-6ee6-473d-a3cf-c136ef5b4987",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "ef92b47e-5d01-474b-a23e-4656549aec16",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "f9eb875a-3f27-4b83-a07e-df61660fb9a3",
        "cursor": {
          "ref": "bb93d9fa-3156-4c62-99d7-17f3ab0eee73",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "9dbe5621-fa73-47fd-a1b4-6b6f2d41f920"
        },
        "item": {
          "id": "f9eb875a-3f27-4b83-a07e-df61660fb9a3",
          "name": "credentials_verify"
        },
        "response": {
          "id": "85514030-4848-415e-9350-e26c227d0740",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "10f188b1-ee75-4121-be27-29946b4b6c1b",
        "cursor": {
          "ref": "e2410736-e988-4b18-b54f-f6f7cbdfcd4e",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "b5c76c71-efc7-459f-bf07-fcaac7093f13"
        },
        "item": {
          "id": "10f188b1-ee75-4121-be27-29946b4b6c1b",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "c3ec90df-5da7-404f-b48f-67d8abfe839d",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "37fe243d-2c40-4ff8-bfc3-67aab52bef5a",
        "cursor": {
          "ref": "a0a731f4-96c0-47b2-b626-0bb435bc42e1",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "7b1711d9-fcc9-443a-9f3e-020466358c17"
        },
        "item": {
          "id": "37fe243d-2c40-4ff8-bfc3-67aab52bef5a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "82eefc1c-400c-4b2c-9aa7-37bc02d203c9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37fe243d-2c40-4ff8-bfc3-67aab52bef5a",
        "cursor": {
          "ref": "a0a731f4-96c0-47b2-b626-0bb435bc42e1",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "7b1711d9-fcc9-443a-9f3e-020466358c17"
        },
        "item": {
          "id": "37fe243d-2c40-4ff8-bfc3-67aab52bef5a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "82eefc1c-400c-4b2c-9aa7-37bc02d203c9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58081345-62ea-47af-b3d7-d7d05c54e47b",
        "cursor": {
          "ref": "fbd40eb3-ebb3-4c15-8c1a-f801a1ebfd61",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "ca689748-8222-46e1-ac7c-cba652fb717b"
        },
        "item": {
          "id": "58081345-62ea-47af-b3d7-d7d05c54e47b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "7cd38c86-8daf-4025-9bd6-ee140c587c2e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd015538-303b-40f3-b2dc-30c080bccf10",
        "cursor": {
          "ref": "025eaf3f-050e-4d7e-9447-472b4acadf8d",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "c760472d-b53a-47ca-bffa-95bc8874ffac"
        },
        "item": {
          "id": "dd015538-303b-40f3-b2dc-30c080bccf10",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "b693189c-ea2a-4704-8db5-d6ff831f15a3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}