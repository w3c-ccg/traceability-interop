{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "9ad51f29-edbb-4c5b-b3ea-8c0eb4246c89",
        "name": "Clear Cache",
        "item": [
          {
            "id": "4b1c92dd-b9db-42c3-8631-bbf0fb4598d1",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c4ec5082-33fd-4929-bf1b-8ce4a82c2bc7",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "1f40910a-758c-4b06-a6ce-114e76cb08e4"
                }
              }
            ]
          },
          {
            "id": "19a7db6f-1ca5-4200-895d-b071f966bac3",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2a2de344-10f8-4d07-bcdc-13a138b6f16f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c048860e-af71-494c-9d4d-e1c33d4400e2"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "daae524e-d96c-4c9b-81bc-d423514752ac",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "0fe77981-076d-4fae-bb33-bb56357e65f0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "caf98f26-7a4f-4e44-8013-26584082aa5b",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f22c7e6d-ccfd-4e76-a158-7e07efabe626",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4e1358d3-c7fd-4a6d-9ef3-56922006d362"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "28353630-7ffd-4b0d-9d21-81d2b25ddd47",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cd3f22f9-0ca4-4b9e-9e05-5d469b32dd88"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6aa9cf99-85a3-4430-bb19-84080e577f4a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b165a75b-05df-4c66-946d-12791fa9946b"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8033fa2c-7b73-4672-819a-dc91a6bad497",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "aafc616b-e91c-4bfd-bcc5-8ec37f825fbd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1652d13f-50af-4ea5-9458-ff0db16960dd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "de2651aa-def2-4a05-b7a4-d2476fbc0bbd"
            }
          }
        ]
      },
      {
        "id": "f77a9772-065b-4ae8-9e41-20b9b999951d",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "434db864-0552-405a-9660-e50db12f8683",
            "name": "Negative Testing",
            "item": [
              {
                "id": "26c1daca-29e5-4deb-a360-4ef668d1e338",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "84101c80-a838-4981-a4c4-c65a3554bbd5",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a52b773-c44e-4f05-9b20-8e86119ed529",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c42a8430-f3b0-4bb2-9dd7-50563e0bf2fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1235c365-41d2-4b33-92e4-ff36f31be70a",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b5823d8-9169-4356-a914-08e1858c3a9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2cd0281e-2dc5-410e-baf6-51305a96a09e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06fd49a7-2cd3-4e16-8707-ae72ec3db1cb",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a8cdc1c-32be-440e-aed2-d3c9054465d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8fc72da8-3964-4b8b-be1f-d130ad8d5c29"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a78f246e-521b-4a6f-a3e0-9ce7896e4f7c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "febbd01f-0718-42da-9852-ec92bc3c7cea",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "641751f1-b8c4-40c0-ac51-69758de3ab7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "96d7dd59-12ef-4630-8add-6015cd42bab1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1de82c03-92d5-4c33-a96a-187eaac14212",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acbfbf08-3a17-4ca8-bd5e-7ee2b571aeca"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "58da9340-3eff-4cb6-b268-7dac67f26877",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6846165b-925c-4cf7-ae31-4d9aac56e703",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d52c504e-b40f-48b3-a5d4-467e834f4258",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "60064d23-f2ba-4e76-bec2-9b2bce3656e2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fef11361-3b67-4720-90e1-ea03101c9d57",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "aefd4dc0-beb4-49ee-9444-7d0ef2ec0a9d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b0988f04-a8c2-4995-b8fa-adccf3f58571",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a2557321-1508-4104-af83-1cf1fe2e3a9b"
            }
          }
        ]
      },
      {
        "id": "5039f120-19e3-44f8-b098-8bdf7d194980",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "60310c66-6cac-4e39-9d9d-ca136d756bfe",
            "name": "Negative Testing",
            "item": [
              {
                "id": "897e07e6-fb83-449b-a024-c863e1e3d09b",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "e8816390-0ca4-45db-abc7-164d52ada83d",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca8e5a84-8cbc-4a02-a210-7ef3b407f73c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a612f96-5648-44e3-9b07-5119326222d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31fb44b8-6e6c-401c-bcd9-69d9c8e44b0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6b70982b-de87-4cb6-ac5e-eda777439c5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efe90ccc-c6ae-4755-a80e-d8906acdf910",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0da6c7f1-8aa8-4571-a2ff-9b0a57bb1521",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fb59947-bc59-4e4b-abbe-57fb6e8b85f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba87349a-0d7d-4610-a7e3-0fdfc6196f59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2140e27e-97c9-4d89-bf0e-a2a461e8a3e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c13d94c-1c68-431c-a9f7-51a2158cb721",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9b4a5a3-98a0-4925-8d98-e0a8054070b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb442872-986a-4138-a14d-85e88884e6a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "661a5dc9-cd9b-4825-8743-9393d1822974",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c14e6cc-e50a-4d08-acdd-5c8aa83947a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5215528-517f-4424-b8dd-23f399839983",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99cf27db-d45a-4c13-9f30-09d2384fc30f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79e7ff35-9b1d-45fd-84ac-c6042e80bba8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cd462fa-5490-4d05-b747-f27a57b0672c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1fcc7d72-c9a7-443d-a06f-62e91685fe88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "090c8a65-43bc-4118-b067-249c77e87678",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47d63911-c59d-4a97-b541-28eb84c34c82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b2cc09e-cbd7-45a7-8cf3-5dff3c8e51a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c073ea52-17ca-42e4-9fda-5fbb79464b8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1b85616c-36c9-472c-aba4-ffab338b73f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b145353-8ced-407a-94f0-7dc18db003e5",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46f31d0f-bc17-41f4-93e2-158a3502ab49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30e60500-f818-427d-838c-d8c14b5e8205"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2759b426-e00e-41bb-ae1f-c4f6027161a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c01b89b1-85bf-4703-8dad-dae211c81b4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1513e58c-2b07-4188-b255-a58cdadf4548",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7774e76f-8970-458e-8ea1-1e6c42f5fb86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e754e7f7-3824-4c55-a1a4-6b98d0822fed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ec53e14-7fc6-47f6-bd4e-24dd1d7ac9bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "99b92160-fa19-4625-9419-e0ebb3a4456f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5f80d59-f5b4-46f8-94ea-9b07381890a1",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb417882-edbb-45e7-9f64-4e73e44ed6db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74cebd60-75bc-4fdf-8043-5fe870ce5301"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "662fdaf0-918c-410f-978d-8d3955a589fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bd0a1bbf-2015-444a-b3aa-288a22667298"
                        }
                      }
                    ]
                  },
                  {
                    "id": "813e291f-c56b-4767-81ff-b4c1ba563313",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b64160e8-d909-4085-9d82-6da9e8fd8d15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbd9fc98-e961-4fb0-b018-3b4d0fe2831a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d76538d2-1766-4f1a-9667-093dfeddec94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e1c79d71-a6d6-4e18-9b7a-559ad5ddd61d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "742cb9c7-957d-4a9e-9855-cbff0132a928",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ad95c0d-494b-4731-b8e9-e55d5dc68586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "486c56ca-ac7f-4f7d-b687-c6a33fb14559"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c23f56a9-f0f1-4b97-8933-c4695e73c7ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a091d1ad-5f93-4616-8183-170101a65772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c47e171-5233-4eac-938b-3f94dc1f5789",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3886d619-dab2-48e3-81bd-c3f85ce3bd1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6e45f18-ae21-4f9d-ab37-cb23c0bc1b39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "255499c4-6ed7-4234-bae4-c1125a9587b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "749eb833-e67e-49a0-aed2-bf1e82e470f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eabcd21a-1635-4963-89b4-a36bef249ed6",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da76b2f9-49fc-4d98-a4d8-b93e4bb1301a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7119c78-e528-417c-a718-3c8e0d0ccf40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40c22a53-3268-4f68-b238-bb4bbdc6ffdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "85cd4ab5-14b7-4c24-8b59-eae3b03caccb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90551eb2-86fb-4abf-be5f-3744ace2b09b",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d6015db-be0b-4138-835d-f11f6a968587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f7a6cb1-54eb-4c8a-8bc4-88e8c47d63f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e356a268-b7c6-48d9-a44f-c6a2e1b7ab2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7b94badd-cfab-4ab8-ab00-59be62138bd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "213f3d2c-8d4d-458e-a8c6-1a54cc9fc6fd",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28329dc8-e79a-49af-bcf4-8779c3ef7f2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a9bf7ac-a55b-46cf-b8bf-e02838101269"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29677e1c-733d-4c2e-a357-649f0cad1a8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a3cc697c-ff12-440c-a6ca-593c84e33500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f30bf58-ab9d-4edd-ab57-85c09f908e1b",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e309a1b-d4e9-4445-8108-8a0d292310d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "472363d6-2a44-4456-ab3a-4901673ca9a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b504cae-992d-491b-9b18-3a92af6ba6c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f86c4e60-c5a0-40b6-a8d0-446c25d3374a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db5b077f-aa83-4425-96e0-ab3066d46f97",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23a43a27-f049-4fab-b9d3-90848907731f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12744839-a4f5-452f-98a2-cf808b209293"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd3e2dd7-78c3-44eb-8af5-7afdb4f767d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a130fbcc-abf6-402b-b455-bff1a008271e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1da00abd-3385-4033-be94-e7e6e018cde3",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9ebf03c-86aa-46d4-b26e-def98648a9c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "781063fd-671d-4501-9bdf-c3d6ba6f25a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de684471-79aa-401e-8124-d78bbfd05092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "38b17718-3f15-4c94-8c5d-75895eb06673"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05e02f13-7eac-4c9f-b328-f85207c4f458",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd99825e-6273-40ec-80eb-00d4648ec125",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4aab78c2-18fe-49dd-a368-eb140646b101"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08f6d5aa-cbfc-410d-8b85-116395e931e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "45003ed1-447c-4aac-8b69-dba6c5666ec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e44e1a4f-96c9-43ae-b01d-2a8aea2620de",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85c72fbc-4cae-403a-abdf-da0df43af694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db12b2a9-7423-465d-a9ea-18acdfe738ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b43efbfe-c31a-4f1c-ab93-4396100de2a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "117c0bec-2d66-41c1-96cc-d02605c709bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0c3992c-f073-46fb-b727-6309ee38b728",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02fb9608-34bd-4ac1-a8fd-82334fef3e4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a85d8fd2-f628-4c93-9977-07753bebebd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39a54985-d074-41d0-aba5-332f7074b472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9cf5af9-0b1a-4488-9846-2241620cb9a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81dd76a9-fd23-4146-bdca-cfcd5849c323",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8379737e-1a1d-4ebe-93f4-5096750a5ad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60e07ce8-25fe-42f5-bd9b-d4972b8eeeed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c5ba866-42e2-48d1-8cb3-321bc26c36e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8e17e8f-c164-4d30-aba3-966ea2441d46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "241439c8-7957-4b9f-9749-23706e0ba0d5",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4721204e-6c9f-467c-808e-a08a04264367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2098eb3a-a3c0-4c33-ac2b-3377bcaa175d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e78be40a-47c1-44b7-ac14-7045c89c10a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9416f876-72cd-409e-8e5c-a30468057fc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc4d1cf9-7574-4a92-ac7d-240cefc5f8e8",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1a2f89a-0b16-454d-a70f-6f18a183c8b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3131f062-c166-447a-ba8c-e65c8e89ba29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e34ca152-91b8-422d-87d6-0dddc3f9ee22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "56e77b87-a5ea-4792-a53b-5b9c27c4eb24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4feb62f5-20e5-4c36-ade8-2e05039e6a24",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a39fc87-c29e-400a-b1e8-665ba175b98d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97242de0-d772-42ab-a45f-981205a3d8ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0693ba9c-d4bd-4298-b53c-26b14542f278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7895eb0-da74-4721-b5c1-cb08ecc55f34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da0ecaf7-0604-4b91-b525-560375e3475b",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb61469a-8358-4915-859c-4cc9aeb77749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73d8bac1-4e52-4e57-bc87-c77675aa71e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f82dd9f8-211e-4e33-8ac8-8122747a550d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "965831b2-84b2-4f6c-b866-bd9b1a546a5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73d3d3c1-a480-4612-b824-700903596286",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b894e9c3-7d82-4032-a863-b46f39c40288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b94f5b2-6296-4892-84f1-3e0694f210b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b4ffda7-20d0-4bd9-9e71-be228f0dba49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e15c78ab-2ae2-4987-bed9-feb993a3dd90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5670ee61-d5ac-4ebe-b1d0-5fe1806e0d07",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ebd01f8-ea82-4395-85d8-e41c7b4ccc02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb9ccb20-6727-4877-94a5-9dcbea4e6769"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb5da161-0dfb-4f43-b1e6-6de94160ceba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "81d35a81-464f-416f-8ab2-e0937f9898c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81515612-735b-477b-8f94-1bf95ea5af35",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6ad2d66-b04f-4fd9-9cde-3845a47c891d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffd66785-7d26-4466-b867-a859f89ab1e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb5931a1-c792-40d7-8ec4-21332a41c956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0efcf90a-3196-4b44-8363-1e149b18a207"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fd08b08-17f1-4cfc-9bbb-af31c34e2539",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1bf52df-d4fe-470d-a753-7ad29b93964f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8a78e26-28c2-418a-b928-73f70d67ac94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b622ef4-6a62-467b-99a0-3f72b27fc3e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0be98f1-e48b-4b3b-a891-e49777d3ca76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c10475d-fcc9-404d-bfef-55cf28ca5872",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1f77d8e-2605-4c61-b773-d50de85859a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "079086c3-0ee4-4cbb-837a-a24f95964ece"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89be9879-c025-44b2-8bcb-c6868db82ccb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf85189d-e807-45d4-b335-874d8fe16bfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "125c1605-d958-4f92-9ed8-15669bb05108",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f16bffaa-cc2b-43dd-82e8-befe2920260f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dde44352-88a7-44ba-b81f-6b863e78d517"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5663ea22-6d79-4b5d-bc0a-d1532600f392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "40738b02-c30c-4657-aa78-6e3c0ec3cf88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13eb690e-34a7-4bea-aebe-aead3cadb5a5",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2da6bbab-82f1-4cce-81a0-a9e9535de865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea37c672-3d76-4aa2-b3f5-5b33de3c2691"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d12ca787-bce2-48d6-8532-02e37918150f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5060db61-1153-47ad-8257-2dd860e328d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c275903-23c1-41ff-a5e3-6b7b3c77e4bf",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce4b95d3-82dd-48de-a759-95e6cd08f697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7b163c9-31d0-4cf1-846a-75ebf91bff91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31640987-9c61-4739-93d2-0bc28861b470",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "32d98f79-e6be-4717-8091-01659c1f1d47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77f1a638-b165-4fda-b61c-2d6e97590f42",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "605c6df4-c7e9-4e31-bf1a-471efd1b5d24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76cac74e-d9d5-48bf-a155-105fed676b21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8db6c4e-859b-4f53-8245-ca67d780dce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "798e2433-01dc-4d30-8d71-8fcad96a22c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c0f3d71-4ce2-489d-a8c2-66485030f2eb",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c71f5933-381f-4a2d-aad8-8ed433988fa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1c64607-cf9e-4bf7-b439-b31f38bd2610"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a2fdffc-67dc-48a0-af4c-228b887ec583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "5ac1f59d-d53d-4782-9020-089716c2f98d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1e8d8d9-797d-48da-8da0-a0abcb94cd41",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76e095ea-e344-4ad3-91c1-85400471eb1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "520b07b4-cd3f-49d3-ac30-5819075a56a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c425c9d6-20bf-40c3-90ff-a5ceff111f1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f98b74b6-d972-4e33-892f-7af32a9cab5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b46a4478-0436-4204-b1eb-8fde15ba3d03",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5018adc-aabc-47ac-8df4-b1e19335422e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28f0d038-32bd-4205-a950-2b2d22158b07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26103fb3-3289-4451-ad88-7156b5d99bf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9260a7d2-13b1-423d-a400-ca5dca084a17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cf53ca7-93dd-44f5-b954-f4f944fd2088",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cd0ce67-a1b4-4b29-80bb-16f231ccdfa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fab7d461-9c60-4035-888f-91d77d4e342c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2ce6f9c-2b9c-4fae-af59-9f468e24f9b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f462731b-e50a-4a57-99ae-e0e7120875f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73fed5c5-747c-4b69-9229-84f9f048548a",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd95d66b-0323-4eb5-b85c-38fc469adaaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21d8d76c-d3d6-40af-b55f-f22a8a15e342"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "833512b2-bf67-4370-ada4-7605fccdfcac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "649c1756-c16c-4830-aaf4-ce144a81b713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9adb661-d6d5-4f9d-a900-09e20ec3642e",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1747ed6d-a316-4187-a370-a58586969f2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2656226f-9f26-4846-87d8-7fa352cf86ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86702712-7fdb-424a-abff-340dc3aaff0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a1834426-8bb0-47a7-a3d3-68f7adaa14a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "058bf8d0-1853-481b-a29f-7e00a99a87fc",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf32c3f0-ff74-438e-8fe9-d56d1bbd1534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b9e9b05-0a99-4665-9bea-7175d0173812"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3904fee8-6262-4c8d-b83b-6d35ab9539d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f25719c4-67ef-4170-82c7-b8597cdb4899"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e86b0743-4e46-412f-bede-6e06fb364cb3",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c57c2a2-79df-4310-a396-604e7584c9b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b93f6441-798f-4c23-ae5f-142c985d80da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d73a2ef-e154-4f22-958f-39b980b34e2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "130b9c34-77f3-42f6-a101-f9ee0e1c5aa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "777eeb97-2334-4a7d-b41b-59cdaba78380",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "526281ec-87c6-41df-8912-347807ae3126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffe26516-e218-47c0-ba25-94f7f0fab274"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c64fbe8e-47aa-4be8-8fd9-c3ca37a9ed37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "68b007c5-4dc1-4dcf-9849-dae53f4769ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31f9aaa7-ea38-492f-828e-9ec399b966b8",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb609aed-9841-4751-9aa2-57aec4234a4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "849664ff-80d2-4717-bd29-8fb4249a0497"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75c2abda-70f2-45bb-9768-d75f5bd873a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b4869c8-b626-451e-9642-770180d920a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "829fad93-3d8f-4ebc-ab3f-7ddcfe8684c7",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3c7e7ae-6e88-4720-bdf0-ceb7885e5384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a868f686-8310-418d-84ca-e75d6ca5f0b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cf70d18-a6f6-4862-b124-297ee8f4a25e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5aef1c5-996c-4e48-b393-a85104235a03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a07e34ff-fcd0-4e16-b5cf-9d3986932d38",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0fb4e64-4347-42c5-bdf3-f5645a67abee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07e00427-f992-44d8-b308-c3c3b953890e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00ea4995-3bfc-4cc9-a9e3-ccc00a292001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "95c95f1d-73dd-40fe-be9e-e2ffdeb06cc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ac7714d-00a4-4c69-8362-f32db4cb4d72",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9caf20f5-56f8-4e7f-8f5b-939397782e00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "133bf856-24e5-4477-8627-50b961b0ca10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3015defa-a0c7-4cff-b890-4ffc86d3c04f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "326f1b37-d696-4c66-8e32-8531c7f29577"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1189648-19c1-4166-99e5-336f43e26a05",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "874e79f7-92be-4210-996c-e05e4955763c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "376b7735-bdf0-4b39-876c-eaf05a9b480a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1b3a41a-2e42-49ed-b79d-281db18f52d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "64dcaf38-e6b7-45e8-9d28-895dc6875fb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18f28557-22d1-4bcf-b779-79b07dfc324f",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db9e7455-674b-4e2a-848f-2ab6e072de5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d827b67-df9c-4bfc-b700-ab0918324036"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca3b04ad-a996-4f66-adf0-7a9d289cf132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8cf19398-7322-4e18-af74-4394f56d85bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3826a529-f815-46c1-a0be-fc2445c53ba6",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72f9cd3f-0ba1-448d-9c48-c71c45e5f36a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5046e196-4df0-4cb2-be05-ed75768e3562"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1507707-0ff8-4f71-8426-a2197e942c91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5c8c461e-c4ac-4120-a3ff-714256163061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6e5261f-c3b6-424c-8313-66669395d3c7",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91dc4e2a-ba6c-47e8-85b2-15e984130031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0d247f4-96ba-44ae-9744-e78d3d7c2b33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eff23467-82d1-422a-a2b4-b34662ddb6e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "6642c4fc-fa86-469a-bab0-8eff0326b18e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "354a01e6-e7d6-4198-9add-20e8beb1afbc",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e8aec28-5718-4ac7-89cf-3448da55fce2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c6377b2-e15a-41ee-9756-0fabb86af0a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "340337a5-b60b-405b-a12e-d6ccf22f6aa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd3646b6-86c2-460d-b9d3-52b8af34187a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d35d750-4bc6-4f0d-a36a-76782c814932",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7d9fe33-1cb1-4511-a1f7-3d0e52590054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c236dcfc-8bf6-41b0-882a-ad4f7cc94eb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4caee536-1184-4c9a-9a5d-f3b325414990",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a03a298d-d7f3-47eb-8f5d-9be5f0c6411e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfbc023f-f568-4b28-95ba-7b3d961c5758",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46c09128-e45d-483e-b7a5-15c43e2b2e2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d960d1df-186f-4de6-93e2-0c6eaeaa350e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "292c5477-d4da-4fd3-b625-87fb6d8d5165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "53994676-dbdf-4b12-9d10-f9e93d9c5132"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f5b7d77-71fc-4cc7-8996-9b4ceeaaf94e",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f391d242-b31a-44aa-aa8c-498596dc8cc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7ff6140-2e05-408a-aa55-81102529ade0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "506bacea-34f8-421a-aa77-65937f6100a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d81e9ad-0be9-49c2-99a5-dfdd35a8bf70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ad570f0-4d0d-40c8-8b7d-312d15b1473b",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "001291e1-0cc5-43e8-a4e9-864b48664886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80d4d934-acd6-47cd-a864-58a1bfeebb25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19c0c9c5-93fe-473f-8486-ae79a001b4b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "4acd08cd-f4ca-4bab-a70d-e37676b4bdf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1909b736-dd6c-4a83-8990-0962029ff4ba",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a1e6294-d5cd-458f-b23c-6f1809987b13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46e60224-edf4-44a5-b823-778d43f6e4e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89a773b5-bfeb-4f06-abf7-91975c68aa00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c2d8414-574f-4e35-a1c8-d73e0d4a4e5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc31c864-d5e2-4572-b653-a9c2e22f2158",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28d40c90-28a2-48ef-8d5a-538efeb8144b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6ae798b-71fd-4129-9f68-b7d5616c76a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebb58239-c256-480a-8492-00d3b95efee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c29988d3-5e12-4826-8511-68356d02f793"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81ba2e40-d513-4008-8209-c88d975b5c71",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16f7bd36-6fe4-420c-940b-35686b50285d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fa36c78-5ac9-475d-a1d1-0cc34dbc1d66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6b41858-d2d3-40cf-aa55-769ac76a8b20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0ab1843d-e6b1-46b6-8a68-e0c429b151ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2703b05e-ee5e-4127-acb5-1fb8eca01d2b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72ef94b4-2918-4e0b-80d1-569f02b15cb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4fe84ee-a136-45ac-9213-65e1d78897ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb3cfc0d-90ee-4532-a20b-bcff30ff29ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ae56472e-465e-47ea-8211-819f8fe703b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51682cc8-88c0-4192-8a93-c4324ca8f99c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a85e331a-186b-4573-86d7-490f8a688b46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "480f0e98-5975-4a8c-808f-9e86eda70dd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b460be8-fb11-42a0-bfad-17c9b6087711",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f812a185-9327-4799-9763-2da4e7c04f9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c9eefd0-f741-4d25-baa8-1d36fba07d68",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c05e4afc-2199-47ad-9e03-c74bea3588f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ee64b59-6c30-4255-ae2c-25287e7b2fbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "051d17bc-b88c-46f8-b015-16e30f6a5bd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce873d25-4e6f-4789-910b-eef8ad1a8835"
                        }
                      }
                    ]
                  },
                  {
                    "id": "621cbedb-e2d0-430b-89d8-aa338ac22c7f",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56141f5e-b3fd-4e94-9f6a-457cd554e834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36b6d0a6-98ce-4a24-9dd2-a13104158ef2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8c883d5-f3f9-4b6a-a8db-ee0ce13048c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a126a4ca-af54-4db9-a78d-5833dbd73b3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4252ea59-a2cb-4a0e-a0b0-1891de0931ef",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "336bd974-caab-4066-adba-b31584b65931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "704431fd-97fd-4a4f-ae2a-821f31ec6b4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c156ebc2-1612-41a4-a796-15217d273cb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e719fc9-a09c-47b9-a45f-26d3e8bd7061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afdd68e9-012e-4d42-83ba-88bcc3201641",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c167bb7d-9339-450d-b04e-e39610c0ab9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92b5bd3a-6cf0-4e26-9f97-509a3c4c36fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7d90706-a436-4b26-a4ee-e2981dc0b716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a5f7357-5e27-4be6-8307-0eb570523f44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "384974b5-3e21-436e-9766-8e9fa8481da7",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59acc323-b1c9-4958-8359-22bc7c7c4ff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "918be64b-443c-4c8a-b348-8ad59e72ee5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6d35e2c-462b-4dad-8b86-de9026cb3652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce32ca9d-e696-4be5-8fb0-38c402090a09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7b438df-e3a1-44b1-89f5-66df4c63bfc0",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8756f0e3-3ab9-4ee7-b1f3-9a6fbf046033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd34e62b-6df8-43e7-b6c6-f63470f2ea39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0cb9e49-2d17-473b-ab3e-4b2345ede9aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3fa2ed7d-9c91-4a6a-aaf9-dfed76510fee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a55c4cd-f2a8-4a0f-bbca-8f7d94066c25",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dc6f559-f244-43b2-8fa4-9d633bfad918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa755072-611f-4b63-b07c-1dbe43c71570"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5e2806a-9f68-4edc-83d4-77571922e19c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b420e11-f866-4fef-836a-0aa9d95085e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "789fb9da-aea7-4d8c-8dd4-a9eedb15ca7d",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "217f6411-861d-4b28-ab4e-835eb892e4e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af8577e0-c156-4f9b-b014-cd3f00474449"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f02c60a2-9354-4b1e-bf1f-2aef22d17948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0a87fde-8ab7-4706-8cb5-32f68198b369"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36cc415c-24e3-44d1-bbf2-b801d3eaa2c1",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e1ac9d6-2284-4b93-af0d-2d0186722f13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d247aa7-bb66-422a-8ed6-8f97350b49eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c4eb83a-9918-497e-a069-87a156624bbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "00a98a03-6625-4d3a-9239-aeff444309a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c72d3698-1ad9-4681-8ba3-d14e5383e5a5",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55502645-cc73-4e02-81b9-c410d4807e0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d61e137-8810-46df-b807-7fd3e81f4a26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9bdcd3d-af4d-4b4f-9477-02f707fec465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1fe8d685-5000-438a-a048-5ba4e95c01ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4200ddf1-234b-4674-b456-04ac0e3378e6",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f69430f7-b1e1-4a26-9329-d0248949f4f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cf5b2d8-2959-413b-86b0-a46ce88bb18e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcca5173-a55e-4cd1-a14f-34f2db6f2fc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "42d0e7e5-924c-48f2-b16f-a931f16d27f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b306da4-33c5-47c9-9fe0-88df0276e8cb",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a8b98ca-20ac-4989-b0c8-d8b0d1c7ec54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c06a31a4-6384-4a1d-9ed2-dd2818bb4b85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1054aa6e-254e-4498-8c87-01d931de0f81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "788b67c6-2aa1-4e93-979d-c6a807108c5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56985f35-d1ac-4723-b7f6-5e9faaf58a1e",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4bd01ef-8d12-4d7c-a74b-5b9b337935e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c93e45f-f666-4fda-9823-7b29e4a1bf97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03244f6f-d604-4d2c-b4ea-3ab3ad9fbaed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e372ce4b-1aa3-4bd5-ba94-cdb53e7b1d33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adb12d6f-f4da-45b8-b995-abe4b8f00e12",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3ccfdf1-d709-4eb2-baad-0fe940f15c85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae0e272b-8f4f-4954-b89b-2541c2432bb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acac7d1b-a8d7-4ef3-a661-d485409f7d4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbd3fda7-212b-4445-894e-373259668d5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f36abba-59f1-4d44-a203-f7a8b095d9de",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1abfe6de-4618-473a-b55d-7bd52836f5f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b77f3f6-3496-4152-b171-5725bf42063c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e832a66-6c3b-4e87-af8d-e5e1ea568b02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4da03230-b67f-493e-a0e8-69b02b2fc8c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d5fae69-199e-46d5-95d6-31f574bc22a6",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57006011-ac64-487c-babc-e741494db071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8804688c-de60-41f6-a2a1-5812d4e2df69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c563af4c-ef30-4ec9-9e4e-53712936f633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "67e034d1-2d32-499b-b1ed-6996eea6efb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "686650bc-81c6-456b-8582-7b4f527a1cea",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70fad902-a43a-44b0-b505-d0bb36dc9489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74d8cdff-d230-4ea5-96ed-d6148c66fd3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78ef09d6-5e21-4cc6-8881-ba63e6a8546f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5037e517-db09-4f6e-8480-ecbfa73c582e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa514650-6cf2-4ffc-81f6-82fbd66a5a6f",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "148b8723-1acc-41e2-b4bd-2c0934b8a833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "150cdf7d-7355-4147-af5f-fb2f607905c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7023d5bf-bef4-4c7e-88d8-32d3b2a4592b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "316c0ee6-b81c-454e-a131-df516c6d8577"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33a5e256-31a8-486e-8289-a7d757ac552e",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27ef3010-e961-4089-8baf-ecde6f754a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1f4d845-1e5b-4bf1-9b1b-9b47c2ace68e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "803eb203-ab0c-4871-8331-5eb6e98818a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d745e91e-588a-4b22-944e-39288c6ac8fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a36d4e7d-2976-4ada-af9d-915ce87852a0",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c7f045e-2278-4202-9bc5-7d2f16c8967d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab858393-01a5-4773-b2ee-f4a9f9992852"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79065b08-8930-42e7-995b-2ca9b1e3f3fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "55ffe055-3868-435d-9c65-6286cc072268"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cf54c39-ab59-4d69-bd9f-392211b7c8db",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27f427a4-a8be-4d06-b4a2-080da6cc1790",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9819b317-1645-4503-8194-59ec034c6590"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d08244cc-21b5-42ce-a669-9c5b0ebf1abf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "287bfd0e-ccfe-4aa7-8c26-1c33e2906278"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8698323-d195-4ffb-a097-af30defdd73c",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b68cc76c-1c27-47e7-ab6f-08562daf352b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65c59528-c155-4d05-8c7f-fd4adb9e35df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b96d63d-e35e-4001-891f-b146a515a9a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "64bf3652-9732-4e34-97ca-6f34c7e61b79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "805d2cac-802b-4060-b20d-feaa9a04feae",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0780d6cd-5d09-440b-931a-f94d9f674f1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cedcb1f4-92ee-41a1-ad70-3c6f5098f699"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba6c8c2c-ca01-4dc2-8838-e40ab7947ba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1714cd69-6ecb-4bf9-b9a0-09f5c2f9be8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04ab47af-2fd5-451b-a1c7-fd741066ad37",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41a9439d-c08a-4f8c-bfa9-5c84439a6f77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acd2f7d4-92e9-48be-812f-bba19e8ae402"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9489033-1c7e-41a8-bf6b-a82d98b2caf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dfc33125-4e84-4aab-9c9b-adc6ab8fdc57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63972c78-dc2c-4115-a7f3-a5774ac06a03",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7535ad6-2dab-4344-940c-8903440c6147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3e07e0a-4626-4c18-b9fe-50bff84eb01f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29e90854-16cf-4663-abb7-5b643ba8ef19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dc0bb0a6-d23a-402f-af37-2f7b55abcb43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c2fd1d1-824c-4022-a7ec-fe00680abb70",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c732e08b-7863-4608-81e0-cdde6c791a30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fffe2f7f-c1c6-4096-8f41-f86cd61e12a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b1068f9-648a-451a-8e8f-54bf6706eb76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9c38b4e1-be40-4047-8e4c-74b7160fbdb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1e67567-0e8c-42b1-a223-3f7b5b6918aa",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b6c087c-7eb8-4b0e-96a6-ebb40fd302f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee216edb-52d9-41cc-ae17-21cd4b13f57c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "205598df-d0b5-4dd1-9877-c2afa22bf6c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "03f52c11-b8fa-4558-ae9f-31f968ab871d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5abcb8f5-6269-4f75-824b-c2dff7e649f5",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e894d7c-42c5-4ea8-aa71-fdd21f488318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4804b674-086b-4e6a-8a1a-909de3873453"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9f2e08f-def0-4c36-bb8b-a7b6fb8afbf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a6a9cf2a-4cb8-4e12-b40e-9ba46c0efb10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0797c1a6-166d-4a6f-9c50-6305d0ff9117",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d371efb6-f7af-4dde-8fac-ae59064a6adf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f47f0eb6-dc47-4323-bcdd-8a77d97e26a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca679e2c-f2f2-4f96-b15f-5af8f04fb228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e5af79a9-b886-4d18-9cea-2fb4b26a7b43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5df1bdc7-101c-4cfb-b780-b5386e6377f7",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e604ab9b-7b1c-4080-a150-cf185fa1de63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08448b13-786c-4d16-9618-2d8cd17afbeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89243eb4-53cc-4509-a1b8-376e86e89f99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "94734b67-4924-4738-bd75-c32d06e907a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d657dea-7781-460e-aab6-bc7f0520f93c",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0540391-ff54-4f5a-9878-54c678b518a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "4c18d48c-b48d-40f8-890e-35795e783578"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73332b5b-838c-488f-9b0c-44ee28174f8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "df6ad4c6-e313-4eda-be73-60c1b85762d7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2a16485a-56b4-43c7-bc28-f3ce979f3af9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "de618103-c314-4b83-9bc4-5530b3f7c084",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06f25d67-6822-490d-b30f-38d0e364b35e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e79cdfc3-14a7-4a74-9ca2-c07049c9d1d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c094fa4-c1f3-480a-8baf-cf141ce6e4f9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "13450dca-68e9-4c07-8cdf-e61f6d51bb5b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "80a20174-67dc-47e5-af62-ebe427efb9f8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8abaaccb-cd28-48e3-af76-9c749744026f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "80cb9a6d-1d9a-4f84-9db7-982f810660dc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f148dadb-5508-455c-bc22-a8fae483aa41"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "34ce8a88-bd65-41ee-a921-ec574316e884",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a36c340a-04b1-483c-bd8b-d806c13a3cee"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "86753a1e-acf0-4c15-ad5c-afb83b222f8c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b4bdc603-e48e-466a-955f-7ecda6db81d6"
                }
              }
            ]
          },
          {
            "id": "d8019dd9-34eb-42f3-bbb1-781a4b2fb292",
            "name": "Positive Testing",
            "item": [
              {
                "id": "abb1ced7-9b3c-4dcd-8df9-e0efe8cc3c61",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "12add122-8d7d-45f2-a2b4-a266c60f0419",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f700e256-ebe8-4f9e-80fd-93343845ab80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "28dc1c82-9d00-44be-a388-b834b6b0beae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b12f3c9b-5bea-4fbb-abed-4676df242220",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ee2e09b-6563-455f-b31a-05e17c1f3ba7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9ee05189-39e0-4ed4-99fd-cdb122bfa397",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5ca56a9f-3b78-4b41-bb2f-87d777a8baff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7b558383-d84f-4a0a-ba97-2f91d599b19a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3fbc23b5-d64e-477a-bffa-bd6162cf20c3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "20822b9c-c050-4f55-98eb-75dd360a5041"
                    }
                  }
                ]
              },
              {
                "id": "4a8babb4-0e37-4849-ba06-28d11d017309",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2fa09516-13ff-48d5-b1c2-1e21220ddee7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2cd50ab9-5f34-45bf-91be-3c79d1565183"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "56a7e1fc-a372-4114-8cc2-285867d05e63",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5461e131-da0f-47f5-98a1-68373d272deb"
                    }
                  }
                ]
              },
              {
                "id": "30dba9a4-1d8a-446e-b977-f1b4d605b282",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4cd392f6-34fe-46b9-8af8-d1794a3d8bba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2af50382-92b6-4477-9166-1ff6b594f73f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1a912f79-d9cc-4f5f-9256-1271e1621f70",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2125a646-5452-4d07-bd57-49add7f6828a"
                    }
                  }
                ]
              },
              {
                "id": "139168e2-7490-4b3a-bf16-0dfea7a6d937",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b7af0eef-a328-420c-b9e7-239766580212",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "60bfca12-da47-4df7-8a8f-89c3426b8d11"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "92352545-ef46-4f2b-b828-84a93a50a990",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "d5cc290f-552e-4f04-acbc-a0af253814e1"
                    }
                  }
                ]
              },
              {
                "id": "7f284dc2-0c75-466c-8f3c-e683583930a4",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a5866a04-810d-4de5-9278-bf2109c68913",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f34f0cc3-9d9f-476e-9b97-dcf6cbfea8b4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ae546849-7d23-49d6-9a9d-35a4fcfc4036",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "7b792b1f-423c-48a4-874c-38a473fe977f"
                    }
                  }
                ]
              },
              {
                "id": "0730cd9f-5abe-463e-85da-2bdce0c3c845",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8c1b5b1f-927b-42c5-8451-5e2f6a34a1c6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "95879533-4615-4e00-bcfa-099fbc5a34f5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "18ef92da-08e3-4da4-8dd7-ec98c19ed759",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b089d85d-c54d-48c8-8bfd-dfdca2b28284"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9d91fb2b-e11f-4bf5-af7d-f4523492e27a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "968eff67-d042-4876-bf4e-de5666840372"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d436ba7c-acfa-4f15-b95b-be63e65a3ed8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b91ee55c-cfbd-42ff-bb91-58515a9a6ac6"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "df8bf170-bdec-469f-8e74-2bf6d999a229",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "5c2142c1-444c-462a-8fb1-8b3517b45845"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b8b8c691-2837-4eb7-ae08-dc0d064204b0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dfad9ea8-8cfc-4ad0-96f5-55053b274fc5"
            }
          }
        ]
      },
      {
        "id": "9d27fedd-46e5-403b-afcf-d845cccbc6b5",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "1d5a3752-9afd-4631-9d55-904cca10ba23",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2a890fe2-79ae-4d36-a2b2-b3c5771f5279",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "18ee6660-db9d-4c77-968d-c03058c6e85e",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1cb1a29-aff3-4d8c-8380-3017f752bcab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22ed13a7-0ca2-426c-afcb-e639d6df225f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ec28d31-a6b8-424d-8adf-4a23de46551b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "685c6262-68bf-46d8-bc97-9ffb247e8204"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96d19783-1482-4cb4-8872-76a484d5f11f",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f8d4f18-ff2d-4f7c-b93a-72154d81f93d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "707b7803-3536-4608-9cbb-f8d85f537070"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b6b8b86-145d-4905-be95-048c578a5bd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "29408d7f-8231-4139-86f4-de6b255d5e7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1150f7e8-8d12-40d2-abf8-f5e476e4ab00",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "159f607b-0db6-4239-aea1-7e8b90e12b17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a348365-9f1b-4c50-a181-d5bd4a9f4223"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "716b7d11-09f5-42b1-8c37-ad1dbef1f460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ee326d8-fdeb-4ec6-bdf7-9e80523bc08d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e430116b-0df6-4686-a4c9-2e9d52f0aac4",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cca68209-ada4-4606-bed8-695ed8e7389e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11dc1f1a-2f90-4edc-bbc1-e716a7e37fdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "578b59bb-2252-49db-aedc-61b023580c15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "239e0e79-47ee-4ff1-b27b-23b5b87bf761"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afc0b7da-4bd4-4233-a5c9-8458c4feb7c6",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59a02b54-957b-4567-81db-e54d7a1d654b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96dfc484-ef46-4d54-8c0b-852e4845942a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "272cf58d-f766-4d6b-8d48-072c06331c05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2d902d8-6f17-4836-82c0-0b9d042e7c4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74999414-3298-42f5-9544-26de105c9627",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "914ef2f3-a52f-43eb-a684-e218022bbb77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e947cc4-c851-4941-9ffe-b564f48ccce5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "286fcf24-40b0-4d88-9db1-336cffda7c57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d725f298-0626-4529-a453-3117961f1f42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8443db7-f93f-4579-8ff9-0f40a1038737",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df1774f9-fdf5-4b67-bc6d-e7931a7fd3a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce312c0b-13b3-461b-9c82-c28711147863"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b86cb6fc-4f1f-4bdf-ba63-7a2a22ea5f1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "025038bd-dd7f-40b7-ba8b-64a3b6aca8c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7968c32a-aaa8-46fc-abd2-8987eff4514e",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "970820d3-dac5-4fe1-9c0f-7d07c63bccf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d842999-7a08-4eb7-85f7-08cc398a3f36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d71a252c-6a4c-4d1e-9aff-22ce7e6f986b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "aba437fb-4144-45d5-bcf7-196f3eea01e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "710c1746-795a-4a7b-87d5-2cb80cb99744",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ce9dc69-251b-4fd5-9b42-c124fad18d0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68805790-2468-42b1-b256-a22aa360ef9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3f648a3-cc21-46fe-9ae7-73d5f04e253b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "96b7aefb-65b4-46b0-9ccc-809a8adfc648"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e47c8a73-4966-4d1a-8dfe-2b41d9cd76a0",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5492795-39ab-4c12-b578-149d0a26a0bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ddb63e2-f35f-400f-b848-c3cb59d8d814"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ffc7029-7bdf-48a5-b728-81996d7e0624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c72789e9-cda0-48a5-815d-fca9778071fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb1d37f0-b566-4a35-b707-f0bbb1e8c6bc",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d549da5-016b-41af-94ba-7d796f70e15d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6dab3e6-8ee4-41ae-ba69-5f73c7a177b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10ce7a92-cdef-49df-9d59-61a5b0811b0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "cf671db5-686e-4bcf-9114-2c752dc2f415"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f97bf820-5c92-4251-b302-80b59a098991",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c57a7e5-71c6-4ee9-9cfb-f62da27e8153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "816cc4ca-0f94-477f-86a3-cfc2dec5f8ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6e971fc-7504-40f2-a7cd-689348850107",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f2ad1e46-df64-4c1d-b163-2ff7e91fcea9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62221e25-cd7e-46df-8c81-562909f06712",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e39095b-7164-4059-8077-e4fd53eb671f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84ded40e-0a15-426d-9672-1cebdf37a4a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd9c2e76-bac6-4e23-bd25-cc77bb0e86e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b2038fc-e40e-4fdc-a590-fae82bf826e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c955e87-ab03-4482-9145-83a159b22945",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f4022c8-a2a1-43d4-bd76-92379569b31b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cccf43fc-d7b5-436d-8a91-bdb2fc61f28a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e89f4a1-e253-4399-87c0-e88e3ba2ca98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a8d4c4b-922b-4501-9ca8-168d18df3f9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efd24be5-cead-4a20-a992-038249c6abea",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcc87678-51c7-45c6-a479-ac979acf8d75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d80754cc-e74d-4f62-9753-5916077eef44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc49ffd2-2353-421a-b516-23254f141002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "304a8359-b24e-476c-b9a8-d1f84b51ed97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0958a37f-7adc-4390-a320-56d535acccce",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bf2af0a-7ddf-4c98-9182-94f4f227ea48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5096238c-9264-4bef-850b-ebf687ad5404"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfb4284e-05bf-4e73-a0c7-603db82c48d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b891184-5c9b-4654-bfea-f9f0ddd3af14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "992c5cd6-bc9f-4ab0-96f2-1314669679f3",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "075e206b-46ea-4103-872a-3ac2c8870c76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6970da9f-2524-48ef-9cd0-ade1b3fd8981"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62241ade-7c17-4040-a643-943b2886cde8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1e28aca-3582-4408-bc8d-2a53eaf1f677"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c6c5552-4352-4085-9909-ec5197e3b481",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb51561b-4ef0-4974-b74f-4516e9f599ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a39949a7-1657-45bb-886d-0576b9fb7436"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d36f855a-03b6-4284-89c2-355e3da666a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "15967c16-9510-40b5-82d3-4bf169f68e5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2179d5e-0421-4885-a1ea-b1733aa0c6f1",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9bfda0b-1a72-4dcf-a5a1-3358d24c4094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad968f38-7fea-4ac4-8da1-b7a6881c6471"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5ec3fcb-ec9b-4366-82cd-7945c72db07b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f06551de-45b4-4723-a95a-18ba4a359277"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64039d40-187b-4a74-9c45-cae841f8302b",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1cd201d-b2f9-4c28-b7c5-34174e2ad6bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a15e2a97-b6b2-4cb8-9b44-62e87f66d4cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46237a9e-a162-4e12-8070-003ee181353f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "91c8ad18-7a09-49ca-81a0-0937ca326a4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4199fd3d-9219-456e-945b-9de9045c28e4",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aee5feb6-7b14-485e-8794-65f1799a8e15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53f5a6da-02d4-46b5-a27e-4a9c9b175627"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0339dafc-15c2-4b71-b73b-9e4f6c4678be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c424176-d186-47fa-a654-e9d8685a4f60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7adab3c3-b3de-4baa-8da4-e7cdfbfa5b3f",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "408273ac-12e7-481c-b16c-108ed1ea906f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0030084b-4115-41a9-ab9a-137f7ab8f4f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6971b17-c2e9-4f86-9307-44abbb33dfbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "64c8b771-edf0-4b98-b91f-dbc2dc926e7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9a74ebd-f657-4df7-b4cb-4045b61b43de",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f411957-0eca-45dd-beb7-86235165a717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ab69bd9-7c00-49b2-bb45-9cede436af4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbb9a7e2-9d45-4d47-bf5f-0556342156c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "60ac30f9-e4b7-4d6c-acaa-c07471c390cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36923035-8253-4d38-a1f8-0005ab77c486",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "759bf147-e8eb-4136-9e31-2a6aff8120e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "963b796d-c382-43a8-b3e0-c49da5131f10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69f0c1f6-0dc9-4360-818a-79c01e5debff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7586f209-6585-4e75-afa9-0bb23bb64594"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb212e3b-e7b5-4ed2-a1d4-7d4eba70bb22",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9691ce01-fef9-425a-9c0d-bb8d46af06cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69e5e369-7ed0-4571-9443-9a191bdbaa4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0469e2f7-4f2e-41ea-becc-a8bff50a11d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "32594de4-50ed-42a5-ab47-068f6ce06da8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c73de15-d4ba-40e2-be60-c214da7d0f6b",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "830422bc-d84e-4a5f-8f86-758d8167b533",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b661471-381d-496a-b0de-8b1fdaf58e7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "914e05b1-cfcc-4e64-bef0-553d00d42286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "af31e6c0-5bda-41aa-b83a-0a0264011821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1edd6a1e-ea1e-460e-9b82-0ff975ec1e25",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b59b8163-79d5-428d-987b-b86345122682",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04b4b0ed-4dca-4d11-a4fe-9054f970aed9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59303b0b-13e7-415b-9bef-e51046e8f824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fcdf3811-0a64-4659-a016-a568e48332ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cf741a0-64a3-4f1c-bd96-c0fe68c918a3",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "998f6d83-66d6-4fb6-abb6-725bcc22db6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "085bfe1f-b4a8-43f1-bca7-c682658b34d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b487ca20-c71c-4a18-9190-48a34d2c18dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1589144-0c39-43a6-b1cc-1fb130a1d85a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ed5da39-c5ca-4a54-9920-128badc1f7ed",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee7f3fa5-b19c-4a7b-ad4c-47caae5e6f1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7844e07-1222-49b8-afe0-90586d475198"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "467137a8-c8db-4ea9-a875-7230a9a156aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b830327-1e60-454f-ad92-50ca5f497225"
                        }
                      }
                    ]
                  },
                  {
                    "id": "955d3d4b-9f2c-48bd-93b5-ca83aeb5a8b0",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f6d459b-5ff8-4968-abb3-c3327283fe78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8aab5ea7-11c1-4552-b758-265afaa66ff1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98b11000-d4c2-4a94-afe5-617b76ee288b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a219c169-3c52-420d-81fd-98686b7478bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dfd63c2-4083-4666-a3e1-759de95f9403",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff20beef-3ec1-4bec-a844-6767bc275378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57efae29-9132-43c2-9620-b0dd27bf02fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4f552bb-bc19-4b39-8739-bdce5bf88f9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "652a1241-6fc8-4a84-ba75-da68031da13d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bdae23f-5c39-42ab-af8f-6156752d0365",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f28da32-6445-4d3d-acc8-beb87a0b6bb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74941193-4925-40a6-a4bf-edcbd0bbca98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abdc96a1-2033-4fbc-a5cd-197774d58e98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a1252af-5931-49d0-9531-c1bbcff6bdb0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6bc6a680-3911-466b-a17c-908234c62890",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d8bdf8ad-b8a1-4fc6-a44d-96e8b444acc6",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe326317-8914-4039-bf30-9219f2cd2291",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a64184fc-3863-439d-8116-5a6995d37589"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "129a1504-0c20-4915-ba4d-f0606b2685e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4bdfc784-2105-443f-81fd-5fb8e1100133"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "87245b1c-841c-4497-ba1e-78e035636d0a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "afe9d13b-fc2e-423e-8b2e-7ad3846a6253"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8579200d-85b3-4443-aac9-3e46730e03d0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8acb2793-52d6-47a2-8729-d95244b8665b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "13bb1f23-bc37-48b3-8d49-67b1d2a436b6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "88a0565e-a894-4e4d-abf1-67cab56f5110"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8725a07a-f7ef-45eb-9f2d-c0155ba0f78d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f49d5caa-87b4-41a2-a85b-ebf6319d6431"
            }
          }
        ]
      },
      {
        "id": "d8d635ae-e030-4b85-b00d-1bb5180bae9b",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "b60cf22f-ed75-41ea-8984-d63a9ab59f32",
            "name": "Negative Testing",
            "item": [
              {
                "id": "09d88b45-8885-49ea-8ab9-a5c0bddc54ad",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "dd29e2b2-4f02-4663-ba40-615cfba5f748",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd7edc65-2838-4ef0-9a19-e3e6151d214a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76855fa3-ffcb-475d-bb4c-282ac3d89dcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "078a555a-9f19-40a3-b664-c1c9a7fb8fdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "9562a293-30c1-4b1f-a123-6f5b7f9c51bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4952c157-45a4-4fd7-bdd3-9ce7e0a90b1b",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caf5bd94-4641-47cf-9090-38fc476a7594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba094d37-a491-4a65-ab9e-a4bc75b43a02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "425591b8-32a7-458b-8cc2-78861b3c7a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a29d2dc6-a3e5-43c6-b546-fb40717c47b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f26de3df-8f67-4161-98c5-b7b36381c1e2",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06d034c5-5667-4c15-bc19-59b4157ab0e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14bcfda5-2516-4df9-a008-d43d0797ecb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a69e06a6-7f19-4c03-9e44-af7ec87cca21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8bbc1c1b-fc2e-4dc3-9462-17bb2078dfa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40d474ef-b7f8-452d-8391-43f06257d40d",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18d6610d-7068-4df7-923e-f8e7eaafb8aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab776f46-3812-44a4-aab4-1fb1eef2ccb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2617c96-23ea-4a57-97c8-a006cc01a794",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0aa50a1-ec3b-4964-a81f-239776341520"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba85363c-5f01-4ca5-8c51-b6f308376021",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41069d05-40f0-471a-8cd0-34793076cf5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4df6f078-680f-4a68-8a87-0dd4d712f65d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf557599-72b9-4931-bc36-3563f91ce328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "73bd7465-5829-45d7-b025-9fd3e5d16ca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ab48e68-1876-42ce-87bf-0c616f559761",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "560b4e7f-b48d-47ce-9bc3-0cb36daacf07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03983979-435a-4b56-836f-f873236d2c45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aba3d989-e93c-4e1e-ae26-690d131d7bc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "426b23f6-fb52-42d6-b67a-6768b3501503"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7295dbe-2b74-48e8-90c7-ffdfcaa8fd50",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a12e063-ac9f-496b-b131-cc636f4aeedd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f60d714-5227-4b8e-a4b5-1ec30e494f6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4425904-a918-4282-a7ea-2e373880b214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "bbd85677-4b9b-45cc-9779-0d1e0141de51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fb19dc8-5cf7-4439-a56d-f46853246742",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "972306ad-e10d-42a8-a33e-dd1f4af08760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7eb457e-7cab-43f6-a0b8-73c3be3d3a5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c1f0f2a-d823-493c-ae8d-b0f096f9e0ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc99bed6-1d87-4ab9-b24d-1ee040389170"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f713b206-1786-452f-8fab-294d9283a81c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96128d39-f946-46a7-8c07-63830bdb723c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80149b7a-ad4c-47a9-83c8-6a5787db17a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ed151da-e1a7-471f-9cda-b75064ce1c9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "742642bd-0e30-4dbf-9b55-3ee5882dcb5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8074d0bb-82b7-4d19-81db-e4ee55ba5f24",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e86cf167-2be5-4caa-9320-7e56f1fddff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a164652-9030-4733-b6b8-70e53764e231"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22aaa714-a199-4c87-b674-0a6f783f2d83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cae9b464-c029-4330-b1f9-ea0bb7e32e06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6558a3c5-77bb-4122-ac94-207fb1bfb041",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7abcd937-0108-4812-aa92-1d40fd30911a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac219eb0-9852-47c0-85c6-c869d763d0fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcb95eab-193b-43c4-9a16-1e344ca3f156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "c493ce12-bb2d-4e52-b3dc-5772555f9972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c45933db-1971-44d9-a183-a1a4bce2a793",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74192970-1653-4195-81cd-6ed429f29160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d45ec8fb-a720-46bf-95f6-5b6e4fe06e9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ec85281-e0ad-4d24-a5fe-6303d17e4fb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3f890da2-cfe1-4056-a480-475210baabfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ed66dc5-2f3c-4271-a48c-7d777ab75d96",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d75c0dce-eb61-4759-adac-060c0182840e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b86ce40e-991a-40e0-9055-bc1bf2b857cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "babb5d3f-0617-45af-a94f-642051ae93a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c618d6c8-2f15-4eb4-a380-ac2a81d67232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2caeadc3-aedc-496e-8519-79c7eb1377d9",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7b07c60-c380-4758-bbf4-2fe87fa3dc42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8b4e8f8-7a34-4bda-8a57-acb3577353b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3bb0cf7-6975-4df6-bcd0-66f7cb0f6b2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "56052d06-c395-4648-9975-cceadb9d41e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1546eac6-aa1b-4c0c-bbaf-f8b1cf36f274",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a854b339-8d28-413e-af05-e8cfd49da11c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a841dcc-02a1-4811-90d0-e9bf3dd10126"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37331419-f419-4d4a-bdd7-8dd0094231a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a0db76a-711c-4079-844f-018af611da2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c5c3b86-867f-4b5a-96b2-e7c2fa7fd0c3",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "998fa4f1-4942-4d16-bc6c-733c058d5165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59072860-abc3-47bc-8cb3-41c4fc71d1b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba6eea9e-9c51-498b-965f-8ca6ab8ac1f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ca1dffc-2ddd-4ab4-ae36-ff7f48757129"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff7412d5-9807-4d36-9a28-6598ad5aad2b",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8a77a8b-b6ad-4c05-87f5-24eb5eb44e28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "125633dc-f3fd-42b7-b35b-bf97a74aae90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8943418-1940-4253-9edd-9255b221d4a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e954d9d0-7afb-4020-ad5e-f517ad54c39e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b708fba2-0fe5-47db-82a7-88595c67bc11",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6324aab2-82bc-4cf1-bed6-ab441339fd66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fc9776a-cf9e-4ce4-aae6-21396be2d60f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e377f449-a86d-4620-b0ba-ac973ce30020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "230cd384-1166-4bce-8176-1cd4b5037d52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbf4cab6-bf2b-41f8-a16d-6adf78e17f5d",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ecd3cdc-dd35-48ca-9adc-a3409071501b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92157e05-6774-47d5-a0e5-845f6f11e839"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8e4c3c8-d8d5-40e5-b35a-b9d7505b8e49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9600c69f-b1aa-49f0-8988-47902b48cdfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8ddf600-f909-4b1b-b225-38f647708aa8",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "639143dd-01e2-4ab7-9caa-7be991bee5d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62057663-d29f-4df8-b3d7-23b9a62fce17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d724718-3bf2-45fb-95cf-379bc7fc5daa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "232007ae-d134-4ae0-9658-782765e4b553"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62c6beb1-0f90-487a-9ef3-695fcc41d177",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86959f7d-2ae4-49e6-bea2-d93f91406ceb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f49c4aa3-2e90-4860-86f6-1af9c0a14ab1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f28f8534-600f-4928-85c6-cd767a0b8ddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "74d96593-007a-44d1-8c63-df2bbda6160c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4008c3af-c2ec-453a-8630-1ec8becf9c09",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de152a40-6db6-4757-9fcc-929aebb8780a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "081d3fc7-7528-42cc-af97-e1f7874ba11e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfad80df-5971-4e64-84b8-4dcacce5b0b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e351812a-5254-4258-9da7-a73e3b8bbadf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17b49125-7743-400d-b41f-a0dc1e516c70",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61e921f6-18b5-4ecc-b7c1-8856e0e95200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "beb90754-4a68-4d96-afb2-6a47eaf408fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb598a76-ab1e-4d35-9d6c-fa474469995c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea16585d-c4df-42d5-ab92-db48fe21cd5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "171e59a1-9318-4391-b188-fa6cfa650649",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d057b28-79b2-4185-853d-054a5d6fff67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c99cbc39-db8c-4927-bf17-1f3774843543"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "910f3b5c-a417-455f-9a28-e5c635d437f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "790c8a5e-9b12-4499-97d3-96d25d2ea8e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ca9d780-9f65-426b-8395-e0e347517b47",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23f158a3-7e13-4a9b-99de-536f135b7601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bfa85bc-b7bc-4f97-8a62-7c7a0cd4c47a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "617f70bd-4dc9-43b1-b39e-279e1222e5c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a21ef03a-86fe-4b3a-bb1e-08cac8fee6a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d5f072d-4df0-4360-adcc-efd1d7bdb4a3",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30448b40-1fd9-46b3-b487-11dd3812f0cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "560465eb-a8ce-4734-953d-fe40c4920c02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdd1fda4-d0c9-4f31-a43a-1b37ac90f6c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b76ad9d-508d-49a4-a758-9e9d19938f2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6c3f36b-f495-4be6-8bb2-f5460f13bac0",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eb27926-2808-4ae3-b5d6-c06223458e74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73302aa3-f627-4a98-8d29-de78a1f5044b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cd693dd-9340-4dfe-ab47-b37581ba9d69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f5917df-6bdb-41cc-bb2f-38b71b533921"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d043131d-eba9-46ad-b8bd-b518dc9ec5db",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d053b57e-d521-4562-aabe-8164a352466a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbc188dc-3901-41a7-ba2e-20c72ab39177"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b21ea0ed-bd3f-489f-a22c-2facec0b25bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa44da69-15ca-42a9-9780-3a076c7cb36a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21efed29-8b36-49dd-a558-474925e34088",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30f9244b-3f64-41a9-b2b8-298cb70f956d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7eb0ee5-df94-44f5-b5da-37c27da56894"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4d4a2a1-d11e-48d8-9720-7c7e3b8f8cca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a6fe2bb-0d23-4d0b-8fd7-aa22e57c81e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27fef19e-49b6-4c84-9201-dccc85430456",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cc69896-fe8b-42b3-93de-4262a8abf5b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "615ba38e-9470-432d-ab3a-7379b8d4ed65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b75ffc4e-fd50-468d-a464-9aecafb344a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "274c957b-a47c-4483-a71e-62cf054d2b24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97c333a9-429c-422f-8f44-6ee71d7d9dd0",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e178d6ff-117f-42ad-9acc-0e24be923e02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c52c313c-4377-4ee1-bf50-3338a27e6b6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67d566aa-f9ca-4f08-b9b3-c12664fbbeb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "21b58a28-cfd6-4f96-8ce3-baca65c0195b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "898a243b-165d-42c2-9e97-e1799c43bf37",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edd5ac13-cfd6-4717-994c-c2319ca4b1e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "043ea4d3-f085-40cb-8334-db6722df66dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5c79ad7-a5e0-4f75-8faa-9f993406e924",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "db49ec7a-1f1e-40c3-98f3-934a96a57b24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2653d0d3-84cd-4c6d-9eb2-5f147461b0c2",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc82dfd3-36e9-43e6-a835-6d3746d3b059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cce787cf-2291-4843-a154-8d460c32689f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1638d13a-776e-474f-9c21-c945e1003c5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ec83a3f-f3e7-45e9-96b8-383f4f5e1a9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39bcc6ba-df74-45d7-a6ef-dbe3a36cde6b",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc1b07d2-39ff-4797-8c5d-4815ab1d170d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cc2b37c-bb88-4252-a5a2-f5f92efe32f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f82d18d-1223-4859-93b2-e48c600db8e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "71087272-fbf0-4586-ac95-f1b75f37b44f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f52e773f-1dad-4de1-b687-b68072110c75",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e02a95f7-542d-4b75-ace7-5e14f931d01a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8087b0c0-f0be-4e43-870b-232e1b736510"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2536cb70-ba58-401a-bf1b-6ea147f216cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f7742d8-77ba-4602-a752-a0b47dea4c78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beafc618-3c99-4e1c-80f6-7971f503187f",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a74d0cb2-01bd-47d4-9923-f2e6b19f2202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecf5d6f0-efee-460a-8cd4-e712079d51b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aab8e2e6-f70f-4508-90eb-6c7fd26f6d08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "22617524-9035-4e02-8b0f-aa249eef9482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "364cd203-363e-42bb-b81f-b296fa3ff373",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81c85d67-239d-4102-a88b-431c3c12f2d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aad9534e-118b-4692-86f7-86932298199d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66a912d2-002d-45fb-a483-ab0e57d8b755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "69d134dd-2f1d-4ea8-8d9d-7efab861f04c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0bb7cf8f-b0e2-4518-ace8-f7eb60821506",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "02308df8-f4d4-4c7c-9759-648f08195b87",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fb775cd-7505-4aaa-beb6-20b4f131880c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "e6d084a5-baa9-4bb7-b6c1-bac551da7009"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d486c069-5222-4db4-a922-0f12ffaf7055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b9654e7c-aef2-4289-8a0a-17257bdb93c6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4e3301a9-7746-4f04-b1f5-e3e20c04c40e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "29b00b3f-20ac-4f96-966e-519d1d942dcb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a6e6a8b-4436-496d-ad84-c42401ba3be2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "34fa5254-86ce-426e-94e7-d3b44ad6f8d4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a2b0d861-a794-4e37-bc78-d9e5bf648e32",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6cb53da9-d171-4c46-bf38-557beb618da0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f480c756-c8c4-4ab9-b754-a2d726750d9e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4e5275e7-8891-47f4-b186-b75c9c9ad1fd"
            }
          }
        ]
      },
      {
        "id": "61e855bc-5fbb-435c-82fc-bc9d8212e7bc",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "3cb05246-957c-46a1-bec1-7b1978d34fe3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c9d8b887-2283-4e59-86b2-d2e4d0a42005",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8eb1e903-3c34-4685-ada0-6450eff8c114",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5523a6c0-10c7-47fb-8544-a296bd755478",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b93fe4bd-1372-4cf2-8008-aa80199e522c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cc18788-2530-481e-9a74-b57bc771a0d7",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ba7ee1b-a694-4d64-b77f-3cbf27fa11b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df610be1-c66f-493d-b3bb-bad63c1da912"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c930a7f-9beb-4b39-8d1a-6ed8ad21b868",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c0b5e18-d7e6-479d-a29b-25b9cb939f62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec6c5631-ce66-484b-a7ac-9c828f641e52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "347c587f-111d-4c14-89ec-232e6e0a8f13",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24055df2-e0ee-4fc6-b7ca-848e63fae3b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5829bbe3-2ad1-4961-a618-0646d3215adc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ce83b2c-3a52-493a-82dd-4613a968b02f",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cdcb8ab-a509-4249-836d-9229671a42d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32555760-314c-4ff2-bbb7-06bc747ecc58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8680c57f-58c2-4d0f-9ba3-daf7a8c35c39",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68fb7e49-5e2a-49d0-b27c-814ea94ab838",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74c5b635-e073-422c-8cf1-376ea2ce14b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0873dec5-35c2-4399-8e24-d62f163d2b32",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19ef61a3-1d98-433f-a30c-f2ded6a2d791",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97ad8ec7-88d0-4837-b73e-b8fb610832bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17966760-d21d-461b-b99d-a59b731eb98a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce644258-4432-4424-bc0f-ab430aae86bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1109ddc8-ad24-4e51-8439-33b7a376e36b",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09212004-f627-41b8-a802-817680462cb9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ad9cd8a-a6b4-423c-a9b3-c15205f77204"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9330dcd8-7cef-48b1-b7aa-b03ae07d214a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c64054d-75bf-4a8a-8233-fe91648fd53e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed14db6c-4ee7-4a3a-b2fc-ab76ab541ad4",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3840777-4d96-40a0-9d7b-17f42017bf88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c832c6e-55ac-41d4-a90f-cbfaa0464623"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12ae1b0a-458d-417f-816d-0f5c51af9c8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdc0cec8-3c43-4203-a9d3-f6c7ffd2f7d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af7081d6-2463-4560-93b6-1c5023554c92",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "045957d3-069f-4f26-85ca-b71152f5ba8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9825ac9-1633-4424-b79a-15feb60b6edb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1b8bc56-7a2c-4f2e-8043-17035939f767",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f0b5169-d5a5-4697-82b2-2a97578f7390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89785ad4-f180-48b5-b001-878125a85061",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b32cf3d9-aae5-41d0-9cb8-a2ab38edeb86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa62a0aa-917e-499f-8360-89d55373065a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b500e164-71a4-433a-90e8-6cf5345eedec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "014e275f-f57a-433e-addb-710c94ea946b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e94469f-b8ab-4ca9-8440-8f263b9dafdf",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ece97853-c706-4626-954c-d3e27ec226d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20baf6d7-6369-4e16-9952-8ac376891958"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46c74d9e-c568-45c9-94f2-6c024d394e31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6631374-6ba7-46ba-b63c-76eb13847ee3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feb2e598-c49a-4b35-9d0c-e7255fa86068",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d94f2cec-1954-429b-ad3e-e8733dd4090a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2c3d318-536b-46b5-a72d-4750fadaee9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1070af2-52de-4cdc-bbff-e5269062eee4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63bb5b4d-42f5-4cb4-a7e3-7ca331747c4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af9d8feb-1b2c-4fdf-983f-eb88ff920d17",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dd83c96-d702-433d-ae9e-0a66a9701b86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb189e17-5288-494d-90e9-c27bd71555eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d761cbf-e0a7-4331-8a14-42cf35e8101a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6be7718b-dbbd-495c-9f42-36bbc73bc6c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "860c44c9-405e-4597-9ed8-6db98d09d93e",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "443cbdde-e235-473f-9af8-8c46bc77eaf0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8208b8f0-d3a3-4565-acf1-7e0d99f98701"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fb4d685-ec66-4423-8f67-135ffe603f5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90d21841-74e6-4309-9f9e-641cd7a8c250"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da19bb82-f0bf-404a-a716-96d50671fdad",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd27a666-f0a5-44e1-87e7-f6140e73c0a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c8fcc88-b91b-4e93-bb35-1403459790ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bef21cdd-ce0f-488f-8725-9ddf0b7b4f71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cae2f98-2a4e-4d19-8bed-70fd150fa103"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c35e019f-b236-4947-9f13-803a6eef5cb3",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbde4ab4-75ed-4b11-833e-9083dd2a5b17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f04878f6-7ccb-47d6-816e-f0bf9094f2a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "620ebd82-9c85-4d67-b6e7-7ae1021304c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "309e5771-c512-4ff8-9c39-5c6a7dd2dca7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa96a100-53d5-4e31-8969-bd7156bb243d",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b3f78a3-d4ba-41b8-98c0-1c0331270d2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cef9dff-4d33-4fdc-aa77-bb8e1a601c9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00ed2c16-9d71-405d-8fe7-88d311fcbfa3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6dcb474-ab2a-418b-85d0-48e3447a04cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "313404d4-a423-48fc-a097-fc3170d59070",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b18d108-0205-41da-a91b-c27ed5cf2935",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "853a13c0-9fa7-48e7-90bd-4e50d6f91306"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dc57119-7f18-4a96-9529-e847539b03c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "feb7a0f9-6730-4183-beac-94e76f40fe1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "010f3d43-b39e-4aa9-bee8-a30383751514",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c9ed330-ba98-4a43-87de-c6ca79b00aa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1df5076-da19-4699-bb25-906897744084"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85ab7aca-b7ba-4389-8762-0fda4e518192",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab01865a-7db6-40f1-91f3-4f0e3d480b20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67777f36-5115-4160-9920-28d32a613887",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "743cf080-54d1-48fb-aa68-ed170556aa0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdd1966d-af49-415f-a57a-d6d42a457b50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc63e0df-5eb5-4f05-b9dc-958a88594a2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c0f31d6-9264-484f-ada7-2743c9e16a3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc95b216-661f-4cd9-8ead-f839cb21a602",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "996dfb4c-71ab-4027-b561-a49a029ca894",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98d5e6ad-ef0c-4338-b14d-7043aede9173"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25e01da4-eb3d-4383-b488-3548f3d7a366",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29e13063-8b3d-4f57-a980-7b1c5612d4bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "317d3e44-83ec-4deb-80b7-c739902ce0c9",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f927bb3-5587-41a7-a6b1-3b409a4fc433",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2af05817-cdce-4532-aa71-15fb8b2dee90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b778669f-b4a4-4a7b-9339-4c202de7b2e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9af22c3c-060f-41b7-89ed-b1a20061bbe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "377dc3d3-29ef-4482-967a-acd7db0c3b22",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e5a7edf-587a-4821-9e1d-897bcbdf24ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "473908c4-9455-45e9-a22e-19ef3e66f474"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7638cf4-59b3-4bf5-9edf-348d1a729bf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e72d00d-bb6b-47ed-89b3-1bc5232c5beb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88565873-4e69-4a1f-925e-351555f759af",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ba15ff8-e1a1-4f27-9016-d5c29996be13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1cd96a6-886d-495f-98a2-36cfeb0ec6c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffce0c4f-4fd9-4580-bb44-c8d6c7de5c80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f436e961-2399-4a81-bcfc-e5c0fa5a47d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b055c21-03db-4b92-96f7-f29f17ec79b5",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d4d3715-ffb4-4d3a-a232-e7685759e6ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54e8869e-e793-40e6-ba57-c9ed0319e77f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cd1f8ce-cb6f-4cbd-be5c-544c24d19dbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d6f466e-1ee9-4f54-8e52-93486db33cb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d30e40f5-aa96-4bf6-aef6-1dab8b2c4920",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ef12996-c179-41f5-b9ca-98705b934343",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4389753-5e29-41f2-b9fe-c00f8d42335e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d2e0117-59ea-440a-a045-574d098584e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f430bac-9ef4-4b45-857e-2b2748e580c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cf8f46b-4f34-4afd-b047-e00105976d61",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca6d392f-9b64-480e-9eae-285ddfd55215",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af47afd3-70b5-4522-9703-c709c199b6a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66aa56b0-773f-44cd-8514-28ae35e59de8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54ea281d-b6bb-4dc6-ba1a-b7ce46a68db7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e41ccb2c-f760-489a-9cf5-599260932f8c",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dce7d7e-dd79-4631-9548-cf0883f1f2a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "724d7db3-1278-4d76-a0dc-d37ca99f6703"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77e4d3a9-70c0-4236-a0da-13e80f0cec2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c5aeb32-9dd3-4fa0-85d5-48d90b637f92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8117edce-a6bf-441d-84b0-2624a4d7bb9c",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fc7c345-fcb8-453f-bdfb-15c5974f6641",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e65df848-3745-4f85-91ea-d4f76403d3b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "001a3e44-7cb7-49d6-80bc-077d42a09c9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dfb1303-ba96-4fdd-94be-b5b437295506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beaa2aca-da85-4bba-8223-4f5af4e53241",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0c2f5f5-ec24-4801-8a1d-88ee6611bf2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e428680-17b6-434d-8c85-26312a0536ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55a522a1-4569-480b-872d-c5f32cbe321d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "871d8b1d-904a-4bf3-ae68-bf7ecf218dbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1a8bdae-ef0d-476d-91cc-fcd6f15d77bf",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99152c80-cc80-4a26-8eaa-fc0416c5504a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38ea0664-2eeb-44b6-8b34-14ffdc43970b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ba4df2d-901b-4cee-933c-1a9dd439c56b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0746db55-94c4-42b2-98c8-af4fc89ce84d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b24612d-de9d-435b-8b2f-3149a2b0537e",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bd1a626-de66-47b7-b7ea-7edd57b9568e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c500ace4-1f56-45fc-b405-11dae8d44c6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3838d217-3d67-408e-978d-e8398ebe65c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7b234dd-73b5-4ea1-9b0b-149555820171"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0931b265-dc10-498a-bd23-cddc2b1cb114",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20a626c7-9d23-4d12-88d9-4a15d46c7ef7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d9c21d6-3f57-46f2-b7dd-665067531d15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72b4289d-6b3f-47e5-83ff-69dcd433940b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05ab1eca-6df9-45a3-bb59-a6ea945207eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2edd2952-2603-44b1-9902-58f79cd862c0",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c21b89dd-c285-477e-bb5b-8ece2eb2c218",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "343f0474-4e02-4fa4-8772-31adbb372676"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce1f6950-2cba-4ff7-b570-5138f38994e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa51d807-7abc-4261-bfd9-beac3843acdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47998f98-d4a1-4cfb-af93-0214f484d46f",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "610d3c85-2eb9-44fe-97f9-0d230181c368",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6497317-187e-4085-ae75-97dd1cfc3a4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6b99b7b-770a-4f9e-b1d9-01d270de1723",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f5c12c3-e7ab-4867-ab37-d893145b8ea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39ac6b7a-045f-4825-877b-05b5279783e7",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7865ed70-adad-49ee-a0e3-4825e80a6e17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f348b0e-1677-4d82-9a71-996dd8d421ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6221f38e-917b-4d86-a5d0-036ed77de3e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2b82b62-2ed4-44dc-9dbb-0e40909e17dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "331555d9-2f50-4941-9bd8-9397e9ce2f95",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5f73427-03d8-4c09-a5b2-6f44eb406572",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2adc07ff-dd36-4655-88c9-3177b34090ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1954d5cf-d089-491f-8739-ff16f70a081c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81950605-199a-4d2a-bf37-958be9b6419c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a90644a-4244-49b3-8c67-7efecfa213f4",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0912c476-d1d0-4fa4-b059-dff875e9caa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cccfaf59-7271-47fb-9ba2-dfe8e046e5ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47e50640-a0e5-4ae0-805d-01b77a57aa55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd73022d-2af0-470d-bd4b-4648defdfb51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59ae22b6-a947-4d31-9fa7-c51c78b754b4",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20c85a6d-13b1-46a7-91fa-7c0266f04f70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a93843be-df0a-47e3-acb1-a6a9a1431465"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95947ab2-d499-47af-ab78-250c05f90c7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b29420c-aa25-4930-9dfb-444c4fb097b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d43f5f22-682e-41d3-8cdf-c3c07f2ce580",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e75a0bb4-ae23-4527-8ec1-a9e5fff17503",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "888a6a06-bc30-4379-aacd-956e9d4f7f5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84094e53-cba0-4416-bd3b-625fad7e633a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10b7fd57-6141-4d00-a848-526bdc178b36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c608aa7-23a9-4301-aa70-08c380651e4f",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4b84d07-8b2e-4573-b1b0-ed8551094d2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "882f117d-6981-456c-a31c-fe4f1edaa235"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84e103a7-e9e5-487a-9aae-79d23b21f65e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efe39702-d7e8-4ec2-8821-a76e3553652a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0237fef1-2261-4aec-a3f9-80174bd62a1e",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5ff4ca1-640a-4fc8-99aa-d05588fb44f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe5170e9-0d2e-4b2a-a3cd-83aebc5e4da7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d7a29f3-e718-4dea-8774-815d64b11df0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00836030-38d3-4d77-8c4a-47a7f6614888"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3a00c8d-311e-4001-817b-64598b735fd2",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0e15a9d-7449-4cec-b98f-2be94c432d94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02a035a9-c716-4e40-9daf-e8b2a8ba9ddf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7605b23f-fcae-4339-98a5-3a7f85f4779b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32feae1a-d0ac-4b5d-8e41-3bdb36cdfebb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6ac5c56-470b-4b38-859f-e72d1fe019b3",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cc18dde-8db1-42c1-adc3-ca6b6300d02d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80377338-83e9-441c-8766-4ecaa9ab4c91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50a4c60b-51a7-4e6a-9ae6-f60b441553be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ec7360c-224c-40af-af94-091b2f8785ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "653d5b7b-6adb-4d51-8972-ee387f4e9e32",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02f3d634-ae05-4c1b-83b4-8150b068ccc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7114fdc6-f2c4-47b6-b048-79aea556d536"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ed96b89-c4a6-449e-9ce3-341a2d9db9ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38d06384-de94-4843-b4a0-ed2885854cac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bb0b6b1-58b1-4793-9daf-a207fec7b4be",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2dfc677-e260-4a74-8c91-cdc0d1ebee02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20980eca-9c9c-480b-a42d-9f69bc5cf518"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09718bf1-a680-4157-a963-efbed9333b3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "324030eb-62d0-4149-af43-c99e9e6f408f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cf6ab4c-592f-4168-be13-1d2d6df248f5",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31ebc27d-d0b5-4583-bead-36ff7d9a28e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afe5e0ae-4f77-41a4-8d43-575f18c93d53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "add1f66c-f3fd-48ed-baf8-ea4a595946a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3965e961-1981-4ce4-b8c5-3db5cabc4d13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06d866f7-f35c-44f1-84f2-48526616bb41",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33910233-4588-4235-a4e7-271c692de321",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39cb7e9e-e6b3-4839-b20e-3f4bfe62e85e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75b777e0-86a1-4964-ad2d-ead1e1ed5592",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adcaaa07-22f8-4850-a292-b30eb542879c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19b3b781-ae59-4879-b72e-48ff95c33a63",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33c9f591-9091-4ded-96e7-59c2d4eb4b16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7eed4c92-8867-438c-bdc4-0bd0201c14bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7221a94-7c26-4319-a316-7faf90c058ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d899bb3-2450-4adb-b1ed-341ec83e6d05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36fbbade-062b-4ac3-9405-ff271695a98a",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43043109-0ae5-47b8-a120-af3c12326799",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ef61817-3e15-4ad6-bd66-6a0cd9626a13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0226564-ff97-489d-8776-318f840c2c09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "044231c7-9aad-4ff9-973f-3cd7d19dce0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "679db084-2e41-442d-afc9-ebcfbf4fc737",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d009466-f561-4a79-978a-148f37f90ca2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f349fdca-793b-45c6-91ab-f0ca72d25433"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f4dc46f-9bf6-4f00-ba38-da486d89c693",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c005a9ab-a7d0-4daf-99a6-444645ad4c93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4de00b4d-2984-4561-8508-ff8b2a978435",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a84decfa-2bfb-4d1a-93ef-8af39defd978",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9809174-f49b-48e6-9c07-ae5e5fb5e132"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02cf8848-1ce7-4b11-b250-44a7253fa5bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bfb0568-229b-4576-893d-1ac0fe963bcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a16c9e5a-c5dd-4460-af87-c23f7d87708c",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40bac8c2-5665-462a-9472-159faf98eb12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25ed60a3-2ff6-4125-90b8-bedc120e88ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6b6982f-544f-4980-8046-307b84fc9489",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edf89316-04a3-45c1-9ac5-84500e91e032"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc6c4b98-e0a0-4148-a343-4d4a0c01a900",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "333cc9fb-8d15-44cf-bb25-9d7d50f80f3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a278882-8062-4744-8c94-283bcad66ae6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "535f17b3-308a-4dbc-978a-e149cbd63343",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f7dc06c-682b-48ce-8066-7735d9150b9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25ca6c82-954c-4080-b689-00625db716f0",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e712325c-8c06-48c6-b82b-1269cf75a364",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83082099-587c-445c-8a41-3986fdea6cd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e921cac-2504-42f1-9ccf-552325074a84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71d54456-89b9-4b53-a0be-4012f26c397d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50f8748c-ec77-4cb3-97f6-93179d363c72",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77119815-55c6-4944-853a-b7bd89e741f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8b9f8bd-fe44-41fa-a75a-6accbd09ffa8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a6e512e-f939-43ac-8ea1-2256918ebcf8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8cf8186-1464-4856-8927-535cc1aea7c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71200475-6a63-49f2-8a44-bf72165b3035",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e37eeba7-c8df-4162-a474-e93219088cf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9338c643-02c5-42dc-bcad-813e23f9b926"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "898415de-9903-4a5a-aba6-035874eda016",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "657a0d6f-30c2-4ede-b239-acad42286683"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edb3de91-ee4b-4649-a66b-fed99ffdabf5",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80a178e7-1439-4a4b-897b-77aea3c58193",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a8b2514-57d3-4ce8-bbaf-279e556d525e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d75fabc7-d968-4a4c-8f19-c8de3d672e9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc1d79b4-ac28-4eb9-9f93-8b37c0dcb475"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8769afe-0caf-493f-b374-7616b626dbb0",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2249f44d-ec9d-4856-a3b4-41162f7156b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecebe838-35f5-4415-8044-bb8c963edcbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bf57fa1-9605-4fd8-a23c-8f5774acc3e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "799d4d52-2fb2-4112-b92c-03acbe29f94b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d336ea76-224b-41c2-9c8a-b821e65163ad",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "620aefc9-84f4-4c97-ad5d-69194e36bb84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d818aab9-0397-4b55-8bb5-67e4cf21cb32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62e753a9-501e-4628-92bc-92e0477a73eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67cd0ba8-b3e7-4af2-b296-ac2479ac21f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cf23a4d-c197-4032-8fe4-5669f5867d01",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec625df8-64c2-4535-9d99-45bc8913fb11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9096028d-8c61-45a8-88e1-7a1c419ee415"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a18c4fe7-4a84-4f04-963f-5826371bf2a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0f59671-3100-4a6f-92e0-7445cc31d7b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45bd095c-296d-4430-8c96-820e23cce83f",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d3a14c0-9c78-4785-9303-831a3f674b7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7476bc14-6a04-4254-87f5-82114d80441d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1a03f5d-a039-48c9-8981-6634ddba32ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "121b0e32-f9ae-4cbb-861e-889be678d240"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43ecac49-bc7d-4253-804e-056b54ab90ee",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81c21ee5-2832-4a61-8a47-71e11d6c3778",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbb09f06-052a-4b7a-82a1-089b36eb3aae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83c246df-c0f2-4414-8c37-2b91b33af374",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a76298a-0a30-4063-936a-5385bcec4a60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87cf6808-3450-4a97-b9ea-1e2667e826de",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00d661aa-b676-489d-bed5-e1f9efb0cab6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63813ec3-b845-4913-b8d8-c6925bcb202b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f34c1ed4-ebc5-4bb0-825b-86053b15dd78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f708500a-54f3-48c6-ab08-e69592a54d11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4bde3b9-6147-4f06-89d4-709ba2730209",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "735406f7-82e4-4840-bec1-d883628a3aa1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69de142a-6120-434c-8b18-e41dde08468d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "070798c3-4d9a-41cb-81dd-bb05aae46fbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82c7213e-9a98-4515-a361-1b35029a6058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d16e00d-5965-4028-b344-b6fd8ff4ff70",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16b11ce1-af97-43d5-a4fe-38815ec1c871",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ac175db-0d84-4327-9a9e-f91451240af5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bb3c497-7e6f-4864-818c-ca4b196b112f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7be4fe61-213c-4da1-8ad8-88c7031517d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7b4bbe7-fc8f-4dd6-bc03-8c8cda6741a3",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba335c63-a7df-4165-8de6-1a66751d33c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "507c6281-086a-431e-b963-78fd43f1417b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60faec08-b79b-49cb-ae9b-e3413bba8ccd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c352237-01ef-4f0a-84cc-bf0612cf9d36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "381eb4af-2b2b-4dca-a394-c3887a2f3246",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdf36cad-c658-4ba5-8c35-901d5a36d02f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05c61ea8-545a-48cf-be63-61f7fc28f6fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1101d14-2c76-497d-b979-e2279f1da489",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5d26005-9a4b-4060-b9e9-fbe1febd6df3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2f7a022-449b-4003-8665-6af31c1be6b7",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cd9476d-587f-4c34-b0d3-53d0a348df6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2391a486-8cca-4683-9dc8-0fb7ee2b85d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68a4ebb9-ee39-420a-9269-510a856cf797",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a71c82e9-ca4e-44e4-9d37-70832cef755c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "879ef5a4-0e25-4d79-aad1-2cd798231b10",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddfb09ca-0156-473d-8b53-fbe99e9a93e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d5bfe58-6f41-4acc-929c-4883024d1753"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "614f3993-5b32-4957-9bd9-4b45de5a9b6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fa73c7e-5133-4c7d-b82c-f56d903ad17f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "236016a4-1bd2-43b5-afe1-9e121bb90456",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba275ecc-04ee-4923-8cc8-3cef85b3bace",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24ba5cb9-c023-42bf-9f4a-09baf2d251b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "422b5a18-63ec-420f-b266-4397976d1849",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d811045c-42b6-4de9-bfc4-7fe3cf510233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e570691-b47a-4c70-b56f-e40cae4cac04",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aeb61fc-40e7-4c31-a93e-fa76100ddb3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d124d033-eb04-40c0-bb4d-1010407a0287"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0969aff9-00f0-4235-b3b2-b3e7fe705975",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d576dff9-eac1-4f08-91bf-dbb458f76979"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eced7f4-affa-43ad-83d1-ce5b2ab6cdc7",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1701eea2-e71e-4730-9f1b-03dc7fc1a353",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6a62fc3-71ab-4474-b230-4a21edddfc4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b378fba5-cf59-4523-88ed-454bb385a1f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b9b29ea-dda6-4ec4-bae6-e1f0998249c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b89658b4-d5f0-4d9a-b0d1-3c1de4ceea7e",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "820d9f0d-0152-4192-ba7d-87a76a65f1e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f550fcbb-767b-44e1-9b25-9b6941ce130a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "848f1d24-19bb-4eff-a40d-b6ef7c19613f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3277c35c-037e-459b-a52d-9ae058e01dd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "506530c5-88e0-4570-a520-7dbd424fac05",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ea7c440-0087-497e-8a15-fc11efad8d52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4601b4b6-1845-4d95-88fe-205a2c3cd2eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db595755-0c98-4ded-8fc8-f8c9bb12d1e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "521a1426-5298-4473-b9d2-25cca499885a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "593962be-84d7-4c73-b24d-8210f2cacecf",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d79971c-5463-4e0c-948d-b8d037dd8387",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50895973-a20d-4f25-b703-abadfdcfea3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e8bc95d-b334-44d6-b45b-14b089ae29b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cace0d28-9ad3-46b0-bf39-6677c57db427"
                        }
                      }
                    ]
                  },
                  {
                    "id": "455043ac-1652-4ad6-8b30-ad7eb2fae269",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5241711a-404e-4abe-b761-ccf7e674eb87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01a95d3d-7be8-4263-b4e9-a1ad369ff018"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbb4fd82-128e-4e6f-a0f8-fe43e3a34442",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b18da821-b437-48ba-8162-7c7a11648bf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99078376-9e1b-4959-a5cf-c097ba3394e0",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "205c7a54-0a82-45d2-97c1-e67ad2ffc3a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a22d2dd3-a926-45a9-9462-2fc374764640"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0950b5e-b426-493f-adaa-eccbf5eaefab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f414777c-782c-46b5-a28f-372084206fe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e81d08b-9650-4a0a-8a72-c36db52cbb6a",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c6566b2-d793-4d05-884c-6bdf52e536cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "915ae0e5-f153-4f01-a130-f654c2939a83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8c788cb-4a2f-47a7-b890-c3e1ae1c8383",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94566f3c-4079-45b3-94d8-507811a059af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4866c053-de41-4596-9d64-c9415aad62db",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c642b8cf-5f4a-4755-a6da-59e7e794105f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d98b7b5f-31e1-4bb1-b3e4-10a7c8706b84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b258baef-a2f0-4972-8100-54b833b87ce6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e938653-2e86-4595-9bd5-da3bf26ddbc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89119eca-0fc7-4da1-81df-35c0f57fa435",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05e37d90-bf9b-4048-b2d0-964102d83fd6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d387a917-265d-45c2-a9b1-a40e80046bf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24cd050d-acf0-4036-938f-c28c20c72aa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62be59cc-4d03-404e-9f8a-3d4d5e4ce164"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84199da7-4870-4563-894f-c6cf7d210354",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e188a868-afed-4602-8906-d5977c0ad145",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67c4fec3-4d6f-491e-823e-17b319ed5c1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d835a710-c249-4c2d-9141-338345d544e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3a2539f-6392-4ee8-8156-dc2ceaeeb2cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78a61e48-6ab7-45c7-93b9-3892daaae744",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2205f51c-c671-40ac-8fe6-e614a05164ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66ccc764-8d70-4594-9a9c-0a8e2c881ba2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba67fd12-0bad-40a1-b95b-2aec37ce14fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc72b376-f4c4-45c2-be83-eb1d22738b6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07a0f15e-dc49-48f3-97db-dc386350b599",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ccff910-ccdc-40ce-9738-556a901e8d0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d0bc314-7add-4dc2-ab0e-8761401c0467"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "548d0364-0a82-4f9e-bd0d-6cfa4b9ae0d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18f4b034-e1e1-4645-909f-14ddd0318f09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2632c401-7bc8-4d68-a412-1537f128a81e",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76ae0241-1908-4081-9036-0873d100084b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bbdeca2e-e529-4419-9b17-61bf8bbb744f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fd08aa1-93e8-415e-a09b-3bac5d61a6ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b09e7301-c43d-4050-bfae-2ed25b0513d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "500f2dce-f48a-43b3-9c37-825f682658e4",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6c72529-2651-4411-9731-087c42025d06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed6adc6c-24af-4369-8c88-a117796313cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9048c061-7b1d-4d71-93dd-cb1ab445bbe6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28853870-a399-4d8f-82f3-bd1dbcc3ec35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd5ac13a-cfad-4de6-8ded-1ad937110e15",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48fefa22-907e-40d4-ba23-d218c1da4020",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66f15675-9f1d-484f-a265-790d8b9b3569"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd57d0b8-d73f-4257-91bb-6c54005811e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a1390d6-3bf7-4afc-8d21-4cc81ba3495d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e5c148f-4f3c-4629-bcb0-9feff192375a",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eb35493-f6f7-4b4c-b203-bb1da4cd9278",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a04f1bb2-cb9d-492c-aaa3-3f0136ce1cac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80408c40-c846-4958-85be-938af67a40dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4866db1-2392-4cd8-992e-1b0215565ff7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b002c40a-3cb5-49ac-ab2c-0acb3464e199",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c344ac40-9101-46a5-9309-0f7c25380f6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6acff92f-0980-4496-94f3-8913dd240342"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d93bd873-d47f-4145-b92d-55f285473cab",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "555db107-4329-494c-abc2-f22d3b709e47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48c686a5-d99a-4481-92e8-429664452585",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89baa994-70fa-47dc-8ce0-26da82b307a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83245ce1-6c0a-4937-acbe-c506f92d5799"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "688e51dc-b7b8-47bc-b4dd-561ea0d66e94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3540a440-51d0-4c3a-81ee-ea19bcf17d7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "612aa5a6-0ee6-411e-8749-f4a3e0151e0a",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06205f0a-d4fa-4ecc-a5a4-e2617020cbe1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a7e4a4e-f15c-4f82-a049-a40c5f13f6c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4c0b1a9-83f3-4bd8-8c70-3816f58f54db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5bbe636-db98-465a-8465-7a228e5f2cf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e2062a6-03ef-40d6-9318-08d4684ff715",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "425d6702-dd76-4205-8089-78c36b2f2808",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6930a1fa-da36-4ac8-8acd-922c8d6f5527"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd5cfecc-852f-444d-8536-26f2d154cf44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b01d263-d44c-4d18-8008-87bdcb03c193"
                        }
                      }
                    ]
                  },
                  {
                    "id": "748a68fb-027b-4530-b7a4-929f36fd6dfe",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48531566-3f91-48ca-ab68-ab1bf22a9e32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a14768f-2c18-4cf7-a31d-a66af68890d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fe71ba2-a5e5-497e-9c33-48fdaefcc7d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea856c66-4d4d-4459-8cf6-3fd6a89d311c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "755ab297-5169-44db-a902-bbafd8c6f1c6",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b50cd6f0-692a-41d1-b9d0-a62224f31799",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b1bab50-8380-4aa0-be21-1c05f585a44a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce943b2f-2303-4467-b761-0251979eb49f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f4e2f79-5d6c-4c54-9d48-f74f0fde1332"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40bc70b7-8285-4091-a78f-667185b93912",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "864da812-c35e-4a44-b04f-24b80f94df40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e4cba2e-bd04-4e15-9451-29d5201ffc5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62dfd4eb-fa01-47d5-bb55-d7d9331ca2cb",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c1c5425-e6c8-40f0-b3d5-6504f3fc0de9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b304ad2c-4aa9-4e9c-b323-63b21477badd",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3213bc49-afb7-4d81-9932-d93110eb91ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04d1ddd1-23af-4374-a338-252eb13dc259"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3640712b-e86c-430f-8c3c-690724a2f186",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51655d13-523d-45ed-b31e-e116932c8b6b"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c8c09f42-1a40-4a8a-b41d-78732ee3230b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "837cb5b1-fe96-43b6-afad-30e13996be12"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7374eed4-ec2d-484c-942b-2ca887155d63",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3c35b091-3751-4d73-bd89-1ce4e33deff6"
                    }
                  }
                ]
              },
              {
                "id": "50448ed4-b6f1-4cbc-9127-e4cb552132dc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d5e71bb2-ba5f-4398-8d06-dc70ba4ff1e9",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81f75114-0c45-4089-ab2f-d77fe83b2693",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "9bd08593-4cc3-4092-94fa-db04e121204b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77597e78-8afc-40d1-b308-f4fae1833bdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8a4b9937-a774-4d20-b751-594d4cc01bfb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2e67535f-124b-40f7-b196-19e45acf3828",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0f0fcb33-0410-478f-8c17-c634fdd9b10b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b70e7fa3-9fb4-4796-8c31-6b7c3ee41188",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "15e83d4b-1b5a-46f7-bed3-81e724a89045"
                    }
                  }
                ]
              },
              {
                "id": "d7bfd5dc-cb73-4012-a50d-3ed3cc44d63c",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "cd6f790b-06e6-4762-bbee-c63045d928a0",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fed21f6f-b7aa-4ee2-ae5c-7c03354991b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "e6af25a6-d600-4614-98cc-795f10d4f045"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d32bf927-0de2-456f-bfb6-675ca8cc3bea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bef5fd8-b5f8-477b-b267-f2baa2517e5c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "bf9c919a-3d12-4ad0-8fde-2dc954beaa48",
            "name": "Positive Testing",
            "item": [
              {
                "id": "770f2e71-cf7c-4366-b2bb-1351379035bc",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4cabc2d5-c0fd-454e-b209-0851d0abcc1c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9685abdf-091f-48c4-bec0-7957ca269beb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "347dcb8e-2908-4d00-9dc9-b986b08f910e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "93907dd7-0b18-452e-b9b2-af6bfbbd358c"
                    }
                  }
                ]
              },
              {
                "id": "5a16fc35-6134-4c57-b493-812744cb3124",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6408b464-358f-41fa-84d2-9eb03742fea0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "60117bdd-83ea-497d-a403-2274341d56fc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "feebe939-a9df-441b-b0ed-92df0fd64f09",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dbdf7652-638e-4465-91e3-37b47ef8d775"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f9352281-a6b1-4ac1-895e-8445b02d3939",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "283ffb2c-19f6-4490-bbaf-60e1d176f748"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c4a1a5e1-9a1c-4d16-9733-629411bb0ac7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "123b9ae3-d187-4ea4-8ad2-fc967ffe0752"
            }
          }
        ]
      },
      {
        "id": "b9e3d8d1-abe6-4805-8283-e5f9e223e5e9",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "408a6aba-d8fb-4712-9399-c9c30825dbd8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "554b7bea-8bf9-4262-8cc6-b126a97f4d50",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "251863dc-997c-4be8-b4c9-80bc45da3d94",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a514c33-651e-40d1-9246-836631dcdd42",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "486b7749-0548-4d1d-8128-715f691aadfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7496dafe-dbe3-4f07-9faf-8320fe0ae2de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "475d43d9-6f48-4cbc-8b14-20ee41721c13"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bbe9c48f-028a-4e6b-b08f-12b907c314e5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7d54da34-5cbe-4211-a93d-2848056a3f4d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "75b9868e-f16a-43db-91bd-0ad45eacfb75",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c8ee6b3c-f9a2-4b9d-b062-239850820095"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "83c5c213-2d9a-429f-bd13-0816a97a032f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "92e83e76-afba-4c2f-8689-89ef57aefc7c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6c75b7bc-8f23-4775-9be6-0898281f7ffe",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8e531be1-48dd-4690-aaf1-ae1624e23a53"
            }
          }
        ]
      },
      {
        "id": "fe5d7446-d871-4368-8111-e11e0d9423b1",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "9a3cc0e8-d22d-40f9-8374-5c097637a5f5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3bcbf882-e39b-4c37-aa66-3dff64788a69",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e85dc9ca-8063-4b16-b6a9-66d021bd6b37",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db2bb73d-fa7b-4a53-a932-97fe49290904",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7a06279d-85ff-458f-ad03-ab48887903d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bbc66b5-f1f5-4df5-84a6-fbb6b612803d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "597f9888-27b7-459f-a538-153026dc5040"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5ce81e55-9137-4bf3-9c66-472b69a5b5d0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1b9c2cb7-12e6-4896-b7eb-7ee05db12aa4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "feadc149-a5e7-4fd9-be5d-e9c91b8a4000",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d2950f71-5983-4b30-bd40-95587ddde215"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2ae54286-fbc8-45ff-b278-a629f9b67582",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "32817f69-41fc-4b4d-8403-c3da85ada103"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cae535b3-4a71-41b0-b4e7-1a34a9269af0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a55e6068-7dbe-485f-8146-89097fb975b8"
            }
          }
        ]
      },
      {
        "id": "b218a2b9-0451-4fe1-9011-382c4afa21d2",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "18d0ec7c-d2e8-4e9b-ace5-f03a0e2544db",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5d46b17f-0802-4837-a485-17d096c3b56a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "09904209-17e2-4fcc-9016-461884504b41",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a23d1bb-f0c2-4333-8519-11668ff6fa47",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "133f30bd-c9e9-4cfa-8c72-1911767ea55f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87469e3a-9d19-46f3-a340-dadefd7df454",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fd29e25d-e414-4828-af7c-9aa724baf54c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7421a84f-f5db-4b25-b77e-6a2f502a3226",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9eff9a1f-c718-41fa-9b87-c64f79aa7b5e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3902ef1e-ff0f-4ab6-8a57-9d71be88194c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "08d55157-5eca-4a5f-abcd-732ecf64a331"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "afb460e5-c35c-4aba-a12b-dfa22fb57be7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a560e63f-6a94-4970-9e82-3ffd49ef7655"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "100da4ca-0c14-483b-8ece-522eede13e1e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "14127655-9c06-402a-870b-d8ab481038af"
            }
          }
        ]
      },
      {
        "id": "4cdbd325-749c-4d6c-bbd5-7eaea65d8414",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "93b42be0-1f25-4c66-b6bd-566a6bd2dd44",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "952c649e-4641-4fd6-af38-13bb3b7e832a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "af005450-5edf-43f3-ad65-2cc3aef24364",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b0cdbe32-8988-459f-b381-f6ad5b8e2296",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b6f9b075-2c5d-4143-bc4c-afa460551390",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 295
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 50.76491228070176,
      "responseMin": 20,
      "responseMax": 287,
      "responseSd": 24.111964644702685,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1711758792177,
      "completed": 1711758815623
    },
    "executions": [
      {
        "id": "4b1c92dd-b9db-42c3-8631-bbf0fb4598d1",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "88d8e2bc-fc8c-49e5-8fe8-0fb1ce5e7082",
          "httpRequestId": "15f56662-2ea0-4f77-b1bd-d05ed2590e77"
        },
        "item": {
          "id": "4b1c92dd-b9db-42c3-8631-bbf0fb4598d1",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "91d82087-d6f7-469e-99ff-37fab49be164",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 0
        }
      },
      {
        "id": "19a7db6f-1ca5-4200-895d-b071f966bac3",
        "cursor": {
          "ref": "f9cebc57-4e6a-4e3b-8e1b-d07c4fd6d1cc",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f7929a1d-a940-4d96-b892-347586f79846"
        },
        "item": {
          "id": "19a7db6f-1ca5-4200-895d-b071f966bac3",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "8369aebf-364b-4c9a-a9f3-1cc1d6dcd5c1",
          "status": "OK",
          "code": 200,
          "responseTime": 20,
          "responseSize": 0
        }
      },
      {
        "id": "caf98f26-7a4f-4e44-8013-26584082aa5b",
        "cursor": {
          "ref": "ff5bc32c-4835-43df-aa31-b481334f1cae",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "b70d75d1-1b71-450b-900f-a4700dffc6df"
        },
        "item": {
          "id": "caf98f26-7a4f-4e44-8013-26584082aa5b",
          "name": "did_json"
        },
        "response": {
          "id": "bddee8bc-30b3-4836-9e2a-455a18a7d2dc",
          "status": "OK",
          "code": 200,
          "responseTime": 183,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84101c80-a838-4981-a4c4-c65a3554bbd5",
        "cursor": {
          "ref": "e73c539f-9fd8-45db-8175-00e6ef52621f",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "88c18af7-0e8c-44d9-bb05-502195f05979"
        },
        "item": {
          "id": "84101c80-a838-4981-a4c4-c65a3554bbd5",
          "name": "did:invalid"
        },
        "response": {
          "id": "0395fa61-b681-40ed-9b2c-37e8429af776",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84101c80-a838-4981-a4c4-c65a3554bbd5",
        "cursor": {
          "ref": "e73c539f-9fd8-45db-8175-00e6ef52621f",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "88c18af7-0e8c-44d9-bb05-502195f05979"
        },
        "item": {
          "id": "84101c80-a838-4981-a4c4-c65a3554bbd5",
          "name": "did:invalid"
        },
        "response": {
          "id": "0395fa61-b681-40ed-9b2c-37e8429af776",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1235c365-41d2-4b33-92e4-ff36f31be70a",
        "cursor": {
          "ref": "9240e11b-d0ec-48bc-a497-1102c28ef2f3",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "1df03821-6e61-43d5-9690-d30ef0d2066a"
        },
        "item": {
          "id": "1235c365-41d2-4b33-92e4-ff36f31be70a",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "e844e17a-e61e-4186-8beb-837f744b0ebc",
          "status": "Not Found",
          "code": 404,
          "responseTime": 90,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06fd49a7-2cd3-4e16-8707-ae72ec3db1cb",
        "cursor": {
          "ref": "8d0164e3-039b-44d5-8e99-46eb19cae68e",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "1f17e1b6-0722-432f-af48-616debfcb7b1"
        },
        "item": {
          "id": "06fd49a7-2cd3-4e16-8707-ae72ec3db1cb",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "f6af969a-f3e9-4862-b5ae-d2ea9f0fcaa5",
          "status": "Not Found",
          "code": 404,
          "responseTime": 47,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "febbd01f-0718-42da-9852-ec92bc3c7cea",
        "cursor": {
          "ref": "98cdedee-cfd3-4399-b2e7-c670e93b58c6",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "2bd824ee-e355-43d5-942a-4cec456c08cd"
        },
        "item": {
          "id": "febbd01f-0718-42da-9852-ec92bc3c7cea",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "46591c5e-e911-412a-a20c-dca71e79b9a3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6846165b-925c-4cf7-ae31-4d9aac56e703",
        "cursor": {
          "ref": "32391c57-690d-4a0f-9774-7561dbdcd565",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "300522b4-2e60-44d8-b607-875acc5aa234"
        },
        "item": {
          "id": "6846165b-925c-4cf7-ae31-4d9aac56e703",
          "name": "identifiers"
        },
        "response": {
          "id": "5a4ae205-bcf7-421b-859b-0dfa3377ceee",
          "status": "OK",
          "code": 200,
          "responseTime": 237,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8816390-0ca4-45db-abc7-164d52ada83d",
        "cursor": {
          "ref": "f6af3b6e-559e-4a19-be86-cc2b0d246a6e",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "3ab0c880-b1f5-4e03-82bb-9ea45f0dd83a"
        },
        "item": {
          "id": "e8816390-0ca4-45db-abc7-164d52ada83d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "66a96f11-6f1b-4f06-a00b-b236bcb8a1ee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efe90ccc-c6ae-4755-a80e-d8906acdf910",
        "cursor": {
          "ref": "4bce5c39-5a30-422e-bf9d-99358f49f5b9",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ef2be9ed-5236-4a0b-80a0-0d85e592f2de"
        },
        "item": {
          "id": "efe90ccc-c6ae-4755-a80e-d8906acdf910",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "d36b7685-58e5-4eb0-b85f-7a2bfbfd067e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c13d94c-1c68-431c-a9f7-51a2158cb721",
        "cursor": {
          "ref": "c970c89a-f116-4278-89fb-a1be11e3e411",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "1efcfdf8-ff5d-4a38-ac8a-6e5860ab65c8"
        },
        "item": {
          "id": "7c13d94c-1c68-431c-a9f7-51a2158cb721",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "b6770075-0122-4401-bffd-20b786b7a250",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5215528-517f-4424-b8dd-23f399839983",
        "cursor": {
          "ref": "c45dbf35-1e24-4e88-8468-c37a1341a29b",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "73fd83ab-7632-42f0-98a5-0493c869f76c"
        },
        "item": {
          "id": "f5215528-517f-4424-b8dd-23f399839983",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "41e305bc-0029-42fc-ad19-31dde80c7a48",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "090c8a65-43bc-4118-b067-249c77e87678",
        "cursor": {
          "ref": "4d264bcb-8294-4775-baac-9b650255fd6b",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "64ac430f-0d76-46f2-a42c-7b39438aee4d"
        },
        "item": {
          "id": "090c8a65-43bc-4118-b067-249c77e87678",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "e74015dc-75e0-43d8-a41b-84d50a5f04af",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b145353-8ced-407a-94f0-7dc18db003e5",
        "cursor": {
          "ref": "afda41a0-fdd0-4f2d-9150-ac71d1c8adc6",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "dfc0f725-4e69-43bf-9e30-a6278bf7de89"
        },
        "item": {
          "id": "1b145353-8ced-407a-94f0-7dc18db003e5",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "740d513d-4113-4597-acbf-c552d6638b22",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1513e58c-2b07-4188-b255-a58cdadf4548",
        "cursor": {
          "ref": "378d3b4f-dc02-421b-b52f-a9f686b1c827",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "3d264019-ac56-4999-933e-5d6b870a24ff"
        },
        "item": {
          "id": "1513e58c-2b07-4188-b255-a58cdadf4548",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "ebfc9bb8-a7a6-48ce-bc73-e571f24553e3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5f80d59-f5b4-46f8-94ea-9b07381890a1",
        "cursor": {
          "ref": "68cc441d-d166-46b9-a603-0913275cacfb",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "67dcaee5-c935-43fe-98d0-f75315e5b843"
        },
        "item": {
          "id": "b5f80d59-f5b4-46f8-94ea-9b07381890a1",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "1995a3c5-09a8-4ed9-b2c0-2e9a4e586d04",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "813e291f-c56b-4767-81ff-b4c1ba563313",
        "cursor": {
          "ref": "8c3fa722-7d92-4fe5-af79-67d81c7c76ac",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "fe376862-98c8-448e-83bd-e900fbc2d04a"
        },
        "item": {
          "id": "813e291f-c56b-4767-81ff-b4c1ba563313",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "6558091e-a14a-437b-84ff-ae6b8ae4c828",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "742cb9c7-957d-4a9e-9855-cbff0132a928",
        "cursor": {
          "ref": "b65e3398-8b92-4a42-930d-d041132b6935",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "45bc1735-cb29-4fff-9bff-c3d9f7b826ec"
        },
        "item": {
          "id": "742cb9c7-957d-4a9e-9855-cbff0132a928",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "7b036a8f-de41-460d-96df-ee90cf435991",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c47e171-5233-4eac-938b-3f94dc1f5789",
        "cursor": {
          "ref": "edf0f5b5-742f-4ee1-9272-60f0c8c75cb9",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "1990fc49-6533-4de2-9fd7-03103cd620bd"
        },
        "item": {
          "id": "3c47e171-5233-4eac-938b-3f94dc1f5789",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "a45b0825-7239-4742-a3ce-48d1db52d0b1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eabcd21a-1635-4963-89b4-a36bef249ed6",
        "cursor": {
          "ref": "81c33b26-1545-4ad0-b8df-961fc061faf0",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "2087e58c-2c66-41c9-beaa-32f3dfa4173a"
        },
        "item": {
          "id": "eabcd21a-1635-4963-89b4-a36bef249ed6",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "ba8ec435-6b40-4578-9a8d-5da4c43aecec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90551eb2-86fb-4abf-be5f-3744ace2b09b",
        "cursor": {
          "ref": "b26f8d1e-9eaa-438e-93ab-4cd8da9a6940",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "3495e96e-f284-42d2-a43e-8e6ac1bab6cc"
        },
        "item": {
          "id": "90551eb2-86fb-4abf-be5f-3744ace2b09b",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "3f4ca572-f206-4c5a-8598-03159dcdd9d2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "213f3d2c-8d4d-458e-a8c6-1a54cc9fc6fd",
        "cursor": {
          "ref": "0a2cc442-b052-4694-a65f-02d02b34c517",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "282f8142-57a2-4ccf-bcea-b19b5989adc2"
        },
        "item": {
          "id": "213f3d2c-8d4d-458e-a8c6-1a54cc9fc6fd",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "4e20c615-cff1-4908-895b-8bca83d0a07e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f30bf58-ab9d-4edd-ab57-85c09f908e1b",
        "cursor": {
          "ref": "67fc2b88-0035-4ab8-90e4-1202e62c80d7",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "859a5748-2066-4285-9332-797bdc6b6377"
        },
        "item": {
          "id": "7f30bf58-ab9d-4edd-ab57-85c09f908e1b",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "86dd9d5c-8fca-4e2f-8940-95b97e3a1600",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db5b077f-aa83-4425-96e0-ab3066d46f97",
        "cursor": {
          "ref": "b78968bc-968f-42c8-b1e3-7a18dfa2d5d3",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "fa4aed51-2ef4-45ff-848e-8e01ac0709aa"
        },
        "item": {
          "id": "db5b077f-aa83-4425-96e0-ab3066d46f97",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "18dae4e0-6bea-4ba4-8d22-a6989c5efb00",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1da00abd-3385-4033-be94-e7e6e018cde3",
        "cursor": {
          "ref": "866eda64-80c5-4ed4-8cdb-06478c15e5ec",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "39ba9d30-8457-41fa-afe9-6a23ce95b9e7"
        },
        "item": {
          "id": "1da00abd-3385-4033-be94-e7e6e018cde3",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "90753b81-d0aa-4f7d-8565-bc5106087b02",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05e02f13-7eac-4c9f-b328-f85207c4f458",
        "cursor": {
          "ref": "d29c2fa6-78fa-4357-8cac-03ccfa94eadf",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "bae20f93-2181-47e2-8f22-ea285c75eca3"
        },
        "item": {
          "id": "05e02f13-7eac-4c9f-b328-f85207c4f458",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "844c47a6-5bf7-4c4c-92ca-6cbdc7db6c24",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e44e1a4f-96c9-43ae-b01d-2a8aea2620de",
        "cursor": {
          "ref": "607c9072-5c87-4f83-98ba-9fa1e56d0239",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "0715f769-3bc7-4d4a-ac48-9d33a4e81739"
        },
        "item": {
          "id": "e44e1a4f-96c9-43ae-b01d-2a8aea2620de",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "6e3e2312-ea7b-41a1-91bf-f576caa54715",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0c3992c-f073-46fb-b727-6309ee38b728",
        "cursor": {
          "ref": "64213bdc-c478-44e4-9973-7deaa0396b3e",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "0642c667-4ede-492c-9b1f-b00526947f48"
        },
        "item": {
          "id": "a0c3992c-f073-46fb-b727-6309ee38b728",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "86de94c1-de0a-47a2-922b-02ad4f506ce4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81dd76a9-fd23-4146-bdca-cfcd5849c323",
        "cursor": {
          "ref": "a71657ec-cafa-44c9-b7a8-e14d51e33fa2",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "e02ef48b-f950-468e-a017-f41f5060e9b9"
        },
        "item": {
          "id": "81dd76a9-fd23-4146-bdca-cfcd5849c323",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "2b018896-f5a4-4d5a-8c06-775974bc5901",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "241439c8-7957-4b9f-9749-23706e0ba0d5",
        "cursor": {
          "ref": "52b169a4-4ae4-481e-b218-b276d1a2a1a0",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "537675be-a7a0-4764-89cb-8247e9c43cd6"
        },
        "item": {
          "id": "241439c8-7957-4b9f-9749-23706e0ba0d5",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "217f28fe-d6b3-44a9-919d-31d3c1c4fb26",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc4d1cf9-7574-4a92-ac7d-240cefc5f8e8",
        "cursor": {
          "ref": "a15a6182-91fd-43e0-ab49-465c824d5d15",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "5772c11b-a8cd-4e0e-9d47-7b1a47e8c3d0"
        },
        "item": {
          "id": "dc4d1cf9-7574-4a92-ac7d-240cefc5f8e8",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "608e253b-92eb-4533-aefd-fe46b9eeef8a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4feb62f5-20e5-4c36-ade8-2e05039e6a24",
        "cursor": {
          "ref": "1933140b-352c-4b93-943a-cb9624ebf195",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "805b68c5-1a8f-4109-8e21-03152ccabddd"
        },
        "item": {
          "id": "4feb62f5-20e5-4c36-ade8-2e05039e6a24",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "d95659c2-5b31-4fe4-a8fa-e8bcda2fa317",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da0ecaf7-0604-4b91-b525-560375e3475b",
        "cursor": {
          "ref": "8f5d9be4-7e82-4fbf-bf10-2e528d4c0c68",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "a83c654d-e9a8-453b-be15-550b6d7db5ba"
        },
        "item": {
          "id": "da0ecaf7-0604-4b91-b525-560375e3475b",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "ba0c15d9-3f85-4dcc-b7b1-608d80aebdd6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73d3d3c1-a480-4612-b824-700903596286",
        "cursor": {
          "ref": "246c10b0-5b77-49a2-8714-74ccd2f216e1",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "d73cf3b8-b1ae-4274-92b4-93938230fd29"
        },
        "item": {
          "id": "73d3d3c1-a480-4612-b824-700903596286",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "56a668be-84b9-4298-93a0-cc7fe6711eba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5670ee61-d5ac-4ebe-b1d0-5fe1806e0d07",
        "cursor": {
          "ref": "9b910123-8594-48e4-86e8-cdca661538ce",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "73d9848b-dcf3-429b-83f7-7ce6ea633f87"
        },
        "item": {
          "id": "5670ee61-d5ac-4ebe-b1d0-5fe1806e0d07",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "b6233ca7-f010-4a0e-bf5a-d309f708cd95",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81515612-735b-477b-8f94-1bf95ea5af35",
        "cursor": {
          "ref": "e334639f-3357-4ea8-a2f1-b70d3d63689d",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "f0f738d2-3ef9-4073-bc33-222a797b2e17"
        },
        "item": {
          "id": "81515612-735b-477b-8f94-1bf95ea5af35",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "f10c3532-604a-4305-a171-feededc8c84e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fd08b08-17f1-4cfc-9bbb-af31c34e2539",
        "cursor": {
          "ref": "8f4f1db7-6051-4da2-b947-70075362ff2a",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "8a0d3595-9505-4c11-9b2b-04d1e457ef86"
        },
        "item": {
          "id": "8fd08b08-17f1-4cfc-9bbb-af31c34e2539",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "db192029-093c-4dcd-ba3d-6d6f01dab797",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c10475d-fcc9-404d-bfef-55cf28ca5872",
        "cursor": {
          "ref": "4e1b4708-f57f-4c3e-ab52-b50a04903f7f",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "463f2242-0dfa-4553-89f4-b83bdf763cdc"
        },
        "item": {
          "id": "3c10475d-fcc9-404d-bfef-55cf28ca5872",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "efe64448-42f9-43de-a29b-83db24167cb8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "125c1605-d958-4f92-9ed8-15669bb05108",
        "cursor": {
          "ref": "f66d2896-1a70-4334-9212-b769f03a7a22",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "25b80d97-8d3c-43e5-8eb5-574f13bd7bc1"
        },
        "item": {
          "id": "125c1605-d958-4f92-9ed8-15669bb05108",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "e3d7c8b9-7a0d-459b-b04c-72a8a8c4cbcf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13eb690e-34a7-4bea-aebe-aead3cadb5a5",
        "cursor": {
          "ref": "2dd65b9a-3794-4acf-97a9-10f34d560a60",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "d23ed598-b3c7-46a7-9806-6164644fb6fb"
        },
        "item": {
          "id": "13eb690e-34a7-4bea-aebe-aead3cadb5a5",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "9b18c138-0768-4455-963f-3789909983a9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c275903-23c1-41ff-a5e3-6b7b3c77e4bf",
        "cursor": {
          "ref": "0a2f9e19-ec5a-4383-976a-cc1627ad58ae",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "59c486ca-cc01-46fc-abed-b01849bb9bbf"
        },
        "item": {
          "id": "9c275903-23c1-41ff-a5e3-6b7b3c77e4bf",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "0ca6cedf-599c-4a0f-bccc-1eed6d3b98ec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77f1a638-b165-4fda-b61c-2d6e97590f42",
        "cursor": {
          "ref": "53e2cce2-f1da-4e66-b46b-54520f290fbe",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "893da6b6-26eb-4573-b14b-900bca29f863"
        },
        "item": {
          "id": "77f1a638-b165-4fda-b61c-2d6e97590f42",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "a34483e9-27d0-4bc5-83db-0c3794cb6f99",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c0f3d71-4ce2-489d-a8c2-66485030f2eb",
        "cursor": {
          "ref": "fbcad615-4bef-4dce-aff4-af970bf74254",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "7ec3a468-2304-4f4e-982c-09d2991df06b"
        },
        "item": {
          "id": "2c0f3d71-4ce2-489d-a8c2-66485030f2eb",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "91648d2a-c30e-4029-8809-67a9b37559c4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1e8d8d9-797d-48da-8da0-a0abcb94cd41",
        "cursor": {
          "ref": "d0bcf9a8-9fe4-4963-8235-486a56d391ae",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "5c6c4a93-7190-4db5-b79e-040be83e462d"
        },
        "item": {
          "id": "e1e8d8d9-797d-48da-8da0-a0abcb94cd41",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "4f5edb27-714e-4337-9e4b-959f827993cc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b46a4478-0436-4204-b1eb-8fde15ba3d03",
        "cursor": {
          "ref": "134f4548-9cbd-497c-9c63-dc3f0ef3face",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "f581b9ac-35e3-4d85-b07b-1c6df4081c34"
        },
        "item": {
          "id": "b46a4478-0436-4204-b1eb-8fde15ba3d03",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "63deed0a-d6c8-4836-9efb-560a1199a30b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cf53ca7-93dd-44f5-b954-f4f944fd2088",
        "cursor": {
          "ref": "fb59c35e-8433-495c-b2ca-dac51ac9312e",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "7b261e80-6446-429f-b7cd-a27a789843b0"
        },
        "item": {
          "id": "5cf53ca7-93dd-44f5-b954-f4f944fd2088",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "65a4a737-4fcd-4d80-8b08-554f5daa93fa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73fed5c5-747c-4b69-9229-84f9f048548a",
        "cursor": {
          "ref": "d297b23e-d96f-472a-bb12-d862054252e6",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "fdfbc3ee-af1f-4fd8-b3e9-7a2e091d95e4"
        },
        "item": {
          "id": "73fed5c5-747c-4b69-9229-84f9f048548a",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "4a9c2697-ecbe-4079-8286-fe24ed926746",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9adb661-d6d5-4f9d-a900-09e20ec3642e",
        "cursor": {
          "ref": "0b0c4b0d-db46-4f32-be3d-de72b2718659",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "40d8bbea-8876-4044-b2e2-c2db5f83efd4"
        },
        "item": {
          "id": "e9adb661-d6d5-4f9d-a900-09e20ec3642e",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "1f7a7185-d3c7-46e4-8f20-5d89d6c4c0b4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "058bf8d0-1853-481b-a29f-7e00a99a87fc",
        "cursor": {
          "ref": "ceb06eaf-f06e-4823-a0ad-2fb83309caa9",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "33312a5e-bcc0-4e1a-9831-c365e3d832d4"
        },
        "item": {
          "id": "058bf8d0-1853-481b-a29f-7e00a99a87fc",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "3f17d04b-21db-4064-9dd8-5b5b7db83db0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e86b0743-4e46-412f-bede-6e06fb364cb3",
        "cursor": {
          "ref": "70dd75e1-512b-4c20-a8cd-28ff18ec4fb5",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "0346e7c8-9ee9-48d9-8721-def765b39f9e"
        },
        "item": {
          "id": "e86b0743-4e46-412f-bede-6e06fb364cb3",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "4d4fb739-8c2d-4f9a-8377-4acb47467679",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "777eeb97-2334-4a7d-b41b-59cdaba78380",
        "cursor": {
          "ref": "c240306a-e4df-485f-a1dc-5e21953f5b91",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "066bbd42-9e6e-4f31-943d-7dcba8f78a38"
        },
        "item": {
          "id": "777eeb97-2334-4a7d-b41b-59cdaba78380",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "4b1a65f1-c1da-4742-8f8c-3114ec4528b5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31f9aaa7-ea38-492f-828e-9ec399b966b8",
        "cursor": {
          "ref": "3a80ba7b-b4ee-44f8-bbb2-9a5492c5ddc3",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "034ad18e-1a8e-40ce-8831-48a00f336f46"
        },
        "item": {
          "id": "31f9aaa7-ea38-492f-828e-9ec399b966b8",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "cb846b05-f955-4765-bafb-8aae7a0eebcd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "829fad93-3d8f-4ebc-ab3f-7ddcfe8684c7",
        "cursor": {
          "ref": "dd34f53d-1ac1-4bba-b0b0-a247b2b6c961",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "0d858279-3b92-4b3b-9131-75c30492c8b6"
        },
        "item": {
          "id": "829fad93-3d8f-4ebc-ab3f-7ddcfe8684c7",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "1526839f-e84d-4c58-b18c-ad14cfd454c1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a07e34ff-fcd0-4e16-b5cf-9d3986932d38",
        "cursor": {
          "ref": "3b8d6750-8202-4e3a-ae48-f4c15dc8aa44",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "90f98e17-e279-4669-a71b-ca91e3dba607"
        },
        "item": {
          "id": "a07e34ff-fcd0-4e16-b5cf-9d3986932d38",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "a8dc202a-6b1d-4361-a8d7-4ed8f2bfc676",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ac7714d-00a4-4c69-8362-f32db4cb4d72",
        "cursor": {
          "ref": "3039e527-2855-46c7-a997-7919daabc82c",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "55e2b7c6-fe34-4b52-8bc2-ba4bfd84b514"
        },
        "item": {
          "id": "1ac7714d-00a4-4c69-8362-f32db4cb4d72",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "66ffc3eb-250c-4faa-b16c-735c06f47220",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1189648-19c1-4166-99e5-336f43e26a05",
        "cursor": {
          "ref": "8aa53c2a-a74e-4e9c-ac1e-6cb1e5122ac7",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "672e998b-855f-4a24-99f7-93489772f9b5"
        },
        "item": {
          "id": "f1189648-19c1-4166-99e5-336f43e26a05",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "a034b976-c0d8-4f17-a125-34aab2b0b543",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18f28557-22d1-4bcf-b779-79b07dfc324f",
        "cursor": {
          "ref": "88d81a37-0fbc-47f8-a398-557207b05706",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "00161f74-212f-43d6-94b3-0921eb319362"
        },
        "item": {
          "id": "18f28557-22d1-4bcf-b779-79b07dfc324f",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "8e62839c-9fc6-411f-971c-46e7436a7f06",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3826a529-f815-46c1-a0be-fc2445c53ba6",
        "cursor": {
          "ref": "f589be08-d768-48e4-bbc1-36fd385f1a78",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "a11d041f-eaa3-434f-b4b1-f53097d53302"
        },
        "item": {
          "id": "3826a529-f815-46c1-a0be-fc2445c53ba6",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "d3862aee-2cf2-4970-9f69-deb004c2fe36",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6e5261f-c3b6-424c-8313-66669395d3c7",
        "cursor": {
          "ref": "86287212-1c57-4059-ac86-533c71d6e122",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "9add6564-c8d3-4897-95c0-ba8525eed350"
        },
        "item": {
          "id": "d6e5261f-c3b6-424c-8313-66669395d3c7",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "d45018da-232c-40e4-a8ed-3498af5fbc58",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "354a01e6-e7d6-4198-9add-20e8beb1afbc",
        "cursor": {
          "ref": "b0b6ef9a-bca3-4712-830b-43db75119a51",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "08998e66-0821-4af8-8f60-03c6a2e4dfd5"
        },
        "item": {
          "id": "354a01e6-e7d6-4198-9add-20e8beb1afbc",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "a4c8cb8b-8c40-4a88-911f-945c56e2b0c9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d35d750-4bc6-4f0d-a36a-76782c814932",
        "cursor": {
          "ref": "1af99bf3-145e-47c1-b841-52f91a2798f7",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "f3c44a24-af32-4d4c-87b8-04fa93f9dda6"
        },
        "item": {
          "id": "6d35d750-4bc6-4f0d-a36a-76782c814932",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "d377b892-ee1d-4f75-817c-3c0ed6243b1e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfbc023f-f568-4b28-95ba-7b3d961c5758",
        "cursor": {
          "ref": "1e538789-99c2-401f-b68b-177f94eef9cf",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "05ecca61-bfcf-4e78-b230-033f9a5f86f4"
        },
        "item": {
          "id": "cfbc023f-f568-4b28-95ba-7b3d961c5758",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "2e5686c5-c9ac-4620-868c-252e1ac5841b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f5b7d77-71fc-4cc7-8996-9b4ceeaaf94e",
        "cursor": {
          "ref": "86693129-c513-43f9-9f91-3569dcbaa179",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "b9e3f381-b30c-4619-a5c7-a0f7a2e36ed2"
        },
        "item": {
          "id": "3f5b7d77-71fc-4cc7-8996-9b4ceeaaf94e",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "e2c32fc5-5319-449c-9d76-12925c5eb226",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ad570f0-4d0d-40c8-8b7d-312d15b1473b",
        "cursor": {
          "ref": "2c6582a8-d3ff-44ee-a802-774cf28e1e59",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "876ecce7-7b53-4064-b197-2773c60a50b8"
        },
        "item": {
          "id": "8ad570f0-4d0d-40c8-8b7d-312d15b1473b",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "4a2874b9-f0a1-4559-8e01-74bf2e8ad8a3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1909b736-dd6c-4a83-8990-0962029ff4ba",
        "cursor": {
          "ref": "2497fe19-28a2-4380-a614-757108661eb2",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "b8c8dee4-eaf5-484a-8063-a99f12bc93a3"
        },
        "item": {
          "id": "1909b736-dd6c-4a83-8990-0962029ff4ba",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "aa5a367f-3771-4c3f-8c34-4725f8a9dffc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc31c864-d5e2-4572-b653-a9c2e22f2158",
        "cursor": {
          "ref": "c0c266b2-bf70-4639-971a-b5a518f3fe2c",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "49b9cd3b-52bd-47ee-80c3-71bd6e49b5b4"
        },
        "item": {
          "id": "dc31c864-d5e2-4572-b653-a9c2e22f2158",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "543be320-afef-4b7a-b937-97f9d2c4df9d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81ba2e40-d513-4008-8209-c88d975b5c71",
        "cursor": {
          "ref": "f8008dd7-b58a-4316-93d7-b7ebcacee5c5",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "9ac23e4a-a9f0-4654-98c3-07bcd374d721"
        },
        "item": {
          "id": "81ba2e40-d513-4008-8209-c88d975b5c71",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "00e948ee-7e2c-4d76-b236-cc13051a1ebb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2703b05e-ee5e-4127-acb5-1fb8eca01d2b",
        "cursor": {
          "ref": "b317209d-035f-4ac3-94e2-13c687cfe3dd",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "13dd5d22-7912-4ea6-bcb1-0d9b3f05e123"
        },
        "item": {
          "id": "2703b05e-ee5e-4127-acb5-1fb8eca01d2b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "26dc9ea2-16d9-495c-84c8-2b35edd384cb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51682cc8-88c0-4192-8a93-c4324ca8f99c",
        "cursor": {
          "ref": "aa7713a9-ce25-458c-a2d3-1556dc142d6e",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "279d6b06-12e5-417e-802b-29a4080b1764"
        },
        "item": {
          "id": "51682cc8-88c0-4192-8a93-c4324ca8f99c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "a499771f-5b5b-4ac5-a6e2-837919fb256f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c9eefd0-f741-4d25-baa8-1d36fba07d68",
        "cursor": {
          "ref": "f804cdb6-c632-4ac6-b4b1-68045091a264",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "5c5e522c-fd2d-4f59-b830-2dfd9f636c8d"
        },
        "item": {
          "id": "6c9eefd0-f741-4d25-baa8-1d36fba07d68",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "9d7859be-d00d-4794-9fee-7f7f55f67d08",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "621cbedb-e2d0-430b-89d8-aa338ac22c7f",
        "cursor": {
          "ref": "63bddc45-74c6-41dd-af67-389448c482ad",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "edef488a-bbe9-429f-9a1e-8d06cd1e4573"
        },
        "item": {
          "id": "621cbedb-e2d0-430b-89d8-aa338ac22c7f",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "ce00ccbf-7e74-4788-8d86-5e28bbf70a07",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4252ea59-a2cb-4a0e-a0b0-1891de0931ef",
        "cursor": {
          "ref": "296c2af2-4786-4345-8967-aada6aeef364",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "a28e5e01-81e6-4735-989a-72dedeac8071"
        },
        "item": {
          "id": "4252ea59-a2cb-4a0e-a0b0-1891de0931ef",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "411d99d2-e153-4413-8b0d-b0eb5afe4ffd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afdd68e9-012e-4d42-83ba-88bcc3201641",
        "cursor": {
          "ref": "c94957ca-9f8f-4369-965c-ac0a13d4a79b",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "16db9e6a-c005-4346-8e83-a65900eb3e13"
        },
        "item": {
          "id": "afdd68e9-012e-4d42-83ba-88bcc3201641",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "2ab7dc93-43a8-493c-a0f2-2698ae1e9c94",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "384974b5-3e21-436e-9766-8e9fa8481da7",
        "cursor": {
          "ref": "114de093-5c31-43f2-872a-e6caf45b776a",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "a4574850-343e-4247-bc26-ed07666abbce"
        },
        "item": {
          "id": "384974b5-3e21-436e-9766-8e9fa8481da7",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "a84d489a-7725-464e-a438-d2cf63ea40f2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7b438df-e3a1-44b1-89f5-66df4c63bfc0",
        "cursor": {
          "ref": "1d4b5e36-f6a3-4148-8bb8-e8dfef663cbe",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "87c89f29-9007-4e3d-9628-d65a05825992"
        },
        "item": {
          "id": "c7b438df-e3a1-44b1-89f5-66df4c63bfc0",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "564d97b6-206d-4955-85e9-0b81c49fe207",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a55c4cd-f2a8-4a0f-bbca-8f7d94066c25",
        "cursor": {
          "ref": "b95e6585-c69e-41d1-967e-b27842ad0841",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "dcec8abf-149b-4d75-a57c-5381a0c064ca"
        },
        "item": {
          "id": "1a55c4cd-f2a8-4a0f-bbca-8f7d94066c25",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "3874f032-29d4-46cf-be67-eaee22b94867",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "789fb9da-aea7-4d8c-8dd4-a9eedb15ca7d",
        "cursor": {
          "ref": "edaadaa4-a18f-44fe-8da5-deda48154b69",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "4d9019b3-950b-47ed-b77a-99c298c5038a"
        },
        "item": {
          "id": "789fb9da-aea7-4d8c-8dd4-a9eedb15ca7d",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "2a77ac00-28c6-4ef8-893c-4140cb43a0c9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36cc415c-24e3-44d1-bbf2-b801d3eaa2c1",
        "cursor": {
          "ref": "a34875c3-983e-4de4-b77d-70a2f4916e0e",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "cf310f0a-2c27-4426-a401-e56d1f3d5d9b"
        },
        "item": {
          "id": "36cc415c-24e3-44d1-bbf2-b801d3eaa2c1",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "7958146d-a3f5-4702-acdb-f68a8e86154d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c72d3698-1ad9-4681-8ba3-d14e5383e5a5",
        "cursor": {
          "ref": "2ebc1635-5242-49c6-b368-6a2da78d64ed",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "bc372621-5d21-48c3-b966-0a9a0e5ec6b9"
        },
        "item": {
          "id": "c72d3698-1ad9-4681-8ba3-d14e5383e5a5",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "902d5e04-ec2b-4913-a88f-506820dd1275",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4200ddf1-234b-4674-b456-04ac0e3378e6",
        "cursor": {
          "ref": "3afdc744-c03a-44f9-b0b6-4222bda28d7b",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "3c38dc36-5c1d-4e84-80ad-638fcf005704"
        },
        "item": {
          "id": "4200ddf1-234b-4674-b456-04ac0e3378e6",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "15044a72-4515-467e-8b3c-3b31b571b6fb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b306da4-33c5-47c9-9fe0-88df0276e8cb",
        "cursor": {
          "ref": "9b00835f-be64-4984-ab2b-9b4590c92f9d",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "96a696a4-7ce0-4393-834e-5f89597c7c94"
        },
        "item": {
          "id": "1b306da4-33c5-47c9-9fe0-88df0276e8cb",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "366a352c-bdf9-4591-b207-cf5f87f41ec8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56985f35-d1ac-4723-b7f6-5e9faaf58a1e",
        "cursor": {
          "ref": "1a1f36de-a48a-42f0-b731-108908dd90ff",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "dfd2059d-ee50-412f-81b7-6dfd71f73fb6"
        },
        "item": {
          "id": "56985f35-d1ac-4723-b7f6-5e9faaf58a1e",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "0cbf14f0-fd0a-4a42-aacd-7c2801407023",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adb12d6f-f4da-45b8-b995-abe4b8f00e12",
        "cursor": {
          "ref": "8cad744f-1365-421e-8706-256af9dbba0b",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "c15bb8e1-1900-433d-955f-f6bf4a565a18"
        },
        "item": {
          "id": "adb12d6f-f4da-45b8-b995-abe4b8f00e12",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "06e7d0b4-624c-4dc7-9929-8186200d2a33",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f36abba-59f1-4d44-a203-f7a8b095d9de",
        "cursor": {
          "ref": "ff688a2e-340c-4e81-8d32-d13102cd9413",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "9be95f8f-b844-413e-ad18-b023c76fe329"
        },
        "item": {
          "id": "8f36abba-59f1-4d44-a203-f7a8b095d9de",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "1d85ed48-d0aa-46c5-ac0b-5fd247eb6f65",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d5fae69-199e-46d5-95d6-31f574bc22a6",
        "cursor": {
          "ref": "7833d8e6-9e18-4259-a9f4-78e5368aa563",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "d57e6b7f-55ca-4803-bca7-7bb153af7c91"
        },
        "item": {
          "id": "9d5fae69-199e-46d5-95d6-31f574bc22a6",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "3ec0cb65-0595-43bf-b3d4-0be03a4d96aa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "686650bc-81c6-456b-8582-7b4f527a1cea",
        "cursor": {
          "ref": "c2c05a76-87e5-462a-a177-911346de71d9",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "54364b9c-6abf-4899-af92-665bdf6fb90a"
        },
        "item": {
          "id": "686650bc-81c6-456b-8582-7b4f527a1cea",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "c39f8a06-b3dc-4390-9c6c-49724985a876",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa514650-6cf2-4ffc-81f6-82fbd66a5a6f",
        "cursor": {
          "ref": "9efe8f98-f224-40fa-80aa-1f612479256b",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "10679955-ea48-4f9b-a245-1b1ca54e30d1"
        },
        "item": {
          "id": "aa514650-6cf2-4ffc-81f6-82fbd66a5a6f",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "713b000e-f197-4fe6-8a78-aa24db11bd15",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33a5e256-31a8-486e-8289-a7d757ac552e",
        "cursor": {
          "ref": "aba51344-aaf3-4e60-8716-fdf39580b3fb",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "658fec02-dee4-4a42-a9b7-172ad1ae4d9b"
        },
        "item": {
          "id": "33a5e256-31a8-486e-8289-a7d757ac552e",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "a8d8c135-9c4f-46a1-bd91-627111a6b78d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a36d4e7d-2976-4ada-af9d-915ce87852a0",
        "cursor": {
          "ref": "dcd3420e-5b52-423a-971e-f0fe1378177e",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "6cfa2898-2002-46d4-a4fc-6766975262f0"
        },
        "item": {
          "id": "a36d4e7d-2976-4ada-af9d-915ce87852a0",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "22d69cea-94ec-45db-9479-0e14cfb51374",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cf54c39-ab59-4d69-bd9f-392211b7c8db",
        "cursor": {
          "ref": "39ca1108-17ee-4f65-a66d-ede63481f9c2",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "57a6d9a1-a201-4cbe-9cb3-84b9353a4ba3"
        },
        "item": {
          "id": "4cf54c39-ab59-4d69-bd9f-392211b7c8db",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "3ca39b77-0b9d-40b1-a447-bf7afb06a239",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8698323-d195-4ffb-a097-af30defdd73c",
        "cursor": {
          "ref": "cbb17746-51b3-4157-be61-67d0b79f1960",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "962fd2e6-2f80-4f9e-9305-5c9aa2601869"
        },
        "item": {
          "id": "a8698323-d195-4ffb-a097-af30defdd73c",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "014c95f2-ca0e-4355-b6ac-a8b11eb8d80a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "805d2cac-802b-4060-b20d-feaa9a04feae",
        "cursor": {
          "ref": "55a017d0-041d-4fe5-908f-f7f534b120eb",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "041cbfca-527a-49c5-bda4-b98bbc1724a1"
        },
        "item": {
          "id": "805d2cac-802b-4060-b20d-feaa9a04feae",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "49d008ab-7a14-4fd0-93be-b7dfbf02eecb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04ab47af-2fd5-451b-a1c7-fd741066ad37",
        "cursor": {
          "ref": "f3689a5a-e441-4e78-9ce0-6baa1220a649",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "a8332cc3-65ea-427f-8796-c27a2108b75b"
        },
        "item": {
          "id": "04ab47af-2fd5-451b-a1c7-fd741066ad37",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "757e0e2d-01c3-49ca-9825-8f122b08b5cf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63972c78-dc2c-4115-a7f3-a5774ac06a03",
        "cursor": {
          "ref": "56a927ed-bf66-45de-809e-805823a12193",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "f7fcd806-a70a-4484-9bba-e5ae66862355"
        },
        "item": {
          "id": "63972c78-dc2c-4115-a7f3-a5774ac06a03",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "06793c85-ebd2-46c5-9a1a-257930bc640a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c2fd1d1-824c-4022-a7ec-fe00680abb70",
        "cursor": {
          "ref": "5accb503-7d78-412b-8cfb-a3c40d95cd46",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "135fffe0-96eb-41e0-91e3-99518b7c4dfd"
        },
        "item": {
          "id": "2c2fd1d1-824c-4022-a7ec-fe00680abb70",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "d870d4aa-fd16-4f48-baa6-f89f406ccd89",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1e67567-0e8c-42b1-a223-3f7b5b6918aa",
        "cursor": {
          "ref": "2a5f6b19-2240-4f59-960b-1220612af3c4",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "9bdbb119-f96b-4448-a16f-945582e2c91f"
        },
        "item": {
          "id": "f1e67567-0e8c-42b1-a223-3f7b5b6918aa",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "479f9e1a-85b6-4e5c-8f49-f539f0370a99",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5abcb8f5-6269-4f75-824b-c2dff7e649f5",
        "cursor": {
          "ref": "037c3260-2135-4c5b-8478-3ec4a937b991",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "9870f5e5-c8db-4a90-9ff4-0498f20bf1f8"
        },
        "item": {
          "id": "5abcb8f5-6269-4f75-824b-c2dff7e649f5",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "e4489389-8eab-49a3-a50c-0d07e2b4f2cd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0797c1a6-166d-4a6f-9c50-6305d0ff9117",
        "cursor": {
          "ref": "c242cce1-1961-48da-9903-d45554b8b869",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "e25662e7-01c6-4332-b3c8-7590da2b6f86"
        },
        "item": {
          "id": "0797c1a6-166d-4a6f-9c50-6305d0ff9117",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "78591a8b-4cf9-4690-a6f9-fe61a8b26a72",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5df1bdc7-101c-4cfb-b780-b5386e6377f7",
        "cursor": {
          "ref": "508bc140-bb79-436a-ad94-0d0a7a4984cd",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "afdd08f1-b47d-4908-b8fd-e99f31a6f415"
        },
        "item": {
          "id": "5df1bdc7-101c-4cfb-b780-b5386e6377f7",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "380043ee-9c49-4a34-82a9-92652837f48f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d657dea-7781-460e-aab6-bc7f0520f93c",
        "cursor": {
          "ref": "bba5dfb8-e525-44ed-ac7d-514b9914fc69",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "d99ea1b4-a12f-45fa-9ad1-ad9157f402b7"
        },
        "item": {
          "id": "7d657dea-7781-460e-aab6-bc7f0520f93c",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "7a09ff78-7a8a-4cbe-b36f-aac92cfd7905",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de618103-c314-4b83-9bc4-5530b3f7c084",
        "cursor": {
          "ref": "cb880159-2ce9-4eaf-b828-a35970dab214",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "e7b0ad91-4c26-4bf1-ab23-918c8c02e167"
        },
        "item": {
          "id": "de618103-c314-4b83-9bc4-5530b3f7c084",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "cbd42961-9db9-4921-a43a-6d90ec979007",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12add122-8d7d-45f2-a2b4-a266c60f0419",
        "cursor": {
          "ref": "ba97723f-db93-45fc-b192-cb6e8f6274c3",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "8e44ca46-1f70-41ed-be6e-fbbc9469bd74"
        },
        "item": {
          "id": "12add122-8d7d-45f2-a2b4-a266c60f0419",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "554a96c5-3375-46f3-a000-9f695306c9a5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "9ee05189-39e0-4ed4-99fd-cdb122bfa397",
        "cursor": {
          "ref": "d77e743e-0397-46ef-ac4f-d485412d20ac",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "a42dc692-17a9-42db-b410-98ec6bad4ab5"
        },
        "item": {
          "id": "9ee05189-39e0-4ed4-99fd-cdb122bfa397",
          "name": "credentials_issue"
        },
        "response": {
          "id": "49e3925e-c812-4b8f-bddd-87caca46ead2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 287,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "4a8babb4-0e37-4849-ba06-28d11d017309",
        "cursor": {
          "ref": "1378f569-4463-4640-bda6-42273c9497c4",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "4a74db79-803a-4876-889e-ff578bb2769f"
        },
        "item": {
          "id": "4a8babb4-0e37-4849-ba06-28d11d017309",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "40a0105c-7e53-473c-bc26-aeea21a4353b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "30dba9a4-1d8a-446e-b977-f1b4d605b282",
        "cursor": {
          "ref": "782f3de0-5b3d-45a4-8658-205d01d2913b",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "24e5ab18-8639-42e1-88df-f94b5b93ffcd"
        },
        "item": {
          "id": "30dba9a4-1d8a-446e-b977-f1b4d605b282",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "b1dc43a0-17ef-4026-9c0e-300b18124a88",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "139168e2-7490-4b3a-bf16-0dfea7a6d937",
        "cursor": {
          "ref": "022ec889-58de-46a2-ae41-88ecf94f22dd",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "7e4f9fb7-1d04-4abf-bbb8-3ad6173736ed"
        },
        "item": {
          "id": "139168e2-7490-4b3a-bf16-0dfea7a6d937",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "3e70d8f7-bd78-4235-a405-7f4b482fb0a7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "7f284dc2-0c75-466c-8f3c-e683583930a4",
        "cursor": {
          "ref": "b58564b5-0fba-4453-a765-a4e66beba590",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "9bb9ac08-d642-43a1-84d6-c8198bf559ae"
        },
        "item": {
          "id": "7f284dc2-0c75-466c-8f3c-e683583930a4",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "899135b9-1316-4633-a1f7-7bf10e1a5e56",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "0730cd9f-5abe-463e-85da-2bdce0c3c845",
        "cursor": {
          "ref": "a2220c12-e338-4bd4-bdfd-c0f0b5b2996d",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "882c7e5a-0db8-455e-b780-a8be57defcf6"
        },
        "item": {
          "id": "0730cd9f-5abe-463e-85da-2bdce0c3c845",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "6c120109-b6cd-4ebb-9c9b-7f67454720c3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "18ee6660-db9d-4c77-968d-c03058c6e85e",
        "cursor": {
          "ref": "60a58c60-0aaa-4b15-834b-4ee1eeb883b7",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "11b150a0-f2a9-4d79-9ca8-0098f03565c3"
        },
        "item": {
          "id": "18ee6660-db9d-4c77-968d-c03058c6e85e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f5d086bd-4af9-4166-a450-5b980776a1d8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96d19783-1482-4cb4-8872-76a484d5f11f",
        "cursor": {
          "ref": "3465ce9d-3750-46a4-93f4-174e6e1b81bc",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "fec20517-48ec-4f83-8024-d0315efb58c8"
        },
        "item": {
          "id": "96d19783-1482-4cb4-8872-76a484d5f11f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "6f3a342d-bc4b-48b9-b4f7-9169f663eb76",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1150f7e8-8d12-40d2-abf8-f5e476e4ab00",
        "cursor": {
          "ref": "bfc54218-5395-491c-b4ec-cd82be2550ab",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "75bec82a-56be-4ed4-9269-99618c08391e"
        },
        "item": {
          "id": "1150f7e8-8d12-40d2-abf8-f5e476e4ab00",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "6c77669d-341e-4df0-8809-fe52f5fe5b91",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e430116b-0df6-4686-a4c9-2e9d52f0aac4",
        "cursor": {
          "ref": "aa89962e-bdb5-4ef8-86be-ce89890da2ed",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "19240039-9c73-46c8-926b-f8c970c48156"
        },
        "item": {
          "id": "e430116b-0df6-4686-a4c9-2e9d52f0aac4",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ce7d17c7-c689-4caf-9c55-1a09a8811ea5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afc0b7da-4bd4-4233-a5c9-8458c4feb7c6",
        "cursor": {
          "ref": "a5f0d7db-017e-4b12-8aaf-11c0c30da214",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "e81e199c-0bac-4c25-b126-7c3542d43450"
        },
        "item": {
          "id": "afc0b7da-4bd4-4233-a5c9-8458c4feb7c6",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "b3480a82-eb6c-4f6c-9c87-29833668545b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74999414-3298-42f5-9544-26de105c9627",
        "cursor": {
          "ref": "e2c9e65c-3bd0-4194-8d49-807b35295dc8",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "ef51a8df-d2a5-4d8c-8697-0640be70c81f"
        },
        "item": {
          "id": "74999414-3298-42f5-9544-26de105c9627",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "8655d765-ddc2-4935-b4f8-aa626022f872",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8443db7-f93f-4579-8ff9-0f40a1038737",
        "cursor": {
          "ref": "46896b67-8740-4bef-ba51-c60b9218cd44",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "47e53d9e-8494-4be2-8fd0-8f029ffbbc86"
        },
        "item": {
          "id": "e8443db7-f93f-4579-8ff9-0f40a1038737",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "658ef6cd-3e99-4492-955a-7701fe82fc8f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7968c32a-aaa8-46fc-abd2-8987eff4514e",
        "cursor": {
          "ref": "ab538039-5549-458f-a9a1-a9041c26853b",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "20a21a6b-25df-4d86-aa97-234bcbdde602"
        },
        "item": {
          "id": "7968c32a-aaa8-46fc-abd2-8987eff4514e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "f67ac8e9-ccf7-4a29-87da-4fc375daf708",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "710c1746-795a-4a7b-87d5-2cb80cb99744",
        "cursor": {
          "ref": "00e2ae0e-eb20-4d1b-9b8c-ed43d18b8221",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "8cba573c-f233-4b04-b9ad-928f928131d5"
        },
        "item": {
          "id": "710c1746-795a-4a7b-87d5-2cb80cb99744",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c0a2c3c0-30d0-46f9-849f-b3e86cfe4bb2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e47c8a73-4966-4d1a-8dfe-2b41d9cd76a0",
        "cursor": {
          "ref": "fcb5b2e6-da99-4d11-84e8-5851e64dad2b",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "b3de209a-c26d-4bb9-83e9-7f331a7f531e"
        },
        "item": {
          "id": "e47c8a73-4966-4d1a-8dfe-2b41d9cd76a0",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "935adb6d-ffb1-4b63-bf9b-f00e3baed501",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb1d37f0-b566-4a35-b707-f0bbb1e8c6bc",
        "cursor": {
          "ref": "94cec09b-96e2-4be1-ad13-c55fade27d42",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "5893f2b1-a9ce-476f-83e6-21b03f9643f1"
        },
        "item": {
          "id": "cb1d37f0-b566-4a35-b707-f0bbb1e8c6bc",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "7f212f86-0092-4c7c-b373-978ed3662d2f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f97bf820-5c92-4251-b302-80b59a098991",
        "cursor": {
          "ref": "904056cc-7273-49c8-989c-900fb3878f92",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "64c496dd-070f-4376-8774-ed2ded2bec50"
        },
        "item": {
          "id": "f97bf820-5c92-4251-b302-80b59a098991",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "095419da-784f-4742-b2a0-25627d8af76f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62221e25-cd7e-46df-8c81-562909f06712",
        "cursor": {
          "ref": "9d80275c-e62f-432e-9b24-135ff3367088",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "fad4a5d1-bc01-4490-83e2-2253a1db829d"
        },
        "item": {
          "id": "62221e25-cd7e-46df-8c81-562909f06712",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "b04e9a7c-78c4-4199-b923-125bc00216bb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c955e87-ab03-4482-9145-83a159b22945",
        "cursor": {
          "ref": "f28bb8c9-19c3-497e-89c8-2fcde5b701c3",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "27d715ca-dbce-4112-bcf2-cc9afcf86619"
        },
        "item": {
          "id": "0c955e87-ab03-4482-9145-83a159b22945",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "c771f85c-633d-4261-ada1-cfed7a1c87f9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efd24be5-cead-4a20-a992-038249c6abea",
        "cursor": {
          "ref": "fcb945dd-8ed0-497b-b529-aa5e5e6db0f3",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "f57cc207-536e-4723-a9ac-c0b619c4272f"
        },
        "item": {
          "id": "efd24be5-cead-4a20-a992-038249c6abea",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "65964ffa-26e5-4c14-a069-6d341a7ae4e6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0958a37f-7adc-4390-a320-56d535acccce",
        "cursor": {
          "ref": "51518737-5713-4dc1-b1f0-5edcd7fb6750",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "85cf99ce-fbad-4f6e-a215-1dee42fc5f07"
        },
        "item": {
          "id": "0958a37f-7adc-4390-a320-56d535acccce",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "48b58228-cd86-4de3-ac74-07f4c1c4d7e2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "992c5cd6-bc9f-4ab0-96f2-1314669679f3",
        "cursor": {
          "ref": "047c90d5-1da7-4081-b73b-91037d6ada02",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "64d0dd5b-9828-49f2-97ea-b84534e7016d"
        },
        "item": {
          "id": "992c5cd6-bc9f-4ab0-96f2-1314669679f3",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "d478a22c-4582-4135-b39e-e5614eb185e1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c6c5552-4352-4085-9909-ec5197e3b481",
        "cursor": {
          "ref": "0ea96a00-e07a-43c7-92b5-196a710c2dd0",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "d1a579f0-290b-4871-8e07-440f73e5f410"
        },
        "item": {
          "id": "8c6c5552-4352-4085-9909-ec5197e3b481",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "60ffe357-7a58-42a2-9fa1-9d621258430e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2179d5e-0421-4885-a1ea-b1733aa0c6f1",
        "cursor": {
          "ref": "f41b8f8a-8d13-4fc3-b977-0a48609c2dea",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "cca47da4-9e14-4a2f-be2d-2838c8c2bdf0"
        },
        "item": {
          "id": "a2179d5e-0421-4885-a1ea-b1733aa0c6f1",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "c2575ed9-eccb-4e43-a7b0-adb69184e64f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64039d40-187b-4a74-9c45-cae841f8302b",
        "cursor": {
          "ref": "adb3d5c6-f9cf-4c12-b27a-64d4d6ab8843",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "be990a91-2c04-48c0-8dab-d05afecb4bfe"
        },
        "item": {
          "id": "64039d40-187b-4a74-9c45-cae841f8302b",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "806bdac7-f35e-4d97-bb32-76baf4d6d8d1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4199fd3d-9219-456e-945b-9de9045c28e4",
        "cursor": {
          "ref": "88e255d3-3fa3-4e46-8686-a13ddd171d56",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "d944f0e7-6201-4f21-abbe-4fce89b89f30"
        },
        "item": {
          "id": "4199fd3d-9219-456e-945b-9de9045c28e4",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "e3753286-1ee3-4d00-a3e3-6a8f83a6b431",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7adab3c3-b3de-4baa-8da4-e7cdfbfa5b3f",
        "cursor": {
          "ref": "86fb92b3-b87c-427a-8b7d-c2bb09a5c32c",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "4f96c81b-b399-4d84-a4fd-468619fa201d"
        },
        "item": {
          "id": "7adab3c3-b3de-4baa-8da4-e7cdfbfa5b3f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "4acaa16c-0855-4dba-a5b8-c09a94fa980a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9a74ebd-f657-4df7-b4cb-4045b61b43de",
        "cursor": {
          "ref": "ad7253b8-fc0c-4057-87ea-5bce2f9daadc",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "a8ca032e-47f4-4e44-8ec3-5734a15a71b2"
        },
        "item": {
          "id": "e9a74ebd-f657-4df7-b4cb-4045b61b43de",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "f24a7007-7f6f-4e3a-8027-786ae40c1bbc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36923035-8253-4d38-a1f8-0005ab77c486",
        "cursor": {
          "ref": "d9dbf7cf-6e95-415b-8d79-7d6125075d34",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "275a4231-d121-473e-a7a8-67e8a75806e7"
        },
        "item": {
          "id": "36923035-8253-4d38-a1f8-0005ab77c486",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "3a1a23a0-3957-4a97-96a7-8b0381b4f8ef",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb212e3b-e7b5-4ed2-a1d4-7d4eba70bb22",
        "cursor": {
          "ref": "eb2f6284-e1fe-40ae-8b23-f858237f7c50",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "13c2ec87-fbbb-4fb2-b790-e39792505f99"
        },
        "item": {
          "id": "cb212e3b-e7b5-4ed2-a1d4-7d4eba70bb22",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "04b788b7-191f-407c-9a9d-c16a7b6ecf32",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c73de15-d4ba-40e2-be60-c214da7d0f6b",
        "cursor": {
          "ref": "6f786965-dc28-4e74-b4ee-22d3b00e0314",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "6a028820-708f-4deb-8731-49cefb3151ee"
        },
        "item": {
          "id": "6c73de15-d4ba-40e2-be60-c214da7d0f6b",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "4fc8c56c-707d-4144-a2b4-5fcc5e1ed6f6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1edd6a1e-ea1e-460e-9b82-0ff975ec1e25",
        "cursor": {
          "ref": "c8d650c1-3ac0-4937-969f-2ff98c1fdb2c",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "1715ed8b-e014-4be9-920b-20e624d46e3d"
        },
        "item": {
          "id": "1edd6a1e-ea1e-460e-9b82-0ff975ec1e25",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "3bb7916a-3f92-44d5-bde8-e9cf4cc99383",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cf741a0-64a3-4f1c-bd96-c0fe68c918a3",
        "cursor": {
          "ref": "8164f355-404c-4123-a809-1a11df2a619f",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "1c03332f-e126-4fc4-8c03-d757e9c844ae"
        },
        "item": {
          "id": "6cf741a0-64a3-4f1c-bd96-c0fe68c918a3",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "9e721a0b-1244-407b-adbe-8a7dccd096a4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ed5da39-c5ca-4a54-9920-128badc1f7ed",
        "cursor": {
          "ref": "4687d68e-8064-42fc-8acb-ec9e4c68caf9",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "c1d8ae98-a21f-4a0e-a155-0db2883c1e4c"
        },
        "item": {
          "id": "1ed5da39-c5ca-4a54-9920-128badc1f7ed",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b3eb6555-18fd-4f56-a038-6f167cced5ad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "955d3d4b-9f2c-48bd-93b5-ca83aeb5a8b0",
        "cursor": {
          "ref": "6a24e457-5b8b-49e3-9b17-294996dbd4b2",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "a0e11093-e386-40f8-a0ec-f5e014c0d9c1"
        },
        "item": {
          "id": "955d3d4b-9f2c-48bd-93b5-ca83aeb5a8b0",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a10aedb8-a24d-431c-bd62-25fdce9dc691",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dfd63c2-4083-4666-a3e1-759de95f9403",
        "cursor": {
          "ref": "f8396606-bb0b-42a0-b6a1-e7b052346c1c",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b516f178-249e-40e5-a3c8-0ce1d3ad53ab"
        },
        "item": {
          "id": "1dfd63c2-4083-4666-a3e1-759de95f9403",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "50fec9c7-7779-45aa-a130-be3078ed6259",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bdae23f-5c39-42ab-af8f-6156752d0365",
        "cursor": {
          "ref": "d1233ce4-f2a8-4723-b35e-3d4ac7becf19",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "574572a2-fab0-40c4-9fdf-25a28fe9d74b"
        },
        "item": {
          "id": "4bdae23f-5c39-42ab-af8f-6156752d0365",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "3d72a6ab-d9c7-49a6-af8c-67702665e1e9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8bdf8ad-b8a1-4fc6-a44d-96e8b444acc6",
        "cursor": {
          "ref": "b87712fa-4233-4114-bf24-b909bba2ca6b",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "a71361b1-236d-42d5-b318-10c6d7a5cfad"
        },
        "item": {
          "id": "d8bdf8ad-b8a1-4fc6-a44d-96e8b444acc6",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "d5727307-3d26-491b-8bcc-895fc3093b73",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd29e2b2-4f02-4663-ba40-615cfba5f748",
        "cursor": {
          "ref": "51ed0b33-bd96-478d-be5a-0272ba73e41b",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "46bfcf7f-aa8d-4a8f-aca2-bfed4c88e4f2"
        },
        "item": {
          "id": "dd29e2b2-4f02-4663-ba40-615cfba5f748",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "17fde4f3-9963-4bdd-9262-5caf528a6586",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4952c157-45a4-4fd7-bdd3-9ce7e0a90b1b",
        "cursor": {
          "ref": "7a10a126-cce8-4603-bf7b-18510bf70d89",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "ca49d4b0-0b95-4f06-ab66-24cf06526e36"
        },
        "item": {
          "id": "4952c157-45a4-4fd7-bdd3-9ce7e0a90b1b",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "cf9c0597-0198-41cb-aa1c-70e510b9251d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f26de3df-8f67-4161-98c5-b7b36381c1e2",
        "cursor": {
          "ref": "c4befccb-40db-48d8-81e0-715f9fc598db",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "81ab52a4-db19-4c09-873e-a78602eef0d3"
        },
        "item": {
          "id": "f26de3df-8f67-4161-98c5-b7b36381c1e2",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "3d45ead8-6db2-474a-be38-5412509e8d0c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40d474ef-b7f8-452d-8391-43f06257d40d",
        "cursor": {
          "ref": "37bf3b8a-be83-46ab-97df-d97034431c67",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "1b19d8a5-8015-45f6-8bca-d6c37da2fd0c"
        },
        "item": {
          "id": "40d474ef-b7f8-452d-8391-43f06257d40d",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "f0d81844-cd87-4c44-8425-b0054f4170a6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba85363c-5f01-4ca5-8c51-b6f308376021",
        "cursor": {
          "ref": "87003d97-a665-4b86-8168-069e9b53e73c",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "9b1b7ee2-b7bf-434b-a5c1-edc0642487d4"
        },
        "item": {
          "id": "ba85363c-5f01-4ca5-8c51-b6f308376021",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "94f4b309-7ce9-4d4b-b0a0-aa8f711d9d35",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ab48e68-1876-42ce-87bf-0c616f559761",
        "cursor": {
          "ref": "c6e7ade9-c8a6-4e88-9ae5-3f31b3d3b0c3",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "cadfb5f0-0986-46b8-84d3-cc98f47484c5"
        },
        "item": {
          "id": "8ab48e68-1876-42ce-87bf-0c616f559761",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "78eb688d-aede-44a0-a890-ee005d2cc466",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7295dbe-2b74-48e8-90c7-ffdfcaa8fd50",
        "cursor": {
          "ref": "e1658a89-62e9-47a7-b11f-fc2d991b9f79",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "e1373822-0922-4310-b346-ab8a8faaf377"
        },
        "item": {
          "id": "d7295dbe-2b74-48e8-90c7-ffdfcaa8fd50",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "184283b9-e944-4ccc-a2fe-6c0131c67686",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fb19dc8-5cf7-4439-a56d-f46853246742",
        "cursor": {
          "ref": "03a716a3-ea0d-4e87-9f1a-1f44a591d90d",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "74c69651-f808-4954-a1f2-e739023e4013"
        },
        "item": {
          "id": "5fb19dc8-5cf7-4439-a56d-f46853246742",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "12ae5b45-1e7b-4351-84be-530d5ee822c4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f713b206-1786-452f-8fab-294d9283a81c",
        "cursor": {
          "ref": "e41a6456-7f6b-4c6a-a037-b9869a87e95e",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "a877a23b-b333-493b-8921-76703882bb43"
        },
        "item": {
          "id": "f713b206-1786-452f-8fab-294d9283a81c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "0b183ffe-a932-46e3-9efe-99525a9a4803",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8074d0bb-82b7-4d19-81db-e4ee55ba5f24",
        "cursor": {
          "ref": "be060f48-c9cb-4db9-a0df-b31d4ab70a15",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "663bd329-4cf5-49b6-808b-291433a1b0ee"
        },
        "item": {
          "id": "8074d0bb-82b7-4d19-81db-e4ee55ba5f24",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "9030f4c1-dee0-47d5-a127-6cb51eae482f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6558a3c5-77bb-4122-ac94-207fb1bfb041",
        "cursor": {
          "ref": "85ffbafa-9059-488d-bc6f-07cfc9329d1e",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "727885a9-5519-4b56-8925-101fc3f985fa"
        },
        "item": {
          "id": "6558a3c5-77bb-4122-ac94-207fb1bfb041",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "43d1aa03-2953-4f31-93fb-e78e1cf78566",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c45933db-1971-44d9-a183-a1a4bce2a793",
        "cursor": {
          "ref": "54d90e53-31e1-4a24-807c-40a66ea6ab8c",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "57c9a87c-f83d-44df-892a-5f13170bc1d6"
        },
        "item": {
          "id": "c45933db-1971-44d9-a183-a1a4bce2a793",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "a089d660-c276-4a24-a570-189804c90ce3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ed66dc5-2f3c-4271-a48c-7d777ab75d96",
        "cursor": {
          "ref": "5039a644-c801-4ee9-8775-4d4eb1018d85",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "59c204bf-1d1c-458a-aba6-66370839a992"
        },
        "item": {
          "id": "0ed66dc5-2f3c-4271-a48c-7d777ab75d96",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ffdada32-b8d4-4db2-8f14-2e3c82e24c12",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2caeadc3-aedc-496e-8519-79c7eb1377d9",
        "cursor": {
          "ref": "00b2e113-a929-4d30-804a-da8bd7d42e93",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "758cf57a-a94b-461e-9e28-32c4f068dec8"
        },
        "item": {
          "id": "2caeadc3-aedc-496e-8519-79c7eb1377d9",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "868d6c1f-930c-4a40-aec8-cb398ceb535d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1546eac6-aa1b-4c0c-bbaf-f8b1cf36f274",
        "cursor": {
          "ref": "c327a5f2-36ec-4dad-be95-ab2b37cef493",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "02d2aa82-cc5e-4ff1-9e1d-b45d217da4a6"
        },
        "item": {
          "id": "1546eac6-aa1b-4c0c-bbaf-f8b1cf36f274",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "3f17dd91-9ad1-40b9-b404-74e96a2d118a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c5c3b86-867f-4b5a-96b2-e7c2fa7fd0c3",
        "cursor": {
          "ref": "b1159aca-bcd7-40e8-b271-aec22a9050e8",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "b8567049-3cd6-457d-85ac-a9503ede3da5"
        },
        "item": {
          "id": "6c5c3b86-867f-4b5a-96b2-e7c2fa7fd0c3",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "5fb737f6-e590-4516-9b56-ff03dcee8b5a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff7412d5-9807-4d36-9a28-6598ad5aad2b",
        "cursor": {
          "ref": "5639aed9-79de-4d5a-82de-e1492a203c4f",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "4f2d03b5-0d86-41bc-a2e1-d64088047bf5"
        },
        "item": {
          "id": "ff7412d5-9807-4d36-9a28-6598ad5aad2b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "1fc72e17-4d02-41e7-8832-63ae8e222090",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b708fba2-0fe5-47db-82a7-88595c67bc11",
        "cursor": {
          "ref": "47362b7d-5378-4f03-8834-f62513cd3ab9",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "72657b47-9177-48f9-b033-e50ec27d4548"
        },
        "item": {
          "id": "b708fba2-0fe5-47db-82a7-88595c67bc11",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "196732e6-e813-4e0b-90e5-9226f9fa998a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbf4cab6-bf2b-41f8-a16d-6adf78e17f5d",
        "cursor": {
          "ref": "3c5d04b8-2aea-412b-81bb-1726a01cb7ae",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "47a194bc-53bc-4c3e-9f6d-9d02b80f5a36"
        },
        "item": {
          "id": "bbf4cab6-bf2b-41f8-a16d-6adf78e17f5d",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "67ea0f5d-9a6b-427c-87a4-02ccf495b4c1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8ddf600-f909-4b1b-b225-38f647708aa8",
        "cursor": {
          "ref": "c9f91326-cbe8-4c12-9590-8177b2033a59",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "d4afdd71-593b-4962-bc43-4dce184e89b1"
        },
        "item": {
          "id": "b8ddf600-f909-4b1b-b225-38f647708aa8",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "6bc60fc0-9fa6-42bd-b546-24cc3b2972ab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62c6beb1-0f90-487a-9ef3-695fcc41d177",
        "cursor": {
          "ref": "7461ea2c-6c85-4c0c-8c1a-77ee491c7abb",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "4f9a7faa-21e3-4d2f-8da3-6e86681a6a03"
        },
        "item": {
          "id": "62c6beb1-0f90-487a-9ef3-695fcc41d177",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "605f3700-1e31-41a3-a3ab-f8fe887cd21a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4008c3af-c2ec-453a-8630-1ec8becf9c09",
        "cursor": {
          "ref": "8a1907fb-5918-4564-9b40-684eb04fccd2",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "69e53d36-289f-44e4-96a2-f76ccdb492a6"
        },
        "item": {
          "id": "4008c3af-c2ec-453a-8630-1ec8becf9c09",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "e238c1ac-c3e3-4716-bc8f-ca5245a70ca0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17b49125-7743-400d-b41f-a0dc1e516c70",
        "cursor": {
          "ref": "f72662bf-a16c-4553-9562-5730590a5f49",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "6ad956a5-1b8a-4c01-9c5d-53678c57a020"
        },
        "item": {
          "id": "17b49125-7743-400d-b41f-a0dc1e516c70",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "71c94737-ed27-442f-83d2-15206b065142",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "171e59a1-9318-4391-b188-fa6cfa650649",
        "cursor": {
          "ref": "a470b500-28a1-44eb-99d9-4b22a272b822",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "1d50e785-3756-47d4-b9e0-75b5dfa5e99c"
        },
        "item": {
          "id": "171e59a1-9318-4391-b188-fa6cfa650649",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "f8bf126b-4204-4934-96d2-0fcb9a0fea0a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ca9d780-9f65-426b-8395-e0e347517b47",
        "cursor": {
          "ref": "539a88e6-0ca6-4612-94e3-607bee94ddfe",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "7aa9287d-ff52-441f-9ce7-2867e4e6c139"
        },
        "item": {
          "id": "6ca9d780-9f65-426b-8395-e0e347517b47",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "2959a50c-e52c-40a4-a1fc-f2f702351e91",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d5f072d-4df0-4360-adcc-efd1d7bdb4a3",
        "cursor": {
          "ref": "02262084-0c37-4a99-b9a6-55bfa4a623f8",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "b12f1a08-0e35-421b-a8cc-33edc95a5303"
        },
        "item": {
          "id": "7d5f072d-4df0-4360-adcc-efd1d7bdb4a3",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "d96c5ef2-36be-434e-9cef-d40674c7c7ce",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6c3f36b-f495-4be6-8bb2-f5460f13bac0",
        "cursor": {
          "ref": "a04542b1-4824-48ae-b4a6-70647d522439",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "fba6ad5b-52a7-42ef-bde5-5c87bae8fabe"
        },
        "item": {
          "id": "a6c3f36b-f495-4be6-8bb2-f5460f13bac0",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a8aa5697-5e44-4aa7-85df-220113876d35",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d043131d-eba9-46ad-b8bd-b518dc9ec5db",
        "cursor": {
          "ref": "e87cd1e0-18e2-450d-844d-9615e814dab5",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "d2e36a5e-65e5-4aa9-8922-4bf3d406178a"
        },
        "item": {
          "id": "d043131d-eba9-46ad-b8bd-b518dc9ec5db",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "d2493a33-ab1f-445a-9b8d-1bd5c05e0142",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21efed29-8b36-49dd-a558-474925e34088",
        "cursor": {
          "ref": "e2e172c2-1fa8-45fa-9ebb-4f6fa1c99dbf",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "66bcdeef-8425-4098-97da-dd31004af61d"
        },
        "item": {
          "id": "21efed29-8b36-49dd-a558-474925e34088",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "87812d8e-9c5e-4104-860a-16cf0122eada",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27fef19e-49b6-4c84-9201-dccc85430456",
        "cursor": {
          "ref": "c4455640-d11e-4b08-b3fb-ef2054791a3e",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "fe4a147e-7477-4cfa-9d94-d575a80beec6"
        },
        "item": {
          "id": "27fef19e-49b6-4c84-9201-dccc85430456",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "70282ab7-3d41-4a43-8177-29db75932477",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97c333a9-429c-422f-8f44-6ee71d7d9dd0",
        "cursor": {
          "ref": "e186ab4a-f773-49fa-be1d-c3a9927bc5f6",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "cfd7baed-3b87-460b-8bbf-3534f8200aa9"
        },
        "item": {
          "id": "97c333a9-429c-422f-8f44-6ee71d7d9dd0",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "a36dd62b-234c-4e29-acd0-254bf392168e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "898a243b-165d-42c2-9e97-e1799c43bf37",
        "cursor": {
          "ref": "476c0fc1-44ef-481c-992a-426dd7847586",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "2179f630-3ce6-4411-a0c6-9248913d1531"
        },
        "item": {
          "id": "898a243b-165d-42c2-9e97-e1799c43bf37",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "b3a1ee42-8c2a-4673-a402-2b79bae5befc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2653d0d3-84cd-4c6d-9eb2-5f147461b0c2",
        "cursor": {
          "ref": "3ad818f8-efe6-4f20-97f8-114aeb7293a2",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "a04213d0-04de-44d7-a82d-292c4274d443"
        },
        "item": {
          "id": "2653d0d3-84cd-4c6d-9eb2-5f147461b0c2",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "ba227fe4-abc7-4682-ab8c-1596fa8d5a2a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39bcc6ba-df74-45d7-a6ef-dbe3a36cde6b",
        "cursor": {
          "ref": "d2b654b8-dcfe-4390-aaa2-9afa87f29e18",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "d5d004b5-4412-4b89-b2ae-4bdcd26d65f3"
        },
        "item": {
          "id": "39bcc6ba-df74-45d7-a6ef-dbe3a36cde6b",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "8e0e3fca-d42b-4d21-885c-c7a76b7833af",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f52e773f-1dad-4de1-b687-b68072110c75",
        "cursor": {
          "ref": "4436573a-6bc5-42d7-830c-24c0155c99d2",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "01fc9cb6-3bbc-4af8-8163-0b20ee87ac64"
        },
        "item": {
          "id": "f52e773f-1dad-4de1-b687-b68072110c75",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "4cbc9711-bfcb-4061-8b09-a35c8e751612",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beafc618-3c99-4e1c-80f6-7971f503187f",
        "cursor": {
          "ref": "c697a607-3145-4ec5-86f3-8f3743344d8f",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "bcf99cc6-7961-4682-a73a-630ecf40a88c"
        },
        "item": {
          "id": "beafc618-3c99-4e1c-80f6-7971f503187f",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "65740b58-5835-44b9-8cfd-d1f41c0e13cb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "364cd203-363e-42bb-b81f-b296fa3ff373",
        "cursor": {
          "ref": "abfc5be1-3815-435b-8fac-2fe687caadf5",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "a01aa4d3-4b31-43c9-a539-1449a4894d57"
        },
        "item": {
          "id": "364cd203-363e-42bb-b81f-b296fa3ff373",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "9ad1d729-ebbe-45a1-b638-8d9e87e8fffd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02308df8-f4d4-4c7c-9759-648f08195b87",
        "cursor": {
          "ref": "ef7c59a2-2a85-4fd2-b51e-c5f580199cb4",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "4e5c7c54-b6ff-4ecc-83ed-a56c3b0b9dcd"
        },
        "item": {
          "id": "02308df8-f4d4-4c7c-9759-648f08195b87",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f34b0441-159b-4201-aa14-0f6ee83a51f3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eb1e903-3c34-4685-ada0-6450eff8c114",
        "cursor": {
          "ref": "eb587551-74b0-40ce-841f-1a2e13a43cf2",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "5c850352-da4b-4271-9891-0e5a1e2eeae8"
        },
        "item": {
          "id": "8eb1e903-3c34-4685-ada0-6450eff8c114",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "7241a92f-1c43-49b9-96c5-a2ff61e2babc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cc18788-2530-481e-9a74-b57bc771a0d7",
        "cursor": {
          "ref": "c29f9ff4-21d3-409b-b7a8-b19340fdb3dc",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "3898a995-708c-4e0e-8475-422df56d3f82"
        },
        "item": {
          "id": "8cc18788-2530-481e-9a74-b57bc771a0d7",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "0fa568b3-5a23-4cde-b9ff-242be636377b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c930a7f-9beb-4b39-8d1a-6ed8ad21b868",
        "cursor": {
          "ref": "11bf1ac2-8fbc-4c1f-8e3f-102319b136c0",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "e97bb53d-ae1f-481d-bdc9-03db555dfc56"
        },
        "item": {
          "id": "8c930a7f-9beb-4b39-8d1a-6ed8ad21b868",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "cc1403ec-cc6a-4a9d-9ac1-9c58ad450048",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "347c587f-111d-4c14-89ec-232e6e0a8f13",
        "cursor": {
          "ref": "7f565a5d-8982-4c32-9f51-83a9502d3a9a",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "a86aaf7b-47f7-4a3a-a68e-58d87cc9d640"
        },
        "item": {
          "id": "347c587f-111d-4c14-89ec-232e6e0a8f13",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "5fc1e3a5-a819-4ada-8afa-1baa3cda18cd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ce83b2c-3a52-493a-82dd-4613a968b02f",
        "cursor": {
          "ref": "303f98b7-1512-4ea6-a9b3-0a750cc63e3f",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "be1065ce-c9c8-476d-aaf4-47eea784f27a"
        },
        "item": {
          "id": "5ce83b2c-3a52-493a-82dd-4613a968b02f",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "19167f7f-6951-4fae-a291-2cab7cab8e0e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8680c57f-58c2-4d0f-9ba3-daf7a8c35c39",
        "cursor": {
          "ref": "6410927f-95ab-47a5-b6ec-ffdc580be888",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "d0bb4105-6d58-492d-add7-0322660434a4"
        },
        "item": {
          "id": "8680c57f-58c2-4d0f-9ba3-daf7a8c35c39",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "e783bcb8-493f-4b25-b634-6770f7254759",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0873dec5-35c2-4399-8e24-d62f163d2b32",
        "cursor": {
          "ref": "f5a0d887-5b59-4533-8add-c5de4b61b4ad",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "f75fa3ad-0163-4018-b1ea-c05127d24495"
        },
        "item": {
          "id": "0873dec5-35c2-4399-8e24-d62f163d2b32",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "2df1099d-e1c3-4d55-b539-7ac494e1f0f0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1109ddc8-ad24-4e51-8439-33b7a376e36b",
        "cursor": {
          "ref": "9a07b3eb-8ecb-4bc3-90e5-3d8bc23b2346",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "661b279b-c4ff-4a9b-9756-16bf7e03b28c"
        },
        "item": {
          "id": "1109ddc8-ad24-4e51-8439-33b7a376e36b",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "6210ac96-bbff-422c-baa2-f0ccc60eddc5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed14db6c-4ee7-4a3a-b2fc-ab76ab541ad4",
        "cursor": {
          "ref": "f5b9118e-8e74-483a-95b3-5437d91c4fc4",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "2df99fe3-65b7-42a8-bd6a-1f08c7bdcbf7"
        },
        "item": {
          "id": "ed14db6c-4ee7-4a3a-b2fc-ab76ab541ad4",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "e2ba184a-e767-4f51-991a-0f9840b529ab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af7081d6-2463-4560-93b6-1c5023554c92",
        "cursor": {
          "ref": "bb80748d-37eb-4bea-898c-4c8b8d48d64f",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "cfbcedae-a5f8-44c6-8047-68c245598eea"
        },
        "item": {
          "id": "af7081d6-2463-4560-93b6-1c5023554c92",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "c52473ba-cfb6-4e9a-8fff-9d88e10d76fc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89785ad4-f180-48b5-b001-878125a85061",
        "cursor": {
          "ref": "a7efab21-fa83-4772-813e-dfce7ea354f9",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "6636bfe0-0a76-4cb0-b9f3-d3301f599679"
        },
        "item": {
          "id": "89785ad4-f180-48b5-b001-878125a85061",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "f7f45dd7-42a6-46d4-989a-b4691ff67366",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e94469f-b8ab-4ca9-8440-8f263b9dafdf",
        "cursor": {
          "ref": "05fcd019-8ddc-4af0-a500-712a214572f0",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "a7d5ca97-bd77-45dc-8c22-100c9e850bb4"
        },
        "item": {
          "id": "5e94469f-b8ab-4ca9-8440-8f263b9dafdf",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "d745f4b8-eaa2-465e-a39c-0f255e9bf11c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feb2e598-c49a-4b35-9d0c-e7255fa86068",
        "cursor": {
          "ref": "84614bbb-47ea-4430-9ac4-45999ccda6e6",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "70523322-9780-49ec-93bb-0565d3a1d3da"
        },
        "item": {
          "id": "feb2e598-c49a-4b35-9d0c-e7255fa86068",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "c12c5153-45ef-4b5a-9f06-1ec06ded1475",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af9d8feb-1b2c-4fdf-983f-eb88ff920d17",
        "cursor": {
          "ref": "603f52f0-f2e2-4794-9bf1-832b30a82f70",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "85992d2e-64b3-40d6-97e8-db1f29c2604a"
        },
        "item": {
          "id": "af9d8feb-1b2c-4fdf-983f-eb88ff920d17",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "29612c51-0e97-46d5-9942-6b02e5b6cdff",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "860c44c9-405e-4597-9ed8-6db98d09d93e",
        "cursor": {
          "ref": "2fd6d1a6-63fa-411f-9648-0c8b8a28ffb3",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "26aa38fa-1572-4336-87e7-94db43bbed2c"
        },
        "item": {
          "id": "860c44c9-405e-4597-9ed8-6db98d09d93e",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "617c3987-de69-42b5-ac4b-bdc79155edb9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da19bb82-f0bf-404a-a716-96d50671fdad",
        "cursor": {
          "ref": "b1e74518-6aa7-4c72-a620-2f8d2b641cac",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "328db7fd-4e1b-4db2-a7a1-6cc204000f68"
        },
        "item": {
          "id": "da19bb82-f0bf-404a-a716-96d50671fdad",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "bc0a141e-0fa4-4b10-8fd6-7da675017757",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c35e019f-b236-4947-9f13-803a6eef5cb3",
        "cursor": {
          "ref": "ee29b281-6442-4af2-91d9-7199be1092e0",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "2ffd953c-63a8-4a66-892a-b77d3d2a4792"
        },
        "item": {
          "id": "c35e019f-b236-4947-9f13-803a6eef5cb3",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "486cea62-0a49-4a84-9208-108d857aa49e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa96a100-53d5-4e31-8969-bd7156bb243d",
        "cursor": {
          "ref": "9f5c6d29-e53c-40a0-8f20-d4121de3e466",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "16a80682-7604-464a-8e4c-f5e07dc7ba54"
        },
        "item": {
          "id": "aa96a100-53d5-4e31-8969-bd7156bb243d",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "8052313f-07da-4c36-9f64-0be75c10a3d2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "313404d4-a423-48fc-a097-fc3170d59070",
        "cursor": {
          "ref": "fce00f84-7bd5-405b-a87c-057e80ed7d09",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "49971954-9a04-4e26-9a0c-b256b4de9657"
        },
        "item": {
          "id": "313404d4-a423-48fc-a097-fc3170d59070",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "b14567ba-7cde-4eee-9a6c-71caa081b8f4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "010f3d43-b39e-4aa9-bee8-a30383751514",
        "cursor": {
          "ref": "2166c2ff-fe4a-4730-935c-e4ca8d54c1d0",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "bc2c1fa4-6465-401f-ac79-2954a4dbc856"
        },
        "item": {
          "id": "010f3d43-b39e-4aa9-bee8-a30383751514",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "e78d7b0d-e3cb-48ad-8890-5e2ae85b777d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67777f36-5115-4160-9920-28d32a613887",
        "cursor": {
          "ref": "3348ce8d-9723-4e40-a7ac-0e6dfd2dda4e",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "3e16afd9-628f-4cc3-891c-e7d9fccfee8e"
        },
        "item": {
          "id": "67777f36-5115-4160-9920-28d32a613887",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "e9fb32ae-f450-45f8-821e-547db84c762c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc95b216-661f-4cd9-8ead-f839cb21a602",
        "cursor": {
          "ref": "d267f513-c564-4f6a-9702-1c1c95e9f7ea",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "509c3e6f-7e72-498d-bbaf-44bdf7420e64"
        },
        "item": {
          "id": "cc95b216-661f-4cd9-8ead-f839cb21a602",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "bdf4cc21-4fdb-4146-a1be-373d28e0bea3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "317d3e44-83ec-4deb-80b7-c739902ce0c9",
        "cursor": {
          "ref": "bdf86629-2f31-4f81-a903-e88fa5f729f9",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "d5cdf0b0-4fcb-4239-9f1d-b3d25d9d12fb"
        },
        "item": {
          "id": "317d3e44-83ec-4deb-80b7-c739902ce0c9",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "5f0bc683-9000-4ab1-84d2-4ff693d1a6ef",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "377dc3d3-29ef-4482-967a-acd7db0c3b22",
        "cursor": {
          "ref": "00bffe31-7db4-49bb-8144-2425a63512fc",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "6c69f8f9-b546-401e-8234-c7d977da107c"
        },
        "item": {
          "id": "377dc3d3-29ef-4482-967a-acd7db0c3b22",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "f46b70a8-650b-42a0-a7f6-4e8f01221107",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 182,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88565873-4e69-4a1f-925e-351555f759af",
        "cursor": {
          "ref": "3c12589d-0b4d-4d37-bd43-7aa41100f690",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "d59ed343-9c5c-4d89-8d77-3ba95090949f"
        },
        "item": {
          "id": "88565873-4e69-4a1f-925e-351555f759af",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "e5ee8b88-5351-4a94-8982-6297fa6e4b93",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b055c21-03db-4b92-96f7-f29f17ec79b5",
        "cursor": {
          "ref": "058c83b3-3d5e-4bc1-b15a-20efa0a13911",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "d5803cd7-0b27-4c19-904c-c4efc77ccf18"
        },
        "item": {
          "id": "4b055c21-03db-4b92-96f7-f29f17ec79b5",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "1707d05a-0939-4819-9caf-266f1f1380d6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d30e40f5-aa96-4bf6-aef6-1dab8b2c4920",
        "cursor": {
          "ref": "21474c8c-1d46-4658-99fc-7d0913810c6e",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "45d62ac5-53cb-4e76-ac27-cbebef70a6cb"
        },
        "item": {
          "id": "d30e40f5-aa96-4bf6-aef6-1dab8b2c4920",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "63ffefac-49e5-4757-86f9-88a5c752276f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cf8f46b-4f34-4afd-b047-e00105976d61",
        "cursor": {
          "ref": "003747d5-cc8d-4d30-b447-b926b5f212f2",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "0b33bea8-c82f-4a75-8b15-ec2aa2527015"
        },
        "item": {
          "id": "3cf8f46b-4f34-4afd-b047-e00105976d61",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "ab7c324e-3130-46a5-8bff-0c0def2aac45",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e41ccb2c-f760-489a-9cf5-599260932f8c",
        "cursor": {
          "ref": "4f9a1ffc-b808-4039-a14d-256292f3a299",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "b9030447-417a-42b1-991b-697408aa6289"
        },
        "item": {
          "id": "e41ccb2c-f760-489a-9cf5-599260932f8c",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "72d2ad4b-a145-4482-8723-82ae0e95c773",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8117edce-a6bf-441d-84b0-2624a4d7bb9c",
        "cursor": {
          "ref": "e2eb5cb1-4704-46cb-a24d-db99c56fe008",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "e0496750-7655-48ae-aa56-a4594ab9432a"
        },
        "item": {
          "id": "8117edce-a6bf-441d-84b0-2624a4d7bb9c",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "78944862-a480-4022-848b-d19d21cea386",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beaa2aca-da85-4bba-8223-4f5af4e53241",
        "cursor": {
          "ref": "3dbf4e66-5f9f-419f-a166-17f54ba50a51",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "772628f9-f993-4f9a-921d-0fae6f253e4c"
        },
        "item": {
          "id": "beaa2aca-da85-4bba-8223-4f5af4e53241",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "a4a8789c-315e-40ac-9338-5c26c2a08a4e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1a8bdae-ef0d-476d-91cc-fcd6f15d77bf",
        "cursor": {
          "ref": "eac05f23-92d3-4120-8857-4421f90d73d6",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "38fa54bc-642a-4e7e-aab7-08e3d0f5e225"
        },
        "item": {
          "id": "a1a8bdae-ef0d-476d-91cc-fcd6f15d77bf",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "e68a8edd-477a-4f49-aca1-f5c4816f243a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b24612d-de9d-435b-8b2f-3149a2b0537e",
        "cursor": {
          "ref": "ecaadcee-7feb-4c09-8283-aba3dd17c092",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "b52c5a74-cea6-46f7-bfcf-404a340f2366"
        },
        "item": {
          "id": "8b24612d-de9d-435b-8b2f-3149a2b0537e",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "28b810b8-f476-4f05-9d97-427706055675",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0931b265-dc10-498a-bd23-cddc2b1cb114",
        "cursor": {
          "ref": "f4992da6-1edc-4056-b629-f3c3c4b28b0d",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "b066cdec-5aff-4b3f-a759-ebc2a7620751"
        },
        "item": {
          "id": "0931b265-dc10-498a-bd23-cddc2b1cb114",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "64b1b7ed-b556-410b-bdc7-bb0920851ab9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2edd2952-2603-44b1-9902-58f79cd862c0",
        "cursor": {
          "ref": "3ca9698d-cce8-4e31-830a-5b91d814cfb5",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "be67f4b2-8bc7-4056-a3b6-0fc61140f45e"
        },
        "item": {
          "id": "2edd2952-2603-44b1-9902-58f79cd862c0",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "983a7af2-ab4c-47b8-9676-388ef8afb57a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47998f98-d4a1-4cfb-af93-0214f484d46f",
        "cursor": {
          "ref": "2ca36344-145c-407c-ba41-c4a3b8f21f2f",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "e0541184-aa00-405e-a6dc-7a6e9bb714f9"
        },
        "item": {
          "id": "47998f98-d4a1-4cfb-af93-0214f484d46f",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "9ee649d7-8243-4448-b11c-5603bbfcd233",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39ac6b7a-045f-4825-877b-05b5279783e7",
        "cursor": {
          "ref": "a19eb650-8ba6-4b0f-97a8-7f15fca8c196",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "4d96bf83-649c-43c2-a602-7736374621df"
        },
        "item": {
          "id": "39ac6b7a-045f-4825-877b-05b5279783e7",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "cddcfcdf-3574-462a-bf92-9da1718e9014",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "331555d9-2f50-4941-9bd8-9397e9ce2f95",
        "cursor": {
          "ref": "955538d9-b889-4600-9856-2d5a947a3d27",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "33755042-b34f-4efb-956a-6190df573526"
        },
        "item": {
          "id": "331555d9-2f50-4941-9bd8-9397e9ce2f95",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "99a75af5-2a1f-4db1-9639-6fd27b7632b1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a90644a-4244-49b3-8c67-7efecfa213f4",
        "cursor": {
          "ref": "a60d7ef8-0b31-4c67-818e-23d2bff9ce25",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "e07c609b-43a3-4bd3-adf0-dee640fceda1"
        },
        "item": {
          "id": "4a90644a-4244-49b3-8c67-7efecfa213f4",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "69dfd63b-2544-4ab6-8894-14338f49a202",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59ae22b6-a947-4d31-9fa7-c51c78b754b4",
        "cursor": {
          "ref": "50b39777-88b7-4aae-9f82-f835f30cfdfb",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "c6e6f946-d9c2-4d25-8649-8c8aea24eeeb"
        },
        "item": {
          "id": "59ae22b6-a947-4d31-9fa7-c51c78b754b4",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "aac6bfd9-f3a6-431d-bff0-057858604094",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d43f5f22-682e-41d3-8cdf-c3c07f2ce580",
        "cursor": {
          "ref": "6abe4609-b380-4846-94cb-e83f3b4c0fd2",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "ee668e5f-c03b-49fb-814d-521cdd44331c"
        },
        "item": {
          "id": "d43f5f22-682e-41d3-8cdf-c3c07f2ce580",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "14d35587-8771-45e1-9151-aae5da07985a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c608aa7-23a9-4301-aa70-08c380651e4f",
        "cursor": {
          "ref": "d9c559fd-51d4-466c-9445-02d8e7fdfda1",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "5f8be662-672a-439c-8cc7-a40f07eb9799"
        },
        "item": {
          "id": "1c608aa7-23a9-4301-aa70-08c380651e4f",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "3141b002-f838-4d92-a291-ad5f7b30fc1a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0237fef1-2261-4aec-a3f9-80174bd62a1e",
        "cursor": {
          "ref": "2a5a2c82-25df-4a54-b4ca-e508f5973dcb",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "40b5f89b-1ea6-42d2-b022-ca8fb9821697"
        },
        "item": {
          "id": "0237fef1-2261-4aec-a3f9-80174bd62a1e",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "6c3fe6ec-a9e3-4853-b1cc-7c1d5ea5e306",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3a00c8d-311e-4001-817b-64598b735fd2",
        "cursor": {
          "ref": "295ce49c-5b58-407a-af67-87b6f378ef94",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "b4fe5617-b2f0-4d99-bafd-002fa610d946"
        },
        "item": {
          "id": "b3a00c8d-311e-4001-817b-64598b735fd2",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "8eadbdb6-6b9b-49f1-a8d6-2c446cbab96d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6ac5c56-470b-4b38-859f-e72d1fe019b3",
        "cursor": {
          "ref": "0c8e36f4-156c-44b8-b64b-372267f65aed",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "b4571d27-a20b-4da5-8041-0bed38d72b76"
        },
        "item": {
          "id": "a6ac5c56-470b-4b38-859f-e72d1fe019b3",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "77fa7a4e-224b-4387-a4d3-37937714d1cd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "653d5b7b-6adb-4d51-8972-ee387f4e9e32",
        "cursor": {
          "ref": "6eed9dfb-7fd6-4720-bcec-dc55525aeab7",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "c3f87bf6-4cc0-4954-b13a-ef6e909ccf42"
        },
        "item": {
          "id": "653d5b7b-6adb-4d51-8972-ee387f4e9e32",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "8aabfd8e-53c5-40f7-b2de-d208299a09f7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bb0b6b1-58b1-4793-9daf-a207fec7b4be",
        "cursor": {
          "ref": "e2edc90b-8dbc-4004-9981-06578a569c6e",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "f1c59c44-6309-4779-b6a9-8879b77a130e"
        },
        "item": {
          "id": "0bb0b6b1-58b1-4793-9daf-a207fec7b4be",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "791098c0-1848-4274-86a5-3d58c9775251",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cf6ab4c-592f-4168-be13-1d2d6df248f5",
        "cursor": {
          "ref": "01f81fb5-c5b5-4d3a-b012-2095283b9b4a",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "61e84f9f-8492-4450-a875-2b5866d4e0aa"
        },
        "item": {
          "id": "8cf6ab4c-592f-4168-be13-1d2d6df248f5",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "28cfd239-5caf-4de0-a384-64856b4db182",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06d866f7-f35c-44f1-84f2-48526616bb41",
        "cursor": {
          "ref": "d347ee31-6b4b-4d43-adc0-3dbfd59d6a1d",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "220b8f6f-ab35-4458-8c83-f5e681ea659e"
        },
        "item": {
          "id": "06d866f7-f35c-44f1-84f2-48526616bb41",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "17c8356a-ebda-4710-9cfe-97e66b328448",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19b3b781-ae59-4879-b72e-48ff95c33a63",
        "cursor": {
          "ref": "a5eceb4e-41b7-4e27-865c-dbae6b381203",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "5f32836d-ae15-41b4-9489-9abe6dc41810"
        },
        "item": {
          "id": "19b3b781-ae59-4879-b72e-48ff95c33a63",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "efdf0a70-7034-47e0-9364-0c5a7e27f8bb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36fbbade-062b-4ac3-9405-ff271695a98a",
        "cursor": {
          "ref": "f979afbb-7a73-492b-bcd9-c0ca4a804b07",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "7d17f501-e44c-40df-9a1f-ba45b3bb1142"
        },
        "item": {
          "id": "36fbbade-062b-4ac3-9405-ff271695a98a",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "67986a8e-d0e9-484a-84d3-ccb0d63477ff",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "679db084-2e41-442d-afc9-ebcfbf4fc737",
        "cursor": {
          "ref": "95cf46c1-707d-405f-b9c8-aabd12c156f9",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "cc2a8437-915e-46ab-a5f6-b5e55eb1182d"
        },
        "item": {
          "id": "679db084-2e41-442d-afc9-ebcfbf4fc737",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "fc8d4158-b2a8-4654-b3b5-09e6071a0e52",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4de00b4d-2984-4561-8508-ff8b2a978435",
        "cursor": {
          "ref": "e66c5a9a-7696-4954-8fb4-908cc7e7b372",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "b3fe4fd4-6d4c-4ae5-a87b-5289a394d36c"
        },
        "item": {
          "id": "4de00b4d-2984-4561-8508-ff8b2a978435",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "71eff170-327c-4a51-a446-e630e1c19593",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a16c9e5a-c5dd-4460-af87-c23f7d87708c",
        "cursor": {
          "ref": "63b00ccf-ac14-40d8-9f2a-6a2e5156c72b",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "8a620b82-ba5f-4161-b60a-36661f24d8d8"
        },
        "item": {
          "id": "a16c9e5a-c5dd-4460-af87-c23f7d87708c",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "8a4d3075-f047-413e-bd48-0dcb780e9f1c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc6c4b98-e0a0-4148-a343-4d4a0c01a900",
        "cursor": {
          "ref": "6403401e-a2f0-44cd-9a48-56e56dcc311a",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "60bcb9bb-ae84-46e3-99f7-c817940ff960"
        },
        "item": {
          "id": "fc6c4b98-e0a0-4148-a343-4d4a0c01a900",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "28e3fdc1-cfe2-4400-9971-7e0863917f38",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25ca6c82-954c-4080-b689-00625db716f0",
        "cursor": {
          "ref": "8b7a7005-a8ad-47e4-8c32-638b4e76f01a",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "0f4d23fe-c8e6-4c7b-a7c5-742611f54396"
        },
        "item": {
          "id": "25ca6c82-954c-4080-b689-00625db716f0",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "2901e433-2293-419a-b0a9-7747db04dff9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50f8748c-ec77-4cb3-97f6-93179d363c72",
        "cursor": {
          "ref": "579ce9e5-247f-4577-82ad-88cbd39e9422",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "5b6e1f77-1317-40e1-8711-91a784013e92"
        },
        "item": {
          "id": "50f8748c-ec77-4cb3-97f6-93179d363c72",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "19918119-868c-46b8-92c4-09f22b0df9b2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71200475-6a63-49f2-8a44-bf72165b3035",
        "cursor": {
          "ref": "8542af94-87b7-4a0e-98fa-d1a1beb32769",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "78245557-40ab-4d49-b53e-5aa42a3f264e"
        },
        "item": {
          "id": "71200475-6a63-49f2-8a44-bf72165b3035",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "b98cf975-0201-4974-a3c8-1c7022e1721e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edb3de91-ee4b-4649-a66b-fed99ffdabf5",
        "cursor": {
          "ref": "54a31a78-3f7f-456d-b8f8-019e9d5b00e6",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "49995141-811c-4459-aa17-03acf3ec8a13"
        },
        "item": {
          "id": "edb3de91-ee4b-4649-a66b-fed99ffdabf5",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "16cfaf4d-f9ab-460e-b1de-9d85cbaf8007",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8769afe-0caf-493f-b374-7616b626dbb0",
        "cursor": {
          "ref": "5fda1530-3ff1-4f4a-b88c-89ee38dec7ad",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "0cde9279-33c7-464c-8c09-bf8edd92f1d0"
        },
        "item": {
          "id": "b8769afe-0caf-493f-b374-7616b626dbb0",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "887741a4-d868-4a0f-ab69-de2ae8e5ccea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d336ea76-224b-41c2-9c8a-b821e65163ad",
        "cursor": {
          "ref": "571fbff7-f52d-4c61-bf70-b697a5dd14c6",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "321e0190-5325-4545-9520-3780b3cdc73d"
        },
        "item": {
          "id": "d336ea76-224b-41c2-9c8a-b821e65163ad",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "e2312a93-889b-4132-8ec1-f49b56416dd3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cf23a4d-c197-4032-8fe4-5669f5867d01",
        "cursor": {
          "ref": "634c9cc8-be7a-4b8e-837c-d2dcff502fa3",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "4d7a7d53-fe1e-4509-a39d-dfdb6462cc52"
        },
        "item": {
          "id": "3cf23a4d-c197-4032-8fe4-5669f5867d01",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "db2478da-1938-4074-bcaf-fecd7adea156",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45bd095c-296d-4430-8c96-820e23cce83f",
        "cursor": {
          "ref": "6e794802-d1f5-489b-8ee9-2cbbbb2d72aa",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "0ab7a0f8-3898-4b23-8933-df50b8a5b7b9"
        },
        "item": {
          "id": "45bd095c-296d-4430-8c96-820e23cce83f",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "01f0dce7-80a3-4634-9038-c1b21b1403fe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43ecac49-bc7d-4253-804e-056b54ab90ee",
        "cursor": {
          "ref": "b845fc25-c01c-43eb-b2a8-437c4f505f6d",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "240bef74-5a75-45dc-85c0-c9d71037d54a"
        },
        "item": {
          "id": "43ecac49-bc7d-4253-804e-056b54ab90ee",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "103f5671-32a2-4fcb-b3e2-e9008d81a70c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87cf6808-3450-4a97-b9ea-1e2667e826de",
        "cursor": {
          "ref": "afb1f984-b8f4-435f-855f-2a08faa7e696",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "f71919ca-8102-4e36-8601-876f876beca2"
        },
        "item": {
          "id": "87cf6808-3450-4a97-b9ea-1e2667e826de",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "2321f31b-6ed1-4ad5-84a4-6289f870becc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4bde3b9-6147-4f06-89d4-709ba2730209",
        "cursor": {
          "ref": "37f0a755-a8da-4b21-bd46-1faf197fcda9",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "2375e7e2-b901-473b-8739-39f615b73cba"
        },
        "item": {
          "id": "d4bde3b9-6147-4f06-89d4-709ba2730209",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "625d7221-7d02-400c-8bfe-9a9486b59520",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d16e00d-5965-4028-b344-b6fd8ff4ff70",
        "cursor": {
          "ref": "24837e30-4696-46b1-9215-bf253129ab45",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "a4c1066b-f0cc-4243-8b8c-a7e3664f10ba"
        },
        "item": {
          "id": "6d16e00d-5965-4028-b344-b6fd8ff4ff70",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "7d820db9-f5d5-4a7a-ba3c-bd3ab5bbd2ec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7b4bbe7-fc8f-4dd6-bc03-8c8cda6741a3",
        "cursor": {
          "ref": "009f452b-89fd-40be-9062-b19920773fb6",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "9b85a476-8899-4ae7-bde5-7ee5167f588b"
        },
        "item": {
          "id": "b7b4bbe7-fc8f-4dd6-bc03-8c8cda6741a3",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "5bcd8e63-b96f-469d-8d6c-9202459a64c4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "381eb4af-2b2b-4dca-a394-c3887a2f3246",
        "cursor": {
          "ref": "b890741e-e25c-4479-ba84-10ca7be5e13c",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "643b756c-3a5b-4a70-854f-fab4cf30fc9c"
        },
        "item": {
          "id": "381eb4af-2b2b-4dca-a394-c3887a2f3246",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "4032a310-4c48-4e10-948a-9e996e08b68d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2f7a022-449b-4003-8665-6af31c1be6b7",
        "cursor": {
          "ref": "4af62509-4549-48ba-bae4-b6ddbb359e78",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "11ef1ac5-a003-495a-9921-565df4eba0f4"
        },
        "item": {
          "id": "d2f7a022-449b-4003-8665-6af31c1be6b7",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "1e543c20-62da-410a-b00c-ce6ed4436cab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "879ef5a4-0e25-4d79-aad1-2cd798231b10",
        "cursor": {
          "ref": "5e668953-3bcc-4ebf-977e-5956ba0f6e24",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "c6c594f2-c82e-4544-a3b5-c184bcad131d"
        },
        "item": {
          "id": "879ef5a4-0e25-4d79-aad1-2cd798231b10",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "a15f7b6d-80d2-4ec5-9766-d0bc7f1c897f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "236016a4-1bd2-43b5-afe1-9e121bb90456",
        "cursor": {
          "ref": "0aeccdfe-f604-4467-9500-910ce862feca",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "3bdd3493-ec8d-4e0d-a4c9-8b08184266c1"
        },
        "item": {
          "id": "236016a4-1bd2-43b5-afe1-9e121bb90456",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "7fe3b484-0153-4c84-8c70-12b80bbb2a81",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e570691-b47a-4c70-b56f-e40cae4cac04",
        "cursor": {
          "ref": "f6a07b2d-ccc9-476b-a150-8d9cd3a3bbb0",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "a79a3178-cf93-484c-af2c-a1f4a6b9f32c"
        },
        "item": {
          "id": "4e570691-b47a-4c70-b56f-e40cae4cac04",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "f3d1bf70-4d24-49fb-baad-361f075d6354",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eced7f4-affa-43ad-83d1-ce5b2ab6cdc7",
        "cursor": {
          "ref": "b77d5f3e-f989-48bc-8712-e91002752937",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "947bf797-1a2e-4fc1-9ee2-ba79f780739f"
        },
        "item": {
          "id": "3eced7f4-affa-43ad-83d1-ce5b2ab6cdc7",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "bac189a3-2ad7-4c60-a402-ded1c585c48c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b89658b4-d5f0-4d9a-b0d1-3c1de4ceea7e",
        "cursor": {
          "ref": "181bc657-b955-41e0-b996-89142c3e4c03",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "91e3755e-e30a-4328-be76-24bb2d177b8c"
        },
        "item": {
          "id": "b89658b4-d5f0-4d9a-b0d1-3c1de4ceea7e",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "c6b21b83-ec2e-4fd5-98e6-120a33d9dc22",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "506530c5-88e0-4570-a520-7dbd424fac05",
        "cursor": {
          "ref": "6956187b-8058-4c04-81a9-99962294fef4",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "c42c18c8-2ea1-4221-8a70-454ba62048b9"
        },
        "item": {
          "id": "506530c5-88e0-4570-a520-7dbd424fac05",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "2377ba1b-5647-4d3a-b673-35cbff9f1894",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "593962be-84d7-4c73-b24d-8210f2cacecf",
        "cursor": {
          "ref": "d39f4818-8d0a-4bff-a679-ae4b57334d57",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "d4407bf9-39fb-4921-b14f-a64e77808d8a"
        },
        "item": {
          "id": "593962be-84d7-4c73-b24d-8210f2cacecf",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "1d4969ce-685f-427a-9160-2d0a62de9948",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "455043ac-1652-4ad6-8b30-ad7eb2fae269",
        "cursor": {
          "ref": "30c7d02a-65db-4f1d-90de-3cb7d5e03746",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "bdac4014-5a68-4f88-ad15-b19784f2f637"
        },
        "item": {
          "id": "455043ac-1652-4ad6-8b30-ad7eb2fae269",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "471a8e14-8e02-447a-a74b-d580fbe27483",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99078376-9e1b-4959-a5cf-c097ba3394e0",
        "cursor": {
          "ref": "a42ad0fc-6438-4b7c-a595-e1d3261593a5",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "9968dd7e-e235-417d-a45f-20195b05abcb"
        },
        "item": {
          "id": "99078376-9e1b-4959-a5cf-c097ba3394e0",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "76906348-004b-45b5-9ba6-605057df69c6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e81d08b-9650-4a0a-8a72-c36db52cbb6a",
        "cursor": {
          "ref": "fd80f29d-3388-4eff-a260-cc5707d0ec42",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "1c486536-e860-4a74-9401-0dc49add61a1"
        },
        "item": {
          "id": "0e81d08b-9650-4a0a-8a72-c36db52cbb6a",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "18e1dc30-bfe8-447d-84d5-a5a5ebe25da2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4866c053-de41-4596-9d64-c9415aad62db",
        "cursor": {
          "ref": "7348971c-d4ac-4762-a2e1-8c42eebe8f27",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "f223bb09-1e16-49c9-8d0f-16a957770c0f"
        },
        "item": {
          "id": "4866c053-de41-4596-9d64-c9415aad62db",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "6eebea97-4e7b-4bee-9792-8436e4c05439",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89119eca-0fc7-4da1-81df-35c0f57fa435",
        "cursor": {
          "ref": "d823ca6c-0f5e-4d0c-bc5d-d4331be24f8c",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "83a96dec-8851-4296-8ba1-8af8f075da6d"
        },
        "item": {
          "id": "89119eca-0fc7-4da1-81df-35c0f57fa435",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "8f38d3d0-d034-472d-9823-85676134a641",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84199da7-4870-4563-894f-c6cf7d210354",
        "cursor": {
          "ref": "1ece72c3-dd1c-4625-9975-f4b13c9fbd18",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "2410a8bf-5f27-4456-bc3c-736f484d5dae"
        },
        "item": {
          "id": "84199da7-4870-4563-894f-c6cf7d210354",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "375651e4-c290-4308-9437-4c99e8c9c037",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78a61e48-6ab7-45c7-93b9-3892daaae744",
        "cursor": {
          "ref": "346d694b-e787-4de2-9002-c876ac552a8d",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "c617b003-fd25-4942-8d99-73ceed8bd1a6"
        },
        "item": {
          "id": "78a61e48-6ab7-45c7-93b9-3892daaae744",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "cad26457-f882-457d-aed1-55ae5af05993",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07a0f15e-dc49-48f3-97db-dc386350b599",
        "cursor": {
          "ref": "fa08f98f-073b-402f-966a-1442c9c17ef3",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "30ed77e3-55d3-449e-9283-23248a64f7cd"
        },
        "item": {
          "id": "07a0f15e-dc49-48f3-97db-dc386350b599",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "ca1a0c64-88a3-4a13-bc61-a8c4611afc63",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2632c401-7bc8-4d68-a412-1537f128a81e",
        "cursor": {
          "ref": "a178c768-e543-4a5b-948f-e56b515e3c30",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "afdfcdda-8be6-43b4-8f9d-7657cb9e860e"
        },
        "item": {
          "id": "2632c401-7bc8-4d68-a412-1537f128a81e",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "2e5cb37b-56a9-4450-9b11-a63c8833bbae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "500f2dce-f48a-43b3-9c37-825f682658e4",
        "cursor": {
          "ref": "85c450cf-de5c-43f6-9d7b-496616bc7c17",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "9d42bb87-1d60-44b1-a525-e39324b05ce1"
        },
        "item": {
          "id": "500f2dce-f48a-43b3-9c37-825f682658e4",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "9964fbe2-e65d-4155-a1b8-5f4afcb9f837",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd5ac13a-cfad-4de6-8ded-1ad937110e15",
        "cursor": {
          "ref": "55817f22-71f0-476c-af0e-708559aff809",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "3cb72614-1b5d-4307-abb7-c372dd5b64c0"
        },
        "item": {
          "id": "dd5ac13a-cfad-4de6-8ded-1ad937110e15",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "24d78ac8-fcb1-4361-bbcd-19450f5416fd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e5c148f-4f3c-4629-bcb0-9feff192375a",
        "cursor": {
          "ref": "8a367e02-72e2-45f4-b1c3-fd3706f1efa8",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "131b445d-7c29-4150-9a16-d3d81ec773bd"
        },
        "item": {
          "id": "0e5c148f-4f3c-4629-bcb0-9feff192375a",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "3cec6c3a-b8fb-4884-bf21-76d20d956e15",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b002c40a-3cb5-49ac-ab2c-0acb3464e199",
        "cursor": {
          "ref": "ff94d01c-301c-4f24-ab35-58400638c965",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "69559819-888a-491f-93de-b80c437dd069"
        },
        "item": {
          "id": "b002c40a-3cb5-49ac-ab2c-0acb3464e199",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "f8e1be69-012f-499f-b943-6bb1c6d68b25",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48c686a5-d99a-4481-92e8-429664452585",
        "cursor": {
          "ref": "c5a48146-3e12-45c7-9675-0face0b51d7e",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "3c9f2f3c-3816-4130-9a8c-b3b4beeb7995"
        },
        "item": {
          "id": "48c686a5-d99a-4481-92e8-429664452585",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "44e097c9-f895-42c8-8b86-c6db40a637ae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "612aa5a6-0ee6-411e-8749-f4a3e0151e0a",
        "cursor": {
          "ref": "0ae2dcdb-25fb-42e5-bd35-8c7a64c78d33",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "8d7593ff-b925-4ede-b01e-c04c3823132b"
        },
        "item": {
          "id": "612aa5a6-0ee6-411e-8749-f4a3e0151e0a",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "dbe542cc-11da-4146-8e49-cfdd5ebef5c7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e2062a6-03ef-40d6-9318-08d4684ff715",
        "cursor": {
          "ref": "ba42af69-dff8-4c16-af69-1f638cfce9a6",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "20814390-6559-422f-bfca-7f0ef787b42e"
        },
        "item": {
          "id": "3e2062a6-03ef-40d6-9318-08d4684ff715",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "5c67ce06-dab1-4a3c-83e5-586bb156cebe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "748a68fb-027b-4530-b7a4-929f36fd6dfe",
        "cursor": {
          "ref": "5b40fe36-3830-431f-a988-6b5e759f7889",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "b3dd6ea6-e81a-4842-96cf-f29dade76af0"
        },
        "item": {
          "id": "748a68fb-027b-4530-b7a4-929f36fd6dfe",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "c154785e-b7d5-43c8-bfb8-3d900ca7de04",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "755ab297-5169-44db-a902-bbafd8c6f1c6",
        "cursor": {
          "ref": "93ff7569-5359-4195-9449-a18465e52703",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "24e45949-b239-4725-a18e-5a3b2d4c2b5f"
        },
        "item": {
          "id": "755ab297-5169-44db-a902-bbafd8c6f1c6",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "684ba51c-36d2-4cd7-b6e8-4f42772d86e5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40bc70b7-8285-4091-a78f-667185b93912",
        "cursor": {
          "ref": "1e45460f-c5fd-4173-88bc-ceb6b08553e7",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "73590dd7-b4a1-4d8b-8f04-6d8a380cf595"
        },
        "item": {
          "id": "40bc70b7-8285-4091-a78f-667185b93912",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "3de82b14-c680-45c8-bff6-1bc8335ca389",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b304ad2c-4aa9-4e9c-b323-63b21477badd",
        "cursor": {
          "ref": "75ab2ea9-bde2-4f71-888f-6ed050d20a90",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "6d788051-4027-455f-a89c-80060d3fee7a"
        },
        "item": {
          "id": "b304ad2c-4aa9-4e9c-b323-63b21477badd",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d81f8550-c395-4e19-9fad-8d4b977debf7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5e71bb2-ba5f-4398-8d06-dc70ba4ff1e9",
        "cursor": {
          "ref": "c585a7f3-5b0c-4485-bfe0-9f6fa05a5c2e",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "b86471ed-5ee3-4bd6-98b2-1068e582f4ca"
        },
        "item": {
          "id": "d5e71bb2-ba5f-4398-8d06-dc70ba4ff1e9",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "8bd5c1aa-9c54-402b-a7e5-a6a0374537a2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd6f790b-06e6-4762-bbee-c63045d928a0",
        "cursor": {
          "ref": "2c9e9d5f-0be7-493d-8809-2673abbff26a",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "710be086-de0b-49cc-9683-8a28bddcb20a"
        },
        "item": {
          "id": "cd6f790b-06e6-4762-bbee-c63045d928a0",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "7a8482ca-0684-4f13-b84a-53fcf58613b8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "770f2e71-cf7c-4366-b2bb-1351379035bc",
        "cursor": {
          "ref": "23186d61-f582-4f10-8119-16bf0b5bdcb0",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "54e6900c-6eb0-45ce-907a-bb4961b44419"
        },
        "item": {
          "id": "770f2e71-cf7c-4366-b2bb-1351379035bc",
          "name": "credentials_verify"
        },
        "response": {
          "id": "e87f8c5b-aef1-41b4-bc06-0c2e5490e8b8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "5a16fc35-6134-4c57-b493-812744cb3124",
        "cursor": {
          "ref": "50d62f65-e05e-4451-87fe-bbfd86c85c40",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "30f9585d-0173-4182-a9f7-8e7094d0c6c8"
        },
        "item": {
          "id": "5a16fc35-6134-4c57-b493-812744cb3124",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "c0c33dfb-05e3-4f88-a2fd-bb534e110dda",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "251863dc-997c-4be8-b4c9-80bc45da3d94",
        "cursor": {
          "ref": "f084b36d-ed14-49dc-b5a2-ce5e93e35baa",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "f08247ab-7161-4845-8514-82c223523e1e"
        },
        "item": {
          "id": "251863dc-997c-4be8-b4c9-80bc45da3d94",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4c6736db-bc50-4949-ad78-1a8b484bdcfe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "251863dc-997c-4be8-b4c9-80bc45da3d94",
        "cursor": {
          "ref": "f084b36d-ed14-49dc-b5a2-ce5e93e35baa",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "f08247ab-7161-4845-8514-82c223523e1e"
        },
        "item": {
          "id": "251863dc-997c-4be8-b4c9-80bc45da3d94",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4c6736db-bc50-4949-ad78-1a8b484bdcfe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e85dc9ca-8063-4b16-b6a9-66d021bd6b37",
        "cursor": {
          "ref": "a779fe40-eb22-4aee-ae5c-1a5518d2ef58",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "1084cb81-7b31-47f8-9cda-dc0649699fba"
        },
        "item": {
          "id": "e85dc9ca-8063-4b16-b6a9-66d021bd6b37",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "9e75e9ec-c6c7-410d-a79d-95cc3341bd07",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:282)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09904209-17e2-4fcc-9016-461884504b41",
        "cursor": {
          "ref": "ea83ba04-555c-4f45-9b34-2a20adb6642e",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "7d6623a6-a1bc-4ba8-903a-e432de331339"
        },
        "item": {
          "id": "09904209-17e2-4fcc-9016-461884504b41",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "c5ff02b6-33af-413e-bb5a-2192a8127c16",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:283)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}