{
  "collection": {
    "info": {
      "_postman_id": "faa02ea8-9433-45af-b9a7-893a98130da9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "baff9e8d-0dfa-46e7-ac48-127ca990382d",
        "name": "Clear Cache",
        "item": [
          {
            "id": "88728058-09b2-47f3-aea4-d11847927bda",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9429a58d-ba40-4d3c-b8ad-b383062ae918",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "0f10671d-0468-47fb-9439-9224ca7f275f"
                }
              }
            ]
          },
          {
            "id": "6b32583e-1fd7-43b7-a24e-1c83b4bf7f3f",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d9fdb397-9d4a-4ee5-b998-c7b2a602ddc7",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5e223a31-ddf2-4396-a4da-5a5fc0f51e29"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "f5963887-1661-4f0c-af70-54f800e1901b",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "fa4ca88a-f76d-4e3d-b3e0-14f5f42d2ffe",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0fd1bcf8-2ee1-43be-a93d-b11b150bacb3",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a8b45712-e6cd-4fa1-8b46-9e7e15ce55e7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1ad5ea60-2eeb-4fe7-903d-fcbd341fa954"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "48674696-6f09-4490-bbc0-86760574df78",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "97289653-4b6b-4acf-b29a-0f93bee6409d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "30c5300d-742a-4881-8957-f6677588f34e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4be398c6-2853-46d1-b0e8-abf8377d8521"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "40234c12-93ab-46d7-81ba-65758fc075a0",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "96f70598-bd08-4bd1-b204-803aebf5895b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b7be7f82-344b-46e7-8899-f7a1101ecc96",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "80445a03-c79d-4d4e-b96f-bc6f41187675"
            }
          }
        ]
      },
      {
        "id": "67e0036d-5125-486a-a8d3-39031ad5f27d",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "62f842cf-fe3a-4164-a7f9-af9df561553d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8c1d6cb0-fe2e-41df-942c-123a1c6c21c3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "012696b6-db1a-49fb-80fd-673a4c8f1be7",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6274054a-cca9-46fa-afe2-2725b93384bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fe20c98c-be0d-4980-954a-eeb1a6b7e7ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bfb6dca-ed3e-4e78-b8e2-520fb5105e7c",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71f06519-efd0-41ac-b14e-4f6ff70ac07d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "83e8818b-5b0d-4684-a7b7-cfcfe854e04a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2bdba36-a719-4b13-bf8c-f8dd1089457d",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7458ae4a-62db-4c72-8328-57349a9824d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "05c4f18c-f86a-4446-be99-0365bbe4eef1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f8a3b1ae-0198-4eb0-ab26-175a85ef107a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e47acb9c-ab16-49ae-94dc-54eef9dce79d",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d5ebee2-ebc3-4adc-828e-ec50266850d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c0d2c6bd-594c-4f18-81aa-235742a8badf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6a81c9d-e7ba-474c-8c57-a3ce25325bc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e5bd7c2-efec-406d-9599-aded5f5344d1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "50d4a0aa-8a58-43af-b891-7a87be956737",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a11e8b33-19fe-4772-9128-fc5cf9ddc149",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1e41741c-ff0a-4b04-abb5-db0b82dc3bd0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "fb80bf24-0391-44fa-a053-677b6f9771fd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3c080fc6-e319-4fef-a344-52b596aea3fa",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "107975ee-5634-445f-b15c-0389ccca7e95"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3c10775e-ba14-42b2-8831-3415488fff0f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2f080437-7aa6-48eb-8007-0b9ba0488c3e"
            }
          }
        ]
      },
      {
        "id": "4bcf2d5c-9f70-4816-a1e0-72cc5639727e",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "b651b74c-d23d-4aca-b8ba-3dfc9d550715",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7f9b80b8-7986-44c8-a746-4a0b57817d6e",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "1786b22c-0af0-4636-b442-b89b911d41af",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a1800eb-11fc-4dee-a5c7-d88299e3d46a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f2bece8-5011-45da-9791-d145f8c37181"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba0ce345-0fa7-48a6-a5c8-49e2da148d03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3c4ea56e-fafd-4db8-8033-91a0d997b9bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35493dbc-604b-45f4-ada6-482e6f5a3333",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "710fb903-ce46-495a-9501-3a0a733d1da9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2546011a-8bb3-4258-8fd0-3c142190bf00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43f368ce-151a-4077-9030-9c9d798c7ebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1e19a3b0-c1d5-469f-932e-159ef14b7d55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d294ea45-0a3c-4810-9a01-a241edbed06b",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf635b2f-f34a-4dac-b692-fc930ff9435a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2d04ef0-d874-4fb3-8394-4a9582fb9a77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58307506-5e64-4391-9cf0-4754b08d5982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "77fc395a-9a92-4395-84f0-7f2203f82042"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b6b62da-8c94-4a3b-a024-a2bc7f90ff95",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f3a2ef8-afb0-4a3a-9062-5890675dc7b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd9f586f-9ba0-4a05-ac2a-859f851e901b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b95c435a-582e-4c65-9a6d-f8ee86cbe73b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1f0df30a-49c6-4b7e-bde1-d0393f0fd81f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80d306c7-f86a-4be5-8eb1-440da8df8b06",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0925ffb0-24b8-44f7-aa82-137754773201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50489cc8-8e9f-4cd4-b964-77387c16ed7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04362ee4-cab2-4ffc-ade1-618d101d9302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "13eb6a78-964c-4f81-af20-d8724051348a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d9c5b7b-446e-445f-a9a3-ac50900034be",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f20749f2-3a45-4cb6-8db2-96ef6f69da76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf5dc5df-e0d5-4016-9ac2-d086f8b6f659"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68842f91-eb96-44ab-898b-acc80981c756",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9e1f74b7-9d2a-496b-b1a7-eaabd004fd52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f774a0b-cfe2-44ad-9f23-884298ddc96e",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0608628d-aa6b-4003-8e2a-365983e30afb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c3d7764-c0ce-4951-a1b0-e003cb942630"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c18f896-cd00-48a8-82ab-8eb79725454e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "58e45cf9-9c95-4e64-be94-5387f7174c8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6db0036-323f-4d5e-927a-c107bdd1e22f",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bc50a08-6ae7-4e1c-80b8-c9ff52bd03db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff09f4cc-8416-476f-b34d-b7c8a46d8606"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81a0cc4f-ac79-41c0-9ae7-b852d70078cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8cfc46d5-4990-475d-b51d-c45e0db52a60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cff230a-9536-49c4-bea5-4a3387272ac3",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18d19a6e-66f8-46dd-96ba-a2faaff33f83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04dec966-7c13-42e8-a7a4-fb99eefcaf23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "879f6472-7afc-45d9-ac3d-d87b649a1d39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6aa4ba09-d6dd-48f5-96c6-57772bc7f5a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b940ae75-8869-44ef-94c9-cd18ab6522e2",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89215cba-652f-4695-807e-36ab5e4376df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb5bcb76-f523-4ccb-af20-6f056d88b5f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c848c496-bf7e-4932-b6e4-caa6edc4dade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9b473d5d-edfd-419f-b56d-fc393c8f64ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4abbb831-91ae-46f9-8ccd-3af7602b4b1c",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eb230d6-dcf0-4b3c-a4c9-142def9ecdeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7ed51d6-5b2f-48b8-9027-b739667c5c01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74e86396-3b58-4791-9215-4fab47923f04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b18e259f-c983-4885-80b5-680c4f15eaa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b41307d0-7088-48be-b542-e22a00be3330",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf430b6f-e66c-4752-836a-039f992ab55c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4525597-573c-4d20-abac-dd63e2ce2844"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "425ce7fc-9308-49b8-878e-6e62f38b19b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b0cd4eca-b4ed-4965-8c64-0df004c1d088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "527ba5a3-9130-4d6f-961e-290826de3aeb",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "921a5639-445d-4549-b47b-bc1750b79be0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cab49fb5-da68-47fc-bcdb-c782c7c38944"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a7e5bd0-dfc0-428b-9d90-dd10542420e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3f5b87af-ee39-4190-8141-39dd8a18bd3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab7cd863-8e50-4798-87af-b244c4a0dca8",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b8cfc20-06f1-435e-8760-ae02416b81da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64df857c-b411-4b5d-ade9-d742a9033c73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a598da8-7c88-4afa-9cb3-3246e4c21580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e021c069-37a2-49e6-8b12-47614260ebec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e40da3bf-aad4-439a-a36d-764418879a95",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3403117d-bf9a-46c0-8f36-1f586caed246",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cfce416-47fd-48a2-9299-8a9e87811f20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a06135a6-406b-4b32-89d0-15695a17a142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e74e5697-2ea9-4fbf-ba42-3ca7a10ca823"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19d78a28-317d-41b3-b261-8c1d2d87ae5c",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f36340f-fc91-4b4c-9960-2bfd8c8a80ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4078fc1c-7dfa-4c1a-8b14-5d9b2ef4d513"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d60f3ffc-71e0-4089-84fa-50012a754845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bd313932-e6b5-4b09-aece-42158a77db02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6539a58-6524-4089-9707-1972acc28f5a",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bd1424e-ef85-4e48-bd98-319652e233cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7da589e8-1880-4f1e-b6f9-4b4e47849a50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54a0638f-2a69-4e66-805a-ea0d1d4033e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2a462af5-4b1d-4010-8bf5-256d0cd49b2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cad3d2e-aead-4948-a28b-060dca08cd01",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30dcf861-2f30-4cb2-adf5-d7db81a7cea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dea765bf-5e82-4ff1-ac02-d5e2c8e87459"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "402b0413-54e9-4509-abb9-1382c0ddc625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "424b544e-5e50-4b3b-9178-7d042fb4dd5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b39e088b-42b3-41d6-a837-0a9a551093cd",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b60cea40-d9ed-4782-9a30-ffabe203fb81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeb4ff6c-757f-45e3-850b-056d0b4ce010"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5086771f-b52b-45eb-8a2b-0d51082f044a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bdafcb38-5a55-4849-8151-3549b9a4f9eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e85a76a-dc40-49b1-9671-62bbde19c9b9",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a2dc072-a502-42ae-a3b5-2b3867338e41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b976f596-f2b4-4254-accf-c38a3adeaba1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eff6358-7e7a-4094-a21d-466dc37ee4c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a569429-1a79-40ea-bba6-1fc20f8e5499"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eee0c20-bf10-4816-b8a7-275af55918ec",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f27bcab-ccf7-40c4-aaad-7aa558350cee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c62fc69-5306-4e44-90a1-f53d6ffbfbb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45c2bee2-e0ce-4b4b-a295-cdc75a5b45e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ee04ebb-4829-444e-9041-a67d77e8acfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6ce74ea-e34c-4c90-a0b6-a2ffdc9d0f2f",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb076147-d0a5-4e50-9b89-bf80e4dae705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6ae1b95-46df-4ed8-b5f2-3837ef284e7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eeb0035-f6d7-4899-97da-6110a1eb9dd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7e2e3b25-d5fb-4e92-8a7d-6200212b9ebd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cefdeb6-e09b-411a-8a8e-aa5a31d5869d",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc5f237c-b197-41e8-acde-00ff8098fa1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8a7d712-23de-4792-a595-061fbe085cd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49fc8538-d923-4932-9e29-b541f9eb035e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "08f60859-cf4d-4489-a3e5-6a6356339d88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9bf0894-927e-4acd-ba04-2fb40311c9d0",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "289d4fd3-381f-48c4-bbdf-29c215d940d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44dd6a31-a666-4127-832a-e30e9d454116"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30387e93-14e9-4db0-9c3c-ae926fc99729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee0fd410-2741-4433-91c5-7959de0c1b68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b240d872-ca25-45e0-992a-dac14cd6ad8f",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f28d9abe-8eca-4079-b51a-77418477349a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cd5c1da-2451-4617-8f5a-a1c1fbfe46eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "713d612d-ee85-4b85-b017-f24aadd93f78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "26cbd097-8a9b-40cd-8130-354a20fcfd55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee0ef15d-897f-4339-9d40-86bb28153082",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36561dd4-4aa7-4fe7-9a0e-cdff4127a74e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e24daa3-0f03-4fca-8bc6-1399ad06edba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "464c66e6-93ef-4d10-8209-d8fb21bb7e6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "934e003d-ae0b-40f6-8499-71676b512286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "367c5825-61e4-4a7c-80c4-f66049f3a8a2",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6bb7b36-bef0-4497-94af-a8e1d672c419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "937bd6c0-a086-480a-bbc6-c319dba14d01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "360d0a27-b8ac-48a7-8c95-d522bf8460b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4bbb5a4-566e-48f7-bdc8-dab2ca4f67b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c17f25b-90fc-437d-aa6d-5a4be3cfad56",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36c85eef-8f29-4ab7-8411-95e2696e6ce2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f713187-340b-40a3-ac08-f5a66305f53c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49a0d837-1611-49ed-8125-3e1d931eb1d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f5a859f-ea35-4150-a515-23d9a470a0ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2843be73-0aec-4d5b-8f7b-c1d611ac71e2",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "595df4c6-5250-4ff7-8dfe-a3956aa5833f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf0d464c-a255-4a05-951d-2f4bcd030356"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47fd237d-6cb7-45a5-b968-3196ce27c558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "da960c9f-7284-403a-8b87-e9b04078aa54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "389e1c87-6d4e-48db-85f6-6970847e153f",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f569240b-7bcb-4ff0-aa8e-2ab007bf82c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb9b77fa-d806-4759-b1ab-c053bfe8253f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dd36646-9b48-4a9e-ad98-86b816b36b04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "d594509f-afa5-471b-9762-f67f63dba3e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aedf8cb5-18b7-46dd-8698-655c814dd27b",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fcbac97-7699-4e97-95eb-d663f8bd49cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e4c1b5a-621e-4ea3-abe3-cbcc9b538889"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88734e02-f013-4833-bc7d-76ddeff56694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3b7b8b3-316c-4534-b2df-5e6d9ce24008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef0f2b78-8017-45d2-b809-4e562af597f1",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14bee038-67f8-4539-82e0-f4ecdffa51e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03454013-515f-4004-8d5b-03d2de469281"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "206b7b2c-a1ad-4760-baee-ede75bcd2bcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "44834987-8137-4114-9840-cce25a864e76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d65bd53-c3d5-4b0a-8a88-fdff00ea8cc4",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c4517df-6fe7-4c18-8c11-7b00c37c4624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58a5c397-e209-415e-bf76-8d54ba726165"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf17f539-14ef-4005-95ab-29134243dbac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "df0f83de-3f61-4b62-ab6c-0ebe7f404f77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b75647b5-4a07-4b66-a9db-b4aa42af367b",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29b03c24-5cfb-457d-afa5-7bed4fa7213a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "220b6a1f-8d1b-44cf-a709-ecb9d9dbc1b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8324fe04-27b7-4d22-8c4c-c006cb7ab626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "856fabf0-3446-49ca-a118-dc3a6a6f50df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5231de6-b20c-4d2d-a6e2-56bfcea3b9a0",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90c0e8b7-9633-4f29-9763-3eaad533929e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4fe3d4f-36ac-41f2-ba31-acb095e78089"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63842b48-3dac-4ab0-b3b1-9bf61b4692d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "c419bba6-cb0b-483c-833c-5c83f9252e06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b58ba11-f561-478c-a4be-f9d052b3648f",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01b7c5d3-a238-43bb-8098-8b01dc755c9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "420d3244-99bd-4897-a7e8-a860397c2587"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2469e505-fcad-4ea0-a118-a5e92254778f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "93db39c1-4a55-487e-8685-9fab25781d28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0a1dfce-b696-4eb9-b2c7-d4d439cbae6c",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "030679f6-b10e-44a3-8dca-916b8f72689a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd823e99-cc89-40e4-a377-f7c41d53a83a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4538be6-e0cd-4cd2-b4d9-19d35aa93540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "514a0f9f-bb06-4736-8fb2-1151dd0abeef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feeaa73d-44e4-427c-856d-fe9b62c3407c",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22699517-b9c8-495a-b962-49b4c207812f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47d4f71a-6b5e-4e45-9a78-be42a78ab959"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d73671d-4329-4c13-aa1b-48cc3e1a0889",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "42c163e2-2eca-4ac6-8e4f-3b0bd0f41064"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f65e699-3f12-424e-9364-f71aa70f1d60",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ef8a17d-42ef-42ba-bec3-276e086c784c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24fad49a-bfd9-437e-8bbd-ed343b34fdec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06dfe7e5-d120-4345-bf7a-56e2bcd67d6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ad17391c-57d1-4039-ad95-0b0474209456"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af27e709-0662-4300-aa09-3e7e4d472035",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc08f4ef-e98a-4efd-a06a-f3e234f58c09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "744aeb71-2fa6-4421-abbd-4525cc753dea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa54ac5f-3718-42b5-b312-3a3dd81f205d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "37b9d9b3-e4d9-433f-b7c1-8404c5ea7820"
                        }
                      }
                    ]
                  },
                  {
                    "id": "251f1e2d-16fa-4288-8520-ec870034f02e",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0150b123-0c3a-4d4d-8c4a-e0f2aa422569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd20b38e-c001-49ad-bd47-f0326bcf269f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b05b74dc-2252-4408-8f74-7d054d77e8a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "60d358ba-2453-4396-bb34-d235535b7714"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c0ace48-bf30-4058-a05d-5af369851744",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a34af56f-d0a2-4b56-bcc7-3649f2777fc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a73258d-a127-46ae-9a8f-6aa299a7a360"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54ca985d-ee7a-454d-b46c-82a25d3bc437",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "2fee2a36-1fce-4bc3-a33e-9934df4ffe4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73ca550c-2efa-4bf6-a321-9a7b9b2a6d88",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44e1a01b-07e4-4024-bba2-1880ff0fad13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc3e0072-601c-4ee4-b248-09f0331ff666"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58a6c70f-8d4f-46ae-a061-ca401adb8338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "46dbfd35-8efe-48bb-b6a7-94977b5f2716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "035dce70-77da-49fc-95e4-99bb741f9b7e",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6f01e52-7601-435b-ad35-d830cdafeb44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac949c34-0f35-4ccd-92b9-9d21a47f96ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e3df6e3-e222-488e-9097-e7fc1e89074d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7e02f17-07e3-41de-92cb-303881822578"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a600c2bf-ebac-4762-bdcb-0fd66c07f1f4",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b16faa45-7497-4070-940d-57e3bade13d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73407309-0ba6-42d3-b2d5-8f32ff222ca3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a914c2c-c28f-4ca8-a108-4bee6423eb22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "baaad64a-eaea-407a-9b6b-4f1b623f753c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd50182c-95c0-4554-9a79-8daa4df660ab",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0fbfd51-9334-4cc9-a900-5fefe02fe4c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f2dffe2-0e22-4297-ac7a-a9356e3f45ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5af18996-4d1c-43cd-8e41-c2fe9d033655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa5dc435-40a2-4b94-ab71-2c06b133a3d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5338246-82ad-4852-8541-dfc8d2641307",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adad30a9-78cd-4cf3-8b4e-281a14df2a5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "063cdc24-4ff5-434f-861f-cd42f081f567"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "660a0351-7d4c-4e73-a710-bc9de2ceca68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd2dc619-27a0-4d96-8d71-04306834a915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c30d012b-7901-4a7e-9289-a2affcc22d38",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a30cb013-898b-4238-8cf0-acdaa431bfbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46aa0959-3bd6-4215-87d8-9691b2cb8dd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58e85969-9c4d-4b75-87ea-8fdfaebd11db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec2581c3-d718-4767-ab87-ed769bd833dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6fc3f62-b4a8-4705-a059-ef1b25cf912e",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3c323c0-94c3-4340-be4c-0ecdf28362fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daaea61c-6833-4e8f-85bd-cfeed812ecee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fc29d34-0364-4d55-875c-ba2832666d43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1c9638a7-0094-40a4-b724-3f1090c9c60e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "169575c2-be7b-4357-80fe-23899380bc25",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2af76c3-b082-4d05-9ff1-f4ee530ded62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63b32247-604f-4ed0-8b7e-c48fd076c6a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27cccf38-48c2-416b-99a3-4abde950b373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1d79f896-79e7-46ea-970f-8ab4da75ae09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ed66c9c-d3b9-42f8-b664-b8b93d45748f",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e42658e0-cadf-495c-bb52-a6380e03248c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c81d37b-4950-4767-a413-9286d3e8331c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2892bc26-f4d0-4581-ba51-aeae48cddd8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "09e5f92d-e37b-407a-bb56-813ded6124f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d12cfc84-7fcb-4eff-8c03-032b07a9e2ff",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f69c70ae-0bfe-4f6b-a8f8-0818a4ef5a7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6bca6d8-a429-488a-bde0-4a75ad68b244"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4505a94-fa57-476f-a05e-083fae7c696a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "15da6c46-4597-481e-8a2a-1f37dacdc078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "318deda4-2b0b-4c42-ab70-75c03ae4a99d",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ed18e2b-d82c-4113-a054-9c30af2a8f2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f05298c3-ca09-48dd-8185-e261443c3b47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "206ac26e-d88f-460a-a4eb-f5ca6e4cd0e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ab2d28d-5567-4187-a154-376cfa701a05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d0947e8-6fe8-4e67-87d3-6564a021aef0",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a88e481-23c1-43ee-a37a-97d1b08ab2b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e65d4b0-bec1-41ad-b1c3-c4345c4f2b93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d19a34d-995c-4955-b9d4-34c3c2e689bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b579ea2-d1ea-47eb-bf94-d42f410e4ab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3dbfe0e-f24e-48ea-9457-19ba65225723",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df8a3cc5-d50a-4260-8ba8-9e5917aa7c92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80ecb205-4317-4584-8ef2-1ca8482956f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4585bddb-9118-4437-8fd5-bb14402bd870",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f6f66cd-f14c-42c6-a0d2-934adacea2fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97814e0e-1d1f-4438-bf68-dc0f26382765",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5457a9c3-deaa-41aa-9a18-d311880aeceb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba941b05-919a-46fc-9159-b0b8674a1356"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78796d9f-b678-4575-9a82-b539ac59253f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "019529ec-788b-4af4-bf32-4987d2df7395"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37dde1b9-f6ae-41c4-94a2-abd5385528e1",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fc8b40f-18fc-41a5-929b-046642bbc037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9336edde-060b-4187-9b41-579cda3f50c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1793a139-5d34-49e6-b586-d1e50aba0807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "240221b3-b7db-4b0d-a407-0c404a4ad423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60282772-e81c-4eed-a803-e137f6639f87",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e70c49f8-cfe5-4219-a7c3-d03b660aae88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7498cef-4e95-4042-9641-51c637e5c60c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "385aee3c-508e-45a1-bd63-574d285d3552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "51d89a05-27d4-4568-903c-d8f8cd1119c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95098e33-7132-4618-920b-8853f39f30b6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9b3350d-6d05-4fa2-9ab7-5059d38d556a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "773d7cdc-3152-4643-882e-50acb7e513e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a8dc0f9-7426-4ca6-8ba0-ca852211562f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "045da62e-7ef6-45d2-9e41-2bba7198345f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6b06f40-8199-46b4-a7eb-eb0a08ed1825",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16d2053d-eae7-4758-9211-0a71daffb745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cf742b8-5a24-4dfb-97b4-a853dcfa3804"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "853856b1-544c-4585-8f4e-63df04f81a81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6fcfab5b-5925-42a6-a2de-a31df1a3907a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e02c4e77-cf1e-4670-91a9-6d0f532d9438",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fd8ebab-5f51-4962-a3d1-966699bda360",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfdb5434-c65f-4404-8fb1-207d94f2d285"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d418baa-68f5-45b6-8807-6aa947b142f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "59354994-3d11-41fc-9cb3-1f4a13db8dff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b42e1c1-1db9-4fbb-8518-a09aed2bda47",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5917cbd0-7943-43dc-99a6-026c170d7197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "865676cc-1f99-47d5-bee8-15761a18bdd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fc65f23-6341-42cb-b5bc-344b075c3c38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "64968e6a-94b2-4d92-b047-26e5187eea6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8645934-09ae-440e-8457-cc34519f3815",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a3b6a4d-c134-4ba4-97e6-06da8795fb71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "895561c3-7328-46d2-b54a-74e3b311b0f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bba3b1e-7597-4bfc-a62b-10227bc38e4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9792cfc8-7d81-4e8e-bcb8-b24bfa0b434b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d704239a-996f-448f-8c6d-e954de03d5e5",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47751377-eed7-4f6d-9675-23cc9818afd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f458c79-b645-41cb-bc95-060d180c8f1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b3d7a6f-60ec-4356-b1be-085dfe1b4ed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "888e918a-9217-456b-8fac-bf3929288f49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d2beca4-ce35-4b81-99ac-4a1ac5bdba87",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0d0c8a7-96ed-4dad-8dfd-2746b565130b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4c2c044-caf4-4492-9356-b6dd26484608"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "256f5786-2f17-43fe-a179-40f820ba31ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "15829d59-8fcb-49d0-ab8f-73f908c9dca9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5e91c94-b868-4255-ab49-247e973fd652",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c709cff-6eab-496b-8ad9-f2fe61e0c46f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e635892-c8ab-4b3e-852f-0945ee5caf06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71100b5f-ce0f-496d-83f6-52239d36d1bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3baf3f1-1a44-4ca4-a453-95309b0c23b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e7235ca-940e-42fd-a810-9eed458ab21a",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "861ed775-b10d-482b-8cf0-f8cff3f199a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60880028-8553-40c8-a3ef-8ca272ec187e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0688f94c-b16d-45c0-822f-d4602a543cc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "af06d61b-de43-4f27-8db2-bfa5db6471f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a5d6c7d-52b7-4379-8c1c-6d5247ddbfe4",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f296e0d1-b83c-4f5c-b67f-e8bf9cec3d42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2024b9e-f9dc-4b25-a249-dc34c21210ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ca574c3-fa0d-4a10-91cb-535adc8deba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "03ecfa38-9670-4846-83b9-d58fa7baf351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0e45c4b-5f7c-4b6b-a316-6cad684d16e9",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "299b3ff6-118f-4a06-91ff-39dec48b1e13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d65a7780-0f06-4ddb-8275-ee8d2f21497c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a1a9759-8778-47f6-8358-328982c35956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d17533ee-8c77-4b61-a2d2-38643a6094ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a341730a-0be9-4bb6-a41f-7fc02e77fc90",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f800f6a6-97fe-4ba9-b569-195a375a9959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "151d2cd7-fe39-40eb-8c0d-911d1a1a6171"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eff34bc1-5cd8-402d-94a0-1511e37ca0be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "096097c8-5197-490a-8f93-bb40ba308b63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "011e7a60-81e2-4f36-8617-e351414b9b78",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b41c9063-2bbd-424d-baf7-ff421562d28a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8aaae115-62ac-4bb7-8acb-04fd4beaec47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96c597a5-7319-44e5-8116-f7256ac5fe55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce63e6a0-8c80-440f-a876-e006e00a3dd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63d8d3a9-66d3-4697-b2b9-81ea9ba21cd4",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70b1f71b-5f60-485a-98a3-83433dcd4f20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d32a9941-9bd1-4429-b589-197667915002"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d52196e-40a7-4f19-8f1c-9229016d3a52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a10ce6c9-8a8b-4ab7-a94c-8d47dd174123"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d3b2a1f-5753-4677-881c-a24708e1e987",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1400676e-f722-4ec7-ab89-50fa189d192f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff2e90b3-f79b-454c-a8da-04c8b8df50f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63d378a2-0c07-4ca5-806d-231877105fec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "33998a28-8ee0-40e2-aab1-5593653b1d09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "755df658-cafe-49f6-b051-8b734c6c7796",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30d065ce-2052-4455-b3a2-42bc59078ced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "243a4ebe-8179-4424-845a-a4b7200e2f67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7b3aeae-514e-40ef-ac66-3770adaa06e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "951b48bc-0122-4c02-9cae-39cd48177942"
                        }
                      }
                    ]
                  },
                  {
                    "id": "804b293e-7ea5-4645-bdad-9c307eb2eb29",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3e4b71e-e8bf-402e-850b-f0dad4cd87eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e28028b-04c3-4d55-9ca7-ed05dfb907ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16ca55e4-3f07-4ca6-b837-58b98a27c70b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "743d8258-204f-4581-8801-d9fab3c6cae5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc90c31a-9723-4cd2-8f40-394e4413193a",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aee65d53-dbe7-46ed-ae6c-a0267d33b6e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86361e0f-16d6-4f1d-a46b-e468539be19d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "087c8efe-5506-46cd-a034-f3eefc98aff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fbea3b41-f4e6-4f34-a80e-25f49bd3fd83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40954905-326b-44cf-8595-6df113ffaf58",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76ad9d2d-8c19-4fb8-a870-89d374f3e876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5393ea9c-e93e-4725-9811-c71eac98ce7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c8b4879-b8e1-4299-85be-036480891893",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ab46942-f369-41d2-b6cc-8c5824746985"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56c70cb8-9ccd-49f8-8ce4-dafb7904554c",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0077fdf-e87d-4558-a3bf-bb5d762e8ab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0db78b77-ca21-45b0-95d5-accd69ea349a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7e79d64-11e2-466f-80f9-dcc149ac2c76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4fc9e9ab-6447-49ea-9bde-e2e345a3928c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4182a8f8-8960-4d94-a33d-b2e5ec696dd3",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44f86b7a-c9f5-4528-b4f2-4f0fbed9423a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "199e10c2-e22f-4f1c-8a4f-1baedef7a2a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "365917ee-17db-4448-bbdd-5dd4a0089aa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fc696102-43f6-4702-9804-b9aea0de2bb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63a0db81-d99e-4a06-a605-006b34ff697e",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7665650e-598a-4b62-8b92-00230d397dbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abc4b70a-0824-48d7-9415-d6a7226eab0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "615002b4-3d2d-44e2-a1af-f6db877e6265",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6556a38a-2907-4877-b66e-243d67ee84f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04a6121e-bf9d-4de1-844c-3a0563ced4c6",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8b301e7-d37c-4f95-b5f1-27ce90ee82c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76c0d9da-cf1c-48fd-b201-dc719bbe0994"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "836faa66-23fc-4594-becb-32880b454164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f1be7d8-1f7b-4a90-ae80-c27b96d14d66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "819e59fe-2d2f-4ac8-9a3a-a5eab12771f0",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ded8a0d-1f8d-4fbb-9425-6857322fa0fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c079180-7604-4b2e-8a61-ed6b85b12c8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b140e24-523e-4022-80bf-ca7d7499ba90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d68ea75d-435d-4bce-a99a-c66042dc049b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06814f74-6b71-4bc9-a300-1f9bedbad1e0",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f04699ac-7397-42dd-b1e0-ae6f26cb17ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49849755-b7c6-4405-baaf-8217645b6208"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f67f65d-a530-456a-9009-a39ea1a0287e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b3b9760-a688-47c9-a963-0890a65759fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee3eb858-77be-48c7-acd0-4e3a91fe2c4e",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "283a0b13-9138-4fb9-8b4a-04f267d3fcc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9b25341-227d-4615-b061-7e27006128d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fef9480-a73a-48a7-80de-1ea9c13069c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d12121d-c4c0-45e9-9e5f-568f58e14fae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02360b61-d33c-46cd-9f8c-b45eee9f1c24",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "574f50c9-2be9-468c-833d-bf140d9bc428",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "528d9319-e0a9-4d6f-975f-8105a547cdcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d9f66a9-895a-47b6-943c-6a4bc83b4f0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3cf254e0-3a34-4e78-a2e4-4c4d2105d87f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c00b4cd-a676-4908-965a-adecafa07701",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08dd31ef-2ff9-4ba4-99ec-d6730213c77b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9488197c-6442-4e73-9062-8647b85cba62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39d97d9a-2f00-4d62-9b90-1e563578d3e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "04bfa937-9aa5-4d1c-bf50-16c3456b9471"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d4f5e65-b1c7-4507-83ce-d148e0976bad",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cf554a7-f6b4-4ba8-bea9-96dba393c904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdfce0c0-7dc8-4a6b-a860-482e2ae6fad3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "144a7838-36f7-4cca-8130-e8bbd65e1bea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9edcd9cf-9da8-4c51-b32c-30669835c555"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eb20a33-769f-45b8-a5f3-d624577a839c",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2471345a-bb79-4901-a332-9db067290ae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9179adbb-68d1-4ce9-b71b-304bad0bb37f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c44f0847-7431-427c-a387-5fe745bf38a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "73f0645e-2fc0-4e4d-aee9-013bc5b9bca3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5ba449a-fc4c-42a0-8c46-b731aa17f080",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54a99032-f883-4fac-8d50-b776168a946c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebcb69f7-f9fe-46b8-9c61-833e5273105f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8a43dad-7e25-4db4-8dd3-28c837aae997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1eeb0f8d-c50b-4e5c-8730-b57154bf6c88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a6852a8-3843-455a-9480-3d2f555e003e",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6761ca4-d9f0-4bce-984c-0fc8c1b7aa87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31cf6dbe-ec41-4901-84e0-8823ee4337b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c3cd025-ae25-4256-a370-e8e89206f0ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0f70cd78-3add-42fa-80cd-6ec4cf7abdf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5da0080c-1047-471f-8940-f8702ebea063",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f79c6572-0bb6-4b7d-9b39-4f99d2267590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "746fab85-36ab-4359-a49c-fddebe96f5a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1077f9f9-b059-403d-9dbb-b46689cd1071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "922d8832-4248-4b11-a58b-93f321ca1bdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acae2ad7-2b60-47a0-8f64-016a13508f75",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7bd6400-9e07-45d3-b81e-ac6219078384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "df567d29-3c7c-4354-96e1-788bdaace33d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d759fa2-66da-4053-a4e1-d550b8614144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "13799f64-1f62-4cf7-aec3-38fbcaff0235"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3688a9f2-dd80-4009-9e25-44bf725f0cf4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "894ff06c-07de-468d-aa34-74ebb78d0bf3",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbc59f50-b36c-4ffe-898b-69a8b45c84b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d177af2d-f9d8-44c1-99ef-514a4c1305fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21fa104a-cdc3-402f-b023-327caa8107ba",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "631a0a72-0e5f-416c-94c9-64885354836c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8ce03f5f-aa0d-4a4c-9d69-662251ae7935",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0d326038-9cd7-4bd3-ad73-e4fd20ac9c81"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a26a703a-42ee-4aba-b753-239257f44621",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9c33c626-4b28-4fc5-93d6-90273d19959f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b07b4c3e-89cf-4052-bebd-71b53d881083",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b39b9eac-9043-4783-a38d-f4c0cc758002"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "967dea58-9090-464c-9676-c7a2d86d4ca7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bc0f1d4f-cbf9-4310-bd5d-444c0a735aaa"
                }
              }
            ]
          },
          {
            "id": "41ae2c2a-336a-4c29-81d4-13c7b98b50f5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b8ad06b4-a69f-428b-93c1-35dff4c9ce4b",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7977e087-af65-4803-9022-73c99ab5791c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "eb72ef83-8170-4670-9201-322a73ffda8d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3c23f19a-ae3d-4d6d-abbc-d92a1c1e020c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d820637a-4199-4763-9100-370a4041583f"
                    }
                  }
                ]
              },
              {
                "id": "237bd909-e114-4672-bf4c-b0c2362c7eea",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6bb35ffd-cbad-40f8-b988-b30ea5d0f980",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "31840401-2556-49f7-a07a-cededa9bb932"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8169c41d-1916-4699-bd05-d07aabacafc4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6bc3417f-acb8-41e3-a23c-fc8fd1d92a54"
                    }
                  }
                ]
              },
              {
                "id": "019915b8-2d37-400e-ad82-5c527b493e80",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3a74041c-6e0a-473e-b85c-877d6df988dd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d61cf327-049e-4eee-a6a6-afe2eab48ceb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6c058617-4ff9-4623-8e87-ddf55720559f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6d5dac2b-8fab-42e8-aa55-07629b151c62"
                    }
                  }
                ]
              },
              {
                "id": "1f5e1405-711b-4e16-8ba1-0dfc5320fb9f",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c2afbb40-d475-43f6-bf52-819ef5c69ff0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "eba46dd3-ce4a-44af-87cb-d9fc38bb0ec1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9caea415-b097-4fd2-b9c2-dbd7aecfbfb4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "ea040161-2145-4457-927f-1f4912538ac5"
                    }
                  }
                ]
              },
              {
                "id": "cada9d46-db68-4b62-9f6d-1bc3fe83e124",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "99dd9f3f-59bb-4b2d-ada5-2826187105ba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7522ff0e-9c4a-4666-9d61-4dcd0bf397cd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "16b8f21e-5232-43ce-8bab-517ce01a24c4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "79ba27de-ed6d-4b01-8621-6ea206e43057"
                    }
                  }
                ]
              },
              {
                "id": "0e2e191f-2b08-47d6-9667-3e83d538a4e2",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3b1a887f-8206-4c21-ba37-2cdb742cd59a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "841c3197-eb37-4f75-92c2-4d1a30c2172a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "71297c06-3ee4-4670-bdc9-c01a5e01a6b1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "54e29857-29f3-4956-b4a5-829ed4a9e961"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4c08afba-6816-4b8f-99e2-1507af30bc5f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f998c350-647f-4ca2-8773-7de4c4f0c7fe"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6ddd0363-ef22-4984-84d1-fb85f9c79e42",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c38e772e-6e70-41f1-a109-311fdf984a1e"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "97f6c6c0-a343-4ebd-ae31-5c16cdc93166",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "45f89576-f487-4995-aaec-8aff43f70c62"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3115ba43-7f11-4066-91b7-913ada071b30",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "77719a36-9fe2-4b38-9a08-d1196dbdfe89"
            }
          }
        ]
      },
      {
        "id": "67d1033c-8634-4d4d-9e6d-ce38973bebc6",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "05bc4e61-1acc-4e19-abba-0399ff2e4d30",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9f67dc70-51d2-455e-9897-bc6435cba9c9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5e7bb51e-7159-465f-b862-b0b4405aca89",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f5ca3dd-c578-48cf-b055-f6f7eec41740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d14005ca-c142-4b1b-b861-04fec3c603ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34a12a3a-a607-46f9-a93e-6eda941ecf12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "594c11fd-9852-487b-bd8c-306ce38b6127"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ba83242-079f-41dd-a56e-a748ea876e5f",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3177ce3-7537-461e-ade8-a44034d8232b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f5f1988-428a-45d8-a583-8c7653beb546"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "995e7b91-10be-4d1a-b142-8ad0e9bdccb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba0e60d9-1f14-4893-b5e4-d00dbe8dbd82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba96edbc-6b27-4c7a-8058-db0b930d3cdb",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "325b3434-dd25-4ba7-8d97-d9b1e0bc64d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9af12c86-5f60-4fbb-91ae-614846701211"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "484af92f-a455-407d-a374-5ac1c9f8b767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4309d68-5042-4e46-8e85-37f6903eef29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc707629-02da-4c49-ae3c-ce08c20d8744",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5599d41-9ae1-4485-9c81-0d15641ef34c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56828a27-6ee4-4c62-9bd4-d0e0302c0719"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b356c7ce-e46a-4eda-8076-b24537d62a01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "37c9a1b3-fb76-47fc-b303-034410194754"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8e3ca67-a1c5-4981-bd54-10eefc82493e",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0171348-3797-4838-8611-123d0522bd56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c839980-ff66-4ab3-9e4f-685de61145de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4dadad5-c50e-4799-bc2f-2db50c1b4042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7617729b-d5fb-4f4a-b000-f31b1bf7c2b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01ed317f-da5c-480e-90ba-5ea993fac880",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0a35b5f-b673-4ba9-98dd-29b13768ccee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5fa4867-01cd-4e3f-b46f-78e04710b11a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "954f6711-954a-4c74-ad54-87d31c801a29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d907216d-7e89-4909-9a37-7c83a379ced4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be955684-64b5-487b-8c84-925591a70c6a",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96221be2-6ef6-4f9d-afe4-624b51abbb96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84a3986d-8a78-40a9-8cc3-1f03b39f6360"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dd6555e-5a34-417f-bfc4-0eff8edabd2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3da260c-09db-4497-a7c8-6c7291ed6f04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4051699b-85ef-4996-afb7-4054e099aa74",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35c19504-aa60-4a17-a3da-f0549c3b69ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "868c3750-5d41-432c-8e43-1f0d2441799e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95ce66a5-8d56-4130-88d8-361698eafbc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c919aeb3-225e-4c42-87c9-895102bd775f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f93946f-9254-45b3-8e03-b8d77c203d0d",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "367294b9-72d8-4287-ac21-0f06603b07d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4da434c1-1049-478b-9d50-b5591ed3a4ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed2524b8-f46d-4c10-a137-43c0361633a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8cd162c-4a90-459c-9d61-1c773666fab0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d76f929-42b5-4396-80b0-716cfa93f3d2",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb4a95f5-7246-4664-a7e5-173a0231e192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2cee438-ef42-4987-a10c-95e31176c628"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b0f123f-5efd-48ce-9a87-c2f1842e0f7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0614f03-fb70-4c2e-a5c9-0a02943d953f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "525b963d-301e-4686-b763-c5eb38d528ed",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ad05a7c-4cd8-4319-a2fc-681b28c3d8d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c08eef0-1e49-4771-8c70-96623e513ee8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "867cd47c-24e3-42ae-8ad1-49ba6f6ba961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "296d77b6-c3c6-4755-ae69-ca9341ec295b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "001824d9-eabf-4620-85cf-70c31904acb0",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d146b79-a983-41ef-9497-847404af94f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d99c1cc-79bc-467f-97b3-6efac58343f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc5eb924-39b4-44f8-8602-95237e868fb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a154a2c9-09f2-4b7d-af5d-01c795cf4cdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24ef46f8-5f6b-425a-9b3e-7bf82c0f4125",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22202226-a223-4bf3-a9f3-386ee7fb47eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fa019b1-4dbb-49e2-a2bd-8e4269417aa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90f6b1d6-67a3-4299-9e28-1b8535c4151b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab7912b4-12dd-4c1e-8648-44a432d602a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "def48a92-e875-42ec-a8bc-7357455d068a",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dad2376-68e4-4b4e-9dc3-cf5de3b20db9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac1a8c17-d3f3-40cd-8ae1-9fcbefa54bbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bf178f5-12a4-4628-8453-c4cb2514f427",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "34c3da8a-53bd-4f08-810c-ed0e84441a80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d42b3d9-4b2b-4221-8f12-47eaa6eee366",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c5746b8-a180-4f8c-8c7c-44d6ae83f920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccdc3768-d290-4519-9110-0ab015d629f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14eff397-5478-45b0-b68b-0c2eb148ad08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "bdd0abcd-3dfd-47d8-8df0-06b7dab1bece"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f3b0691-a44f-4352-945a-d54bbeb34d91",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79f1f4e5-7701-4004-8fca-68048a2eb14f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26508410-8331-4c6f-b3d7-10567ccaab8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd43233a-b306-4962-baba-aff4a2ce4f57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "641a3166-3780-4276-8efe-a585453e90fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d4d1f40-cb0f-4dc0-8ed8-1ec38b86960a",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de46c6e4-cae1-42c1-9434-b4de88ae464c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb79a89f-9bd7-4dbd-bd3e-f0f41847fccb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8280f7a8-0576-40a5-b02f-cce77e4fc2cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "59487855-0659-4dba-a2f1-119e9064ad33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3370d6ae-a294-4393-838d-cce6eac19b24",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "079a9689-3482-4778-a11c-ee4e6889c76f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daf0df6d-fcfb-49fc-8e97-26d52db942c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caefe2f7-3244-4063-b014-ac49dad498df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2381b56-04ad-4270-8636-bd2a76944477"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed7fa868-88fc-4a14-aeb1-cec05a386304",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8946f10f-1aca-43e4-b636-272d69692e8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a22d2ee5-9814-4a43-a0ab-6fb3e3141d98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92b1e76f-90a9-42ae-b28e-2d59a74c5df1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "35447249-d458-4d97-8708-af5bc02311ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52d39936-672b-45c6-bc85-7a25123e06b0",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d03548f-509e-4093-953b-3b81043473c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cac3a06-f53c-4679-964a-9e9a243fa417"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e54445e5-7547-4264-a5db-17ee1803013f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "34d0db14-7500-4af2-a952-418a1fe2e962"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64f9d2e8-31b5-4f64-ba88-8a6f8fbae75b",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4264cccd-778b-4b0f-ba2d-713e558ae4e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e912759-f3cb-4b80-a78f-fe0faf48ccf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cf1c10b-873e-49ba-a1e1-15bf170041b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2af0bd8-84a6-4c56-bbdf-27a1e9dd73d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5925f78a-6c28-4794-917e-69b1e31bc7e7",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58384d83-c74c-46b0-b26f-9536368b9f6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c309aab4-7f0e-41a3-a408-709442fdc5e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53371351-0e1c-4365-8268-2ddb3716f4b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f922853-a77f-4874-bc4f-b847c2031c53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a41349e0-0107-4ba3-a837-4cdceb68c0fd",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c1c5d69-b92f-438f-ad1a-60e1b67c904d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de5da5c2-4ee4-46c2-9838-f5b9f0c40b82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b1b7001-3b10-49e5-b669-c93e9e383692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e142bda-238c-4de2-b8fe-e93dc370225d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "005ff901-6f8a-431d-9dc5-a42066c2f062",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8867b04c-837b-4d56-b9b8-a9bee7dcc735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ded382f-c00c-4a65-aff7-9ef5ebeec326"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86b828dd-10fe-4092-b0cc-b0c2a6ab8698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "64a22cd9-8923-4f91-84ef-3d21bceed0c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41b6b0ee-758c-43ff-9b8f-c88027454f13",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6305f0fd-8625-4a9c-93cd-1e37db0cfbdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bbf8056-1a02-47fe-847e-ec1b252343dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02a43b89-510e-42fa-b3d1-6c9b5bfa4aee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc67ba5d-e2c6-4a80-8642-3bc6549fb08d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08641d17-0d9f-4e88-9eae-861dd8a8a06e",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bf107ca-4036-4329-9d0c-2ff967028a41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67e2ef88-6af1-4e5d-bb07-1350273b1432"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ca87875-8a8e-4c0b-9261-a6aa053c79a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ac379d3-0455-4317-8e0e-9efd1273181f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7753876c-1930-4924-88f1-18d75e3c79e0",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93e51474-293f-472f-8019-c24ca9139d75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "944b7bc9-2b77-4118-8558-4d95d2e3c7cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53bcb1d8-72d1-4dff-8c25-a37266468868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0ae6fc7-15a8-4973-8b64-7187933308f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae2ed9c9-bb21-42e4-a25d-882f24ca846a",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "925f2978-c783-4363-a1be-35d4a73d2f95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64c12370-6c9d-4c79-8c54-18605a893903"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1a37d1d-de90-484d-9333-bc0a1e063f82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "677387c2-61d1-4914-9e94-515c2ac16d48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c28d8ebd-5d98-4a9d-9721-c665c9d19fa1",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c375d9a1-ffa1-4144-8767-ded861bff2df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf0ca60d-3ce8-49d4-aa2a-b30172cd43c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "868464ce-1b7e-4546-b444-e1d83c2ac769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "391b2fed-1c8a-4754-b42a-8b969eb05d27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a6532d8-3173-48bb-8f5a-b3e7490d72fc",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea7b31ed-9e7c-49ab-9f9a-e80c1ca3a134",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17f173cd-209f-4002-ba54-a255b993fdb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83dec796-565e-4c0e-819a-97637daac7f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1218309b-f87c-4f78-b4bf-de8a50a209e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab5b8bf3-bae4-4224-90f0-463a1f8b4595",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f457c4a-6494-4d21-bf99-1fb0838530d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d686959f-4569-408c-b712-037c3f096cec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e4c95ac-bea9-4756-94ca-ef67ee10d18d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c74c686-f0bb-42a9-b194-460fbb0b8faf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3de80b21-518e-470e-8110-05b59a530117",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c50df6c-a251-4f9e-884e-6322b9e311fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98ac87cc-e42c-489a-a0a1-3227f45b9e8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd330de5-9609-4813-91da-4a23991d86d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d94a397f-a676-40be-a640-fe622b48b3f7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "187f9421-50c4-4d67-a11f-48f6efd6c4c1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "02388a03-34f8-4400-9bdc-ee6989a15be7",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9da41357-41fe-465e-a533-88a1175b9c53",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "5cbc12d7-431f-4bff-8e4a-c396bebfd3f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5d2215d-2979-4b85-bcef-62cf870740e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0e6550b4-67f1-4f76-83cc-8e753b0d5788"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4d0ff87a-4b4c-494f-b02a-c1c3bf35f2bb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5b107ff5-0b21-46d3-bf3b-dc6b2f1397b4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b829af9-2395-44a0-8eb0-2ae66f82e3a2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6a4f467c-4f8c-444f-9f94-aa9629a678df"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d88a40dd-5b47-4d4d-9ad0-0df23aa5702e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "06d7e6fd-06e0-4163-8b9b-2366246927fe"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5c78cc78-7a70-4baa-b4c4-bd1ea02e3347",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "043830fa-3792-48ab-8a79-f21fc09ee8b9"
            }
          }
        ]
      },
      {
        "id": "7f019fe9-0568-4a70-ac30-9498ea452cbd",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "73405761-5cc9-412a-9f95-4d91dfec3705",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b2c2698d-02df-4e7e-8a29-b3c9cd3f4538",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a06bb875-ec55-42f5-96b3-0b7db5b77f64",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cacd15b2-b665-4495-b1c0-81ecee29f256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e264b239-3208-4323-896d-02acf292c7ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3875c58b-08c4-41b4-841d-b934ce83b3ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "afb4d9e0-66e8-42b5-89f7-c77cb65bb32d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a771080-1c87-4cbe-bad2-3e590f0c3202",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0abdfc56-12bf-49e0-bc45-3552005ee3ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1d15e8f-b8de-4a52-ba58-98e19987aba4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aa6ad5e-76b3-4fd3-a0bd-b3475821e5ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8733de99-5390-41b3-a628-e9bdc8411b77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "428c5b78-98a1-4c50-83f8-3bba9483ece3",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60367cbb-113e-4104-9b57-e9e82b74d0e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a005e87b-0bae-4083-bf28-3ccd89557329"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "259aae79-4d86-4579-8f16-f5e1e354d900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "95de9a25-d124-480e-8129-43d6819759d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6551cade-bf22-43fc-9e27-d8fc3a8d4240",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcea966a-1d68-4a49-b761-dc1ce5620023",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96067c31-7705-4f2f-b9ad-617e78c0279b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3986b7de-8714-4cd4-b377-ce58c49d3f47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f2e624e-660c-45c2-b685-d960dda5b8f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c51a61a-b97f-4aa8-b423-79fd535dd616",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51857558-4066-4fe4-bf05-a0eda4561460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6471892-ef15-49e7-8237-292711170637"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9e032fe-79b6-4dcf-b1fe-d3356caf0a7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce9318e2-1e89-4ae0-b7a8-f0ef3f8052d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "769fe73e-b2e9-4d70-8dc3-a3c4c5c30601",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7b4a6cc-fa59-4ffd-9c2d-d49a48ebf2c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fb71f2f-7bac-4c26-b209-d78bb60a9449"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee77bbdd-c6c5-4c39-9a3e-371edf5b496d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6b70db84-e4a3-4d15-8855-1db27394cf83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e2b5c9c-39fe-40d4-9f3b-9ecb565c5c5b",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f571bf0c-1a48-4027-ab20-8dc9888570d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d45a3b4-d7f5-4879-886d-e66f564d5f53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad0b6bfa-0956-405d-8846-bc3eb4a2439c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5940f39-adf0-444d-a626-edae90f938c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f216a9d-aff9-4685-a448-9fac5c5fa5e6",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cd93651-11a6-47d7-8b6b-5b6d0de87548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4071873b-8a71-470a-b423-fcfa3b9050b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab99ca4e-fc50-4045-830b-b4638b99e24f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6933727-6ceb-4881-b25c-a6ab94b6dc33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f51ed15-808b-4cc0-93d5-fc8683d4f2ae",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1a9a1c2-591d-49c3-be80-6d101bbe0919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fae4b137-a71f-483a-8b52-d054aa6ac09e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01525100-9ef2-40dc-9a54-e051b8376a63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e25d3db-bb08-43f6-99c8-ff4f017cfca5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c207829-a1cf-4040-beb9-2e2f2acbfec2",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97400c52-78e1-40a4-97ec-297f0b936dd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eea3ce3e-1b9c-4ad8-8c09-9d501b99da2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15696f52-ef09-4e9b-b409-64db28a98285",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec4ee7fe-a7b5-49b7-9cc2-837cf2a988ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6c954a3-0471-45b1-91c1-ec7f1b35377a",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5200c62-39ce-4a87-a0e8-6781acd120f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef8479a4-de61-46f0-8e79-ee54d2429f5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91bb7e00-09c7-4e04-a68b-54404301e0ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "c8223303-4694-4c95-86be-a4c2eed12732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fb23d9f-63a4-4e01-b1a6-5ec959ad8543",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e414939a-6a4b-4d47-a592-797596a1cbc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c06a00f5-6768-44e2-a49a-c52e9ac6cde9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0ac91df-93ce-4641-b13f-58166bf5c12d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e64ba90b-7719-4828-b04d-85961cda472f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0f45c61-3a46-4a44-945a-1504f59308b3",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4833112f-ff06-4188-958c-6aa895fbfd09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab699a8c-806c-40ab-9723-3cb8cbf883ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dfa4a94-3d50-4197-bf47-90d54167a161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd66d365-d5e8-4740-8188-1d8aa9d86e75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67d37c1e-bc64-4afe-b586-e02611d631b1",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c2e0865-9d75-4187-902d-ce911e1371c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dd20884-6feb-40d5-86d2-ac2a58a11e43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a5bc87d-4aa5-4219-82cd-f481793f13f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "be859c46-c796-4881-840f-d85e62c95bf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2dc983d-053a-4ac2-aab1-15b868ef23c3",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f78ca901-7b7b-4ba0-a615-c1625738e888",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d73c830a-4bf4-4508-99ab-c554654d807f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bc177a9-27c9-455e-8ae6-706b33a6b1a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "89e8987c-429d-4eb4-b812-c5c379c32af6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e730783-755d-49ac-ad45-c5812971f65f",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e387557f-1516-4e93-a771-b2da5df428e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e9e7ae9-2238-4af5-9c49-39085fa2cfc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c46c760e-ff1d-4d70-beb3-308cdd4a90c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f7335c5-df65-4730-9e93-79aa3e93de9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edb1a70e-0487-4e32-a238-ab0fc4668d6f",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1da14c7f-5aa0-46da-b5b1-997d05a8d638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6b23df2-f322-4a0a-99b3-4af01c4857b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e296dc2-1184-4fd3-a1e3-4e5772b3294b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "be2319b4-52b7-4e2a-b6c1-01ef8760fc79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15ca168a-5af8-4186-9160-8ec5818637b8",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d83c5149-b863-484a-924f-6575a69a670d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03cc70d2-6ea3-47a1-9105-147ce986c02b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c5110f2-4572-41e8-aae3-58d2fa1f7385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1222dad8-4678-4f70-b3ef-26c38e1306c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79f2d499-88df-4ec7-b72a-53b8b439d728",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53746481-f8f7-4946-b9e5-16647c5c76b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2537ad0d-0dac-4219-87ac-c519641a2ffd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34314ef3-71b4-4e72-bc7e-8a1fbe6a8c48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca516965-cbd0-4c4f-b562-a1a771e017e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ec4ad4b-8606-4d30-be66-d0037f671d2d",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "782b01ea-31a1-4a64-ad3a-a0f8ffe1b98d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a186f28a-6ed2-4aef-9a50-aec2f7cb76c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e7ede58-78a1-4136-ae01-5512de609262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c1befb5-42fc-4b2c-b4d2-4be84275f55d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faa48d8b-b3b2-4a49-966a-b62232ec8a10",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23b01332-face-41df-8995-1e4d272c02b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63a8b063-991e-4013-b383-8d5be1382ca4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "159b288b-c93c-4de6-8b3b-9fe91860b356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "838fc8e0-4443-427b-bbd0-3ccdc3e0c6b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bae29103-6f28-40dd-9002-d9a6fb99aa3f",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e056aae-0c9c-4679-9c7f-448d97133609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19a5ff1f-a3d2-47c7-a54c-4019adaa6983"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e37d0dc3-877d-4fd6-8e70-d4c8803f079e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4646e7fc-07d1-4405-b98b-c54d6e01597f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1460fc6d-7f00-411e-8950-1c32740b8e15",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8333e584-f998-4a58-9f30-63173696c358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d1b11f1-1a9f-4d52-a546-cb6993d63ba2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b547dd75-b422-42ff-a210-f4fe7d866ce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "24ac060f-0b28-4c70-8afc-2abf7bb4c0ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31dcd176-f997-4ab9-9968-44a73c5358d5",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "965e566b-9aee-40cc-b6e3-2f29eda4410f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5761fd17-1112-468e-bb4f-dc0ad070426c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d532fd8-e96c-4d42-a24c-9bc7ad8767c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5bb3d88f-dcc6-4cbf-9a26-e26ec24bcf71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ee9e0f1-99e1-4734-a971-40478b25d8e7",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "245281ef-c8a2-4d36-9d4c-139d09da9ee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4cd5ef8-6a1e-4c45-8b8a-a4fa48ce729b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59d140c5-4280-4cd3-af33-f51e44060fb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "50eafb95-cb3c-46a1-a1d7-6f1478aac4de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dd9ef69-2798-4430-baea-d679b15b99e2",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4df6a690-577d-498b-a9d7-6e84b2e11b2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2becc33-cc5f-487e-bb23-542cc010399d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f43e900-c626-4640-8c93-8d6de5da99dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f25b723-fbe1-46df-bf66-5e1f6dce18ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "878a56d3-505b-4fa4-aa2b-523cdc34b963",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc48f48a-a060-4820-8df0-a90785c1602a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f74193f-7e11-4e55-b87b-ec89f71411d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5687373-a1fc-491d-91be-4a30ebbdd6aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c412a61f-31e9-4ba0-8bf9-ec9452057018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df7e4c43-c8d6-4c04-8f70-b9c3f4d7f5c8",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3454905d-ba72-4d5a-b87f-0d9857af8662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d2cd096-fa72-461e-b2b6-264f735439e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aaa63f3-04e7-412e-a158-6bac290d246b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9cd9318e-7db9-482f-8d27-74c6515e276d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9d23f8e-cb46-4139-bbfe-d909627da477",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e47070ec-b352-4ea7-9cd0-2652959212ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cdb9d25-34a0-4734-98e5-10c41a96fe00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ebc7041-f9cf-4add-9fb3-fc12e1762f28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5ad2037-12fd-45ef-9d93-8ea35c62ec2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "047d779b-0581-43ed-af5c-24d29f3ca3ff",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bdfb7d6-9ac5-4c72-bf48-333e2305449b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e891bb4-61c6-43bf-b7ec-fb7a43463690"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8d0592b-afd8-49ba-bf97-b2594cfeb078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e29e435c-422e-40f9-ad82-f6c6ad99d4fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e51250a8-77fc-449e-afc3-b5285ffb51c9",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c90a789-c0de-49bf-b779-b6bf43058b58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c06cb24-3476-4539-a255-b75acd3ba1ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7e0c7bc-1e68-415c-8051-75b7cacdbb54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "38d36190-d1dd-49b0-8419-047b8247ed54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b47f80e-6cb3-4d09-b448-e0608e97c27f",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fd2c1de-b298-4279-8b2c-d520ef20ddf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "479c0947-b009-4fab-b331-30f4a9dba8eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7145676e-8233-4d25-8524-84fc173e8f8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dec4d2a6-ee0b-4cf6-bcb5-4b3e033f116f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95d9c1c0-db76-4c0c-abde-89d70d3e0313",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "692ac5c9-da78-4439-9cba-42b58ebd0dee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34913f84-593a-49fc-bc8b-39ac815462cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c51d883-8a97-4f8e-ad0f-8fcaa7a63522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f3bb3c7-aa71-4c0c-a264-d0798f251e2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "614c1ee6-fe9a-4fc2-8176-8c321a62cd4f",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b562b19c-bb2e-44ac-a8bc-6e6868db0b28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c824351-249e-4d5f-bd6a-a2be02f90386"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6bb9bad-2225-419f-b0a3-ec4cfc5fb9e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8a63591-4bea-4ed9-9be6-c1e8e482d0af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e08f9850-a821-4186-b29a-6e72e7ab63bb",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e8adb7d-8d9a-4271-b41d-876fcf140da2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "308b142d-36ec-4e27-a4c8-64a8c7333f66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07c025cb-c669-4f00-b7d2-320e11927e29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ebbeae27-0632-429d-ace7-fef7938912c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ca0deaa-8320-45a8-b06f-c2c0f700f988",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09932826-e6e9-4ce6-a449-93e0312e4b49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92bb6fda-dec4-4354-b330-fcc182f6f1e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d16745b5-3e00-49a5-be1b-1f362c4be373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a1f24d6-1cc0-4bee-9c31-9013ff3f00a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b8c81ef-b6c4-448f-ad0b-8cc9ebf57067",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b48969fb-c673-409b-a59a-878d7210dd73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b5a0305-cbb2-4844-9be9-fc85b19e82c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c888df2-1fff-4a8f-ab31-b57253609c4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c7900cc-7019-433c-a678-6b9d8f9f3bc8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d7c0c1e5-8330-4ce6-9084-936f3e71f645",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8cf16a83-c33c-4744-ba5c-99a2bf2acb6e",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79f842f1-465e-4f15-8151-6b4ffa10d81c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "adde7d9a-e3ab-41c8-900d-dba6068bbed7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ffd58ed-5ff2-4ad2-82e5-6999de6af639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2a8deaa2-f016-4731-a0b2-0fc868b72cc7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "03609964-5ec8-4ba9-bc6d-3a47fe0aebd4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8510edca-a58f-458b-a81d-bf057a6aa28a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ba753e74-e9a3-4bb6-b355-6e16983981f7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "00a07fae-707b-4686-8d73-5ee53dd4a1eb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b1759d85-c409-42ad-8737-9efc3b4c5d8a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "059a96b9-6844-4b61-8258-aa0b7da23e51"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "79584825-2036-4365-bddc-4de10f347915",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "db948e51-7dc3-47b2-b0ff-3cabb882dbb0"
            }
          }
        ]
      },
      {
        "id": "4a4b248d-cb59-469d-adfc-7a9d0807f115",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "a9b720ab-4360-4e75-99a2-ce8f11c13d3b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c3bae060-92a7-43ef-ab27-032f4460dbcd",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1c4fda27-40b5-43a9-9336-69aec390cf1a",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ab2024a-1c6f-4a34-8ca7-b23e897150fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "815642c8-e2a1-4300-80d1-1daa74aee5a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f574ed02-98b6-4b66-8d60-92ebe68d4a58",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "664ef172-5faf-4971-9cd1-f97aeed675e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7e44123-f535-4283-9a90-947dba4322a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a6fe6b9-223a-42ed-9e6b-798d65fe83fd",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c1b0789-ef77-46f1-9c34-9f04be837b45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d92805a7-78b1-4e20-888a-79bc53f39dd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1d36897-1b05-4d23-84f0-76f403249b09",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ec26ccc-8b41-42af-a784-cd1e45a7a114",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24b727ef-4459-4bbe-90d4-05ce7203da2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a55937f-1223-4375-9f39-45c5e0a144a7",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee73547f-89e8-4c79-9dc9-44186b4958ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68f7270b-98f6-4d74-8101-a89e5a9b115b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26f5cf6b-437a-4e0b-ac2f-eb3bad67e2fc",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16fea174-12d6-463d-9b2f-c7f30311b291",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eeeab2b0-0120-4d4d-92ce-9c81604dbcef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2094f17-3de5-470a-823c-deec72978cfe",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a5134b4-6ac2-4588-9ed6-d3a38d17ef42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d02d3403-b780-47fc-9469-a29b2d20a814"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0616648a-45de-47c6-b703-79eeec1b7b1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7bbd509-9b3f-4bde-a270-b67bfd292aee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "372babb0-38fc-4341-84d9-c89ab63cdbd9",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2d4ee70-6527-43ac-965c-5aae0a187f19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28926728-6b33-424e-b53d-19c6d635971b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2b11c0d-8fbe-4a2e-96d1-3cf650967370",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6955615f-b8c7-410f-ad4f-f4d5fc1a80b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4760fc0f-2df1-46f3-9ab1-49117e20049d",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9de35c4d-c63b-46f1-b8b5-25de65abecf1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80c5c520-3ced-4018-8211-3febe7be83be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f347074-59aa-4dc0-bb8f-7f828d4f3614",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab74e13c-cc30-44b6-a699-28a80b14bbfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0184d281-5c37-4121-9ac4-b8fba3c709ee",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28013044-999f-4018-9558-f75688af2d52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8330984-32e4-4a3c-b0d5-40a0b0ba34d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "018fc0a0-1031-4b3a-81e0-d2e91738114b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dc707fe-c90e-4784-9bb4-03d11abad36a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f60c72a-fb13-42a0-80bc-1ff79546fd37",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7c9a425-f853-45c7-918a-6242541bcefe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "351a1035-b239-4433-b583-64b774ad8c65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1564fde4-804e-49e7-9824-776ba6e9a084",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b706f8a-a13f-44da-b00a-aea568f9e1ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cc3b853-63e6-4339-8dba-27e606ae5067",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "948d987a-c738-4e91-8b1f-ef4216ec5b51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d95ba485-4b71-42d6-b37d-646c03978dc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f781d7c2-2b90-4f80-9e1b-feee7cd38c12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8aa0f0e4-47e0-4f31-91f4-76e2c919c6fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87bcfe4a-27cf-4ce0-9edb-be19926e4b18",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "261f3995-9508-4463-879a-f219b4f58ba4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f60c421f-7ff2-4142-a6da-ad874af814d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e10990d0-5086-4903-906e-703007a26875",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b832b32-42b9-4fe0-aced-474f00aee78a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2226923c-9429-4936-b508-603af92affe8",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69c44b6e-9f43-4f7f-a35a-adddf3774b19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "657d8d04-1ece-435f-89d7-34febb5ed6a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff463ceb-c971-4eb8-b76d-19d809171b11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c99f81ef-2308-43b4-b362-290b35ed220e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b4a72f2-059c-4e1b-8302-20d1d20d4997",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b410f4d-3abe-452f-a606-c56d51ec024c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b7eeb52-20da-445f-8b3b-94b4c575c68b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d33dddf-a8db-40ac-9fad-e96d342d0bdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c19c2d0c-5082-4d0b-972b-1cee89735dc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d9c317a-197b-434d-aed6-bd55a8e6977c",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "281a2952-0077-40cc-af3e-36d75272160f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f5a0848-40cc-43f4-8156-6dc4f5e91e49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f83e642-dc69-480c-9658-755c46c43f8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f06e96c5-3e47-4e3c-a931-94d8edcb652a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15c565e3-6532-4e3b-95de-2a1683c4309e",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08b96d0d-35c9-4db1-a18a-9bad6082b4fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9000dfb6-b52b-4299-a30d-77012ba195d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adec5691-cd56-459a-a460-adf8386cca9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b443353d-8478-4ba5-a3e1-1871b86e48fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2c4ade5-3adb-497b-b187-f6a9e3e45108",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6487875b-86c4-424b-8336-c7a0767ffe72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30577477-b6fa-4528-8be5-4e0c5776a027"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fa9ea2a-91ef-4b2f-9e1b-02d43c0cf59b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cbfe383-2e65-42b2-a35c-b7544c251efe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df298d4f-9a2d-4cd6-bbbe-8e5287773cba",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4306299-a8d5-4a9a-9330-f15483f935c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e60c2ed-d23f-4da4-8754-f91374ac66b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a324d1f9-c543-405b-86ce-f57f0f62927d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aed2d9a-8201-413e-b63f-ab33dfb16b06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "737f99a5-ff45-46ab-8d43-85729d41aa52",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bdddd92-f2ba-4e0f-a73e-79f7e2ff189c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3403829-5b27-4caf-838f-9b3439dbfbca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bdeb6b8-fb8e-4b92-bf3b-83f9c0a2c267",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daf684d8-03d7-471b-b74b-a91d8232d181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62a0ddfd-5783-4d5a-8294-541093579644",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31002b62-f6ab-48a7-ba20-9fd6c7e573cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf024d20-cfbf-4131-821a-2462acf8d611"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0baa2b39-0857-4afd-8665-37a7220d4710",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e328440-d8dd-46f6-97bb-5a7c2b1790a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0d21209-ec2e-4a88-b696-aa464043ce1b",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a29d2f0e-ecd3-4c70-bb34-2f2397551fdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc7dd5e2-fa34-4ed6-b129-4ec7e057cc84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b45c5768-f7bd-478c-8b77-121dbcf54ef4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaf2b0a5-6d31-4aa7-80a1-7c507dc6aa88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91e2bbe3-18e1-4363-aff3-2f775d372b56",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2a8e432-eca4-4721-8c84-bc31377fa75f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39670a55-3c7b-42e7-88aa-93e202935d9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b71264a4-25a7-40d2-813f-87109b4c2026",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1cfe19f-41c8-4c2f-a6f3-805cb4f7bf27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77e628d3-10bd-4641-8139-c9412ba3e350",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18a3a45c-6bae-47f6-8ca8-9bf4f27c2c7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2efccc0-03c1-4401-8a3e-d3e8a93aa050"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ac70788-4488-4423-9db4-54cc65c58d13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1582fe0a-bb71-44ca-a808-0f69a7a4812f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c2fd755-9f1d-413d-bc58-94433f6345e9",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dc5efc3-32a8-4bb1-8d38-c047d4b032a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "111df455-e377-4d94-8b35-b80194d684e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3264162a-a99a-4f52-96ff-38989e51134d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b18badf-7c2e-4cd4-955f-75f76df1b07b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e455420a-9b4d-4a84-bd7f-b834f709eba8",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39e96601-8adf-4695-a52f-440f4587d953",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f79ee90-c58c-48b0-aba4-9dff7cce62ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df8009e7-e84a-434f-bcb4-c561cad01e4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c896c68-75b8-4d2f-916b-a1b43e1acd4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de1607c7-23fb-4a25-a119-78d66f3576fe",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dd770bf-7639-46fb-abaf-827d6ff17cb7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6da6b3c4-3f5b-4484-91a2-45ddaaeb9bcb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e44d7ad8-878d-4049-9495-6d3db842cba9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf7ba0d5-3d34-4a1b-9c4a-e0dea037c567"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0db9cb58-f57b-4bd8-a4dc-f7bf94da340d",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ac0e561-63df-46c7-a08b-3c5b35470f20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "483d5fda-1097-44ec-8c4f-2142c6b4a103"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2706bfdc-ce7b-4df1-8e3b-04a814093164",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44912ee4-ed1a-46fb-ab25-0e74d8c1fa1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2da92d50-94bb-47ac-9990-d4523a1b1768",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c367870a-9a3b-4b7e-901d-e3417cbde436",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "713bbcd9-115a-4901-89f4-807204925bd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2792b7d3-4995-4051-8bbe-061075d8e018",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fa4aa00-fd39-4fb6-a94a-b185f947bded"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b025e3d5-1020-4262-91da-6816e57c3cb0",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcfbacf1-0796-4a74-a0a0-0140126be8e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f99c4aca-5503-4395-9d24-122df5fa4777"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23c4e262-117f-4b0a-aa6c-7f5e6645ac89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b85c5d80-20f0-4f17-a809-9b264f46d7cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1205f108-4eb9-4e0a-96ab-6dc83a69d1a0",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "262b5d8c-4ad9-428d-b7df-b0b86fe53c70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ef14671-fc3a-4124-bc29-6c31138dad48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80aacc5c-067f-47d1-a2b2-594e821e8d4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03f59b10-addc-4b00-a1c9-91e09b4cf852"
                        }
                      }
                    ]
                  },
                  {
                    "id": "079023ad-91ae-445d-a764-ac4d38a21d88",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c279c078-daf2-449c-9ec0-bcfc6bc9a2d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c02f53ea-114a-46e1-8ac8-6ba4f5f88bb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c347b583-435d-4d21-9aa7-c89a57167b58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97813d38-f8d8-4b71-be1e-ab0534127264"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9faaece6-aca5-4d5a-9136-b225491ba029",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "688735b8-d52a-4bc6-a7b8-70d7ebcefd9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7207b3ab-ff86-467f-8b9c-2b42b08bc6a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa96640c-3743-43e1-8d07-f754599606e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50141e93-4779-4de0-a136-89d65dbaf36d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ae72753-466a-40c5-acbf-c15b73d6ce86",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7641e353-1dd1-48fe-be97-0160702ef854",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e187e148-5550-4367-b008-58adec8f4a51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59d01cb3-f04e-4657-94b4-d14114d739db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9996a5e0-a20c-452f-8bab-9f556e04dbfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8468952e-e729-419b-be6c-e17c40202bde",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12fb998a-396d-4ae0-a718-3db99147174c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa5ab97c-518b-4332-999a-b60115cda055"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dd39be5-b834-4725-b88f-7e2a63fcccd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa2ba229-24d3-4633-bd20-348c8d8ab370"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e7b9b93-ce85-4021-be4c-7d6dfe4a9f29",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1da27299-a79b-4da0-abd8-b4b564868cf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89805cb8-6459-4dde-b56f-973c48743de5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "169d4659-274d-4716-911d-ade23fba5889",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e57561f-b78e-48e8-ba68-8069c07847ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35c6e587-ac81-49ea-b78f-84f48e31eef5",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0bde570-a3ea-4554-a192-06883c391131",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c866679a-da53-4b98-acda-f908e0fb9779"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7734a3d8-2e1f-4d6a-a5ab-6dae48075bd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b5be58a-c6a3-49ae-a35b-d64434f9e065"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb5f00b6-504e-41f8-a359-da7d6ebe1572",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "169f0c41-0c3a-4e36-97c9-b08f05fdfdb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de5441e5-e746-4130-9ec8-0f89f2791a7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8c01285-8b15-4dd1-aaaa-b22b5a196240",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c16660c8-8760-4783-9203-723e1fa9b596"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dee20938-4c00-40f7-a045-e0bb2cfcbde6",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d977ac60-2617-44ac-84ad-529c95bdb926",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "463bf7e6-8ebb-4f25-911b-25ace8f365c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f5b7fe4-5beb-49ef-b531-1d2b6193bfc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8ed9dfe-9fb5-404b-afdb-d52a6999af15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c53e0f1-831c-46e1-a409-946d23e50107",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dce13ba-f26c-4c7b-9ca3-461ca8d3edcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52ec16e5-038a-45ff-90e5-027632ebf195"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f64b6291-3c14-41e9-ab6b-8c8aedbe2fc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0b59aa7-f609-4d60-9245-b22c9744a2f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "670e72d7-ab7a-4d00-bbfa-4e3fb447980e",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3e35412-e1f3-40b2-b767-8770d6d66464",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53d7f87a-4877-42a7-854d-476cbf5007e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8216cf92-a90b-4d9b-8a81-5b4751630f20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae6fcb7d-6961-4db4-b950-85c961c8abb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "244fbc43-1d38-4557-990b-b12eebdd16a3",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f137974-b2e2-4ae6-ba97-da2a5532a3ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80dae3bd-5f7e-4bcc-b6c3-3df5e36d65e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ccca312-5125-4be2-9a82-081df92794fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b9cde34-2841-4f0e-a1e7-1ced86244ef1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4372c7b-27b6-400e-9b8a-4599c1d795b2",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a973604-9671-4582-a987-7eaac9f6a445",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "356d3292-6fc7-4139-a5d3-0d7e2b4ef6f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc925aad-e8d1-4eda-8504-d12ddca36af7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d32438f-fa56-4f58-a75c-ffcd96abac1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c24c38b3-ddca-4202-b5de-a45ed7ec7c5d",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2a4ee15-c9e6-4ca5-ad28-2139e2d5c800",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ef3acd8-00b1-4784-b392-d2a156629046"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "346b5bef-0659-4a62-a48a-0a8146cd4bbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b916882-d1da-4143-be7e-95e1e8a2b895"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b49a59cc-2199-4aa7-aa36-7b8f3ecb0936",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45fae6f8-57a5-492f-9edd-793dfa307f06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c86dbb22-d05e-405f-becc-546f347ff5e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f403371-29c2-4069-ba2f-2aa7bfa25ad0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b9d17c1-4c28-4826-af8c-9a5d68fbf626"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efa72ddb-adc6-462d-9571-f02fa3623536",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "430cd6d0-f50b-4109-ba1d-1346d18a244f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63d49de6-c414-451e-8f02-23b5d3a706a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8550491f-928e-4d17-88f9-2c6ad0c672be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bbd95aa-0d48-4890-9f32-24ddd64a761f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9d547cf-c932-4ff6-a252-4c82205e616c",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d314d7e-b751-4cc9-819e-a15fcdba7664",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83ab7ff2-0ad4-4dac-900e-2a2a4b2a7674"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "696b4b6c-749f-49ba-ba14-2599e4a099b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80a51044-b9ce-48cb-abb0-311cd822e142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad002930-3dec-4539-96f8-2b7f60346247",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce538d23-8f33-435f-ad96-ac1bcfb96927",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c31f0c7-2ecc-477d-a51c-9f6657fdd2f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c12b203a-e3df-47fc-85c7-81c465b8a524",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4a57323-8f7b-485f-96ba-5d00957c5530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3e6acea-d0bf-404b-bcc7-fdc469114ab6",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5645d68f-d3e4-4b0d-9678-25676519c965",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c92c07b-6f1b-4157-8ae5-bfcdc1e9b831"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d44c72f4-180c-4d95-b8f2-da9004a0d7be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64cdf1a6-b7a7-4ad2-ac63-25e5f5c004cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0436ff31-0dcb-438d-86aa-211170bf6928",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4acecef0-29aa-4248-9676-81c1aee44553",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "620f4dc3-60f1-4101-ac2e-a8cd4e8503a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07bf335c-792e-4afe-8211-021008cd55b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b017d22c-1b5b-48dd-aadf-2bee263b8a5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78a3273b-4b6a-446c-a442-aad7ddc62dc1",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3929d4d-4335-40e9-be9b-e481fbc5d331",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "178c9772-5984-4c97-9ad7-f2a4dd61ef1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbcb6937-d51c-43c5-9940-4ce2222e233f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "858a999a-a40a-4b3c-9057-45bd3c38c631"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03312711-6754-44d3-af87-6377e516bb83",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2488fcdb-70db-4bdc-ac35-9ada4a5cc0d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2359ac1b-6f82-45fa-84bd-971c2b1cea7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4ce9bf1-90fa-4f9d-9036-ad0ffc2e8e48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b058f0b-618f-451a-92f7-604612a36d00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4897ede5-e392-4478-873d-8e5513bcdb01",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ccea9a2-2437-4ab1-834f-7da702e9da93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98da861b-35a8-4251-8ad9-6ecf43d89a13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e936466-d371-4d68-adc0-21c6005a3384",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad8d657c-59dd-4733-bea5-220c8d1f8c67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d958f51-5690-41be-aa4e-8e7a1c2b6058",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "274d74a1-2391-4269-be3d-6c4a8405b7bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18358d37-b289-4755-a9ff-e286f9a4cb73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59fff0cf-e857-4594-9cdd-6e085f308448",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edb95364-2f42-441d-8c95-42b572546530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4484458b-dc3a-410e-841d-cea74a57f5c3",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d21d029-2400-49d6-8ac7-ddb6f2ef61cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f0d3872-6999-4654-90c8-ce02d90266ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08dbc19e-4eb9-4cd9-a6eb-2c154a12c3bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "657030cc-f75a-4d70-8e60-626d936c4c16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b34a88f5-e4e1-4a8b-bb9b-5d131b57b5fa",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efdbfc3b-1fda-4bdd-a96e-95882aa0a52f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca7c915b-8815-4cdf-8bb8-df4d4c11274d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65a11601-fcff-47be-bc42-fabb02d75c85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1746f895-333b-4e8b-a018-1f7d796702c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf862d71-662b-491e-99f8-f183fa03a4b9",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6be02319-e152-484a-98de-826436abb3e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d908a8cc-7244-4331-873e-93f81a3371d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b92664b-1585-43d6-a38d-d3efae145d72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f910921-1350-4277-9da1-dab595964e0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beeef473-24cf-40f5-9475-8e5a7fccba0c",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d3b9b4a-d780-435f-92c5-06bec09dbe28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dabb9b6-c63d-42f3-8674-29be267eaa3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25e371bc-81e1-4f12-8d9f-4128e81eac6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78aa04e6-0357-4f90-9ef2-d7212692d66f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3938e92-4d11-4932-99e1-68627073825c",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb77532a-1f08-4558-844d-5ebfaae7d52b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c42ff961-e93d-4e61-ba2c-a767847defc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "027fe5c0-36ca-46b0-bee5-0bd0c6602746",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a37445f5-9701-415b-b4cb-37a1977be679"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88f992f8-a480-4693-bec6-6493bb3b2168",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9408fe7a-719b-4146-abae-9f0c74524162",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "657268b1-d93f-41a9-ac01-2c29e6431471"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc1866f1-4ce6-4b94-8044-cda438b6d3f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0465aae9-fc6f-47cd-899f-8b5d65ac2f1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd84c44f-b7bd-42f6-9ce2-53eb7b8ae140",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58f32d82-54d6-48d9-bf26-e0d09ff380dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd0fd531-3183-4aa7-87d1-cab4eb6f0f93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b9826c0-0d65-47a2-b22e-d953f49b9407",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0292266-d647-4f18-bcc8-e9da96cd9748"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec677c6d-c4ff-482c-a683-ed6585e67448",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45fd32b0-b39a-4a9a-9a77-fe080389a7fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d14ee5c3-85d6-4441-bf44-2aa484db2144"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f068df79-f0ab-4c47-8ff9-06767f0af510",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45286f6d-bcfc-494e-96d7-8aa24dccecca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9d69f08-fc66-4017-9161-4159f955ca55",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64a2b2a4-2af8-4f4d-a077-44ddc9608f62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9794db8-ef8f-486e-9c73-e328113e9a23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6123cff4-d78e-485b-aed8-13e7634a55b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3541b5a-819e-4405-b961-8ad285b63e5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2f8b4fe-5fb4-4b7c-ab58-304f0c3d7aeb",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "156440f4-692e-4e44-9240-1ba3fb40974b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e51dcdf5-fd71-4b37-9bfd-462593036cab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfd9074f-1928-4f64-b947-5c4f2ca39cba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba74b66e-7027-4f49-a47f-a87753e62ae0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4e4d3c0-c235-4096-ba53-ddb85927aeb6",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26251f68-5f77-4052-aab3-2ff309b5bdd3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46016339-d40b-4bed-812c-06fa70ca91b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8326208-0146-4cbd-8714-0a7bdd5dc6d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a90dcde-4a36-4f57-b4e1-8ead8969b007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9da95556-2409-4beb-88c3-da9e470e5987",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b9fd89a-6a3f-4099-97be-bfc2fdc585da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba0fdfa0-d965-4e71-9ed5-17e54df016a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4bdb935-b3f9-4ec8-9f75-f27fde2724ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15fce59a-a0ad-4f30-8a62-15b88c6361a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b33a666-f68e-4be0-9586-9350d4598557",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d34d353-2420-417a-90f6-e9b375a48d9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b063f4cd-87d9-45fc-9f9a-51a441d2f050"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26ce2075-5ba9-469a-9dd7-f0af53025393",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9bcbbf9-c2cb-41dd-acfd-716d8323d453"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebbd0906-967a-4b72-b550-6f0588c125a6",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9415a83-6134-4790-ab56-7c846257bc64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e1c92b2-2684-48b4-bf1a-43acf91a35da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba5de313-8ba0-4967-bd75-349c5cfe2c8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c008e13b-0730-408f-91c9-b17412cc4056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc526839-c4b4-4db9-b15f-fb5c64b9be03",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b656cbd-e572-4208-86d7-35fb3bf4bfcc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c173cea-b9e7-4691-97b4-f4b23b604c6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8207752-f8f5-4ee8-b40f-fdf7f37d7957",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de6ccd3a-1683-45ea-a626-bc6407665c04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d29ca5fa-b0be-4981-b768-344949c92e12",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc300bfc-8e4c-413f-9a9a-d6433254ced3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10f5281e-c4e9-4d4e-90be-e0ad61d906b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee5315ed-eefe-4d12-b1ef-f7ac111705b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26152e12-4c40-4af6-a2ce-9f9b54713d2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2958f24c-63f2-48a2-a004-d1d86ebadc7b",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec604463-5963-4510-a477-3857c0ab94d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4df1e9bc-46c9-400d-b729-45fdab878da5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3348cc2a-f0d3-481d-a729-2eef71083d13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "752e8fe1-638f-409f-bce7-27d3c1948d09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a99b70b-26d3-4c46-9c8d-9eee3d3f1fe0",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35ddc1ca-1ea8-4516-b6c9-dcbec4d9575f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0bc283c7-7f65-49b9-a8c4-592d4355bf92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "645ab1b0-b150-48e8-97f8-3d115bca59d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1800dc37-e03a-4cc9-bfb0-665cf3327d72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f204fa9-445d-42f4-b3c2-bcccffff5eb4",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50db6118-ec6b-4de2-8e1e-5ee51aabc90e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e59284a-22ba-454b-985d-48f9b9386372"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7dd15c1-3caf-45f7-9af7-d43a3d266e34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40be8406-973b-42a1-b48a-b74b16630f36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a24d86b9-0480-43af-bad8-ef10ed6a4099",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfc04b78-7abe-4715-b15a-264d6f514ee3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72868ea4-9fd0-4da4-9791-bf121c65699a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b66e7d96-64f3-4b0d-891e-c38e5bde397e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aeaeb580-2f8f-4044-a427-00339ded01be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ea0c326-e564-4aed-944e-61e1ce4ec51f",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79329002-4faf-4560-869d-c79ca3d080e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3bcacb3-6906-46ce-8e35-3dd3c4e60b3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b661384-3b6b-43d1-97b4-230cfecd9139",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc4745ad-9ea6-4072-9615-399a3f6f25f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f4c1487-83c3-47f6-ba57-9c9975d73f6c",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55e56d45-2795-4cde-b938-86da48afef80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c19ff4e0-8a87-47c0-8e5c-dca34c6dd5d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76838755-0d1f-45d3-a53b-840a5858cb1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c15019ce-69bc-4830-a429-980443ffad76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40991a9c-dc5f-4c82-9da9-6cdf0762c961",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c199857a-6657-4654-a16e-522812722405",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d52017ad-5c45-40c2-8bbd-728c4a9d1c73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a11450ee-8c35-4c05-aa99-37ccdd48e864",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "304b6239-be8a-480a-961f-d873982389cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c787c885-7c13-4269-9863-35fee46f6583",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03e05979-dcbd-4dfb-bfdd-d08042111cd6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15b71dc3-87e6-49d5-b77e-4fbc0a76bc41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51379a83-149b-4c14-a36c-283b79058a59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "538d05b3-d504-4b4d-a281-8a468f22ce60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c26144c-952a-4064-ab09-52e7521b4e8b",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ffc4185-b4e7-406c-982d-64c2e867b0cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4bbe7e88-acd4-4369-bd9b-07b5cf2d2bce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c552c63e-0a1b-4078-adaf-42e0cef1a97c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9ec7db8-bc75-4c5e-a18d-d5478db8754b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "201edd65-6ded-4135-a975-e79a298821ad",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26e31115-4300-4d33-a38b-daf379ca86b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f345a2bc-9788-4614-8d7d-704239d3ef27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf30560a-7d51-495b-8841-9502099649f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61e8c8d4-d09f-4d43-a8d1-338987377152"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2e1e9db-a82e-4444-b907-6ae20dddda6f",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79a35703-2598-4666-81ef-1c9ec15d3bf3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5fcbe14e-d826-41fd-b67e-dc1f627fbf39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b5ba4fc-c3c5-43d4-b691-1d1fad05e39f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24c92fed-baca-44e3-a623-cee45d9dade8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0ffec11-f76a-416d-94a0-5e07bd31efcf",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67816b93-dc21-4c80-9d79-acfbafca5c4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11f8d09c-fc6f-42fb-976c-f9a752dff1d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9b37192-cf9b-4489-aa54-9543c64b883b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "878e2d90-f824-41c5-b1df-42160cc82950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6f314e4-0d50-463d-874f-ccc56b7a867a",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1557b745-67c1-4654-85de-7e39c435b7de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0cca1a39-0594-4c62-a240-a098a679e779"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25d1b693-7667-4c27-a6e4-f1550fca22ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3f04838-088a-4388-b9d9-6836e75412c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d0c8a13-35db-4728-9dce-e840f201aec5",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbe924db-1ccc-4e72-9b45-eccfab3e3be6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0cb3d416-1154-41a6-9673-538c29e33dab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9768f1e9-6e2c-4647-8cd8-244136d7cfc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f9e24f5-8aa6-466b-a83e-73aea5bffd42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4950423-2115-4835-9c9e-4deb4ce5fd99",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fae29acf-3982-4ada-8e32-51fa5e075da5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4c71922-cd5e-48c4-9547-4e80686b3fbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b77a217a-c0af-433d-be3c-ee61fd804966",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "019fb29b-26a0-4345-89ef-92fcd705d535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57d7cdfd-07be-491d-baec-b4bcb892f373",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e68862a-68de-4fc2-902a-3d41cac0cda3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef20e09d-81d5-43ce-8ec8-5669e08c06f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5af2e07-2ad6-43b1-a9d3-b30d6ea04586",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddee5b29-05d3-4dd6-89d8-1edb0fba7de5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a868f582-ca85-4a0f-b6ec-93e47e18d73c",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "939dfa07-4ae0-458f-a42f-e1a28782bfe1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bde18d9b-0dfc-49a2-9874-df9b7ec97c61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fdb92f9-aeae-4ef5-985c-12b5454481c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68a14529-0728-4532-9609-4290891d889f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2c56bdb-aa1d-44ba-8a6e-0184ea643640",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a85ea18f-5492-467b-9fee-82a0c651927c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5a7d3d7-0f35-43cc-8b30-b215baecee7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93cdd07a-961c-4851-b3d8-142cd8619861",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1563534-9b01-4599-b124-39cfb3542dbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ad267bf-4902-4738-891d-98915078a144",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92d4b0c9-fbf6-4576-9860-f7e605c45c1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c366e356-e703-480f-aae5-654727c8cd95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dfc1bc9-4d4b-4f39-9d82-7dd93f794588",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18b94938-44cd-4e97-9d41-8ebcd29d83e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72ddbc3c-7ac7-4a0e-9137-4a3eb3711681",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1982cd97-13d7-43c1-b508-d3f1735e025e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd98b34e-f40f-4be4-9df8-653c39d0ffa0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5fa4286-e099-4893-bbd5-d76d60fdc0ef",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "586a9c72-4594-4d65-a940-851cd54de76a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07fcad1f-f6c4-4a61-842e-832f9c99a71f",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "477ad8c4-f45a-4a03-b336-7e4e07429b73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1542504a-5bb0-45af-bfdb-374e38d1da0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5ebad73-4a1f-46e8-9993-d123396be633",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b3dc224-f45f-4e25-86ef-c83f2c9f0887"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea9f11d5-7b72-458d-99bd-34d4ff96b285",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da210319-a073-4794-9f59-4d87bc67ba69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0363fd1-5123-467e-98d1-a66a763f81bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e311dd5-0443-439f-822c-f81b21b27dab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc56817f-ba0d-4908-a72f-6bd983c9213a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b2081d1-ad3a-4990-9bc0-24e7a74f5953",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cdc3808-364d-4375-b30d-fb8f4a36045c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "591ca02d-cb76-4aba-9248-a67a50278d39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fafbcc0c-e29a-406e-ad30-3760d7157f25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e2f8cde-84d2-4c74-a86e-0873f50d8c29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c24ba718-fead-4b47-a43a-69384f469bc8",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55448c6a-1eb2-40e5-a510-aa52aaa6e8bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1503e5cc-9310-4c27-b8d0-c8018d0237ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "177d8622-e45c-4008-b0a4-f1ebec8d5870",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a63b574d-9bce-4e6e-b9ac-914be32d1426"
                        }
                      }
                    ]
                  },
                  {
                    "id": "758f3551-3ccb-4d58-841e-8ef31e366763",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd49c3d2-8a5c-4ce4-afa6-4eb77094de6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "338cfb8c-d084-4308-9554-bf24cbc69aa6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0d1cd03-a62c-47a2-bcd3-ec10ff9962a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de4b8259-1ae9-4d81-92b2-da4dfe53bf4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "567d1126-056a-457c-ac64-cc4f2b1e50a6",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b94f8813-fe56-4f4c-844e-987c1898e830",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4782136a-ddb8-42e8-a2be-36a333b8c026"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa06092a-5aba-43b0-94df-cc0aae4f4533",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16f1ce49-598d-4616-91f2-0649aed5e66d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd465f5e-2783-4b3f-b9a3-2c8e2c5be8d8",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1df020d8-3524-4548-874d-5a02f8d6e716",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "681f99ef-7bd5-48b8-9fa6-11ab3dc611a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89ff9435-1791-4e6a-b9a2-e9a93b3e137e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85b5ee18-a614-4a44-b8e1-333667c46107"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "71456cc3-48ea-43bb-b717-d0f9814c4e4b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "47e59a56-303b-4c43-b55e-bb8d35d3bb18"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "aebc2d68-699e-496c-9207-967b4fdd24d8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c2de0118-f5c2-4af1-a1be-b93b8926cb73"
                    }
                  }
                ]
              },
              {
                "id": "e5fb060c-ec64-4a3c-8f22-48558a1bf5f4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "10a1c213-c183-46ca-90bc-1cec9d6360b2",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67077d4a-56fc-4517-9b99-2ffe0a7dd77d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "ffaf63f2-3877-45ee-9cb4-5bce6e8007bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7006e096-9649-41a8-9373-aab42e514b9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8ff8dd91-3b3c-4304-b887-ae8924fe0385"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bb715af2-04b8-44ef-a05c-586ef239d184",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7c49a5bc-b1a1-485f-9571-6023d05878e6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "09039b98-3ddf-41b8-90c6-4ee0ef6c9c17",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "36515f7f-8104-4109-b577-399748df85e7"
                    }
                  }
                ]
              },
              {
                "id": "1ae11e3e-8bef-4203-b6e6-12f4aa34d7cc",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "b7b5b829-ec3e-4f53-b000-f87500b17c57",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "324748f3-8ee4-4267-adc4-c76fc8c19a91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "f5603d0a-b837-4d67-9191-685daf731326"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a94b026c-bacc-4205-9db3-354fe0941218",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12d87d1a-d223-434c-a643-c9e12ed6bde3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "3c084c09-3cd3-4ffd-95cd-e0cfbc7c081b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5b57cf24-533c-4db8-bfba-757bb0b63d94",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5fe293db-73d7-4c0d-a4d0-17c04f636c7c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9253ea31-45dc-42e3-b0a0-29c59112c3d3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b8ac73cb-d908-4ad4-85ea-57099476f5c7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "71986900-db85-4e3b-a49f-d8b8137bafde"
                    }
                  }
                ]
              },
              {
                "id": "67e3836a-f3a4-49c5-a0b4-84ffc5bf6735",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "48268839-9bf4-44d4-8752-bbea0c05e456",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b3fae119-2bdd-403f-9f1a-d641dcc78f94"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c575ae51-f50c-4e27-9445-0a8d7e1d52c4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1ca25d9b-c415-4e24-8dd2-77d15d6ab916"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d4c3cb00-7dd5-4bf5-a183-78b89079c7d0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "9634b5d0-fa11-4106-8f58-2e273e7ae32c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e33331d5-d4b8-4b98-a1d2-5c2537c6cef1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "761ce517-0f0d-4acb-94a4-9478382d25b5"
            }
          }
        ]
      },
      {
        "id": "4e7d1685-90fb-4d28-8ec3-9776b624d716",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "8933fe7f-96b2-4cc5-bf9c-0446e5e9277b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "344b5077-bb06-48d6-8761-413647f8a21d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e2d29216-f45e-47c3-8eab-74661aecd4b1",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e7f98d3-1eb8-4ad0-988b-9ba8e3da67b7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3af6ee67-a40d-47ba-b562-a30dc0491c91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "999f3ca7-5ab6-4581-871a-e90754edde50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ddf07842-ca6a-41fa-bdc5-0dac5cf3410e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1baa7293-928a-487f-95f8-6364c684106b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e9bbaf66-7ad2-41f2-8f30-63bdf606fe49"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "98a6dbdb-e043-4753-8f24-5e9d4588c446",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6ce855f6-fdce-40e2-a09b-54a8955ce648"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a33925af-b7d6-4bc2-af02-9c56811f258e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "79e71c3c-bf39-4840-9b50-42a4b3052130"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7d08a4e8-175d-4f24-8dbd-88e8762bde3a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "97d66a89-9560-4449-aa77-cce145e06ae5"
            }
          }
        ]
      },
      {
        "id": "6b0c704d-1f94-4b5d-a2b6-9ad515389f0d",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "8cb677cf-2443-404a-9e2a-48265de8f370",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4378a0f7-d0a4-4065-bce1-aa5f99a1d75e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0c0154da-00d6-4393-938e-ae7335cb041e",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "966e76d4-ca63-47ea-ae36-84d99647d6ea",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0f510b99-eba4-4ba7-8dd3-6ac01b0543e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1b334d7-ee7e-43cb-ba59-eb10949a0660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ecaae691-5edb-4221-bdfb-f1235c3b5289"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a3a0568b-009e-47a5-a9cd-7686eb670517",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5009d8aa-6e34-493b-8164-e559bc9e2a21"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "82f6f10e-a819-43ef-8eda-78b54f532983",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e70a3ac6-1f29-4bf8-ab2f-32d3a9475e0e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d1991633-ebcc-4b23-8f2a-59b1559d64c1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a8dccac7-6b39-4296-8e56-b06ef397d892"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cb74226f-3732-40c4-bc44-a5f2b19f62e1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "858b18e8-208d-4130-9862-d9e66615783a"
            }
          }
        ]
      },
      {
        "id": "4e304636-b700-412d-a18c-7a8021c04ede",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "879c8b6b-8396-4f77-a2e1-3415e2491bb5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9c9eb0a6-7946-4732-99f9-b9d2d806d5ba",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7ad49155-e541-4232-b4ea-9f027dc77392",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6652b952-3234-4e7a-81ce-8ab0839df28e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4f8b02df-c7d5-4c47-b63c-08d67a1e2ac1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abe2d568-cf30-4c09-8a45-47bcfb813719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "997d0911-a6da-433d-bead-cbd470b08fb3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e6495310-dfde-4419-a969-8e75895590ca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "07c9b615-bfef-4429-8a07-bbd1d36eaa02"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c7e2440f-0076-412d-bc6b-97b02f9e7ecc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bdedf1f1-ae53-49e7-a349-166c76377b0b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d073440f-893e-40db-aefc-cd297815cce4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f9740012-447b-434c-a267-ea93f021f2bc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1be4091f-d5fd-4131-aa1b-afe7b0288f77",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "15152e93-a713-4c02-a318-088280d57b4b"
            }
          }
        ]
      },
      {
        "id": "a20b9924-e048-452f-9b79-28f168ea62a9",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "22dafb21-9cca-4918-91a3-4ecc98f4207c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3bd66ded-0eff-49e4-a901-8527764f0064",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "8903d7e9-33b4-461e-8d78-5c3c0b867aee",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "41ce3679-45cc-46e7-9871-e8863523d19f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0474e137-19a6-4fea-85b0-dd2ec19143cf",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 45
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 115.4788732394366,
      "responseMin": 14,
      "responseMax": 2292,
      "responseSd": 246.88703347915808,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1693269160854,
      "completed": 1693269209380
    },
    "executions": [
      {
        "id": "88728058-09b2-47f3-aea4-d11847927bda",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "c8aa368a-1f84-4323-98ca-3f3eb765b256",
          "httpRequestId": "6a7a3ecd-ed33-4cda-a4c2-25c791c9cf97"
        },
        "item": {
          "id": "88728058-09b2-47f3-aea4-d11847927bda",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "9af3906b-dcd4-4304-a0e5-968d9baac056",
          "status": "OK",
          "code": 200,
          "responseTime": 106,
          "responseSize": 0
        }
      },
      {
        "id": "6b32583e-1fd7-43b7-a24e-1c83b4bf7f3f",
        "cursor": {
          "ref": "ca9e0316-4350-4e6c-bf82-4d03ce749efc",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "acc2b356-64cc-47f1-85f6-b2aeec68a558"
        },
        "item": {
          "id": "6b32583e-1fd7-43b7-a24e-1c83b4bf7f3f",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "099ff6e6-2a76-4bc0-901a-2e5d05824167",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 0
        }
      },
      {
        "id": "0fd1bcf8-2ee1-43be-a93d-b11b150bacb3",
        "cursor": {
          "ref": "fefe5e9d-7bcc-4684-8d8d-8bb33dbcc7a0",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "eabc5299-ff0b-4f82-8106-d14cc5e37292"
        },
        "item": {
          "id": "0fd1bcf8-2ee1-43be-a93d-b11b150bacb3",
          "name": "did_json"
        },
        "response": {
          "id": "bfe2a925-954a-4e21-ac2c-599bf9cfebe3",
          "status": "OK",
          "code": 200,
          "responseTime": 321,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "012696b6-db1a-49fb-80fd-673a4c8f1be7",
        "cursor": {
          "ref": "1837903f-3454-4bd4-8ebd-f57f9fdc9bb0",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "587e17b6-ecb3-4df9-96eb-267c2eed4923"
        },
        "item": {
          "id": "012696b6-db1a-49fb-80fd-673a4c8f1be7",
          "name": "did:invalid"
        },
        "response": {
          "id": "b29fef16-4b10-4bb7-8fea-fe9d51da3d81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "012696b6-db1a-49fb-80fd-673a4c8f1be7",
        "cursor": {
          "ref": "1837903f-3454-4bd4-8ebd-f57f9fdc9bb0",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "587e17b6-ecb3-4df9-96eb-267c2eed4923"
        },
        "item": {
          "id": "012696b6-db1a-49fb-80fd-673a4c8f1be7",
          "name": "did:invalid"
        },
        "response": {
          "id": "b29fef16-4b10-4bb7-8fea-fe9d51da3d81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bfb6dca-ed3e-4e78-b8e2-520fb5105e7c",
        "cursor": {
          "ref": "0729b229-fc69-4005-ac5f-ff27979f1246",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "3c2753e8-dfcc-42fa-a0c7-3a78ba111136"
        },
        "item": {
          "id": "7bfb6dca-ed3e-4e78-b8e2-520fb5105e7c",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "31f00fa8-f1d9-4dca-8ffc-cbac5e9d36d5",
          "status": "Not Found",
          "code": 404,
          "responseTime": 116,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2bdba36-a719-4b13-bf8c-f8dd1089457d",
        "cursor": {
          "ref": "28b85a13-4582-44f5-ac79-13fcf533cd5c",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "43a97af8-07fc-4b36-a469-6c78ed52b29e"
        },
        "item": {
          "id": "a2bdba36-a719-4b13-bf8c-f8dd1089457d",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "2eb602f0-de98-4ffc-b88e-ed08e42ff4f2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 71,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e47acb9c-ab16-49ae-94dc-54eef9dce79d",
        "cursor": {
          "ref": "b90a7da0-cf81-4799-8d66-51686998d078",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "1e817c8f-5662-41cc-870e-c92051bd2a26"
        },
        "item": {
          "id": "e47acb9c-ab16-49ae-94dc-54eef9dce79d",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "801938a6-9430-41b5-9228-94ca1c13af51",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a11e8b33-19fe-4772-9128-fc5cf9ddc149",
        "cursor": {
          "ref": "3475eea1-6065-4b50-a70e-32fc3fdc3467",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "5c1adf99-fd7c-4707-894a-b93e5d77d9b1"
        },
        "item": {
          "id": "a11e8b33-19fe-4772-9128-fc5cf9ddc149",
          "name": "identifiers"
        },
        "response": {
          "id": "ca278739-dbea-4531-9652-a010d770a6f4",
          "status": "OK",
          "code": 200,
          "responseTime": 117,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1786b22c-0af0-4636-b442-b89b911d41af",
        "cursor": {
          "ref": "98b229b3-9532-4965-a5cb-541fec0d8dda",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "dedb808e-6597-452d-a7d4-7c7ce1c3101f"
        },
        "item": {
          "id": "1786b22c-0af0-4636-b442-b89b911d41af",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b0e78f12-5d69-4263-b310-892e7fb03e5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35493dbc-604b-45f4-ada6-482e6f5a3333",
        "cursor": {
          "ref": "183e0f5a-da13-42fa-a64e-1fbc002cd403",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "59a34545-7ae7-4899-aede-62a685e9e152"
        },
        "item": {
          "id": "35493dbc-604b-45f4-ada6-482e6f5a3333",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "5185f737-2cbe-4d9e-a402-87949f8166e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d294ea45-0a3c-4810-9a01-a241edbed06b",
        "cursor": {
          "ref": "37233455-f24b-4570-8962-5e3b378767d9",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "529e9ef2-ae98-4cb4-8204-9f2a7305b2da"
        },
        "item": {
          "id": "d294ea45-0a3c-4810-9a01-a241edbed06b",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "c30401b4-d491-4470-a611-92cf41859e58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b6b62da-8c94-4a3b-a024-a2bc7f90ff95",
        "cursor": {
          "ref": "404ab6ff-4650-48cf-993c-77ee93674d48",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "2ae7e179-3132-4501-ac49-2b334f253186"
        },
        "item": {
          "id": "5b6b62da-8c94-4a3b-a024-a2bc7f90ff95",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "390e4ed1-856e-4483-a3e8-aa92a8f75c23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80d306c7-f86a-4be5-8eb1-440da8df8b06",
        "cursor": {
          "ref": "a65a8ee1-ef65-42d4-9175-b1f8cc96a0f5",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "0ea84c43-9525-4fb6-8260-0c3970ef1591"
        },
        "item": {
          "id": "80d306c7-f86a-4be5-8eb1-440da8df8b06",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "e7588dd4-3eb6-4861-95bf-f933e358cf86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d9c5b7b-446e-445f-a9a3-ac50900034be",
        "cursor": {
          "ref": "74f1e389-15a7-4f59-9ab2-dbcae92c8dca",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "c10ac201-28f7-415d-8ddc-9918fe9e8c42"
        },
        "item": {
          "id": "2d9c5b7b-446e-445f-a9a3-ac50900034be",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "8add25b2-b33e-4cf7-98dd-d925bdec72a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f774a0b-cfe2-44ad-9f23-884298ddc96e",
        "cursor": {
          "ref": "4a764d3b-94f9-466c-8e94-6c62ac67922a",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "0d8400a5-3736-4107-845d-5ed7b9eb7863"
        },
        "item": {
          "id": "3f774a0b-cfe2-44ad-9f23-884298ddc96e",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "722eaf41-4514-4d71-b1f7-07dc342834f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6db0036-323f-4d5e-927a-c107bdd1e22f",
        "cursor": {
          "ref": "1e2ad8fa-355e-468a-8fe0-0684e34efa42",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "5aeac4fb-64c4-4733-b44b-72a33f5eb116"
        },
        "item": {
          "id": "a6db0036-323f-4d5e-927a-c107bdd1e22f",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "e81a8f6f-d885-4636-9a07-9e771d4cac86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cff230a-9536-49c4-bea5-4a3387272ac3",
        "cursor": {
          "ref": "7f74b0e9-5518-400d-aa2d-5f948f0c1f93",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "d198d699-c17d-4716-bc68-d519f7cbf903"
        },
        "item": {
          "id": "1cff230a-9536-49c4-bea5-4a3387272ac3",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "7057ce8b-a1cc-4e12-83c6-097b7cda75e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b940ae75-8869-44ef-94c9-cd18ab6522e2",
        "cursor": {
          "ref": "43125705-ffeb-47ab-8c5c-cce4ade196cd",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "3fc32899-a03f-447e-9499-b4a06648c9bb"
        },
        "item": {
          "id": "b940ae75-8869-44ef-94c9-cd18ab6522e2",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "1538757a-5f21-493b-be70-d4bf149d6594",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4abbb831-91ae-46f9-8ccd-3af7602b4b1c",
        "cursor": {
          "ref": "2eed514e-8e55-4549-82fb-be5dabf02b29",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "90a941d0-124d-45ee-bc65-666527099e20"
        },
        "item": {
          "id": "4abbb831-91ae-46f9-8ccd-3af7602b4b1c",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "1a621623-4929-453e-94af-1f26b5736171",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b41307d0-7088-48be-b542-e22a00be3330",
        "cursor": {
          "ref": "4a3ac95b-eb85-4545-b55e-018801aa9e06",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "a210b54a-b23c-4bc0-9f35-85c3c9f46135"
        },
        "item": {
          "id": "b41307d0-7088-48be-b542-e22a00be3330",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "461f563b-29b9-4792-a303-d98fadf90a2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "527ba5a3-9130-4d6f-961e-290826de3aeb",
        "cursor": {
          "ref": "a9042bbf-b926-474d-98a5-3d4735130ceb",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "f1b3822a-eb67-4d98-974d-4ab766b3d69c"
        },
        "item": {
          "id": "527ba5a3-9130-4d6f-961e-290826de3aeb",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "18549e09-2ed7-47d8-9f11-859366860d86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab7cd863-8e50-4798-87af-b244c4a0dca8",
        "cursor": {
          "ref": "20564dd5-e2e8-4ec6-8ccd-4a0f71bf6b4f",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "6f7faaec-b96a-439a-be6e-26fa7cc19fc9"
        },
        "item": {
          "id": "ab7cd863-8e50-4798-87af-b244c4a0dca8",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "940bf696-b2d9-44e4-8a86-9a2ac8f4a39c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e40da3bf-aad4-439a-a36d-764418879a95",
        "cursor": {
          "ref": "fbdace5a-bb6a-4179-96d8-4fa263b55997",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "23f88c64-225a-4bb9-9b93-8c912b9e7c21"
        },
        "item": {
          "id": "e40da3bf-aad4-439a-a36d-764418879a95",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "55e450ac-dc69-452b-9c73-81671919be8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19d78a28-317d-41b3-b261-8c1d2d87ae5c",
        "cursor": {
          "ref": "fff688d2-c63a-45d9-85af-568647175810",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f8528143-ccf3-4341-8a1c-229be2e7b587"
        },
        "item": {
          "id": "19d78a28-317d-41b3-b261-8c1d2d87ae5c",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "86f2289c-3613-4dfe-84e3-0d1d2fe4d7bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6539a58-6524-4089-9707-1972acc28f5a",
        "cursor": {
          "ref": "f02bc5eb-5c6c-4e6b-a2df-6116417dacae",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "7508cc35-127c-41e1-bb8e-30f3d74aa4fc"
        },
        "item": {
          "id": "e6539a58-6524-4089-9707-1972acc28f5a",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "73e81e19-2e56-4ab4-8ed4-1071a5d76713",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cad3d2e-aead-4948-a28b-060dca08cd01",
        "cursor": {
          "ref": "8b100446-4e35-4ae1-a720-8f24ac4b95e5",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "35df9a22-76e3-4f1a-8ce9-61bc52adbb0f"
        },
        "item": {
          "id": "1cad3d2e-aead-4948-a28b-060dca08cd01",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "6c12917c-d8f6-452b-8d92-c2b407883d99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b39e088b-42b3-41d6-a837-0a9a551093cd",
        "cursor": {
          "ref": "a6e6aa31-28aa-4bb8-afe1-6c0203cdf25c",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "ea882251-3c7a-4856-b931-7be1964002e7"
        },
        "item": {
          "id": "b39e088b-42b3-41d6-a837-0a9a551093cd",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "b6aed4b0-a20a-464f-bb4a-b680ba3a3391",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e85a76a-dc40-49b1-9671-62bbde19c9b9",
        "cursor": {
          "ref": "c8d08382-85e6-4cf3-8d46-9a6ee375a463",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "eb1892cf-c318-4598-aa0c-d8e524dfb44a"
        },
        "item": {
          "id": "0e85a76a-dc40-49b1-9671-62bbde19c9b9",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "46dc66a4-3bb6-4e6b-a1df-63e6ca01a742",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9eee0c20-bf10-4816-b8a7-275af55918ec",
        "cursor": {
          "ref": "c76a3928-43ec-4797-a0b9-8ed68c24ae59",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "3aca6964-2b54-4b69-89a7-659eccd8af9b"
        },
        "item": {
          "id": "9eee0c20-bf10-4816-b8a7-275af55918ec",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "6e619fdc-38fb-4cec-af6a-1ecf9aea0fde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6ce74ea-e34c-4c90-a0b6-a2ffdc9d0f2f",
        "cursor": {
          "ref": "6aebb973-f347-4b2d-9f67-45ebaceaf0aa",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "9cf8c13e-f8c0-4d92-a4a6-f13b99f11725"
        },
        "item": {
          "id": "a6ce74ea-e34c-4c90-a0b6-a2ffdc9d0f2f",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "8692ced0-2a98-473f-a2db-6c98e0a8ede4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cefdeb6-e09b-411a-8a8e-aa5a31d5869d",
        "cursor": {
          "ref": "0f38bba8-6b07-4ec6-937d-bfe0107866cb",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "031fbff8-bf27-49e6-bc53-04bb375a01b0"
        },
        "item": {
          "id": "9cefdeb6-e09b-411a-8a8e-aa5a31d5869d",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "e34ab35b-ba25-4ff7-8cb9-400930c496af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9bf0894-927e-4acd-ba04-2fb40311c9d0",
        "cursor": {
          "ref": "474d92af-438a-4153-a2a7-dd8a2ffc1b40",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "0a6826fb-a7bc-4a93-9139-fd33839b12bf"
        },
        "item": {
          "id": "e9bf0894-927e-4acd-ba04-2fb40311c9d0",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "59a7f6cb-774d-4e85-b44d-21ebcec027ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b240d872-ca25-45e0-992a-dac14cd6ad8f",
        "cursor": {
          "ref": "f0b86f6e-5687-4ed0-87d3-d719e99bdb37",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "15705d8e-6484-4662-a7f5-908cdb16acf7"
        },
        "item": {
          "id": "b240d872-ca25-45e0-992a-dac14cd6ad8f",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "0f652ede-ae0c-4bfa-8398-7b8471971b77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee0ef15d-897f-4339-9d40-86bb28153082",
        "cursor": {
          "ref": "0b5e4ad0-cc20-4324-a135-03d2957090dd",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "25cfaf40-7873-40e5-8340-6b7577031439"
        },
        "item": {
          "id": "ee0ef15d-897f-4339-9d40-86bb28153082",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "72d050f1-5a9b-448a-a867-322eb6f73bc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "367c5825-61e4-4a7c-80c4-f66049f3a8a2",
        "cursor": {
          "ref": "1f684176-49ad-4e25-9adf-909f9dc20960",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "0bdf63e0-6151-46a7-8b71-217b59cb80b0"
        },
        "item": {
          "id": "367c5825-61e4-4a7c-80c4-f66049f3a8a2",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "b42aff39-877c-4c6f-8e6d-2c272c192ca0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c17f25b-90fc-437d-aa6d-5a4be3cfad56",
        "cursor": {
          "ref": "be15d29d-8e1b-472f-adcf-cc5f24656d08",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "088d1ee3-c84e-4ae7-86e3-c91859638cfb"
        },
        "item": {
          "id": "1c17f25b-90fc-437d-aa6d-5a4be3cfad56",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "966d24c5-2984-49c2-8576-cc7bf867179f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2843be73-0aec-4d5b-8f7b-c1d611ac71e2",
        "cursor": {
          "ref": "b531ae02-02da-45af-be1a-e2a874d20edd",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "bfe7615c-50cb-4e35-b3e1-f2664eb7e14f"
        },
        "item": {
          "id": "2843be73-0aec-4d5b-8f7b-c1d611ac71e2",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "96701175-174d-46ed-a7c5-5ee667362208",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "389e1c87-6d4e-48db-85f6-6970847e153f",
        "cursor": {
          "ref": "de83adc3-e9b2-4a7a-9f87-dadad9f9c8dc",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "3093b0a1-3d16-4354-9613-9f417c693a26"
        },
        "item": {
          "id": "389e1c87-6d4e-48db-85f6-6970847e153f",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "08305704-d99b-45aa-bfbf-953b2fc035a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aedf8cb5-18b7-46dd-8698-655c814dd27b",
        "cursor": {
          "ref": "1f13a458-95fd-48cb-8bff-a52b1ecadf5a",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "ea573b2e-3137-41d4-b293-9d5df4a0e054"
        },
        "item": {
          "id": "aedf8cb5-18b7-46dd-8698-655c814dd27b",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "38945611-552c-4040-a774-f6c5d17249fe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 71,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "ef0f2b78-8017-45d2-b809-4e562af597f1",
        "cursor": {
          "ref": "9ed2530b-efa0-485b-8e3f-0723e641d8f4",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "0c652ae9-f3ac-4ad9-ae81-4504be591c19"
        },
        "item": {
          "id": "ef0f2b78-8017-45d2-b809-4e562af597f1",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "48bf15a5-77fb-4cb3-a66f-23d9bd4988ec",
          "status": "Created",
          "code": 201,
          "responseTime": 2292,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "3d65bd53-c3d5-4b0a-8a88-fdff00ea8cc4",
        "cursor": {
          "ref": "cf63236a-73fa-4c9e-85a4-af0f43a4b00c",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "77d44d92-b222-42b0-8a36-56c609fa5fa9"
        },
        "item": {
          "id": "3d65bd53-c3d5-4b0a-8a88-fdff00ea8cc4",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "2e9e7c01-c430-4388-ad83-694b1043bc5c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "b75647b5-4a07-4b66-a9db-b4aa42af367b",
        "cursor": {
          "ref": "126d16bd-b8a8-4e23-abb9-e0047c9b22b6",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "e7dce8b3-0209-4650-b505-a0e926376cb3"
        },
        "item": {
          "id": "b75647b5-4a07-4b66-a9db-b4aa42af367b",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "6bc9db24-78db-4aa3-818e-7498e3bf912b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5231de6-b20c-4d2d-a6e2-56bfcea3b9a0",
        "cursor": {
          "ref": "e6dade1f-d500-4ef7-b4d2-e0dac692269d",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "2f8d9aaf-57a5-4a30-b165-6bf2638aa2e6"
        },
        "item": {
          "id": "c5231de6-b20c-4d2d-a6e2-56bfcea3b9a0",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "e61abb96-d07e-4121-a98e-bac7d7c51fe1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 71,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "7b58ba11-f561-478c-a4be-f9d052b3648f",
        "cursor": {
          "ref": "e669337a-4d1f-42a3-ba5b-ae9c7c9cd0d9",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "3e6db343-30fd-4e98-a773-2211fe345f6f"
        },
        "item": {
          "id": "7b58ba11-f561-478c-a4be-f9d052b3648f",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "b1438e39-d324-41c2-9298-c27cdc8aa263",
          "status": "Created",
          "code": 201,
          "responseTime": 1632,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "a0a1dfce-b696-4eb9-b2c7-d4d439cbae6c",
        "cursor": {
          "ref": "ba89c256-23cb-499a-b04b-3901ef10ca0d",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "c532a121-005f-4035-afe5-0cf37dc6fbcb"
        },
        "item": {
          "id": "a0a1dfce-b696-4eb9-b2c7-d4d439cbae6c",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "3fe954df-d340-4cd4-93b1-7b0e32329ea8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "feeaa73d-44e4-427c-856d-fe9b62c3407c",
        "cursor": {
          "ref": "b58bf106-9406-4a58-a9d0-dc2e9a1d085d",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "d9fdb931-ad76-4958-9681-168c5d444338"
        },
        "item": {
          "id": "feeaa73d-44e4-427c-856d-fe9b62c3407c",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "ff9b3bc8-bf99-4a17-8786-ede6ebfe8caf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 825,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "1f65e699-3f12-424e-9364-f71aa70f1d60",
        "cursor": {
          "ref": "0c65fa79-4d7c-436a-91f2-2c698d67b273",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "7352de41-f522-441d-936b-b43f842a1977"
        },
        "item": {
          "id": "1f65e699-3f12-424e-9364-f71aa70f1d60",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "315c948f-63da-489a-b1d4-a9f98e0adba9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "af27e709-0662-4300-aa09-3e7e4d472035",
        "cursor": {
          "ref": "c5fca6bd-d41d-496a-9d18-1808faccefeb",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "ddf38e23-1e6a-49a4-8571-e614c6cd149e"
        },
        "item": {
          "id": "af27e709-0662-4300-aa09-3e7e4d472035",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "bb6d31c6-87f5-497f-87dd-b3559dba7e87",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "251f1e2d-16fa-4288-8520-ec870034f02e",
        "cursor": {
          "ref": "cb0de231-9735-43c2-b9b6-3c3f51cbce83",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "7e93f4ef-8fa2-4307-ac73-5ab015cededc"
        },
        "item": {
          "id": "251f1e2d-16fa-4288-8520-ec870034f02e",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "72cac421-aab1-4515-bcba-7adcfdf95d98",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "0c0ace48-bf30-4058-a05d-5af369851744",
        "cursor": {
          "ref": "7d1caf75-c797-4abb-aee0-f0058a65fde1",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "b325d316-36e2-47e6-bc1c-904587a3865c"
        },
        "item": {
          "id": "0c0ace48-bf30-4058-a05d-5af369851744",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "318ac154-7c86-471c-8c99-db941436d4d6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "73ca550c-2efa-4bf6-a321-9a7b9b2a6d88",
        "cursor": {
          "ref": "4bdda9c8-9bae-4cd5-bf07-79f4f2fee416",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "cab3dcd7-4d6a-4b0c-999d-4e3dd522a8b7"
        },
        "item": {
          "id": "73ca550c-2efa-4bf6-a321-9a7b9b2a6d88",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "2b7d254e-73fe-4323-ba44-3b6643b07ee8",
          "status": "Created",
          "code": 201,
          "responseTime": 1146,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "035dce70-77da-49fc-95e4-99bb741f9b7e",
        "cursor": {
          "ref": "83e6dce6-0376-4bf8-9a59-bbff34501165",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "5baeb178-b8f3-41ec-9593-0f060c8ba71f"
        },
        "item": {
          "id": "035dce70-77da-49fc-95e4-99bb741f9b7e",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "ea8f9cf5-b342-4391-afe2-0e72e942465d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a600c2bf-ebac-4762-bdcb-0fd66c07f1f4",
        "cursor": {
          "ref": "92196b78-b755-476b-847d-50bb114054aa",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "fdb1a590-defd-4131-83bd-54dc576cad2a"
        },
        "item": {
          "id": "a600c2bf-ebac-4762-bdcb-0fd66c07f1f4",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "c6e4ed53-6894-4c5a-952c-ca7df645414f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd50182c-95c0-4554-9a79-8daa4df660ab",
        "cursor": {
          "ref": "438be0fa-72f2-4bcd-a2d8-076af31f9fc5",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "b4f5f295-694e-46e6-aa2c-90503849c3b5"
        },
        "item": {
          "id": "dd50182c-95c0-4554-9a79-8daa4df660ab",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "593dd3b8-9c6f-44a9-a387-866aa23d9cc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5338246-82ad-4852-8541-dfc8d2641307",
        "cursor": {
          "ref": "2d0b0c5d-7dcc-4571-b2a3-276184065e88",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "ce0fa848-c8c7-4c94-ab19-800b304d4353"
        },
        "item": {
          "id": "a5338246-82ad-4852-8541-dfc8d2641307",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "e8afb1c2-8495-4357-95d9-035994ded9d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c30d012b-7901-4a7e-9289-a2affcc22d38",
        "cursor": {
          "ref": "17b4c576-cc02-4e4c-a3d7-0d6d75db1f78",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "264eb2b2-2e77-459a-a95c-96fdbcb48b0f"
        },
        "item": {
          "id": "c30d012b-7901-4a7e-9289-a2affcc22d38",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "077742fe-8938-4b1b-ac16-92d34d679b4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6fc3f62-b4a8-4705-a059-ef1b25cf912e",
        "cursor": {
          "ref": "599ddcd3-05e6-46dd-be52-35e0cb88a4d5",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "e2e3e189-8c1e-4b3e-8788-2ff3b52d21ae"
        },
        "item": {
          "id": "c6fc3f62-b4a8-4705-a059-ef1b25cf912e",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "f4f9f6f1-9be2-4bf9-a685-e326d84bc7ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "169575c2-be7b-4357-80fe-23899380bc25",
        "cursor": {
          "ref": "b5e3708a-46b7-423a-80b7-239813bc64d8",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "44410f67-8e67-46a0-80f1-d8b622c53480"
        },
        "item": {
          "id": "169575c2-be7b-4357-80fe-23899380bc25",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "1f5fe735-0b0f-4fd7-b786-980ece254246",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ed66c9c-d3b9-42f8-b664-b8b93d45748f",
        "cursor": {
          "ref": "ac0b063e-5215-42ae-b1ed-212896a0b87f",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "f4cf5528-49dc-4e5b-b81b-11e8496289b1"
        },
        "item": {
          "id": "9ed66c9c-d3b9-42f8-b664-b8b93d45748f",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "5b03e5e0-7f2d-4f4b-a05e-d473e8dabbae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d12cfc84-7fcb-4eff-8c03-032b07a9e2ff",
        "cursor": {
          "ref": "dca76e79-6796-4efc-b0db-0cc5807ca6e3",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "8cec82da-e85f-459b-bd65-9913d2f0eef0"
        },
        "item": {
          "id": "d12cfc84-7fcb-4eff-8c03-032b07a9e2ff",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "a60986fa-f6f7-4d27-8630-b563724cc9b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "318deda4-2b0b-4c42-ab70-75c03ae4a99d",
        "cursor": {
          "ref": "876dec54-4eb0-4ada-9dec-07893d7345ac",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "9b0432d8-089a-4e64-908b-6b84876fca0f"
        },
        "item": {
          "id": "318deda4-2b0b-4c42-ab70-75c03ae4a99d",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "0c2705de-e6dc-4391-99b5-bb7d67bf4242",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d0947e8-6fe8-4e67-87d3-6564a021aef0",
        "cursor": {
          "ref": "2bded1c9-d963-4762-a0ef-bd2b19cb0e04",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "a21a23b6-956b-4d7d-9ab1-0dfa059e00d8"
        },
        "item": {
          "id": "4d0947e8-6fe8-4e67-87d3-6564a021aef0",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "1e5e0cfc-18ef-4635-8d07-23a8b667eb8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3dbfe0e-f24e-48ea-9457-19ba65225723",
        "cursor": {
          "ref": "662b6bc9-2f0c-4225-97eb-ec0db443c2ba",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "dfeb0644-8b6f-4e09-b2fa-e5ed0a901cb4"
        },
        "item": {
          "id": "c3dbfe0e-f24e-48ea-9457-19ba65225723",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "e9cd984c-6057-439e-b232-e972cccbf5f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97814e0e-1d1f-4438-bf68-dc0f26382765",
        "cursor": {
          "ref": "9e007454-773d-482d-be64-581324493875",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "348b28d6-e365-41b0-bbfb-53ea4ae30d59"
        },
        "item": {
          "id": "97814e0e-1d1f-4438-bf68-dc0f26382765",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "d062534e-0d9f-4314-9df4-7d7bafff94b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37dde1b9-f6ae-41c4-94a2-abd5385528e1",
        "cursor": {
          "ref": "b62eb69b-534f-4a9a-910d-51ad1e904fe5",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "39be32e2-5c0d-4844-b6a0-9686fe5ccd28"
        },
        "item": {
          "id": "37dde1b9-f6ae-41c4-94a2-abd5385528e1",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "81f4c68a-0ec2-4e98-878a-918f7f255332",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 788,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "60282772-e81c-4eed-a803-e137f6639f87",
        "cursor": {
          "ref": "538d6f00-083e-4cee-8dc1-9a0395e75752",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "91e17b84-59f0-481c-92aa-000bdadefbbd"
        },
        "item": {
          "id": "60282772-e81c-4eed-a803-e137f6639f87",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "58b95ff7-d75c-4e5b-9582-514fd69c90d1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 806,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "95098e33-7132-4618-920b-8853f39f30b6",
        "cursor": {
          "ref": "9339e024-9e56-4f92-81bb-083af7952b9e",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "2ca8e30b-16de-44af-aa44-92d637a39b3c"
        },
        "item": {
          "id": "95098e33-7132-4618-920b-8853f39f30b6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "5c0af59e-a589-4f1b-a6a3-d3fd5f662f9d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "a6b06f40-8199-46b4-a7eb-eb0a08ed1825",
        "cursor": {
          "ref": "81c337cc-e819-43db-939b-822e02c2a424",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "67152cd9-fce3-43d8-9ef2-d254ed7d7314"
        },
        "item": {
          "id": "a6b06f40-8199-46b4-a7eb-eb0a08ed1825",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "ca3f2d22-993c-43d1-a778-cdad9af77c9b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 810,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "e02c4e77-cf1e-4670-91a9-6d0f532d9438",
        "cursor": {
          "ref": "e30ff28d-3f01-4d4b-9390-472fa3ae4fec",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "99e8975b-7b18-4b5a-ab6c-7897908b7be6"
        },
        "item": {
          "id": "e02c4e77-cf1e-4670-91a9-6d0f532d9438",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "3afe61c5-b85e-4f21-a075-3c9dcb5a763b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "1b42e1c1-1db9-4fbb-8518-a09aed2bda47",
        "cursor": {
          "ref": "2ed54ebc-0e25-4ac1-b199-b4b2d04161f0",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "f5bea0c5-8d44-4e7c-9117-4cf12b9bbdb9"
        },
        "item": {
          "id": "1b42e1c1-1db9-4fbb-8518-a09aed2bda47",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "d087edbc-41d3-4d91-8a74-b1b833861ee9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8645934-09ae-440e-8457-cc34519f3815",
        "cursor": {
          "ref": "aef023d0-3722-48a2-b9c8-4f1d0cf5df77",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "c26184bc-ec95-4217-b94e-dc29d1110398"
        },
        "item": {
          "id": "a8645934-09ae-440e-8457-cc34519f3815",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "653d1f36-9f11-4540-b247-c9733c98fb2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d704239a-996f-448f-8c6d-e954de03d5e5",
        "cursor": {
          "ref": "0e79028e-8756-4ca2-838f-a1e93b0aaca4",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "9e4e4427-f5b4-4677-9c9c-d1e37510cd2d"
        },
        "item": {
          "id": "d704239a-996f-448f-8c6d-e954de03d5e5",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "bfe7106b-b4a4-4429-878e-9161bb97aa05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d2beca4-ce35-4b81-99ac-4a1ac5bdba87",
        "cursor": {
          "ref": "9e76ed6c-d670-432d-a7f4-0f991c06ba0c",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "3e675850-e325-42da-bedd-74f68e03165a"
        },
        "item": {
          "id": "8d2beca4-ce35-4b81-99ac-4a1ac5bdba87",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "f9be8fea-5f74-4706-ab7c-a534f3406eaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5e91c94-b868-4255-ab49-247e973fd652",
        "cursor": {
          "ref": "068c7311-d180-4277-b8b3-3b238a1148ef",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "e40eb54a-b1af-4109-8877-db4075ed9120"
        },
        "item": {
          "id": "c5e91c94-b868-4255-ab49-247e973fd652",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "4b03ec97-a76f-418f-b9d7-bf3085362f8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e7235ca-940e-42fd-a810-9eed458ab21a",
        "cursor": {
          "ref": "3eecd3bf-800f-45e2-ab4c-bc05433f419e",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "6f766075-f7c3-4a28-baa9-9a331e644187"
        },
        "item": {
          "id": "8e7235ca-940e-42fd-a810-9eed458ab21a",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "be3b4510-4246-4489-b0b2-3faf377daaec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a5d6c7d-52b7-4379-8c1c-6d5247ddbfe4",
        "cursor": {
          "ref": "1c2b924a-ef83-4880-8bd5-b28143ed7314",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "0074bab8-f913-46cf-be38-c769fd1c5b74"
        },
        "item": {
          "id": "3a5d6c7d-52b7-4379-8c1c-6d5247ddbfe4",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "00609f38-f070-4285-ad18-7d1796824753",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0e45c4b-5f7c-4b6b-a316-6cad684d16e9",
        "cursor": {
          "ref": "e8d13a8d-3ef0-4b8d-b97d-b47379d4a28b",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "f25a81ac-c0a8-4e43-a6a0-d094926a1f5d"
        },
        "item": {
          "id": "f0e45c4b-5f7c-4b6b-a316-6cad684d16e9",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "ee9ba2fb-d04f-433c-a1d1-e2fd16d7b1b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a341730a-0be9-4bb6-a41f-7fc02e77fc90",
        "cursor": {
          "ref": "9c66b302-9b96-4b97-a750-686b1fc2839f",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "acf60627-c999-464a-9aac-6f74a270b56d"
        },
        "item": {
          "id": "a341730a-0be9-4bb6-a41f-7fc02e77fc90",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "765012dc-4391-4c68-8d27-d08a8f8459bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "011e7a60-81e2-4f36-8617-e351414b9b78",
        "cursor": {
          "ref": "63c75a3c-c0dc-4263-af92-4ee9fe079482",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "6dddaa6f-a0f5-49bf-880c-e37e54ce4346"
        },
        "item": {
          "id": "011e7a60-81e2-4f36-8617-e351414b9b78",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "a2ea1ec8-8643-4972-814c-deb8d85cac2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63d8d3a9-66d3-4697-b2b9-81ea9ba21cd4",
        "cursor": {
          "ref": "8a893c19-ee2e-48f4-995f-7ee5ad3b9d8d",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "a3bee135-2a8b-4fb3-8ac9-d5f3e8778f4c"
        },
        "item": {
          "id": "63d8d3a9-66d3-4697-b2b9-81ea9ba21cd4",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "7295c208-9fb3-43c2-9f96-71ca5c2eb2dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d3b2a1f-5753-4677-881c-a24708e1e987",
        "cursor": {
          "ref": "8469906f-bed2-4a28-9299-116b749fa67c",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "36bee15d-86e1-4589-ab6e-fddc0aecfb41"
        },
        "item": {
          "id": "7d3b2a1f-5753-4677-881c-a24708e1e987",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "25bab1b9-73e5-4207-8869-44e8c699b694",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "755df658-cafe-49f6-b051-8b734c6c7796",
        "cursor": {
          "ref": "6d996839-2a4d-49fa-abb0-0c050bdce99c",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "86935aba-1c03-4a94-82a6-b581c843359e"
        },
        "item": {
          "id": "755df658-cafe-49f6-b051-8b734c6c7796",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "4fb10aae-20b7-4619-b8db-e9ade708b36d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "804b293e-7ea5-4645-bdad-9c307eb2eb29",
        "cursor": {
          "ref": "0f39f73a-ca34-49b2-a31a-8830af1bad4e",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "458a51d9-063f-4327-912d-5f0d6c5ccf6a"
        },
        "item": {
          "id": "804b293e-7ea5-4645-bdad-9c307eb2eb29",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "3e091462-9f6f-4c53-9e10-d969f62432bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc90c31a-9723-4cd2-8f40-394e4413193a",
        "cursor": {
          "ref": "77216669-4626-4ac8-a362-6d947ee5d37b",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "883598b7-595c-4995-ba1e-4b5001754b31"
        },
        "item": {
          "id": "dc90c31a-9723-4cd2-8f40-394e4413193a",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "e7d0d6b2-7fe0-4a09-a588-bbac919214a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40954905-326b-44cf-8595-6df113ffaf58",
        "cursor": {
          "ref": "b24a06b7-4500-4770-b064-c8aefc6b81f0",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "2bcf6ee5-df91-4e07-8513-45574cc1466c"
        },
        "item": {
          "id": "40954905-326b-44cf-8595-6df113ffaf58",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "f6539912-36b8-4211-97bb-a53e4a51ce7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56c70cb8-9ccd-49f8-8ce4-dafb7904554c",
        "cursor": {
          "ref": "58566016-d59b-4d3f-8c74-e3c02560dde6",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "8f1ecc9d-b63f-490c-82f9-148aa3f171dd"
        },
        "item": {
          "id": "56c70cb8-9ccd-49f8-8ce4-dafb7904554c",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "3897599e-7730-47c8-90d0-0c2d2101b111",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4182a8f8-8960-4d94-a33d-b2e5ec696dd3",
        "cursor": {
          "ref": "0352a048-2817-496e-8a83-b0b097e3a488",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "0db40e6b-a655-40f5-a410-25a3b8aea6b3"
        },
        "item": {
          "id": "4182a8f8-8960-4d94-a33d-b2e5ec696dd3",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "fe170a62-c0c7-4234-82ad-0921cfae2187",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63a0db81-d99e-4a06-a605-006b34ff697e",
        "cursor": {
          "ref": "caede2b1-5c7d-4d3c-9754-8decfeeb1660",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "b2e79d1c-62cc-48c7-8045-e346ff990444"
        },
        "item": {
          "id": "63a0db81-d99e-4a06-a605-006b34ff697e",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "9a083baf-f2a1-44e3-87e5-97f63e930b38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04a6121e-bf9d-4de1-844c-3a0563ced4c6",
        "cursor": {
          "ref": "9401207f-c854-4b42-9d09-912f9b7f5ae4",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "b7ef82ea-0f00-47c0-891c-8728d27ca661"
        },
        "item": {
          "id": "04a6121e-bf9d-4de1-844c-3a0563ced4c6",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "cad16dee-bfdf-4dfa-a606-b81ad56948f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "819e59fe-2d2f-4ac8-9a3a-a5eab12771f0",
        "cursor": {
          "ref": "f6061423-11a8-42aa-867c-19c4bdee1ba5",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "457ce2a8-c3f4-4128-88d2-08f7bee43a4c"
        },
        "item": {
          "id": "819e59fe-2d2f-4ac8-9a3a-a5eab12771f0",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "88753a6c-c517-493f-8a51-dc2d0c927db7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06814f74-6b71-4bc9-a300-1f9bedbad1e0",
        "cursor": {
          "ref": "799295a5-b8b6-4c65-9e50-af917e919d36",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "ea1e6029-956a-4d1c-8e43-3cbe7adde243"
        },
        "item": {
          "id": "06814f74-6b71-4bc9-a300-1f9bedbad1e0",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "ca3ffae3-cdc7-4e54-829f-cdaa851178b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee3eb858-77be-48c7-acd0-4e3a91fe2c4e",
        "cursor": {
          "ref": "e08f8d22-4829-42af-b83f-1bbb30970c4e",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "39e80583-151d-47ad-878b-e76e99377610"
        },
        "item": {
          "id": "ee3eb858-77be-48c7-acd0-4e3a91fe2c4e",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "671134c9-591f-4ec8-b51a-469ca8539cbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02360b61-d33c-46cd-9f8c-b45eee9f1c24",
        "cursor": {
          "ref": "c15d8373-5731-4775-a1e8-1e2f9e11a2df",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "49306bec-486f-4701-991d-45f1e6da7bd2"
        },
        "item": {
          "id": "02360b61-d33c-46cd-9f8c-b45eee9f1c24",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "a7910f59-8574-4cb6-8931-01c016142d00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c00b4cd-a676-4908-965a-adecafa07701",
        "cursor": {
          "ref": "cd3b5a47-3465-4ba4-8354-e1f85993db22",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "25a5dc70-da1d-4027-96d3-4e8cf06fee34"
        },
        "item": {
          "id": "7c00b4cd-a676-4908-965a-adecafa07701",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "ef9919b6-f29c-4ccd-a586-c266b5f68afb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d4f5e65-b1c7-4507-83ce-d148e0976bad",
        "cursor": {
          "ref": "fe864836-b90f-4a35-9286-4cb66bec9d3d",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "b83cf956-242f-4b44-8a5a-d65c8fb3ca21"
        },
        "item": {
          "id": "7d4f5e65-b1c7-4507-83ce-d148e0976bad",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "8e57f7b2-4b65-4d53-b516-cda9c5024642",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9eb20a33-769f-45b8-a5f3-d624577a839c",
        "cursor": {
          "ref": "45af727e-abf2-4b6d-8ce0-213b9de62ef6",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "b785b0b1-8dd7-46df-aeb7-93f5330cf01c"
        },
        "item": {
          "id": "9eb20a33-769f-45b8-a5f3-d624577a839c",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "82a05554-62c1-4336-947d-b190e3b82584",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5ba449a-fc4c-42a0-8c46-b731aa17f080",
        "cursor": {
          "ref": "967dae59-9867-465c-b654-8bba6075acf7",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "08d82f64-2d8e-4974-87ff-0f478ffc0731"
        },
        "item": {
          "id": "c5ba449a-fc4c-42a0-8c46-b731aa17f080",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "682aadc1-ec0d-4b05-9160-776011c2f0dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a6852a8-3843-455a-9480-3d2f555e003e",
        "cursor": {
          "ref": "6839dd61-8726-4cb1-9f2d-2ded0dbc2947",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "2de02c7b-8f24-4d8c-9fc2-1d022f73ede5"
        },
        "item": {
          "id": "2a6852a8-3843-455a-9480-3d2f555e003e",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "0eba7abc-519c-4583-a9c5-118a1210a2e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5da0080c-1047-471f-8940-f8702ebea063",
        "cursor": {
          "ref": "3794d31c-da02-40ba-8c4f-8ff39f388dc2",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "56af8551-cd42-477b-9ca3-35507a6050fb"
        },
        "item": {
          "id": "5da0080c-1047-471f-8940-f8702ebea063",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "c4e37bf5-92f7-41c6-8d52-8d72949bc80e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acae2ad7-2b60-47a0-8f64-016a13508f75",
        "cursor": {
          "ref": "fdc46e7c-ad34-4f3e-a2ba-fe3c25d7602f",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "737d65ca-bf02-497d-8076-44cc80b5091a"
        },
        "item": {
          "id": "acae2ad7-2b60-47a0-8f64-016a13508f75",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "7c67ae8a-5f77-4e82-926b-d503b4854052",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "894ff06c-07de-468d-aa34-74ebb78d0bf3",
        "cursor": {
          "ref": "6a7d6ae6-663a-4053-9ec9-e6fd49c2df23",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "ac4271c8-ed35-4432-8f64-25a2297ce773"
        },
        "item": {
          "id": "894ff06c-07de-468d-aa34-74ebb78d0bf3",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "4e8cc259-ff34-4e0d-951f-4e766769fba8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8ad06b4-a69f-428b-93c1-35dff4c9ce4b",
        "cursor": {
          "ref": "4a81d153-b6b0-4b65-9ff4-c2aaa166ded2",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "270430bd-047f-465c-98e8-5a970bcbaf11"
        },
        "item": {
          "id": "b8ad06b4-a69f-428b-93c1-35dff4c9ce4b",
          "name": "credentials_issue"
        },
        "response": {
          "id": "39073cb7-b1a4-49e7-8271-f5d102d813c2",
          "status": "Created",
          "code": 201,
          "responseTime": 1495,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "237bd909-e114-4672-bf4c-b0c2362c7eea",
        "cursor": {
          "ref": "ecca876b-8751-4409-ac59-c0e9c8f1f941",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "f563f3f1-fb56-46f0-ac2f-5b63c3ee4c9d"
        },
        "item": {
          "id": "237bd909-e114-4672-bf4c-b0c2362c7eea",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "77c2c35c-fddb-4e3c-9c49-943adb59ea1c",
          "status": "Created",
          "code": 201,
          "responseTime": 1056,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "019915b8-2d37-400e-ad82-5c527b493e80",
        "cursor": {
          "ref": "24f3190e-bbb6-40f1-9070-f0b67b196afe",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "ac27a201-55f1-4b4c-9aa4-b286e3f747d6"
        },
        "item": {
          "id": "019915b8-2d37-400e-ad82-5c527b493e80",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "c454ac5e-ba6d-4c40-a355-2719ac41360b",
          "status": "Created",
          "code": 201,
          "responseTime": 1032,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f5e1405-711b-4e16-8ba1-0dfc5320fb9f",
        "cursor": {
          "ref": "f4b3c723-8b41-4eef-97b1-324f3ca646e4",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "325a40e5-c79b-4d48-9f9e-ae66f9f2609c"
        },
        "item": {
          "id": "1f5e1405-711b-4e16-8ba1-0dfc5320fb9f",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "d9b9d586-95f8-4318-9481-eab3de695b64",
          "status": "Created",
          "code": 201,
          "responseTime": 1074,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "cada9d46-db68-4b62-9f6d-1bc3fe83e124",
        "cursor": {
          "ref": "956b2a11-92da-4c96-8f53-6b7930a4e0fb",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "232ff30c-5205-4fee-b4e6-43ccbe32a73c"
        },
        "item": {
          "id": "cada9d46-db68-4b62-9f6d-1bc3fe83e124",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "7e90c298-20ed-4c38-8052-50fce5ef92a2",
          "status": "Created",
          "code": 201,
          "responseTime": 1086,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e2e191f-2b08-47d6-9667-3e83d538a4e2",
        "cursor": {
          "ref": "cc99bed5-3399-40be-9975-56ca1ba411d5",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "7a079a08-4b42-4675-af18-c13066824154"
        },
        "item": {
          "id": "0e2e191f-2b08-47d6-9667-3e83d538a4e2",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "279c6a8d-10a6-4b26-a6e7-e3e947698bd2",
          "status": "Created",
          "code": 201,
          "responseTime": 1119,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e7bb51e-7159-465f-b862-b0b4405aca89",
        "cursor": {
          "ref": "b19c6568-4686-4442-a7de-2c5d2f393d5b",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "3f70e305-17ca-4687-a5f4-a2596b710862"
        },
        "item": {
          "id": "5e7bb51e-7159-465f-b862-b0b4405aca89",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "db4604cc-083f-456f-a04e-65eaacdd897c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ba83242-079f-41dd-a56e-a748ea876e5f",
        "cursor": {
          "ref": "83c12363-bb0e-418e-b09b-c3742101a9f9",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "72b050af-68d4-477a-a302-2679e36eab29"
        },
        "item": {
          "id": "4ba83242-079f-41dd-a56e-a748ea876e5f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "9c2fa77d-737b-44d1-9f51-2f0aa526468c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba96edbc-6b27-4c7a-8058-db0b930d3cdb",
        "cursor": {
          "ref": "78cb168a-5ca4-43cc-976b-929552c06f6c",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "fb760202-53a0-41ee-bf55-c8cb51d230c8"
        },
        "item": {
          "id": "ba96edbc-6b27-4c7a-8058-db0b930d3cdb",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "c3f323f5-39c2-43c6-a6a7-5ab1460770e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc707629-02da-4c49-ae3c-ce08c20d8744",
        "cursor": {
          "ref": "a372a4e9-0c28-4227-86a0-be9b92b76467",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "8dc8bfcd-5e58-428d-b11a-ff73138dd2a4"
        },
        "item": {
          "id": "dc707629-02da-4c49-ae3c-ce08c20d8744",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "5028fe99-7b2e-4868-9164-b8117d970486",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8e3ca67-a1c5-4981-bd54-10eefc82493e",
        "cursor": {
          "ref": "2806eaa4-0938-4379-8cd0-abc91acf1e48",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "dd8e8063-f609-4fc5-a3f0-768462ff874d"
        },
        "item": {
          "id": "c8e3ca67-a1c5-4981-bd54-10eefc82493e",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "20e6ddee-77cc-485f-86eb-bfc5fea92394",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01ed317f-da5c-480e-90ba-5ea993fac880",
        "cursor": {
          "ref": "2d806d77-c9e3-42e4-9d8b-e656f9747e9c",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "14847b1a-83e6-40a5-9088-cf29188fc674"
        },
        "item": {
          "id": "01ed317f-da5c-480e-90ba-5ea993fac880",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "6776ad63-0514-4f3a-a79f-e403969ca545",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be955684-64b5-487b-8c84-925591a70c6a",
        "cursor": {
          "ref": "471f060c-e15d-4c95-8f8d-f4f6041058f2",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "be30cd55-69c6-4e72-9cca-5eb84df7f7b5"
        },
        "item": {
          "id": "be955684-64b5-487b-8c84-925591a70c6a",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "6927cbad-7f13-42b5-97fc-df12a7966b02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4051699b-85ef-4996-afb7-4054e099aa74",
        "cursor": {
          "ref": "17dccc67-4ff3-4006-94d1-ce64b63b120a",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "e2a1ca82-6679-4dc4-9e8b-c51423d65e75"
        },
        "item": {
          "id": "4051699b-85ef-4996-afb7-4054e099aa74",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "0c6f490a-b091-412c-bf74-a1aed6a08c58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f93946f-9254-45b3-8e03-b8d77c203d0d",
        "cursor": {
          "ref": "eeba91f5-b537-427b-83c7-6d191d14cf3e",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "39c9d4e4-43d5-450c-a201-e485d3e81c8e"
        },
        "item": {
          "id": "2f93946f-9254-45b3-8e03-b8d77c203d0d",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "f2d19012-91cd-4a6d-ba47-728568b9f3a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d76f929-42b5-4396-80b0-716cfa93f3d2",
        "cursor": {
          "ref": "f01d4388-f291-49c3-9060-31970c0f5edd",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "dde0565f-8b2b-430b-ba4f-7c621d6b8b1c"
        },
        "item": {
          "id": "5d76f929-42b5-4396-80b0-716cfa93f3d2",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "0cd9d7a5-31b0-4fba-8ec3-5f0f5b8ce9f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "525b963d-301e-4686-b763-c5eb38d528ed",
        "cursor": {
          "ref": "ecd30a19-5d80-41f5-9537-76b874ce92cd",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "6095db44-b411-469e-b7f3-a52926ca1740"
        },
        "item": {
          "id": "525b963d-301e-4686-b763-c5eb38d528ed",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "22a6061a-dd51-4f20-a9d3-a73c758ff95b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "001824d9-eabf-4620-85cf-70c31904acb0",
        "cursor": {
          "ref": "09b38028-06ee-4dc6-aa79-02d28e28e384",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "1ee3bf98-8f84-452f-aef0-a059e63fa42e"
        },
        "item": {
          "id": "001824d9-eabf-4620-85cf-70c31904acb0",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "fcb871ce-9971-4c58-befa-eddb0f2a5ddb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24ef46f8-5f6b-425a-9b3e-7bf82c0f4125",
        "cursor": {
          "ref": "6041ad9e-ff10-40f4-867e-8a9f88f2f769",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "d477c335-58cb-4e78-813b-ac865b523597"
        },
        "item": {
          "id": "24ef46f8-5f6b-425a-9b3e-7bf82c0f4125",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "813c70cd-4114-4b89-8896-01bcf54a9621",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "def48a92-e875-42ec-a8bc-7357455d068a",
        "cursor": {
          "ref": "c9b3e4ed-1676-4230-af6d-39e6ab8c318b",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "091790f6-d278-4cc6-9826-8ea99ef8261a"
        },
        "item": {
          "id": "def48a92-e875-42ec-a8bc-7357455d068a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "aac6e144-b1ab-4914-a227-98d2a309edd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d42b3d9-4b2b-4221-8f12-47eaa6eee366",
        "cursor": {
          "ref": "3f426e19-18da-4046-a5e3-392e96d09f66",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "c9e4f6e6-e390-4910-8199-8ab9beddb160"
        },
        "item": {
          "id": "2d42b3d9-4b2b-4221-8f12-47eaa6eee366",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "b7bdcb1e-7bd5-40a3-a46f-9c6a0c1edc52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f3b0691-a44f-4352-945a-d54bbeb34d91",
        "cursor": {
          "ref": "f7d620af-b69b-4938-a507-f66dd7f31825",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "80633780-b5b8-4807-9087-83ac6d29be1b"
        },
        "item": {
          "id": "6f3b0691-a44f-4352-945a-d54bbeb34d91",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "0cf0460b-b6e0-499d-a92d-24447ab5c9d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d4d1f40-cb0f-4dc0-8ed8-1ec38b86960a",
        "cursor": {
          "ref": "6625091f-2d4f-42c4-b440-e8edd04a6d26",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "e289b4bb-957f-48f6-92bf-3283917451c0"
        },
        "item": {
          "id": "6d4d1f40-cb0f-4dc0-8ed8-1ec38b86960a",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "afc2fd2e-2417-43df-a32a-fdb1a8304a7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3370d6ae-a294-4393-838d-cce6eac19b24",
        "cursor": {
          "ref": "70b5142b-556b-418c-84e2-ecd536707ce0",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "066bfadc-03b3-45af-9f2e-e4e303d443b5"
        },
        "item": {
          "id": "3370d6ae-a294-4393-838d-cce6eac19b24",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "58b3128c-5f4f-433c-a38c-9b64e6078798",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed7fa868-88fc-4a14-aeb1-cec05a386304",
        "cursor": {
          "ref": "1babbbca-5dc4-41b3-a089-3fac845d0d6c",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "48712bff-3c88-4a38-baa8-2f0ba258166d"
        },
        "item": {
          "id": "ed7fa868-88fc-4a14-aeb1-cec05a386304",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b570a42d-855d-473d-bcc3-82d7a76ef496",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52d39936-672b-45c6-bc85-7a25123e06b0",
        "cursor": {
          "ref": "15308dae-5282-42a5-9cdd-25df8796af40",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "6d222242-db9b-4425-baf2-868512ace04e"
        },
        "item": {
          "id": "52d39936-672b-45c6-bc85-7a25123e06b0",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "2d90b9ff-6bc1-4355-b7b2-aa30c80768a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64f9d2e8-31b5-4f64-ba88-8a6f8fbae75b",
        "cursor": {
          "ref": "1220cbfb-7eed-4679-9fe4-1f9859bc70fa",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "26efccad-e6c4-456a-93ff-7c5b2c19a1b3"
        },
        "item": {
          "id": "64f9d2e8-31b5-4f64-ba88-8a6f8fbae75b",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "0806de05-7bf0-44d7-9d26-3c4a26dc9b27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5925f78a-6c28-4794-917e-69b1e31bc7e7",
        "cursor": {
          "ref": "edf3d076-d6e5-4223-983a-8e7410127a1e",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "a4b1726d-0cea-4234-93c3-4e1e22bf86e0"
        },
        "item": {
          "id": "5925f78a-6c28-4794-917e-69b1e31bc7e7",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "ec4434ce-687b-4c1c-99cd-9973cb0b3bb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a41349e0-0107-4ba3-a837-4cdceb68c0fd",
        "cursor": {
          "ref": "0b933394-081e-44db-87b7-e46de033aabe",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "91cb382f-684c-4eff-9d5d-3cae5665d425"
        },
        "item": {
          "id": "a41349e0-0107-4ba3-a837-4cdceb68c0fd",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "021a63e5-e4b3-429f-b9d4-9fc6905829b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "005ff901-6f8a-431d-9dc5-a42066c2f062",
        "cursor": {
          "ref": "c68b411a-ed4a-4ac4-a7e4-e32135d4975e",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "9abb9ead-938b-44c7-a0f2-618a994c2643"
        },
        "item": {
          "id": "005ff901-6f8a-431d-9dc5-a42066c2f062",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "0d2376f9-7107-45f5-b1e8-3a244dd2d665",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41b6b0ee-758c-43ff-9b8f-c88027454f13",
        "cursor": {
          "ref": "37486be0-b160-4db3-9494-b68d8d251106",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "c4de7a1d-8955-41dd-a80a-1d8f2122c561"
        },
        "item": {
          "id": "41b6b0ee-758c-43ff-9b8f-c88027454f13",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "bc45928f-041f-47ba-ae6b-8a8e71a238b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08641d17-0d9f-4e88-9eae-861dd8a8a06e",
        "cursor": {
          "ref": "12b4eb37-bfe8-4aa6-8858-8f6f054db259",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "c6fd2b23-b134-434d-9da7-4a936b176f86"
        },
        "item": {
          "id": "08641d17-0d9f-4e88-9eae-861dd8a8a06e",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "46258d87-c34c-4bec-93a6-7588e16257d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7753876c-1930-4924-88f1-18d75e3c79e0",
        "cursor": {
          "ref": "3ef74040-ffdc-47f8-bf5b-f793288239da",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "107b7c8b-4c89-42fd-ae14-c90bf9cf4cd2"
        },
        "item": {
          "id": "7753876c-1930-4924-88f1-18d75e3c79e0",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "44e214da-195f-4ab0-8640-fabf3145b6c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae2ed9c9-bb21-42e4-a25d-882f24ca846a",
        "cursor": {
          "ref": "cde8e679-06c0-4e82-9ec8-4ad054418f79",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "4c735242-415b-4cb8-9fb7-dbaef52adba8"
        },
        "item": {
          "id": "ae2ed9c9-bb21-42e4-a25d-882f24ca846a",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "6a9f94b2-94a3-4aa3-ad66-580baeedae6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c28d8ebd-5d98-4a9d-9721-c665c9d19fa1",
        "cursor": {
          "ref": "397ad853-8ac5-4ff1-b49c-e17ad302bb6f",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "4f7ce3d1-cbf5-4595-87c1-aadbb88adc60"
        },
        "item": {
          "id": "c28d8ebd-5d98-4a9d-9721-c665c9d19fa1",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "5a1ab02c-9c0c-48fe-814e-6c720c7726d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a6532d8-3173-48bb-8f5a-b3e7490d72fc",
        "cursor": {
          "ref": "8470a4d4-548b-42d9-b20f-1d9d3aea5161",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "c2179759-c0ce-4d9e-a6a4-320cd896979a"
        },
        "item": {
          "id": "9a6532d8-3173-48bb-8f5a-b3e7490d72fc",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a26a564b-b618-483f-9d18-535480b3895e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab5b8bf3-bae4-4224-90f0-463a1f8b4595",
        "cursor": {
          "ref": "bf53d03a-3214-419b-9f7a-3a57b0c109d6",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "d42c8988-629f-4856-8671-38957e4c0be2"
        },
        "item": {
          "id": "ab5b8bf3-bae4-4224-90f0-463a1f8b4595",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "d90d8419-bf93-47dc-88d8-2389940f40fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3de80b21-518e-470e-8110-05b59a530117",
        "cursor": {
          "ref": "ee5bbda3-2545-434f-bdc1-6909255efd73",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "ed04f647-fd9c-402f-aaa1-8662b450905e"
        },
        "item": {
          "id": "3de80b21-518e-470e-8110-05b59a530117",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "cde8b15e-a139-4e06-b461-b7230422c4a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02388a03-34f8-4400-9bdc-ee6989a15be7",
        "cursor": {
          "ref": "f0be7e95-f0f8-4afa-b742-c26962fe1c06",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "05968c3b-072b-4847-8414-54da4bfb0d15"
        },
        "item": {
          "id": "02388a03-34f8-4400-9bdc-ee6989a15be7",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "cbb7c95c-4345-4020-98d8-91a779d8dbcf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a06bb875-ec55-42f5-96b3-0b7db5b77f64",
        "cursor": {
          "ref": "cc062640-6b06-45b0-b497-4cb183bfcee0",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "7860dec3-12d2-4cfb-bb58-939f3824d24e"
        },
        "item": {
          "id": "a06bb875-ec55-42f5-96b3-0b7db5b77f64",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ff86e940-7952-4788-ba11-6b6b40001187",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a771080-1c87-4cbe-bad2-3e590f0c3202",
        "cursor": {
          "ref": "4e73a977-3623-4dd3-b67e-97f73393e2ce",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "4d99313e-ba15-46d8-8617-5e7956d45319"
        },
        "item": {
          "id": "1a771080-1c87-4cbe-bad2-3e590f0c3202",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "2173db3c-7bed-4efd-8db3-ac6bb79944ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "428c5b78-98a1-4c50-83f8-3bba9483ece3",
        "cursor": {
          "ref": "50b0cd33-9c97-4d72-870e-78afe7226048",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "c33330c1-4f48-49c9-822d-5234ccf391ed"
        },
        "item": {
          "id": "428c5b78-98a1-4c50-83f8-3bba9483ece3",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "66df915e-81a1-4278-b8de-fa27756f9940",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6551cade-bf22-43fc-9e27-d8fc3a8d4240",
        "cursor": {
          "ref": "14fb656f-542f-47b6-a056-a3d03d082619",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "4f532173-8e42-4df3-b418-6ec45c5f0a64"
        },
        "item": {
          "id": "6551cade-bf22-43fc-9e27-d8fc3a8d4240",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "98f62c6b-ec5c-4dbe-8cc1-412c38479a8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c51a61a-b97f-4aa8-b423-79fd535dd616",
        "cursor": {
          "ref": "d28cb2fa-3de7-45a4-9b96-77fe3440094e",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "23c6c7b6-57c1-45b2-b3b4-eb6f01491678"
        },
        "item": {
          "id": "1c51a61a-b97f-4aa8-b423-79fd535dd616",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "cfd60691-1ca3-43bc-b999-8b0f39f3e713",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "769fe73e-b2e9-4d70-8dc3-a3c4c5c30601",
        "cursor": {
          "ref": "8cfdc03c-1071-4f89-bc8f-a0afe1145787",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "cff0bc91-4bd5-414e-ad82-2391500d7420"
        },
        "item": {
          "id": "769fe73e-b2e9-4d70-8dc3-a3c4c5c30601",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "9bcd194d-1d72-4090-9ba7-b32f3b3900f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e2b5c9c-39fe-40d4-9f3b-9ecb565c5c5b",
        "cursor": {
          "ref": "fd7cbb53-9a2a-4f25-97cb-0cc34a404fd0",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "64c50de9-d842-4f57-b6ca-6bc22e75b7fa"
        },
        "item": {
          "id": "6e2b5c9c-39fe-40d4-9f3b-9ecb565c5c5b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "80a97fda-d429-495c-91af-275c55d71ded",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f216a9d-aff9-4685-a448-9fac5c5fa5e6",
        "cursor": {
          "ref": "70501d09-f5a6-48de-ab27-93992fc87f4b",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "40b786d9-774c-4ef8-973d-ea66a0d90385"
        },
        "item": {
          "id": "2f216a9d-aff9-4685-a448-9fac5c5fa5e6",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "c0f16308-59a0-4965-9f53-115db7bd274b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f51ed15-808b-4cc0-93d5-fc8683d4f2ae",
        "cursor": {
          "ref": "821e5157-867f-4d00-bf86-3c842360b8e3",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "c0aaee0b-44ff-4de5-b4f6-33c1f585a259"
        },
        "item": {
          "id": "3f51ed15-808b-4cc0-93d5-fc8683d4f2ae",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "3a952ca3-9fd8-4b21-86e0-a9d04c196cb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c207829-a1cf-4040-beb9-2e2f2acbfec2",
        "cursor": {
          "ref": "9ba7426d-1f5f-4acc-ba40-d6e5ed237740",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "5661bf80-45f3-4dad-ab6c-fc313c40dcea"
        },
        "item": {
          "id": "4c207829-a1cf-4040-beb9-2e2f2acbfec2",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "aad5007e-47c6-4821-90d5-54dcd54b8354",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6c954a3-0471-45b1-91c1-ec7f1b35377a",
        "cursor": {
          "ref": "77f1dc75-b19b-42e2-b122-19246acaf4b2",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "0e1219f8-7273-441d-b19f-6d52eaa6d0bf"
        },
        "item": {
          "id": "f6c954a3-0471-45b1-91c1-ec7f1b35377a",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "c152200d-d1b7-43b4-9fe7-5d7cd2ef15f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fb23d9f-63a4-4e01-b1a6-5ec959ad8543",
        "cursor": {
          "ref": "dac85243-e35d-49e3-ab72-489b44eb44bf",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "201dfb64-98ce-4fc0-9e37-9d2cbb2ebe00"
        },
        "item": {
          "id": "8fb23d9f-63a4-4e01-b1a6-5ec959ad8543",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "7328b07a-5327-49ea-a5e6-0af78e9afb74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0f45c61-3a46-4a44-945a-1504f59308b3",
        "cursor": {
          "ref": "9c30a85c-e76c-494c-9774-52fd6cff6af8",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "acbc2d0b-e2d8-4e84-bde4-b41ee99b846f"
        },
        "item": {
          "id": "b0f45c61-3a46-4a44-945a-1504f59308b3",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "9c9b99e4-91d8-4e83-9623-93b8190db1b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67d37c1e-bc64-4afe-b586-e02611d631b1",
        "cursor": {
          "ref": "101279cc-cc80-4847-a9d3-000821dd219c",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "d16e9658-7298-49ff-bb90-0e8878cc1e11"
        },
        "item": {
          "id": "67d37c1e-bc64-4afe-b586-e02611d631b1",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "c0a038d5-55ef-4623-8661-71511249e0aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2dc983d-053a-4ac2-aab1-15b868ef23c3",
        "cursor": {
          "ref": "29e5fb8f-b9eb-4053-862c-a786a6de61bd",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "2270d6ee-136a-45cb-95df-6fdb15c331bc"
        },
        "item": {
          "id": "b2dc983d-053a-4ac2-aab1-15b868ef23c3",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "55d1b8b4-33fa-4a19-be6a-b0308322f255",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e730783-755d-49ac-ad45-c5812971f65f",
        "cursor": {
          "ref": "1f909b0b-07e6-4fb6-ad70-498844c57999",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "860e3120-7a0b-419b-b43c-008c4fb148f5"
        },
        "item": {
          "id": "4e730783-755d-49ac-ad45-c5812971f65f",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "4bba0edb-51bd-4728-89e2-e0777a5798be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edb1a70e-0487-4e32-a238-ab0fc4668d6f",
        "cursor": {
          "ref": "9f3fc83b-c2b2-418f-90ac-7644f5161908",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "b5211236-a1e8-404f-ba28-5ade8f483ddf"
        },
        "item": {
          "id": "edb1a70e-0487-4e32-a238-ab0fc4668d6f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "4529d61e-f466-4eb7-bc7c-e6348ef3d21d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15ca168a-5af8-4186-9160-8ec5818637b8",
        "cursor": {
          "ref": "c47a2af8-ff5e-46a1-a1fb-1fb7a8d827e3",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "319c2245-c358-4d23-b57c-894ea2079730"
        },
        "item": {
          "id": "15ca168a-5af8-4186-9160-8ec5818637b8",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "19ee808c-34d1-46ad-9d18-af7650121001",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79f2d499-88df-4ec7-b72a-53b8b439d728",
        "cursor": {
          "ref": "0403b4fd-1a4c-413f-85f0-d1c7dff56450",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "90ce069a-f5cd-4676-9731-0eb4341215c1"
        },
        "item": {
          "id": "79f2d499-88df-4ec7-b72a-53b8b439d728",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "075afd9d-1c53-407c-b386-69fd1e5c7169",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ec4ad4b-8606-4d30-be66-d0037f671d2d",
        "cursor": {
          "ref": "0e014c8b-afce-4379-9644-9af90fc82e51",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "d6311743-a647-4d99-bf3a-2f25605c3493"
        },
        "item": {
          "id": "1ec4ad4b-8606-4d30-be66-d0037f671d2d",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "e5130a2c-139b-4b36-9f3a-0da50e0a3665",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faa48d8b-b3b2-4a49-966a-b62232ec8a10",
        "cursor": {
          "ref": "fe8582da-bfca-495f-9367-4323588af424",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "e97954d4-fb3c-444b-928d-aeb89aaa1b70"
        },
        "item": {
          "id": "faa48d8b-b3b2-4a49-966a-b62232ec8a10",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "91662774-051d-4ce8-8fa7-2abd01a0c5d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bae29103-6f28-40dd-9002-d9a6fb99aa3f",
        "cursor": {
          "ref": "11c55d04-0b16-4906-9178-d19fa072ac70",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "2cd1cd1d-d608-46b1-b3ca-45915b606142"
        },
        "item": {
          "id": "bae29103-6f28-40dd-9002-d9a6fb99aa3f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "a0a577cc-c855-400f-9c23-79068abeee6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1460fc6d-7f00-411e-8950-1c32740b8e15",
        "cursor": {
          "ref": "d74e726c-2d3c-4bb1-9d79-5d4a86093314",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "034c30c0-0362-44ec-800a-6c13516862e1"
        },
        "item": {
          "id": "1460fc6d-7f00-411e-8950-1c32740b8e15",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "6e79bed2-84c2-4411-8000-d2bbcd9f055d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31dcd176-f997-4ab9-9968-44a73c5358d5",
        "cursor": {
          "ref": "80130608-1436-400f-afeb-d45eaf9753ab",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "3531ce8f-4cb6-4e1b-9b3d-45ffae0066f3"
        },
        "item": {
          "id": "31dcd176-f997-4ab9-9968-44a73c5358d5",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "acdab857-9f66-4788-902d-2b9ecd1f3beb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ee9e0f1-99e1-4734-a971-40478b25d8e7",
        "cursor": {
          "ref": "0792efb5-28be-4c78-bbf4-96ef37921ad1",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "8d387b56-4c87-4397-ace8-40d397afdf3c"
        },
        "item": {
          "id": "8ee9e0f1-99e1-4734-a971-40478b25d8e7",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "661b7880-bd1b-466b-8497-435b8974e8e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dd9ef69-2798-4430-baea-d679b15b99e2",
        "cursor": {
          "ref": "54a337ab-d0e2-448c-adff-8b55769e3c42",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "f45f7a87-aab7-4e5e-9357-71242308eb19"
        },
        "item": {
          "id": "8dd9ef69-2798-4430-baea-d679b15b99e2",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a1f7d98a-3070-4d44-880e-2f79114028e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "878a56d3-505b-4fa4-aa2b-523cdc34b963",
        "cursor": {
          "ref": "71216cf8-bb4d-4c29-a189-0e996b51b063",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "818bc1ab-8b8a-4c37-926f-ebd20c3234fb"
        },
        "item": {
          "id": "878a56d3-505b-4fa4-aa2b-523cdc34b963",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "4793a730-1304-4974-a180-d02c740ff480",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df7e4c43-c8d6-4c04-8f70-b9c3f4d7f5c8",
        "cursor": {
          "ref": "3ec4fa11-4fa8-4fe5-932c-e0a05bac2ab4",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "ee9c1fce-8681-4f16-843f-34207e9c80ed"
        },
        "item": {
          "id": "df7e4c43-c8d6-4c04-8f70-b9c3f4d7f5c8",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "0a8ceb8b-e425-425f-b99e-816b2e248e18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9d23f8e-cb46-4139-bbfe-d909627da477",
        "cursor": {
          "ref": "589a0b62-4775-4413-9f65-b41b2d44f1a4",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "823ee844-df45-48b1-863f-9c6c79d9fb30"
        },
        "item": {
          "id": "c9d23f8e-cb46-4139-bbfe-d909627da477",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "4e569c4a-43d0-4787-a5c5-28f9958fa51d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "047d779b-0581-43ed-af5c-24d29f3ca3ff",
        "cursor": {
          "ref": "15524270-53ba-4dcf-8ecd-076e1d1c808a",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "6aa9d84f-d1ff-4c1a-b6e1-a1d161dacca3"
        },
        "item": {
          "id": "047d779b-0581-43ed-af5c-24d29f3ca3ff",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "59ec78b9-c0ec-445f-9a0a-40112fb0681b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e51250a8-77fc-449e-afc3-b5285ffb51c9",
        "cursor": {
          "ref": "d3205ca4-28dd-42d2-bf0a-3e743088bdea",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "65bcd7f6-443f-4764-9bb8-fd1acecb5037"
        },
        "item": {
          "id": "e51250a8-77fc-449e-afc3-b5285ffb51c9",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "1b374790-5532-45fb-b1c0-577a07dbfabd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b47f80e-6cb3-4d09-b448-e0608e97c27f",
        "cursor": {
          "ref": "4ee7ee2a-748b-4e9c-8f34-01fe3bffe30f",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "1f6524c8-4778-4d8b-8063-215c131cca61"
        },
        "item": {
          "id": "6b47f80e-6cb3-4d09-b448-e0608e97c27f",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "38bafac9-8bf5-4c6e-ae24-77212f1704d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95d9c1c0-db76-4c0c-abde-89d70d3e0313",
        "cursor": {
          "ref": "c1f63271-4a60-4ac5-8fd3-85cf299c5c13",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "e381d5d7-5b0d-476c-96be-d177e3680868"
        },
        "item": {
          "id": "95d9c1c0-db76-4c0c-abde-89d70d3e0313",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "8ad9e592-1ff3-4d01-adac-cfbde806a150",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "614c1ee6-fe9a-4fc2-8176-8c321a62cd4f",
        "cursor": {
          "ref": "51322892-6da1-47a0-b745-29a9370ce394",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "7bfe663c-a114-4460-9ea5-7e0098ca2302"
        },
        "item": {
          "id": "614c1ee6-fe9a-4fc2-8176-8c321a62cd4f",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "c25d32ad-48a7-470f-804e-2a095fce708c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e08f9850-a821-4186-b29a-6e72e7ab63bb",
        "cursor": {
          "ref": "70a60579-a4dd-46e8-aa09-a96fde2aa48b",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "4c475236-a882-44bf-9d1e-9c1dd585c192"
        },
        "item": {
          "id": "e08f9850-a821-4186-b29a-6e72e7ab63bb",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "c3a5ab19-1ca6-45f4-9aad-4321a902b58d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ca0deaa-8320-45a8-b06f-c2c0f700f988",
        "cursor": {
          "ref": "685a7853-a6f6-467a-bfe1-707cd2e70f42",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "0ba89d4e-4bee-4274-bc07-d31dd9de16ab"
        },
        "item": {
          "id": "2ca0deaa-8320-45a8-b06f-c2c0f700f988",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "74905541-3b32-4fe7-b7b4-05782b92806e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b8c81ef-b6c4-448f-ad0b-8cc9ebf57067",
        "cursor": {
          "ref": "8ac2f109-fce4-433c-98e3-6db607dd56f8",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "34d9269f-d120-4301-a924-c38b65b90766"
        },
        "item": {
          "id": "6b8c81ef-b6c4-448f-ad0b-8cc9ebf57067",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "f43be269-9e57-4dfb-9d5a-c44e20546923",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cf16a83-c33c-4744-ba5c-99a2bf2acb6e",
        "cursor": {
          "ref": "64030834-f177-4fcb-ba30-a7753493e72a",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "e2810d85-5c13-48cd-bc8e-3c9d2b667e6f"
        },
        "item": {
          "id": "8cf16a83-c33c-4744-ba5c-99a2bf2acb6e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "ace30042-8caa-4669-bfe9-de15f82a2512",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c4fda27-40b5-43a9-9336-69aec390cf1a",
        "cursor": {
          "ref": "cf831bdc-940b-4a16-aabb-7e879d43f2f8",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "4abc6c7b-5fe3-4f05-95d8-7763d983c5ef"
        },
        "item": {
          "id": "1c4fda27-40b5-43a9-9336-69aec390cf1a",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ce58fbf6-5ba3-4004-8587-b584d52e6dd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f574ed02-98b6-4b66-8d60-92ebe68d4a58",
        "cursor": {
          "ref": "bffe2176-aac4-4cc5-841e-d3bcfc68cc91",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "5dd75845-5c13-4838-8b5b-116d6188f8d5"
        },
        "item": {
          "id": "f574ed02-98b6-4b66-8d60-92ebe68d4a58",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "027dc440-7d22-4e05-b141-0ed0dc4b244b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a6fe6b9-223a-42ed-9e6b-798d65fe83fd",
        "cursor": {
          "ref": "3da63335-c214-416a-b7b7-14718dd0b60c",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "77009f0e-5592-46f0-a9a4-e45d7edf6501"
        },
        "item": {
          "id": "0a6fe6b9-223a-42ed-9e6b-798d65fe83fd",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "f7e980d0-3026-4819-b5d9-4ec82e3dd201",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1d36897-1b05-4d23-84f0-76f403249b09",
        "cursor": {
          "ref": "8c4e3836-2a0e-4ce3-b5c2-292dbfb42661",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "a273e51d-53f1-42c8-8cc8-e2c11d006ae9"
        },
        "item": {
          "id": "f1d36897-1b05-4d23-84f0-76f403249b09",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "6323eb24-ab23-45a0-aaf1-447646372ae3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a55937f-1223-4375-9f39-45c5e0a144a7",
        "cursor": {
          "ref": "63eaa7d9-a023-4d28-9554-6db4d0656519",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "fdb2c83a-c6cf-4201-8909-cd1346da212a"
        },
        "item": {
          "id": "4a55937f-1223-4375-9f39-45c5e0a144a7",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "0d61636d-538b-4cd5-b25d-4e2be8d6db28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26f5cf6b-437a-4e0b-ac2f-eb3bad67e2fc",
        "cursor": {
          "ref": "9f272b24-3070-4cc7-bf47-87f119507f7c",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "e66be1f7-5fb6-4933-8fba-6d6c34b6f331"
        },
        "item": {
          "id": "26f5cf6b-437a-4e0b-ac2f-eb3bad67e2fc",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "dcdb11bd-78b7-4e57-9906-02f6575291ed",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "c2094f17-3de5-470a-823c-deec72978cfe",
        "cursor": {
          "ref": "5cc8387a-4727-4e8c-83d8-f0da64456044",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "476c5349-58df-471b-9ce0-97c62dbafc00"
        },
        "item": {
          "id": "c2094f17-3de5-470a-823c-deec72978cfe",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "66a9384d-20db-4efd-a635-02ff3f1e2654",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 304
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "372babb0-38fc-4341-84d9-c89ab63cdbd9",
        "cursor": {
          "ref": "ae1c40ce-06d8-4fef-958a-37625fe6caa0",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "3654f087-d02f-40ad-a920-72ea6155d1b1"
        },
        "item": {
          "id": "372babb0-38fc-4341-84d9-c89ab63cdbd9",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "3eb70572-8dd3-4880-9ec9-0470c8310fe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4760fc0f-2df1-46f3-9ab1-49117e20049d",
        "cursor": {
          "ref": "7a2f58c5-e8f0-4bfd-8085-9d74d8c100c7",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "e26174b4-0f90-49d8-b96a-c2e2b34d6b08"
        },
        "item": {
          "id": "4760fc0f-2df1-46f3-9ab1-49117e20049d",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "bff73ceb-c175-466f-ba91-ca5334c4a8e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0184d281-5c37-4121-9ac4-b8fba3c709ee",
        "cursor": {
          "ref": "f6b8891f-5a6b-46c4-96e9-e60a9ef147e4",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "94109c10-7ffa-4b97-b3a3-25d4575e606b"
        },
        "item": {
          "id": "0184d281-5c37-4121-9ac4-b8fba3c709ee",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "0cc1ff52-6c43-4f36-940d-67e33bf8a437",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f60c72a-fb13-42a0-80bc-1ff79546fd37",
        "cursor": {
          "ref": "c95e7935-6cc0-4dc8-a8bb-b6443e4e7b3b",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "389ae1ed-b9b3-40ae-b3cd-36d2939f7bf3"
        },
        "item": {
          "id": "1f60c72a-fb13-42a0-80bc-1ff79546fd37",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "a389195d-c0a7-4d5c-9ce0-d1d0e750d5a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 304
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cc3b853-63e6-4339-8dba-27e606ae5067",
        "cursor": {
          "ref": "72b27248-462b-49b6-ae5f-44a6df909037",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "ada11b26-ef77-48f6-a1e4-99b5d3af0f8b"
        },
        "item": {
          "id": "2cc3b853-63e6-4339-8dba-27e606ae5067",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "9078394c-d62f-47b6-ade0-b89c6880b581",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87bcfe4a-27cf-4ce0-9edb-be19926e4b18",
        "cursor": {
          "ref": "48989336-3f85-4a4f-9b33-f02c1c7d9abf",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "33c2a352-0d7f-47d6-b4e7-5e105fc05ec5"
        },
        "item": {
          "id": "87bcfe4a-27cf-4ce0-9edb-be19926e4b18",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "7e6343b6-11ea-47d4-901d-2ee5674a70d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2226923c-9429-4936-b508-603af92affe8",
        "cursor": {
          "ref": "e051a53f-0df6-45e3-8336-98ada9f2857f",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "bf74eec1-4c29-45d4-afbc-64ea4f550b4d"
        },
        "item": {
          "id": "2226923c-9429-4936-b508-603af92affe8",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "7aff7357-134e-4b82-88cf-103f762f0b81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b4a72f2-059c-4e1b-8302-20d1d20d4997",
        "cursor": {
          "ref": "e1926fd4-30b1-4bb0-9a61-99dc3be11462",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "a6f3bbb6-24f9-4c92-97c9-b0bf92a6a04a"
        },
        "item": {
          "id": "8b4a72f2-059c-4e1b-8302-20d1d20d4997",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "002bc748-b1fc-46c4-aa77-be5821ffb907",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d9c317a-197b-434d-aed6-bd55a8e6977c",
        "cursor": {
          "ref": "a4ce96a4-ffc0-4a94-8ff7-44e50621afc9",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "cd773ed4-ba38-4b2b-9a4f-24fa4768c323"
        },
        "item": {
          "id": "1d9c317a-197b-434d-aed6-bd55a8e6977c",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "50c21d95-377a-44fd-857d-2f5ccebec905",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15c565e3-6532-4e3b-95de-2a1683c4309e",
        "cursor": {
          "ref": "ec5a47ee-5427-486b-96ff-370b3e1135a8",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "b69dca8f-1b77-4afb-a0d0-8ef9143848fa"
        },
        "item": {
          "id": "15c565e3-6532-4e3b-95de-2a1683c4309e",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "61eb6891-427f-46e6-8c99-3a1e239fb363",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 186
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2c4ade5-3adb-497b-b187-f6a9e3e45108",
        "cursor": {
          "ref": "e507eb4e-d8ab-4af4-bced-ea69df0aa272",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "d132a8f5-f683-4d32-89ae-463c9614bb42"
        },
        "item": {
          "id": "a2c4ade5-3adb-497b-b187-f6a9e3e45108",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "073619ff-9349-42dc-8a88-21fc99a1a665",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df298d4f-9a2d-4cd6-bbbe-8e5287773cba",
        "cursor": {
          "ref": "f1bddceb-d20b-42a1-8841-d5f561984b3d",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "985e9b96-a592-4f59-a7a4-ab3aa3d03d71"
        },
        "item": {
          "id": "df298d4f-9a2d-4cd6-bbbe-8e5287773cba",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "e89f9731-46fc-4150-a17f-15e01ebc2f84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "737f99a5-ff45-46ab-8d43-85729d41aa52",
        "cursor": {
          "ref": "b28559ee-1e70-4d3c-9120-4fabb0188251",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "0564979c-b485-478e-acbc-77f6c18c9c06"
        },
        "item": {
          "id": "737f99a5-ff45-46ab-8d43-85729d41aa52",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "044fdc37-6c01-45ac-ab1e-d7210483a3bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62a0ddfd-5783-4d5a-8294-541093579644",
        "cursor": {
          "ref": "400cd1ea-2202-4ef4-9586-fa5f6774e746",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "90175895-6163-49aa-8682-79d8535a0dbf"
        },
        "item": {
          "id": "62a0ddfd-5783-4d5a-8294-541093579644",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "de32bf2d-ed0a-4d86-86ec-94933b3c1bc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0d21209-ec2e-4a88-b696-aa464043ce1b",
        "cursor": {
          "ref": "3ae31636-4aaa-470e-b843-0206f5e1cc53",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "c04a90e6-a8a1-4133-8103-ddb07a22fb01"
        },
        "item": {
          "id": "f0d21209-ec2e-4a88-b696-aa464043ce1b",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "78cb2851-0b19-4a3b-8b8d-ea376bc7f73b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91e2bbe3-18e1-4363-aff3-2f775d372b56",
        "cursor": {
          "ref": "048fad9d-7b49-4e24-ba1f-47aaf829c80f",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "a80046c4-be34-4f29-b907-645a7e50421b"
        },
        "item": {
          "id": "91e2bbe3-18e1-4363-aff3-2f775d372b56",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "ddf1bcc8-6459-475e-a8ec-38987f53e309",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77e628d3-10bd-4641-8139-c9412ba3e350",
        "cursor": {
          "ref": "90ed617d-c4ec-4f02-aa3c-f0252f929469",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "a7de5a8f-e9fd-436c-afad-c03882f662aa"
        },
        "item": {
          "id": "77e628d3-10bd-4641-8139-c9412ba3e350",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "cce9fd8f-3975-4018-9a05-3e77c01e719f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c2fd755-9f1d-413d-bc58-94433f6345e9",
        "cursor": {
          "ref": "d97c989a-57ed-4566-8cc0-8c96fae54a55",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "43641f89-e46a-4233-9310-ad8b5ba46508"
        },
        "item": {
          "id": "4c2fd755-9f1d-413d-bc58-94433f6345e9",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "e1328fb5-9bf9-4f29-9595-afc1a4b50de3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e455420a-9b4d-4a84-bd7f-b834f709eba8",
        "cursor": {
          "ref": "2367a10d-090d-459f-80b5-f265b235e743",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "b91490a7-98f9-4dde-8bb8-9dc6432e63b0"
        },
        "item": {
          "id": "e455420a-9b4d-4a84-bd7f-b834f709eba8",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "d784b80b-329f-4248-9c52-6b3a8bf8b021",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de1607c7-23fb-4a25-a119-78d66f3576fe",
        "cursor": {
          "ref": "20c08cd4-78af-47f2-a02b-85bc02520038",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "34288c66-f1de-442b-850e-338c5b336a53"
        },
        "item": {
          "id": "de1607c7-23fb-4a25-a119-78d66f3576fe",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "a45761c8-f07c-4a82-b84b-005be0171e6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0db9cb58-f57b-4bd8-a4dc-f7bf94da340d",
        "cursor": {
          "ref": "1f4e17f8-38c6-471c-8d84-c072aa52dbe8",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "81d7cb84-c44b-4ac4-bdd6-f09f58ffae16"
        },
        "item": {
          "id": "0db9cb58-f57b-4bd8-a4dc-f7bf94da340d",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "062426ea-2e1c-44b7-aff0-068dfb84b601",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2da92d50-94bb-47ac-9990-d4523a1b1768",
        "cursor": {
          "ref": "078d67c9-c434-49f5-a91d-ce41825acbf2",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "e0d72b30-45e9-4533-8cf8-dc58a4441263"
        },
        "item": {
          "id": "2da92d50-94bb-47ac-9990-d4523a1b1768",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "6e9acc71-0247-4357-9cf8-0ecaa7d3f326",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b025e3d5-1020-4262-91da-6816e57c3cb0",
        "cursor": {
          "ref": "5c1d9fe2-ee51-4162-bc20-66bdd6077e3e",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "fd976d36-c8f6-40fd-9167-8126d41b5e68"
        },
        "item": {
          "id": "b025e3d5-1020-4262-91da-6816e57c3cb0",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "875cc06f-76af-45e7-bb44-ee5110086024",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1205f108-4eb9-4e0a-96ab-6dc83a69d1a0",
        "cursor": {
          "ref": "1fbcda02-3e03-4180-8350-17d5b3a80b0f",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "16a81133-9f26-43f3-938b-20ee2cb1c2a5"
        },
        "item": {
          "id": "1205f108-4eb9-4e0a-96ab-6dc83a69d1a0",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "82737cd1-6166-460b-8a63-ca38a33d1091",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "079023ad-91ae-445d-a764-ac4d38a21d88",
        "cursor": {
          "ref": "93929910-a11b-4fed-a213-5d8e0b5b79e3",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "300ababd-ffb4-47a2-9720-40fa4ac958d3"
        },
        "item": {
          "id": "079023ad-91ae-445d-a764-ac4d38a21d88",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "2c60f995-1552-4379-8976-d385431746d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9faaece6-aca5-4d5a-9136-b225491ba029",
        "cursor": {
          "ref": "420aea94-8056-4cfa-b98d-adaa02a5234a",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "fe2e9b5f-e0e7-44ac-a3bf-cd91fa14e698"
        },
        "item": {
          "id": "9faaece6-aca5-4d5a-9136-b225491ba029",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "2653a536-889f-41f9-bcad-b42ca10b65dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ae72753-466a-40c5-acbf-c15b73d6ce86",
        "cursor": {
          "ref": "46ce92bb-2535-4d13-a8c2-3420ef8a98e8",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "d3159e86-6ef6-4845-964b-c83ce53ba760"
        },
        "item": {
          "id": "2ae72753-466a-40c5-acbf-c15b73d6ce86",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "0b554d8c-130e-4f99-ba6d-988e1df18a12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8468952e-e729-419b-be6c-e17c40202bde",
        "cursor": {
          "ref": "f84d57db-12da-4f51-b2e8-64994662b82f",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "138fe714-045d-49b4-9acc-64c719933e9b"
        },
        "item": {
          "id": "8468952e-e729-419b-be6c-e17c40202bde",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "9a317c83-9123-426d-8a89-cb786f4e2be9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 168
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e7b9b93-ce85-4021-be4c-7d6dfe4a9f29",
        "cursor": {
          "ref": "85922183-4546-42f2-96cd-f6e5be4a5ae9",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "8fc57aaa-0623-46b8-9968-d86b443b2b4c"
        },
        "item": {
          "id": "6e7b9b93-ce85-4021-be4c-7d6dfe4a9f29",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "c9d26ae4-092f-45da-8da9-42cc26ed9585",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35c6e587-ac81-49ea-b78f-84f48e31eef5",
        "cursor": {
          "ref": "0d013456-52e9-41dc-96b8-4d6e1d075bd6",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "dd034710-c285-4471-997e-a4091176e3d0"
        },
        "item": {
          "id": "35c6e587-ac81-49ea-b78f-84f48e31eef5",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "85d011f6-b1ce-4116-aca1-67be7f321585",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb5f00b6-504e-41f8-a359-da7d6ebe1572",
        "cursor": {
          "ref": "f109c31f-aeb7-4dcd-9ecf-1895a1bf52ee",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "7ca26666-2dfc-4a52-973a-cd78d6c0e7ec"
        },
        "item": {
          "id": "fb5f00b6-504e-41f8-a359-da7d6ebe1572",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "90314300-e89f-4187-9cf5-bca60b1b9372",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dee20938-4c00-40f7-a045-e0bb2cfcbde6",
        "cursor": {
          "ref": "b8878632-51f7-48db-8178-c405d31da065",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "7dd933f2-b3c3-499c-81d3-3adebf96d240"
        },
        "item": {
          "id": "dee20938-4c00-40f7-a045-e0bb2cfcbde6",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "52898005-af18-4090-a6b3-b983cac4fa76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 168
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c53e0f1-831c-46e1-a409-946d23e50107",
        "cursor": {
          "ref": "ac6fc8b6-8b32-4466-b69e-a54303561721",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "0b7c4539-0264-4173-a86f-1d9ef8b40121"
        },
        "item": {
          "id": "3c53e0f1-831c-46e1-a409-946d23e50107",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "b284cb34-2618-4a9b-9a71-97c157d9d021",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "670e72d7-ab7a-4d00-bbfa-4e3fb447980e",
        "cursor": {
          "ref": "54ff52fe-c55e-4268-be80-728b32e7a64c",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "f7823571-d030-4b2d-9fb8-23bf6cb0cf33"
        },
        "item": {
          "id": "670e72d7-ab7a-4d00-bbfa-4e3fb447980e",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "19c40d5c-04d8-4798-9cd5-bab81e47f970",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "244fbc43-1d38-4557-990b-b12eebdd16a3",
        "cursor": {
          "ref": "a08dc2db-c243-4e04-a702-6294058a756c",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "b7cf6756-5f9b-4e02-84b4-15c604191d21"
        },
        "item": {
          "id": "244fbc43-1d38-4557-990b-b12eebdd16a3",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "2640bb01-8844-4b52-860c-5fa6128a2b88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4372c7b-27b6-400e-9b8a-4599c1d795b2",
        "cursor": {
          "ref": "b9e63a1c-acf3-47b1-8335-e18c3c511b85",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "5d44cb68-68f5-419b-8349-3577aeea5bf6"
        },
        "item": {
          "id": "a4372c7b-27b6-400e-9b8a-4599c1d795b2",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "77c7470e-c68f-4fe4-923e-b18640db3ac2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c24c38b3-ddca-4202-b5de-a45ed7ec7c5d",
        "cursor": {
          "ref": "7bb6ae2f-a99e-416e-bf4d-a2adbc961b7c",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "e43bb124-6772-44a7-987f-78c4f0a9ce25"
        },
        "item": {
          "id": "c24c38b3-ddca-4202-b5de-a45ed7ec7c5d",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "8aa6ac9e-fae2-4bc5-86a0-43e4314324dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b49a59cc-2199-4aa7-aa36-7b8f3ecb0936",
        "cursor": {
          "ref": "0aed4f64-b14b-4c95-9665-84542a89974c",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "8de62fa5-2be4-4e24-980c-51ff2a82bfea"
        },
        "item": {
          "id": "b49a59cc-2199-4aa7-aa36-7b8f3ecb0936",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "72f741b4-bd01-44e6-934e-c272fc4b5d3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efa72ddb-adc6-462d-9571-f02fa3623536",
        "cursor": {
          "ref": "13af9233-af2b-4f8e-b1d9-b31cd69f6ee0",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "1fe2cafc-6a41-4a05-bccb-6a2ae555ab59"
        },
        "item": {
          "id": "efa72ddb-adc6-462d-9571-f02fa3623536",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "8ce0a30c-6ce2-4871-9423-27b0b6e7f23f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9d547cf-c932-4ff6-a252-4c82205e616c",
        "cursor": {
          "ref": "8bfd25fc-0734-47dd-9593-a4e764c8e541",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "3ec8658f-376e-4e20-ac0f-ed595611409e"
        },
        "item": {
          "id": "e9d547cf-c932-4ff6-a252-4c82205e616c",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "28fca4a1-4684-4318-8a77-1e2d7eed86ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad002930-3dec-4539-96f8-2b7f60346247",
        "cursor": {
          "ref": "18eca6b5-ec2e-4788-b05d-5f6555612ac5",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "a2f96bb8-b68c-46c4-af5b-94dcdc3d6dd4"
        },
        "item": {
          "id": "ad002930-3dec-4539-96f8-2b7f60346247",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "3e308b97-6bb6-4066-91cb-9f6731906e18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3e6acea-d0bf-404b-bcc7-fdc469114ab6",
        "cursor": {
          "ref": "e9830415-dade-4bb6-81a1-64b91e4f1da9",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "20270b6e-058f-4a75-afde-548558570d39"
        },
        "item": {
          "id": "c3e6acea-d0bf-404b-bcc7-fdc469114ab6",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "c9843508-9fb0-4d2b-a5f9-7a418fb89696",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0436ff31-0dcb-438d-86aa-211170bf6928",
        "cursor": {
          "ref": "29a6503e-80c4-424e-9daf-d241d72cd005",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "6e67730d-3b90-4c63-8d3a-43065bbea8c9"
        },
        "item": {
          "id": "0436ff31-0dcb-438d-86aa-211170bf6928",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "49adce7c-6c69-481c-9e69-dc7ba4a4a951",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78a3273b-4b6a-446c-a442-aad7ddc62dc1",
        "cursor": {
          "ref": "dc29929a-c011-47f9-8d04-3702173c25dd",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "f5bbf4e9-8461-439d-a41b-254caacb4f59"
        },
        "item": {
          "id": "78a3273b-4b6a-446c-a442-aad7ddc62dc1",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "dae08612-ffff-4b96-a214-1701d4d893fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03312711-6754-44d3-af87-6377e516bb83",
        "cursor": {
          "ref": "39c8127d-7557-4c6b-b2c8-25b00c7bfae5",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "e2b4d30b-a634-4116-b6c2-eaeef496c385"
        },
        "item": {
          "id": "03312711-6754-44d3-af87-6377e516bb83",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "98e71f00-cda2-400c-9572-4d2b8f62e2d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4897ede5-e392-4478-873d-8e5513bcdb01",
        "cursor": {
          "ref": "b9f5edaa-62c2-41cb-a579-14fae54df017",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "d26f01a3-6a6e-45db-b296-de18f32ff106"
        },
        "item": {
          "id": "4897ede5-e392-4478-873d-8e5513bcdb01",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "e4e17c41-8481-4027-9a45-89a268cb2ef4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d958f51-5690-41be-aa4e-8e7a1c2b6058",
        "cursor": {
          "ref": "1452c9ec-1bc0-4797-8cc1-34db5060cc08",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "f3f9400b-ece8-437e-94ae-dcfc4e899c41"
        },
        "item": {
          "id": "4d958f51-5690-41be-aa4e-8e7a1c2b6058",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "d3bfe0eb-5cd2-409a-aad3-40c852f31524",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4484458b-dc3a-410e-841d-cea74a57f5c3",
        "cursor": {
          "ref": "0a25311a-f945-4ff6-af14-e6a44caa1e3a",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "76269c15-e949-43cf-9ad1-fd5b40c71e33"
        },
        "item": {
          "id": "4484458b-dc3a-410e-841d-cea74a57f5c3",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "b3c43c06-3e2a-4264-896f-12adb54f47c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 267
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b34a88f5-e4e1-4a8b-bb9b-5d131b57b5fa",
        "cursor": {
          "ref": "e3334512-661d-43f2-952d-e039d2c57dcb",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "2f9858b9-e7bf-4fb1-acb0-221341723028"
        },
        "item": {
          "id": "b34a88f5-e4e1-4a8b-bb9b-5d131b57b5fa",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "1f1c3b95-fb0e-49f0-80d8-19288d7f494a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 267
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf862d71-662b-491e-99f8-f183fa03a4b9",
        "cursor": {
          "ref": "5043f981-3b1f-4986-8888-64fe1169bc6c",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "fddac982-e2af-43d9-9d52-1dfa0988a741"
        },
        "item": {
          "id": "cf862d71-662b-491e-99f8-f183fa03a4b9",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "1b72f3b5-373d-4dbb-bee0-51f7256b5add",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 330
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beeef473-24cf-40f5-9475-8e5a7fccba0c",
        "cursor": {
          "ref": "841b491f-0f3a-4cb8-a255-b838d45503d4",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "dd101269-938c-4bdb-9396-250c953cb1bd"
        },
        "item": {
          "id": "beeef473-24cf-40f5-9475-8e5a7fccba0c",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "0b0b2ff7-a494-4e7a-a7fd-9dd0c913a2d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 267
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3938e92-4d11-4932-99e1-68627073825c",
        "cursor": {
          "ref": "d3df4c41-7617-4055-82ca-ec4cfed7495b",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "09311b40-3bec-4ded-8cd0-946eac795952"
        },
        "item": {
          "id": "d3938e92-4d11-4932-99e1-68627073825c",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "c90ff3e7-2571-4f18-94d9-683592a1bc74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88f992f8-a480-4693-bec6-6493bb3b2168",
        "cursor": {
          "ref": "b22c7e91-def5-4c6f-bb39-ee488a9e1db3",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "83fc1446-cb30-44ef-ae60-2a338e836965"
        },
        "item": {
          "id": "88f992f8-a480-4693-bec6-6493bb3b2168",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "c279fcf9-e030-4662-b344-46a9064a2c85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd84c44f-b7bd-42f6-9ce2-53eb7b8ae140",
        "cursor": {
          "ref": "ed1104ba-6377-4933-a60f-b932cb52603e",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "a33473c2-4c20-45fc-8336-ff0602d5a23d"
        },
        "item": {
          "id": "bd84c44f-b7bd-42f6-9ce2-53eb7b8ae140",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "2825e642-c97a-43ef-ba44-fb680b76c43a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec677c6d-c4ff-482c-a683-ed6585e67448",
        "cursor": {
          "ref": "4fc47927-4377-4a1f-a068-612e367f465c",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "806e7e13-9db5-4b83-ae9d-a048a90debe8"
        },
        "item": {
          "id": "ec677c6d-c4ff-482c-a683-ed6585e67448",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "972d13dc-e62e-48d5-92f4-e260d91b6384",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9d69f08-fc66-4017-9161-4159f955ca55",
        "cursor": {
          "ref": "dae4c8b1-2b92-473e-9414-f90f0cc16459",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "d603a892-6832-4ee1-b606-13a0703a2a22"
        },
        "item": {
          "id": "d9d69f08-fc66-4017-9161-4159f955ca55",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "3aa5521f-5c33-4584-a832-b14d066cb738",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2f8b4fe-5fb4-4b7c-ab58-304f0c3d7aeb",
        "cursor": {
          "ref": "a2cb994b-5e22-438f-9eea-b2ac4e1f3c98",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "8d6c871d-9a84-486e-a223-9d52d3bf0938"
        },
        "item": {
          "id": "e2f8b4fe-5fb4-4b7c-ab58-304f0c3d7aeb",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "67ca22ee-e82b-40f1-907a-98d9ec716eca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4e4d3c0-c235-4096-ba53-ddb85927aeb6",
        "cursor": {
          "ref": "4de1e7b2-0f04-47a0-a5d3-29b3ba8ba755",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "b36a7f9d-82ee-408d-b07f-7db7ddf728c1"
        },
        "item": {
          "id": "c4e4d3c0-c235-4096-ba53-ddb85927aeb6",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "ae078c18-cd3d-40f7-9b32-0f8efa0ec845",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9da95556-2409-4beb-88c3-da9e470e5987",
        "cursor": {
          "ref": "5494b969-6d40-4faf-b0b1-9238fa66b7cc",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "662db319-77f7-42e8-b5f3-9f8d7279b471"
        },
        "item": {
          "id": "9da95556-2409-4beb-88c3-da9e470e5987",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "0f3dc609-3a21-4629-ae15-0135a9dc0b2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b33a666-f68e-4be0-9586-9350d4598557",
        "cursor": {
          "ref": "a69e0c59-f95d-41d0-aa34-a084fc2ac8cb",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "f2f38525-6eb9-4ba0-bc54-8b9960dd7f12"
        },
        "item": {
          "id": "9b33a666-f68e-4be0-9586-9350d4598557",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "beaf0118-917f-4a02-b1c4-f84248000527",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebbd0906-967a-4b72-b550-6f0588c125a6",
        "cursor": {
          "ref": "e589b943-97af-4dc6-a2d6-17eec68700f5",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "991766b0-022b-43c4-9186-c7b9c297ebc6"
        },
        "item": {
          "id": "ebbd0906-967a-4b72-b550-6f0588c125a6",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "f9a78b02-0259-4daa-ad3d-7cd79ae95002",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc526839-c4b4-4db9-b15f-fb5c64b9be03",
        "cursor": {
          "ref": "ca5f409c-37f5-4e26-87bc-7d2cac7b2d7a",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "1d9d2b65-0d6b-40ff-8ed0-8f4b790fc037"
        },
        "item": {
          "id": "cc526839-c4b4-4db9-b15f-fb5c64b9be03",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "a47fa450-47d5-489b-ab29-c45235c961d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d29ca5fa-b0be-4981-b768-344949c92e12",
        "cursor": {
          "ref": "f5e9add2-df8f-4c98-88c1-b6af851464d6",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "46e694b9-1134-46dc-9482-77b72a964ebe"
        },
        "item": {
          "id": "d29ca5fa-b0be-4981-b768-344949c92e12",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "88bba8a4-e31a-49c5-867f-cb16028a7721",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 717
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2958f24c-63f2-48a2-a004-d1d86ebadc7b",
        "cursor": {
          "ref": "685b623d-3d39-431a-af3b-4e3356e675bc",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "ac4c414d-1180-4f9f-bde4-2b4ca9caa1e7"
        },
        "item": {
          "id": "2958f24c-63f2-48a2-a004-d1d86ebadc7b",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "df9f3455-7064-488b-a40e-26b2dace3a1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a99b70b-26d3-4c46-9c8d-9eee3d3f1fe0",
        "cursor": {
          "ref": "2f136596-698f-413c-80df-6b56dc88d07d",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "2b38e336-a61b-40f4-9817-ac92d5dd016c"
        },
        "item": {
          "id": "4a99b70b-26d3-4c46-9c8d-9eee3d3f1fe0",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "85ca4a9c-6df0-4333-b7c2-940dc00a5c7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f204fa9-445d-42f4-b3c2-bcccffff5eb4",
        "cursor": {
          "ref": "596a2bcc-7552-4273-bd5c-ba321fceb9f9",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "ec6fee94-6301-4093-a0a7-b371de0c5d34"
        },
        "item": {
          "id": "2f204fa9-445d-42f4-b3c2-bcccffff5eb4",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "8514513c-ecdc-4b07-b123-11d13e7a9071",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a24d86b9-0480-43af-bad8-ef10ed6a4099",
        "cursor": {
          "ref": "d98b481b-2df4-480c-940a-4c13829a5caf",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "fed8b186-9228-49ee-a435-17f399f76c86"
        },
        "item": {
          "id": "a24d86b9-0480-43af-bad8-ef10ed6a4099",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "ffb0b42e-9bde-4093-bed6-3aa50114215e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 717
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ea0c326-e564-4aed-944e-61e1ce4ec51f",
        "cursor": {
          "ref": "8507af99-675a-41c5-b002-31e1d87cf394",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "4558f331-9405-4b76-8fbf-f051026eaeb7"
        },
        "item": {
          "id": "6ea0c326-e564-4aed-944e-61e1ce4ec51f",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "7e6e81fc-9805-4a14-904d-1456b63067da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f4c1487-83c3-47f6-ba57-9c9975d73f6c",
        "cursor": {
          "ref": "4b02c5ea-4f1b-4eb6-951f-1be1e7a331fe",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "9e2573c0-be5a-4cf2-a454-8fbd3aa230d5"
        },
        "item": {
          "id": "4f4c1487-83c3-47f6-ba57-9c9975d73f6c",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "95b63788-1ee8-413e-9edf-3907319fa84a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40991a9c-dc5f-4c82-9da9-6cdf0762c961",
        "cursor": {
          "ref": "41ef05c4-ccf6-4678-ab50-1736d350c398",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "70fba126-b81c-429c-b44e-64b6a926309e"
        },
        "item": {
          "id": "40991a9c-dc5f-4c82-9da9-6cdf0762c961",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "477f5dad-c99a-4d17-b0b0-c55ba4e0ba82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c787c885-7c13-4269-9863-35fee46f6583",
        "cursor": {
          "ref": "da53af15-cd9c-4eac-8a81-cfdc6734788a",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "446f7b71-86cd-43f4-a987-b1311aa18901"
        },
        "item": {
          "id": "c787c885-7c13-4269-9863-35fee46f6583",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "69d8534a-8547-4f11-9459-f119db878515",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c26144c-952a-4064-ab09-52e7521b4e8b",
        "cursor": {
          "ref": "50829ac1-9392-433c-b776-c7a8da537de1",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "996463df-d345-4258-a790-e5e3768dc709"
        },
        "item": {
          "id": "9c26144c-952a-4064-ab09-52e7521b4e8b",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "61129b0f-fbc2-4120-ab61-755df6a856a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "201edd65-6ded-4135-a975-e79a298821ad",
        "cursor": {
          "ref": "6fb38b21-11ba-401e-9fed-8b68f2c7feca",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "a662ce89-b752-4c40-a573-ef1bfd171f5c"
        },
        "item": {
          "id": "201edd65-6ded-4135-a975-e79a298821ad",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "d140b258-d1a1-4a4e-9c26-4a08edf530b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 314
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2e1e9db-a82e-4444-b907-6ae20dddda6f",
        "cursor": {
          "ref": "c5a05c6b-7a3a-4a4b-a40b-d17a5db7e2a7",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "833d1299-2e20-444a-b576-2f2b933cbfde"
        },
        "item": {
          "id": "f2e1e9db-a82e-4444-b907-6ae20dddda6f",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "09d14c8d-f2f1-4988-9acc-48b1555f8d7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0ffec11-f76a-416d-94a0-5e07bd31efcf",
        "cursor": {
          "ref": "28985c3b-382e-4db9-afde-1e39c32563fa",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "1de7a17e-238e-40a2-910a-3c465d3f3ce0"
        },
        "item": {
          "id": "c0ffec11-f76a-416d-94a0-5e07bd31efcf",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "8bb2f18d-9fd9-4c8f-8ee9-c9126cf534cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6f314e4-0d50-463d-874f-ccc56b7a867a",
        "cursor": {
          "ref": "f829a63f-5053-46b3-9c5a-1aa21b148cef",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "97b96a86-4b50-44a4-a65d-5bed0a96f722"
        },
        "item": {
          "id": "a6f314e4-0d50-463d-874f-ccc56b7a867a",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "2acf11f4-5f3f-43c1-870e-5e932523e496",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d0c8a13-35db-4728-9dce-e840f201aec5",
        "cursor": {
          "ref": "6c5ba8ac-5426-4888-a4e4-25beb8e96087",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "663b9942-bcda-40a2-a3a8-68b8e94227a6"
        },
        "item": {
          "id": "0d0c8a13-35db-4728-9dce-e840f201aec5",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "e3fd9404-a0ec-411b-9c35-666408ff0dce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4950423-2115-4835-9c9e-4deb4ce5fd99",
        "cursor": {
          "ref": "a2b70661-f11a-4fd7-94f5-943e2705acdc",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "9253ef62-4d5f-451c-b785-bd611b32c3ca"
        },
        "item": {
          "id": "f4950423-2115-4835-9c9e-4deb4ce5fd99",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "29ec8b53-695b-4d68-b120-e45c4c952113",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57d7cdfd-07be-491d-baec-b4bcb892f373",
        "cursor": {
          "ref": "41dec2b5-5424-47f4-961a-cfa881fc5d3f",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "d283601a-2d7d-40f6-a64b-7bd8e28d348e"
        },
        "item": {
          "id": "57d7cdfd-07be-491d-baec-b4bcb892f373",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "bcd58e52-a5a1-461a-83d3-ec544b37b264",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a868f582-ca85-4a0f-b6ec-93e47e18d73c",
        "cursor": {
          "ref": "7a3b6352-4615-4301-bd45-f978280bb1c2",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "377debba-f9ae-4ca6-94e6-7f86b45b2daa"
        },
        "item": {
          "id": "a868f582-ca85-4a0f-b6ec-93e47e18d73c",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "bc7b5270-af61-4b69-a74c-d30d5490d58a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2c56bdb-aa1d-44ba-8a6e-0184ea643640",
        "cursor": {
          "ref": "e23f4d34-025d-425b-872a-d3aef1842f4d",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "40d946cc-de2a-4c84-b56e-99dfcf966fd6"
        },
        "item": {
          "id": "a2c56bdb-aa1d-44ba-8a6e-0184ea643640",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "62ef35b8-26bc-419c-a1c0-870f9ead1ef5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ad267bf-4902-4738-891d-98915078a144",
        "cursor": {
          "ref": "ff9d99bd-4992-4943-b6bd-9a3ca7ccce9a",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "908722ed-de56-4e00-a37c-1d1e6e7f6e82"
        },
        "item": {
          "id": "3ad267bf-4902-4738-891d-98915078a144",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "06a0baf1-f59f-4a07-b205-b3ddd3518bc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72ddbc3c-7ac7-4a0e-9137-4a3eb3711681",
        "cursor": {
          "ref": "1c71d527-b0a7-4d7e-ad9f-38643c179a65",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "e61866ae-3be7-4544-8047-d45e30041099"
        },
        "item": {
          "id": "72ddbc3c-7ac7-4a0e-9137-4a3eb3711681",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "c0ddb798-8ce2-481f-b145-bf482e87d241",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07fcad1f-f6c4-4a61-842e-832f9c99a71f",
        "cursor": {
          "ref": "2dc78ddc-e1d2-4113-93ce-26858dc7e2bc",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "78feb56c-2a9c-4675-8a8a-b31b3598a205"
        },
        "item": {
          "id": "07fcad1f-f6c4-4a61-842e-832f9c99a71f",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "fca6f7a6-70d4-4481-8c1d-d7ca5147bd57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea9f11d5-7b72-458d-99bd-34d4ff96b285",
        "cursor": {
          "ref": "f8895aaa-9a07-495b-b7da-8c22ac8fc991",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "f61c8c79-f93c-4d5a-8773-dd8f45ef3efe"
        },
        "item": {
          "id": "ea9f11d5-7b72-458d-99bd-34d4ff96b285",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "c62d99d1-d5a2-4631-b4ff-4108a35504ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b2081d1-ad3a-4990-9bc0-24e7a74f5953",
        "cursor": {
          "ref": "eb764cf8-6214-48bc-9951-30c539da2ac5",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "c93f058f-3f92-4ac8-a4a5-2e5183d88fc1"
        },
        "item": {
          "id": "5b2081d1-ad3a-4990-9bc0-24e7a74f5953",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "09b6d18a-220d-4d2a-9341-041763596dbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c24ba718-fead-4b47-a43a-69384f469bc8",
        "cursor": {
          "ref": "702aad99-2770-4857-b0d7-7c98afb58e6c",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "1e0be6eb-4ce8-4dcd-a452-08f1b5a69ef0"
        },
        "item": {
          "id": "c24ba718-fead-4b47-a43a-69384f469bc8",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "5c442213-1cd2-4784-ac09-f4e046c071d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "758f3551-3ccb-4d58-841e-8ef31e366763",
        "cursor": {
          "ref": "1db160d9-b786-4bb8-a479-ba55cf093311",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "3679b9e2-7740-49d6-8954-13a8277c6ff3"
        },
        "item": {
          "id": "758f3551-3ccb-4d58-841e-8ef31e366763",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "42de880e-85e5-4f3b-9776-216ead362040",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "567d1126-056a-457c-ac64-cc4f2b1e50a6",
        "cursor": {
          "ref": "90fcff93-c3d2-4fca-a752-597112e8309b",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "cb8b22f8-4c69-402e-8f35-df340b2b77c5"
        },
        "item": {
          "id": "567d1126-056a-457c-ac64-cc4f2b1e50a6",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "1be55500-b107-4f84-93b1-159d4185f206",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd465f5e-2783-4b3f-b9a3-2c8e2c5be8d8",
        "cursor": {
          "ref": "8acecf83-e335-4f65-8c03-6751815217c1",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "62797b40-3512-4b30-a6da-5bbd5f581ed8"
        },
        "item": {
          "id": "bd465f5e-2783-4b3f-b9a3-2c8e2c5be8d8",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "29f65bd7-c143-4f1f-83f7-04e524fec003",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10a1c213-c183-46ca-90bc-1cec9d6360b2",
        "cursor": {
          "ref": "fd8d0e07-0f27-4aca-9ade-e05e60df99c2",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "64e838d7-95b0-46a8-8f12-4da20f63d8f9"
        },
        "item": {
          "id": "10a1c213-c183-46ca-90bc-1cec9d6360b2",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "345f6aaa-07be-4ce7-bbb4-fc55a0d70d53",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7b5b829-ec3e-4f53-b000-f87500b17c57",
        "cursor": {
          "ref": "9ae6ea79-b82f-4ed4-8c4a-0f293aac5a2b",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "04d622c9-1c51-42cc-9a7f-f7f320105261"
        },
        "item": {
          "id": "b7b5b829-ec3e-4f53-b000-f87500b17c57",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "a58b9e26-a742-43ea-b9b1-c42ea58aaf48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:277)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:277)"
            }
          }
        ]
      },
      {
        "id": "5b57cf24-533c-4db8-bfba-757bb0b63d94",
        "cursor": {
          "ref": "36d76062-a29b-405b-b084-a825e6f0fa9d",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "836bcabb-63e5-4409-b91a-2dce559a9cfd"
        },
        "item": {
          "id": "5b57cf24-533c-4db8-bfba-757bb0b63d94",
          "name": "credentials_verify"
        },
        "response": {
          "id": "8578398b-4b48-4095-ad27-c76ac93b9bca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "67e3836a-f3a4-49c5-a0b4-84ffc5bf6735",
        "cursor": {
          "ref": "2c5eda72-79ab-4e2f-99bd-20939e8c6c0b",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "74746694-72e3-48a6-92da-a500abb7a2f4"
        },
        "item": {
          "id": "67e3836a-f3a4-49c5-a0b4-84ffc5bf6735",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "06ef2090-107b-4185-bc62-d6c70087ab35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "e2d29216-f45e-47c3-8eab-74661aecd4b1",
        "cursor": {
          "ref": "14030855-aaaf-48fc-a4d8-451fb3e06602",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "58890e39-3b11-4467-924c-20aea01d6d1d"
        },
        "item": {
          "id": "e2d29216-f45e-47c3-8eab-74661aecd4b1",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c8e8d616-e716-42ec-99f0-f0b88e8854ab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2d29216-f45e-47c3-8eab-74661aecd4b1",
        "cursor": {
          "ref": "14030855-aaaf-48fc-a4d8-451fb3e06602",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "58890e39-3b11-4467-924c-20aea01d6d1d"
        },
        "item": {
          "id": "e2d29216-f45e-47c3-8eab-74661aecd4b1",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c8e8d616-e716-42ec-99f0-f0b88e8854ab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c0154da-00d6-4393-938e-ae7335cb041e",
        "cursor": {
          "ref": "3c2acd54-92dc-4445-9452-ac4aafa03230",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "a9162681-e05a-421c-a5d0-c7a69b1dfa49"
        },
        "item": {
          "id": "0c0154da-00d6-4393-938e-ae7335cb041e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "d05a5d1b-51d5-4859-b57e-cd2d71c984f3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ad49155-e541-4232-b4ea-9f027dc77392",
        "cursor": {
          "ref": "a3a85382-c330-414f-a699-503b168e4d67",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "79682f77-bdeb-4198-95fb-18bca1f6669f"
        },
        "item": {
          "id": "7ad49155-e541-4232-b4ea-9f027dc77392",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "344fd0ba-48ac-4754-9821-1aad435b0c08",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}