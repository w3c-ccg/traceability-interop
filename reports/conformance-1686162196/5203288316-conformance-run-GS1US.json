{
  "collection": {
    "info": {
      "_postman_id": "e9c7f21a-ef69-4217-8f40-0424834c0fdc",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "e5834dce-3127-4293-ad4e-19af43e47694",
        "name": "Clear Cache",
        "item": [
          {
            "id": "0b036b42-82ad-4bc8-a428-0bdfed0413d7",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "929af324-67a7-4896-85c8-1d0b4215644c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e000eceb-90fd-4513-9b77-f592182aad55"
                }
              }
            ]
          },
          {
            "id": "fd505f58-aaf3-468f-9c15-2f58c231d812",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d4591365-09ae-412a-abd8-b077075c29f4",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "467fc85a-1ea7-4c16-836e-4d434382a815"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "12d255a2-ffd6-42d2-a71a-53eb4c19f8b8",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "c22d1e8d-ffed-4c80-80b5-5a41b0f49292",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0e8bb09b-eab5-4853-bb33-3ed0090c1c6c",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3e7ef5c8-20da-4cd4-a651-2527ff67a161",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "15ef605c-7e72-4bdc-9242-a3b87a66660d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4cc3dba2-aa16-47b3-89d4-f09c8ce6ea9c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0516ce7d-24df-4f9b-b067-91e57e20e534"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1fa7e285-0802-467c-a141-8dcf50f99e49",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "60d706a6-7975-4f14-9719-78687e58c745"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "67f8f665-bdbd-4a33-952e-984806c461c6",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "2e14183d-c82c-4c67-bbdf-daef0a7a0b20"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "25ae20cb-dddb-45c8-b06b-664c068d8410",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8bf4b71d-2337-4e77-85de-93994fc84620"
            }
          }
        ]
      },
      {
        "id": "9c446875-4efd-48c7-a1a2-c47b6307833e",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "9ebe416a-9009-4b2c-befb-b2c5864fd67c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0aa39eac-10ca-4c67-885a-1bd3dd1e2016",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "80922004-85bc-4ac7-a074-4e19267018d7",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b3a5cef-5c13-4f48-8cb0-84568f30da4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b30b9c0e-a57e-4125-97b1-f51012a04dd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c239c22-e2be-47e2-9419-f9944c2aa94e",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a84a603-8449-4c79-8188-72d86ff98fa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "83f48c81-af0d-4041-aac5-5102534d5d3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "677ff343-56e7-4d12-b8c7-ced8c5b2ea96",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "880fa338-d934-4e58-8bd6-b1c0c65d0f44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "808a6636-6d5f-4d8e-b9d4-64dd9d2164bd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9f667b1d-f134-4e2e-a377-e860a347cbe9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8a72f90f-a9d3-4ec5-b750-958067bb2a0e",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5f6d5b5-a5b2-4343-a1a9-597405bc813d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "32a57198-3cf4-4098-b881-c1310ab3e603"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "275ba8d9-a700-438b-a9ff-b47cc8e212a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b64d11ad-6a25-40b1-a74b-e99eae7080fd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5de93dcd-75a6-400e-8d7a-7acfbbedeb67",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1a40275a-5856-4898-8ece-0c0b2d42a96c",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a7703a5d-5a19-4141-b2bb-6f8f25887047",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "eecbd643-7546-4ce3-abda-2841eb1a3b30"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c4b7cd9c-5e7e-4a97-a662-cf145135d9bb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "4ca70c8d-bdc6-4c69-ac55-aef26809e675"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ba8ef1ed-b246-4f9a-900b-5fb4087efba4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "28e8a9ff-05fc-42f1-b731-68a76be13e2b"
            }
          }
        ]
      },
      {
        "id": "534abb04-cf8e-4f03-aa0a-7c35fc5b9f79",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "ca14ac75-142f-4313-a41e-d934ddd9812b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "356ffdfd-8532-4934-ae0e-70e4ee81ef10",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "61dd3fe3-dcd1-4eba-aac8-23ddd3c39791",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3a819c5-5265-4f76-a39b-8ebacd2a072e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51bbb810-574e-46b5-a24c-b5ab784c43a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c39e51ae-aec0-4fc7-9b6d-9f437d491fc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d46d6a80-0333-445d-8a5e-91bac6598628"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e4bfb23-d297-4cfa-a20f-3b5e592b73e0",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a482db11-5108-4127-b09f-35fba7d14b85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02630e91-5c41-4504-a259-f02e2c0a5df7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb533da1-f86d-4089-8499-d2dde9f2a53e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c0375973-6940-4a66-9a9d-c8d721a2375c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbdaecdc-da66-4dab-8d21-4f4212ad80f8",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3079cf3-44b5-435a-be7d-5ed58bc19e92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f2fabaa-7c3e-460d-a465-94291a19a1fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22b29533-fc1e-467b-b4b1-61c748eff86d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "983eb6bb-d3e2-4861-a11f-4f66c0a09bd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1815dad-3503-4262-b5c7-bbd8f923350f",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7df9cc80-5bea-4c55-9b8d-3afb816eaf33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22527adf-126d-490a-80c9-b07d86c934c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56032e9f-e49b-4b50-b524-069481e944ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "42fcbd41-38ef-4e1b-af2e-ef2c19db4aa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f327bfb-d869-4358-819b-53638cd0bd47",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9d56346-7ed9-4824-9a47-86f59caa6ff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "643b5ea2-9d41-4207-92fa-eefcdd00e5b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53a10217-5178-4ce7-9608-f3a10576e0ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cc27f6ea-6584-4d23-98ab-f7d021d474ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2d086ab-5e3d-42fa-8887-54d224608237",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7299041-8bde-4db7-af88-a903e4647136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25a009cc-b6d3-4f7c-b42c-45a9a6ad092a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55163cd7-0ae8-4d76-81e3-c67b2f7fcc83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "87f4ce3b-54a9-4eb5-9e16-c8fb823bc957"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43f2b4c0-a5d9-44c4-9aa9-4e0ecad89719",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c5a37db-8924-462c-a682-41ab1e3f5785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "483cf857-9407-49d4-b5e0-96577642f29a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06ad3853-e6f4-460d-b18a-cb134502ff89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "46e227d2-dd84-4a3c-86df-c541dc13efe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1392495-b2b0-43f1-aa47-8e77abff4ee5",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f36e6ef-c0a6-4702-ae42-cc2497a2eb8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "545029c0-b4b1-499f-8989-2044c2bdfc27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4caaac4d-6054-4f30-af0a-e4c251be4b35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9b00a7c0-4f77-49e4-8138-8f736131c873"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb1f734d-d44f-4990-85c1-0066a74b2592",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f4f2c36-b7d0-4750-a7db-1079182429d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb5e0478-5707-4bba-b260-6d7934e3dd05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a73fe424-e5f3-4207-a7b4-6c891a8db512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e106e7aa-d623-4255-8557-9f613d20b16f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac263f77-c0b5-4b15-bc6e-ef34faebb533",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26ca5c90-fa6f-474b-a80d-863f26c397e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ed3e854-6af5-464c-8895-82ee925f789f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d8a63e0-746e-45dd-90f0-9cf13d37252f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "087da5eb-f631-4ffa-899f-3f117a00ec4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90c7f4cb-86ab-4f37-8fa8-2ce5a8db514f",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dc48fc8-c692-4bf5-85df-204a62dc1f9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dae5e2d3-707b-422b-94e2-b65330072ea9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fcd8b00-dfad-4ad2-9401-5a33d7821f7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b2da163d-cc01-4b6b-87c3-ebafb9737e61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1de62e2e-b2bf-4446-b9d2-de22ed7bfdab",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e311f03-145e-4bd6-8114-86790d67a8e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20c86bfa-0278-458d-9051-9bb78c08adb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d94bbef-20f5-419b-abce-34c681d6f228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5dca74eb-69d1-4738-8a0b-b0a245c3abd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d655d677-d1a7-4d08-beeb-2d64e80d5fbf",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3404f39-e213-40a8-9d33-42cc2bfe1bdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf4c8cc0-701a-42f6-97cb-f272b619d10c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b45b7f5-4fae-4f64-af4b-669941461586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ece0248a-b9bf-44ab-96e9-f0f78936c4a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a487913-3551-4970-ac92-61c0f656c6d5",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f923ab67-3406-4e5e-b0d6-eccdc4b36c11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fa71886-cd41-4fdc-821d-7e213036f1cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "494b326c-6195-4294-8830-9fcbe4fbbf96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7c1e73ca-fc1c-4df1-84ca-49f7229e6ce2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16cc6336-d96a-4dc4-b4c7-49960f1c1478",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc2a1433-d70e-46c6-acb5-0be7f9c7f9ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5286ea14-6259-48a5-8168-411878f73cb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "144b108b-25f6-4caa-aee1-b95e20c94f50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ff7554e1-14dd-45dd-8c3e-eba1ac467252"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1d757bd-a018-4415-a69b-7ef0d50e0376",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "142ccd35-c03d-4ced-8f0e-d0172a077eac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54f5247b-84af-4c75-a16b-1c5a8872d207"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fdf1f9b-98cc-40bd-a812-175bcfc00440",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "baa34132-77ea-4d5a-9ee9-a83b1bc0443f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62e6b9c0-0a14-42b0-93e8-4d5dc6ef6ceb",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fd2d379-c1f3-4592-b019-74a039ceb414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b49ac33f-6408-46d1-b406-74665da56cf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2637d528-ccc7-4492-a2cf-debe403b0c7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e6ab3591-307a-4762-bea6-5c921e5c014d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "322f07f3-5647-4b97-8a15-19865a9a55e0",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a08c5ae1-1be7-48bb-9f69-9901c551a0ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3c76e74-06e3-4aec-8517-e2655a08e3c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50dc8e42-d5a7-4547-9f0a-60a1405003cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "07d828b5-2766-41c9-9ee4-ccc3f0e68323"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1c5117f-3d46-4587-b7f0-e14f9decb959",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b33a51cb-e9b9-47f7-8a4a-df1f7b0f3f16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4de41fa3-5cc9-4f65-9e99-e799e8301de2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c428d05b-987c-4e00-a232-f8a97fceb276",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d30a8b9c-e73e-4466-90ee-2da9ec694342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dbdb666-93a7-44cc-a2ba-a71d05e07f5e",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8b24896-d568-4cbd-942c-79bf1ea3ab51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29de13f1-c65e-4462-9386-9596eeb386bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0dfe8f7-a0bd-4748-87d1-d726d5109aa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ed76137-e83c-41d3-8358-dab5f224b5ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5069e1d-ca5c-44ba-b7dc-9ac6e3552d3d",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "191eb416-0123-48e5-b734-685c20b44e39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a13c23b-e219-4317-8437-cce8751386d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32d92e32-0455-4b4e-b92d-fa546eec23c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4efddce-4e98-4084-a933-fd35666ebf6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b3e596e-549c-4d15-80ee-de509841c0ce",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf0f3950-03b7-4520-93ec-84b7c7530ca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfe66fd3-2de0-4395-b044-1572943c9b4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b63dbf5f-0fe3-43f4-9bff-89ec63ba7793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "92daf6b8-e622-4fff-80ab-3d90243e61bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d210582f-1945-4342-9422-0a9dd8a4cceb",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20ea5155-96f4-4ba8-ae02-fdf2d0b943fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae15ec7c-28c6-4c73-878f-824754ecd500"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1897b50c-d306-4864-8660-02e2bba38b2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c008480b-4a44-49a2-a9df-ad8f1211a365"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bdcc492-4ac7-49fc-9038-bd8f54e22b76",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b1d3ec8-8ed9-40e6-95b2-bb02df8dee5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75e86ab4-ef57-4533-acf5-67fbb3a316d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1942831a-e996-41a5-b38e-382f6f318170",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5e10749-a107-47a9-aa1a-0ede2ad1ff88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d903a0a7-81f1-4bb2-b684-08630d0e8a4c",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2e70502-ba92-4d8c-bb5d-7ee46bf277a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a3f5e6c-300e-4228-b321-3ba2e8f22812"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d499be7f-60e8-4b04-a961-50adfefcde85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "de5d4456-b47a-44a6-be09-de9715e3a20f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea559869-5070-44cb-9ed5-e41ef6152f28",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd9f72c2-88d8-4ae2-a828-60bfed996106",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9503eb76-ac5c-419e-96a5-eb7cd054c9d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5be01c8-e831-4b18-bed4-82b756895482",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e98e646e-bbfd-4042-a0bb-8a4de2e881e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aaca0e3-b971-4512-aad4-ede04aae1863",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcd2939f-2b1f-46d3-8c9e-6ccc78d6720d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6ecaed1-f82d-47d9-9e6d-cf1c5fefd3e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeccdc15-2ac6-45e6-8fb2-e93eade7b978",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2106614c-ad5b-44aa-b097-65dadf98ea55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bca15d88-c986-4222-a1c7-dfbc54c340e6",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "791c2a14-89bb-44b2-8222-2750169bcd3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "feac6370-b763-420a-8c96-844450b5de57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "225e46a7-4d38-438d-a95f-5f0b78284c8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd76d8b6-a73c-4e55-b11c-8ff3e269f9ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c05ab423-0474-4e89-bcd7-782b9be27511",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6952021b-d3a6-4c92-8154-649423b32d98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e72b703-8714-4d37-af21-662e1dc76540"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21ba10ac-1d35-431f-a722-f9e01feb45d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d23a3c59-de4a-49db-bb4e-2a109f62b636"
                        }
                      }
                    ]
                  },
                  {
                    "id": "278aee6d-3d62-4245-ba2c-c3f6a4afde3d",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3580893-dafe-44b8-8abe-a665adff3dba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "790124ca-5d51-42f2-97cb-bdee69c14973"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73dba33b-bbde-4bd2-8072-56736ec24c24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1d3c02b-c636-4fe8-b0a0-f69b25970934"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cff1db6-0547-4a08-846e-835675bedcec",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf61c943-3769-4074-82ef-1d054df66efc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f0921d6-6ba1-40ba-adc9-ea043a54beee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a96db7e5-0e75-4fc0-8160-b3af93439b6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c16286dc-a7df-4d66-99d3-54de34c0b6f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b08cd3f4-a12f-4c62-b4f8-a57ca8353ce3",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa9df2a7-6d0e-40d8-80b2-439d2d88d798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "493925b8-9fd7-4ac2-af4c-5d164426dd55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35ef31d9-ce94-499b-ba2e-7e3d5b8c2634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b6d12a3-8606-4a84-a4a2-19be69389b8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8f7938b-3f2c-4600-976f-3582cd8741ef",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a99300f-18c8-4dd2-a713-3ba900014ba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "902d7db1-0e8e-4080-bc2f-dea125c924cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "984f673a-5da2-4a3e-9ce4-4d5bc2a2c9a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "649e43a4-2b9a-47a0-a459-8c6a716f66f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08a404f9-5f45-46c3-a97c-abe7c130a324",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cb1d381-4b8d-4ef4-b1d7-504f7c5d4404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ca4b212-bf69-46ca-a499-de3c64013604"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad39392d-d6bc-438e-bae7-d1405b2a5482",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "10e08475-b53a-432c-8278-6bedffc00dd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "967e41f3-5d3d-4da6-b7ba-51485fb7aa01",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94c05631-23b8-40a3-bc19-96a52afff24c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddad2bee-b376-4040-b128-e36f62dbed27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51bdd2ef-1f90-4d43-b24c-5dc48e15c7f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "cdb74a78-8760-42b7-b13d-b92898a4c83d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e2d8703-a7c4-4da2-a234-cc5bf9d6dcf7",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a75b9d2-bc75-4c73-ada1-3a3b449529f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c3e83e8a-df0c-4ec5-b267-c2dcd9631ec9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28f28c22-186d-499b-a9af-370c40d58dab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c75b6096-7e85-40ea-b680-a79f0e4fa678"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8bcb64e-8e57-40d4-992e-62cd8534a029",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a8e5f27-7f69-4686-bb34-ffeffd996a35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce8d9bbe-8331-402f-8cff-17f22a976539"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac2fdbaa-e3bf-4f82-ba52-9b97d871756b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "71f83d7f-fde8-4c25-9df0-f7a20527c308"
                        }
                      }
                    ]
                  },
                  {
                    "id": "448ac8c1-d641-4d4a-a11a-915a1fa800a0",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39553d41-9286-4994-b7af-72d14d900b65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2a748f9-fd9e-4a30-9c6b-91bb0c00ab94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0965fbe-b187-4afc-b46c-2c7a74e38401",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "50811e1e-c60e-4e69-af33-4b12c940ee68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1ee30b3-7239-422c-ba7d-8178f7da2415",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5561bf0-733c-42dd-b892-f79ca8afb60d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2e36114-d890-44f3-8a8f-15ee49ffe87b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b5821ac-18b3-42d9-9efd-df58945b23a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "aba705be-f2bd-4df5-af47-438da18202f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b61cf0f2-434d-42fc-a543-bca253bfa35e",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24197a00-026a-4319-83c6-181b386894a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa677960-f070-404b-b4eb-bd3e6e36e073"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a64b88fa-e3ec-4c59-afeb-32d41c266cbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a75ed83e-4b82-4f3a-833e-4a7c6cae1331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed922030-9cd8-4891-96d6-9f712058b0fa",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaf5ded3-1775-4f52-b0ea-d043f99c2dd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58e2ce81-4973-4d31-9784-8e787bcce33c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c589debb-2580-4731-bb63-627f11b7db45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1818315c-503f-4cbb-8c6d-3f2489787518"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8c0ca12-d333-4c41-b8de-918b78901f01",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c6203b6-828a-4d7b-9343-9013ed0ecf58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f99080b-303b-4d80-9594-152d87097c04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2e5d5fc-c468-482e-aa1d-e59846e7935d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "3e988799-7789-4da6-9c2a-717d932c33f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c02c9343-fa94-4302-acf6-d48a2e8f8de0",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a485036-0a6d-4c8d-acd1-60a8213d910e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "244b7e9f-3710-4df8-8c2c-56d375fc557d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47dcb978-7f45-47e1-8ceb-88547dbd1d49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "22d91ed4-5c4d-4fcb-9a0c-1343051eb684"
                        }
                      }
                    ]
                  },
                  {
                    "id": "244de6a4-26cb-45de-b87c-a1ecb7915d0c",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b42c462a-b0f5-4396-89b5-c83d234a178d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be4b9cac-9828-4d52-b8a9-e88bba30ba78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5f6b9fe-fb08-4fab-b653-6d572e324dab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3305805-30e2-4df2-83cd-277c396c1f1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80dc2f98-7d38-434e-a8b3-204bec90e63a",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea53016a-3017-4347-9b30-8b2cdfc05139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af1e068f-3c73-4675-b582-9624e6e6da94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff56f61b-f2c7-4d9f-bc07-217302613b86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa095921-2e6a-4608-a500-1cf114b4794a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "708b43d3-d72c-4ed1-97a8-87dc19271d87",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6420fb01-b065-4a29-b3a3-b8fc32337c0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88ac325f-e090-4cfc-b320-b728ce5e3573"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df873997-5d6a-47bf-83be-bcc3f2678621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3d9b7a4-dce8-4c4a-bf5a-d03777dcb1d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "893a9413-52ee-43d7-8c4c-8fbbcd62f641",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "075ab94c-87a4-4460-851c-27bcd31b8479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dd9dfa2-574a-4c0f-a2ba-ffc2eaafe554"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80958dd6-399e-4d3a-9bda-9b50218b38ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8cd0c19-a69f-4ce2-a03c-30b6606bcbb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "838e4311-58a5-4206-9ca1-6ffc64b48e73",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75af54b2-e7f7-491d-afd7-de6ee9c792e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcabc41e-38ec-4f55-ad7a-c67a2b37ac50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "310fa46e-d4f0-42e3-9e3d-80eaf4614a95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e98b05e8-92ab-4569-9185-50a5a640f038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c56c2fd9-21d0-436e-ad42-bed08fcb6ef2",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b80ae6e-d97f-4c9c-9d85-b6803acb528e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79558a21-117c-4173-b75d-5bbb2f264096"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c3e7630-b0d0-4197-92b8-45103d107474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "57cb6e4a-4d25-4613-a938-e8d49e8f859a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f1b56fa-c72a-4ed3-a162-827fe4945a92",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fee62a38-3db3-49e8-aadf-61cab4f02cd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "deb4a011-6e8f-49fd-bc59-708fb5b6b9f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cfc07c0-6731-4b36-8ce4-c6ba34c62816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "48cfe1c6-0fb0-4f37-9bf8-19aa1eb8c482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75e274d9-03e2-4213-8302-bb7b270e55a2",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33067759-774d-428d-a0b1-36c3f6ddeb9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca3ad6fa-f291-4bf1-b4a0-c7e2157a7cb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "838ffd8d-5cea-4d85-a200-6441b2821922",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a52a270-466d-4f77-8a7f-17b804ba7689"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d71cc375-161a-4f4b-9d74-103582aabf58",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fa00dd9-e5d8-49e5-aab9-aea900968465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f903db01-9af6-4fb6-a998-ec192c468379"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53e3da9d-301c-439b-8ce3-5ff0ec6f6891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa2af7c1-0dac-40ac-8b0c-ccfaea04bd97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71a53b3f-f30e-447e-a505-0552e1d5df13",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa44f760-425f-4916-a44c-07d103ef0362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36253a33-a26a-4915-bbe9-419660defb47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "105c2de9-c845-44ea-8234-3cfb0f49c0a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3f4bda6-d7cf-473c-b1ca-6a2cecdac774"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9462ca9a-68ed-4774-83b4-a838b7e6e82f",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46cf7bca-4fd1-4a03-969c-57b003b86fc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2434513b-db8a-40a1-87ac-f84821b3687e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f76047d5-d011-4a1f-8418-cdac8f9b1401",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dab10c36-6fcb-4dad-a962-db996d07e031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dba5d5ea-7793-4f07-a247-24dbd46fc3e5",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ac2c787-84ab-4798-a9e7-2c31b15737e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "912f3755-423d-4223-ba02-5460b0972e44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5967e73b-8b10-4ccc-90ed-ee4455cc6032",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "981a5ca7-94d1-4baf-98bd-e1e2986d0412"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49bf93be-7cee-460a-9943-8149c6240993",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "678640cc-3aae-4875-b268-88dfd68e0b93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc725d95-006d-4cac-9e4b-dcf747152130"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f3294dd-b12f-4eec-83b4-38cfcbb3ce8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "20c40fe0-c975-4b4c-8a13-9f1babb05f60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "339ea84b-1754-4fff-bca3-f20f9f9893fa",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bca13649-2cf4-4995-ba5a-80b3deb871e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0a3dcdb-8476-4742-9035-7af4ff49de66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "714c22c9-1fc3-486a-a849-5da0dbdd2b23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a2b853ac-c6a5-401b-9e50-5ba67e80a616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa908436-db44-4e92-9348-d02b0c4efb5c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57ec2b09-c037-44fa-9579-07f95640b422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e4c7b76-5d83-4486-bfac-cff3b2dd18f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e59d038-fc44-4041-9a40-8b5dec2e5d67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "83d709d5-5037-44e0-9ffc-be67c4552400"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91a7ee9d-53db-448b-a4e5-38c26e16bbbb",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a87e102f-7377-434f-9264-1f96dc6a1a4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ecd22a8-2dfd-481c-9207-7a12dceb8c55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c4c227a-63cf-458c-a0a5-c23fbdc8b9a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "251bfbb2-6f50-4194-a3b3-fc7d193a03a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2ebf26a-4eaa-4ef6-bb8b-7211447752fd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cf46a18-e5aa-456d-999f-b7c41111583d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83cc75f6-3292-4ac0-ad85-0dbfe2c4ae69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eafcba34-1180-4ee6-854d-25a8223cec57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d2acc304-3dbe-4418-be34-849d5e0acd65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddaa919f-7fde-488d-8afb-d42e765129f9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ef32d68-c86a-466b-8ac3-d9892bb5634c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f2a051d-2dbc-4dc0-924c-69d480b9edfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "114694f2-7ce3-418a-9dd4-cb51de54f618",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "30bf9b48-4c69-4fe3-bcb0-66f8a46c113e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2247aad0-0643-4e33-a7c4-457bf486bca0",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ab89d19-393b-419f-a108-21ef7c3b7aec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20e6872b-6233-4cdb-b539-d8b300537171"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa5bada4-29a9-4701-8765-f09bed804ed1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "452ceafb-a27c-4b0d-a0a6-761840b521e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f5c64d7-2f7f-4f10-bc7f-b37b312ae850",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d934d4c1-78c3-4720-bcec-c4554db7fd48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef0da747-2edd-4b28-bcde-252a1038ee23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba9971ee-4859-4130-b092-e845ea7051d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "80ebdb77-4397-40b8-a8b9-73413047b89c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdf369f8-5acd-40ce-ac91-769a473e80c2",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fb01610-0220-45ca-a9c2-d8c6aaddad01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78816841-8d62-4020-91cc-caa955e8e414"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7df7db2-b582-4a26-9f0b-6704a73895db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a65fd35a-bb28-49e3-926d-6099e3b67da9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76d83880-d625-40a2-9a5d-9ada9eea411e",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0f89f4f-f49c-418f-8ff4-dc10fb6305a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85564c10-fca9-4f71-9e4a-2df43b5ae831"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8ffaf0b-af3e-4ca3-9e62-c21fa944b542",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ce8a2eb-a158-4416-b588-e0c8b9d6930b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49880375-c88e-4311-9b42-c521315a24cd",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2188e123-d7ca-4d7b-aba2-078df295dc18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b2f6d71-f94f-4c36-ad9b-67582ca9dd6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63fd9fbf-16cb-4625-932e-0b43c72d846a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "317c82db-726d-495d-9260-2da29e6be738"
                        }
                      }
                    ]
                  },
                  {
                    "id": "463a0b7f-1e5b-4f1b-8631-10ceb259b6ac",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c2bac50-040c-4940-97fa-5c164908fa80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bb5d6c5-9c98-4746-8b93-2938e9e68ab5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d99f24db-3510-4d00-861f-96afc959def7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c5f1c962-eaae-48ba-801d-7b056aa81bef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1e46e89-ec95-41d4-bef6-5d517d3740e2",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "913881a0-1e19-452e-8916-6e7e7863daa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8237f951-63ce-4e5d-9225-fd64e827a940"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3db8ffc4-8bdc-4c23-8029-a41988c7a555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3034dcf2-0141-40c2-89e7-18a84b4a7532"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95f4fa7b-7fc2-44a6-9c54-e8fe30bc00c6",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "474bf4da-79fb-443b-bee1-fd3556aedc67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdf50969-5091-4f75-89c6-4529c410eadd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad979b76-c2e2-4e5b-9c88-de860f8ea1e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a099f4af-419d-491c-9d20-560e169f3a81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6756dd5e-8ea3-4c53-990a-9b3a48ab1de8",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "398a0ed1-3c03-4455-b6c8-2efd3aa40393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d91092e-871a-4a5a-a23b-cdc9a2d1b06b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6c86853-4ac0-4632-bb41-d97a3b8c6cba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "87e54b4b-8fdb-447f-9a85-f3f51fbd9821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "424f3dd1-7ad4-49d0-a8ac-6316d375b70a",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d26f243a-a1d3-4af3-85ba-ca78f3f96680",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3c9cd4e-9c35-43b9-8926-62f546f66b1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7469264f-a4f4-4358-9045-07673303934b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "551ebeba-210c-43da-bd17-aed175df8ca6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "708738d0-fefb-4b18-9c81-011d3b85f32a",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d54be752-59a8-4adf-ad51-dabe90e4657d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89f80d91-465f-4ac4-baad-ea91f868d895"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0873fadb-82d3-4e82-8232-65aef1a9932e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "58a08bfb-cb82-4436-b3d4-6dcce8b118ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65b2edae-f149-43e5-82b4-bd4ded57c9b4",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42b953d3-dbb2-4104-8e67-01bfd8434e08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d22c408-4987-4fa2-9eb8-b6e66aefe701"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a6d73f9-1778-401e-a149-695afa0da0e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3c52a9c8-7cf5-4b06-b88f-79e707bf25b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e111b311-2506-4830-9568-26ce3a30a7e2",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02b96427-3661-4bcd-abb6-e7d1695ebd2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df7c8959-f0fb-401c-8eb9-f179a645414a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eda571cf-0683-4b49-9c6a-3d5d381dc9a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4d71f59d-03f7-4cd6-9c1d-e0621159a33d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58e20b6d-d481-43a8-8aeb-a991970fa468",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "351b35da-051b-4ddf-a731-710d44bef0c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "409180c9-890c-4ab4-acf3-ddd9586fa9d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c2fbdf2-f601-4b5c-b929-05ca634dc3c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "65006be1-363b-4d81-b8b9-faca407afc70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0101ccac-3a35-4521-85a9-6197c8c1b38a",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a0aa225-3dc3-4b83-8f3a-d25807bd2f74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60de2cf2-6f94-4af8-82df-02b0b9262902"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88048b39-11b9-4ef5-9c36-d319e1ca145f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2e11dd9-9e2d-45ac-91b9-b08888d7a4ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "739da6e4-fe2a-473a-b785-ac51c8be80f4",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19aa39b1-bc47-4d00-8d3f-0f397f68e2d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0661310-7687-41db-9a13-22d181c2973a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a76e047-fda5-4e7f-a66a-b3e6b4423086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae8c93f3-4d46-441c-ab08-55316dd5c839"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aa3eaed-fa14-43be-8019-baa101483ddd",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd5c5e32-4089-4a4b-8654-74cd13db1988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "118fc53b-3066-497b-9c8d-b7c9dd9b4363"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4340e96f-09ce-4a29-b0c7-4ac475bd7711",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "43be7045-66cf-4fb3-93e1-c8dfabae3c2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2409b44a-aeef-4764-b576-579618df49e3",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8741e08c-09b4-49ce-bc8b-ad2ccbf84d5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8de586d-f1fe-4503-9e3a-a46522a84de6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4093b03-7969-4421-96c5-c25c4e593145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c4e18464-d2e0-4209-ba20-1246b63b44b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f22c4127-f0a7-4d16-b876-f2292c9f8e18",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9ffb826-a86e-4c4e-b56b-76c167bcb431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91da7c13-0fef-46a1-9921-0f0e0bfab1d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1859270c-6b38-4ca2-a985-7dbd7d7533ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d8b54e0e-e119-44ff-bc76-dbc40372a49f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79227d05-43db-42e7-a356-07706eb0f805",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06e9d712-1fad-4a8c-9bdd-a7ddc40955fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc6ad839-a917-4043-832d-b9d9680f0ec6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b44be809-c86b-4d46-a45e-77b2739b7fc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c8f6864-b862-4c4d-8d0a-4a90b7d2b761"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86380a6c-4145-4766-a4d2-a3f18dd7df43",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17301a62-5cdb-41f0-94f9-783565a5ab05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36878785-8ded-4ee8-9c4c-94fcdb88df41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2044bf39-fadf-4888-ad5e-888830e1d8cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "35581de5-4c45-4202-8f48-d9795ff49791"
                        }
                      }
                    ]
                  },
                  {
                    "id": "655c0aa2-265b-42d7-aa4b-dcb9be8942c5",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "865a7e53-a990-432c-a4cc-f18f116d073a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db10304f-8a1a-4661-9fb2-452083c727d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd97dfa5-b01f-4517-a10e-ea26d537e692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "31b9098e-45ab-4c6f-9a14-18fa415ca6c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "772c3776-887a-4dec-90a2-bdc314571513",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "446a9453-c3d1-4707-8a1b-0bfcb59e941a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a300072f-96bf-4924-b61b-4d199c02a729"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9164afd9-f19a-441c-9fe6-fd32c5065f59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a00df58d-5efa-437b-a517-c7cdf76b5685"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c39ef439-1ce3-4173-ab00-bca6ddf09434",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e7f9419-0cf0-4cdd-a60c-7a04551fe216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17ca7869-8c1c-4647-b2a7-98387c920300"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2b52177-a646-4992-bec3-65d52f6f655b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "83b06d8c-b010-4397-886c-d514ad538618"
                        }
                      }
                    ]
                  },
                  {
                    "id": "285185ed-3517-402a-aa42-dc73128e2bed",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb17e1e6-5543-409a-a30b-5e092e5cbb56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cee7bcb6-50a6-4786-bc5e-f38a40eb5030"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e6e8c6c-6d2c-4826-a792-738acfb97356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c4eb60e3-d3c6-4909-b556-410ca17e0167"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91df52ed-aa0b-465b-a6ae-327e24f11596",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c625a40-ad41-4baa-a560-3159c5b410ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "345e8b85-08f6-4f58-9bbb-20c49cddbec1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1e7f0b4-ae5d-4956-9d30-759f545874d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "da7c3aa6-e41b-4b8d-9e97-d0a4766f7dc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb365924-3aa8-414f-9116-a09f659008dc",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b96e93f6-c7af-4f93-b995-c1ef73c558d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdd1ceb4-a3e7-44fb-9422-7fb276d4611c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1014f0f8-8a96-41d4-8088-1db01cd8bc6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "81fd02a8-a926-4270-ad7f-baba9d986785"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2bb3fad-8071-432d-9d90-b1e5c5578b2e",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a52c5a0-8f74-4fe5-8cce-546aa1a9cd8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7e03661-c35f-4a65-8ab0-bd22c21e5752"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a607a66-fb42-4405-aa54-5e6f127318b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "253451c5-b2c9-4e35-bfe1-5fb5a32e997f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d1578d3-5726-4b50-b10e-204dad9e00e9",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd1e0931-52c2-4bb3-a0e9-eb7f4f16d31f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a79f00d-98c6-4303-a3af-16dcb85482ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8309afa6-ff3b-4d3a-b555-e7a47cb9ad3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "55c486b8-8c54-4feb-9b60-bb7600da6803"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b78364f5-2e7e-46a0-9297-193141d1dfb7",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc6598c3-bfd7-470c-992a-282e55e21514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57312eff-2ad1-410d-b51b-95bbda2231ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "401033ab-9ee4-4b9f-a2ed-4a1540f11e48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c9faddfe-7c31-4e24-85e0-2331daf1a04d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4328418-a01a-4046-aaa5-9e6c31f8b039",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "056624d2-5115-40cf-9fab-d12badacb62d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "cf88b866-14bb-4bf3-8133-8c52882e6a3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16dc211a-a7ed-4f4c-9c8a-44a895daa57e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "590f8717-9560-4779-a85c-f8c862f22b61"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7d60ae1e-a2b3-483e-a90d-5b88a44095ad",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3ada2a74-c5b3-44b8-b918-b7cdcb662788",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9f4f0cd-d568-40f7-9c13-91966e847c17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "105cf7c0-b3ec-4be3-a92c-f6ca94f80094"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "676d3b89-ef53-489c-8411-92c357ed7997",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e06d6e0a-1163-4975-b206-a336c4c157c6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "03de7642-736a-4da2-9c7c-fff9c1234cff",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "241842ba-b6c5-4ba8-a743-689ab2aa0650"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4b315c91-ca30-43e3-a5c6-6e85c775788e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2b78326c-a7a1-472b-b909-4d5909916d7b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "55dca440-9200-4260-a73d-e68171254a23",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "21b0afa3-f1b5-483e-b71e-53e0c8e4d493"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "529038c0-da06-4cf1-be46-74073958e26c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2578eaa5-e4bf-45fc-aac0-3e9d591fa25d"
                }
              }
            ]
          },
          {
            "id": "0e1fbb7b-2fa5-4f20-b0de-2a8ec3ed4e88",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7dc372cd-9062-420a-9194-492965620abb",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bdc6554d-455e-4d61-90c4-92e19a7462a3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f56457de-25a5-413a-b803-f48c743ed45c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cf8d3c6e-2ddf-4b9d-9f79-b9852c80ccfb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f4a5834f-4a15-450d-b76c-fa5c82fc3d55"
                    }
                  }
                ]
              },
              {
                "id": "30ada5da-8bc6-44df-ac89-ac05936aba20",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d507b9e5-1c73-4b0b-b3e7-237ab281c18f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "df9acc80-f418-4918-9a60-9e3e7603fef8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "21ff03e5-75bf-4fd0-8960-8fabb25b8fa4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "90230332-6429-4f97-8e2d-690021d7391a"
                    }
                  }
                ]
              },
              {
                "id": "465f9651-ec56-4a83-bf55-6f73645c2d3e",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "874f3ef8-a29a-4cb2-9075-3e004151267e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cb0648bb-ec48-4669-8562-ac297bb71157"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ba4c928f-ab58-433c-b84a-20d8c90ebb88",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fc9117ea-450a-4008-834c-a744ae7fb120"
                    }
                  }
                ]
              },
              {
                "id": "21a42099-bf47-48c9-a0e5-08506be23665",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e5d5e5e1-2f98-47fa-9c65-673b0f75a528",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "efe96eb2-c45c-4f8a-b9b3-b6b2d7dac7af"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "78850f31-eb48-4f19-947a-8f81d71cfb1d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "199a0f22-a94a-4179-9dcc-9e32bfdfc142"
                    }
                  }
                ]
              },
              {
                "id": "aff6089a-046b-4217-a02e-2817eab58fe5",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2eb8c13e-ea26-4140-9f32-8ee8d99b90d1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "17c2e7a2-66b2-44a7-b99f-6dba9a7f1526"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2de99fd9-e5e6-4d40-99c1-5779e2401ee4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "9e813905-d2b2-4b57-8171-87763275118b"
                    }
                  }
                ]
              },
              {
                "id": "d72cd67f-83a8-4352-acbd-82e7ff81525e",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fa93db80-7738-4224-8506-2c627f7a3012",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ae6ec3ca-0d7e-470c-98a0-37d2ce118976"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "78b7d64f-9b58-49d6-94dd-ea6275bf84fa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6fc468b2-a223-4a64-9915-8f4e6504247b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "00bbb087-9699-4d17-8951-369da9bccf53",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a8dca501-91e5-40f6-964a-fa9331ff7448"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "763742f6-db54-43d1-9c06-1ca836e7df2a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "afc8c52b-af0c-46c3-8113-0506641bdfb6"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "47e1150a-a749-41c9-8748-ce00e99ea441",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "4987e470-baa7-41e9-a27b-a025c271790a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ed69b935-2c78-4e16-b88b-f08ceb69cd8d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "84c9cf82-d515-4f50-ab3a-7f9bf3048f20"
            }
          }
        ]
      },
      {
        "id": "f4aa45cc-446a-43bb-9263-02abdccec41c",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "cdd1e29e-30b2-4b75-aed7-53237f2b92af",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c5383d38-91a5-4755-a3c8-41c397f9c3a3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "51b0bbac-2604-48b1-bc4f-c936c7657dd2",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2f34162-8cc1-4be7-8ffd-a1a89be16ae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5ce0418-7778-4dd7-ab31-5ed3a54c4df9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5a7832d-23b0-4bd4-a264-18323a21a540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "7abb51d8-821d-4b7e-a294-d4e926cee041"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcb69983-f47e-4bd5-9bb8-05d849779f30",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16bf80c8-45f8-457d-ba9b-407b908faf29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e8ccf2d-c22a-45a2-9a55-d4d6fd8f0255"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82bedb7b-6098-4b50-8cc3-ac439d9ed9d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd1a7ca0-f505-47df-9061-bcab48756ddf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "439b8a8b-a63a-4455-9db1-f7df6749feb6",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d2518c3-cbc3-44f1-b34e-4d3ec2de5ad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30cba0f2-5387-46ea-ab19-8b20c640d41f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2be4be6a-4eeb-4e18-a238-deb5133e743e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1481dd56-a510-4cb3-adb5-1aa8654c8498"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a83225a-62a9-496c-9886-fed920207f90",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5251f663-2294-42f3-8603-da3d9a313fe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4a1cbdd-436e-4b52-a2e0-1aa9cea5e3ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2250710e-9871-404e-979c-7730d54a075e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae372525-6786-4815-beae-c6d4265b7197"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4a0356d-3851-4ebb-8f14-b572439cdb42",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bf5be28-c5da-4c71-8084-7f366fcb7739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91cc063f-a6cc-45d9-8a3e-695947e114d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50918634-d34a-4226-a2f0-98fc1db34b5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf6aa1ea-9e19-467c-99e6-bc28e9114826"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8671737-566e-4350-b7a3-8917e5204d20",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec8d1c67-016f-4086-935e-b0f8f4dbc81e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43696f93-4394-48d8-936e-ba1cffc408e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa41d08f-f360-4447-8d62-e4711bf1a49a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a2326d6-efa5-46bd-9c4b-f2930dd937f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfe2cae6-fe26-4057-8bf5-0d7a6d62bcbf",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d487b1f7-0a02-4332-8ba9-1d9f360bc635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9407662d-4dfe-4cc4-82bc-51dcf04e6d30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a5bbb15-63f8-4262-923b-0c340f74413b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "eaf8925e-0b2a-4ace-b299-1f0fee86c268"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60f19974-9a60-4467-82cc-72ab545ea4ec",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b11be55-f4f7-4568-aa7b-d6b93425e350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "212500b7-9c59-4a38-b25e-00d3f3bdcbe1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d01abc2-2daf-4024-9a57-bb32a96f1ab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5ba1957-18ad-4636-89bd-aa3f401a2bb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ceba122-8ae8-4af5-bfaf-45859bea9290",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcd1cede-ca74-4185-a449-0e6d9743bdeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "009cc1df-d4b2-414d-9df4-0c71f5b1f164"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c9fe33b-1be9-4356-a7fd-23bdb6d365d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f59bcf4b-fa61-4e34-b983-f1bfd7ab89d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f87d45da-a074-4c42-9612-56ad7e004908",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1ce1699-6474-43a8-8948-2e505649ceef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48bed9c3-5934-4201-a077-21ffe89ecc07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "142fb843-29cc-4b79-b79e-129f2f2a5f5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd335295-7d59-4720-ba30-ce571e4cd26b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57f2044b-fc69-4153-b952-5578e6cd6bcf",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b9f7614-7afa-4874-93b8-a8dc06e6f8bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec1e820f-97df-4517-abb6-c43dd8867336"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "709bb378-d698-4db0-a947-26e266d6422d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "5daa285b-a990-47bd-a33b-41d44fa399d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b743856-9a9e-4dc0-8da1-f3008f9934c9",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f89f9ac5-e462-4aa0-87b4-15ef8da7d6b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acdab292-969b-4af9-b80a-6b0c0f42a075"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbd9e02a-4877-441a-99ea-368f623bc1e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "66a5f0a9-756a-4ed5-85ba-8561052cd994"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d69df00-192f-4f14-b034-1fcb4ec7f5e9",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d8a5fed-bc4e-4c95-b713-3de456e4613e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88f7ef68-5682-4237-a5b0-52a50be494b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7ec71fc-e31a-404c-83b7-bc68feaaf7da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "40c64181-edb4-4786-91e2-dd605af27eba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b051590-bacd-42c3-8e99-597b98c789cd",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd09d718-fea0-4951-8507-1a31f82f84db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2c880ad-3916-49e5-99a0-e2b0a9216994"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c139117-bf75-4afe-bfc5-778b4bf5a4c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c79562d-7dad-4dc9-acec-878b4d5b5746"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b5a1aa0-36a5-4ef7-b8a5-6864d1feb492",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fac99f85-cc41-49fb-867f-d4ec447b1628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43914243-2288-4346-861b-d7bf8116930d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9237f084-be77-4fce-8ef7-cf480460c6fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "63e426a2-2899-4b85-b29a-35c47ed3cf57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebb8203f-3664-4044-b624-f3f4d43c1801",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d01e119b-6c41-487f-9937-369ff3c57655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b11d67a3-e70e-48cf-9e46-d68490b6015e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4704582-bf69-4d97-98b0-73485d099180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "f54facb5-c86c-4c40-a975-6fda57505022"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e87f335a-84f3-42f5-b86b-2bd92b90b6ba",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8200ef6-a795-45a6-8ab6-b807d1c164e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e0c18f7-c01b-4d88-90b1-420f73f2b10b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fd96ad9-d1a1-4101-a33a-524d517a7a1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "df828fe5-ec16-489d-a958-ecd3144d6b07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3537481e-cf23-4693-bfed-56970011aace",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "410eee5c-27e8-42b0-a0ba-96edc505f540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "919ae796-21e7-4be5-a069-28f13ce5a479"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9f29c74-265b-44a5-9172-94af6d883f69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c2393a4-15ba-4a44-aa22-1793a5d59116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3432f622-c5f0-4221-b775-3e09c4208d52",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36693b08-f17a-4166-902a-5956fee8af4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae80da1a-5347-428b-b6ed-5b812e9a1e5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6af72622-1132-4dea-af78-0173944dec04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "af29462f-3c3b-4979-825e-72f26165d43d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b597a0e-686d-427b-a3c1-4f6cfc0e14ef",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4286aa0-6982-4133-8c55-4c7201ab1548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4fbc605-32cf-4bc5-ba1e-149073122a81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44cb5163-42e7-4340-b66d-6c92f34ea253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5df4419-4a91-4103-9686-6327f9c1dc7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb3d1219-cdc1-4a3b-93e9-888bcb2504a0",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c98c8b6b-34de-4102-8125-3bec7ba66008",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf6668ed-5bda-4b2c-af81-c2f5b1b2f636"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "997b6ecf-64c5-437b-ad14-8bc30f1219c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2ae3730-82d3-4f83-8eba-3ac06e488d59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e62d673-b660-4d4d-b298-bddbd706b3c4",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a4d01c4-166e-4096-9cc6-f2d391863d2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bd6cf6a-0ce4-475a-981e-b683357ecf7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c63b6bc2-db2e-4714-ad57-0dd7673de92c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "96d417d8-c271-48c2-8e7c-253079c45bb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f14b6043-d247-4dbf-b721-2d43f42c138c",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43d4a860-0a4b-4cfa-8bd2-62cd136f0999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37c142a3-16d3-496e-aaa3-5a1daa1497e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68b7c52b-6d2d-49c2-a294-5280e098adbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "96dabb80-f60f-4b86-ac6f-3b9798c7a3e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c44a340e-ecbc-4836-a35f-4afe59b46958",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd582665-9a60-4f52-932e-7b079e7eed48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59a28898-6a1a-4b46-a2d8-b27dd46507f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d98a0b7-9fb0-4148-9e4f-5c767d02a07c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "046b72eb-79c8-4ecb-9295-a49628e81c8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79f886ef-1a85-44c3-b5e3-eb47eeac238a",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8acd4e0b-9fbd-406a-bd3c-1b7d0ce0bc6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9872b93d-625f-4944-902c-162e4c830f3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dba8500a-88ef-4186-8fd8-b794baadb74f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "13c1c44d-8b92-4fd6-a599-0d08e7b40496"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9943a0bd-7ab1-49ba-ba75-a48e69f606dc",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59f14568-e5a2-45cd-860a-4fe147a158c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "667d64d3-33cc-48da-998b-a8248c911473"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c78dfa79-0f0a-4206-92dc-74669a2b46c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "338993ae-5637-4ccf-b83a-3c01eaccea75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "402abdb5-1fe9-48c8-9a38-c4765077f324",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d43a1ac2-b7c6-4065-a55c-70db1b6d107e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abe0d360-d021-41e5-af53-0e86c7362666"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8efb0809-9951-4da9-8f1d-796605238eb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "26ab7980-3aa2-4704-a261-fb9840a329c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1abbaba1-3fbe-4c82-b107-f742e0c660a0",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4715a88-bdaa-49c3-8ac3-84a40ecb6d4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "340bf428-5de1-4a6c-9484-e51b41d8065b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33b97164-6aa6-4a4c-af2c-64dc08d3a7e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd7cf598-60f6-4cbe-8c42-a20e51339d88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97baaaf9-d976-4be8-8dcb-e14658a40338",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6ef0072-9d62-4f5f-a08e-a7b946efe739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a02395b-6d4f-4188-be18-5aff608d56a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d25052a-c02d-45fa-badb-f1adc107871e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3ee79ef-b3c0-429e-b212-19348206edd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d3a066e-a003-43e6-b8fe-ea9219c36f21",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c19ed14-23cd-4049-9955-4cb7b432c1d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dfd5ad9-31ec-4867-8fb6-b2d51efee869"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5399af2e-3b33-405e-a1b7-c6a9431323f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b759ae43-88a6-4953-ba33-5fb0aab13fd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eabe678f-5c4e-4733-a058-a778abc38339",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70220672-9d85-4197-b088-4c588d354f07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b5a086b-9716-4277-b0fd-ce0c3c7ad29a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f043bdea-32c3-496d-bd40-2ba46ede075d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d285aef-c71d-4494-b56e-c38db700a63b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf0b81c7-c2e8-493a-9372-4e76cc1ba67c",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7930410-e242-4297-8517-3543330617cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "342cdc27-013e-4ed7-ae40-2a0f2e27f202"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "599363ae-21de-4406-9c0a-6441ce6e81bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8e6e4e8-836f-4d12-963b-14f17cf27e77"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a2886114-4b40-441e-9ccd-288dac5a2607",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5e535768-58f0-4789-8f54-ce86cb1be80f",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bd01e48-cec5-4140-bca3-24c696d2a392",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "3c551e07-b487-4e90-a6ef-aad4a4faae99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6e25b90-61ce-432b-b4d2-9040cdd53261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8329674b-5e0c-4ed7-8a74-7a79bd333b48"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dcafe1b4-d6d3-4d5d-bfd9-8fffd7decfa6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "92c79c20-dd4c-4c16-942f-75a719599605"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1eeb57c6-edd1-41a4-a7d5-e5c2993afca0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6bf50bc5-8660-48dc-a86f-ec8a841b9f48"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "47e69888-6796-4d32-91b8-14c36f117fd3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "fd43863b-4ad3-4807-b85e-938e9ec0b967"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9f20b638-1975-41f0-a280-660524a2c85b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "62983366-44f8-46a8-81e9-ba22532294e6"
            }
          }
        ]
      },
      {
        "id": "c09c9e62-3783-4afb-a21b-64560ac128c0",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "ace945cf-491a-4656-9ecb-066afc6a66b2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ee5d1c8d-06c6-43df-9e05-cf51df052688",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "13d95dce-82ca-408a-a632-ab15efbed036",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "538ec004-7bf5-4472-80dd-14d95a520fdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f74c22c-edc8-4402-bedc-6e77218fc52f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fedb9d7-1ab8-45cb-aa27-08d58e7fe89d",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fda2e2fe-5c68-4fb5-bff8-ac4e44cd90ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4824b188-5a74-4041-a640-2ec5bc651c73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d63af27c-6e16-48dc-8a0c-a8dd14ce32db",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d783d24-2d19-44f9-8bc3-aeddd848912d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d2fa6c1-2fbd-4b28-a04b-ec6421566c86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2691b590-5934-43f2-80af-af199897641e",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d98d4864-e0bf-4fe4-91c8-09bf6c78d1a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e550ea6-67ab-451c-9834-78dd99ca1f79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68c451a8-9855-4759-9f09-ea1cb9f1e55c",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39772133-d024-4b0f-a846-d9a47ea82d90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f383ef7-8fc5-4b0d-84b0-f1a5567b4942"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f78a0286-ee14-4fe3-9b68-e685e5900dcf",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62653ac4-e528-458d-868c-c8ded6540220",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ff4c027-c8dd-407b-9e13-04eb2839058f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6d4a13c-fddc-4c8d-81ac-c54f01adc5d1",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea763cd0-23b7-4da5-b303-a5f4b85b860e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "321728f3-6698-4d2c-94fe-b023d951ebba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a84574f2-c4d1-4819-a3ef-bbd585e4adf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34a29d77-ca24-4ec9-8328-e3c0543dd884"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96bb48c2-7c55-4c12-8e4b-c9d929d3a9f9",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40b4f242-e0da-49a7-ae67-f060553643cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d174f1cb-d047-4709-8e6a-f6cbe4ed427b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f44d540-cf13-43e8-a1a0-9ff8f0f22813",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a677b5dc-5e38-4ac7-bb00-3ef31b8a3016"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1fccc67-2292-4c23-9d09-75d65d3e774d",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52ab2202-9cc1-4ec6-a020-ddee9102be96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c895b6fc-71d9-4e93-9721-a49a5dcfa414"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbd717a4-ba00-4771-8f85-b16880f32970",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1ec41cc-3944-4634-94a0-3c4eda356ea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2186f38-97d9-495c-a53c-50329f0d4ad2",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23f015cc-9e41-4a52-baf7-db45c25eea92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4f7292c-aed8-424f-be58-c942f245924f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d11c5ae-71e6-46b4-aa18-48a7c1742a26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05bde4ea-8542-4b28-8e54-af2f211f7da7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d97a7c77-bd78-4569-ac50-e78b5dfe8a23",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7548f2ac-0137-449c-9389-40f41307980e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34d99bed-3cc7-4306-b12c-d4d1e25becf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e89283ed-a16d-4c84-a3b9-4c04e0c1a3b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b33f8873-afde-496a-b0f5-b49dc22a5875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cd0764c-698d-4239-8b85-2685b6d973b6",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d40b85f6-fca1-4e34-a63a-e41d34c82f81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6562792-7c14-4693-9e1d-11aced1225c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16cd4904-a670-481d-973a-7845874a1877",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bec898ef-9a67-448c-8467-2d4a2e4646cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "315e3dc7-8e54-4a83-a310-6e45685def48",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dac6995-d3a9-4d48-91fc-86ae7dab4f61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d39a27c1-bb27-424f-bb4a-b1d52e2a6a12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a001b137-2620-436b-b8c9-29332359bf19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04d67c24-5946-4280-aee2-0257449b191c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c326ffa1-d839-4009-8b40-61e8eb0995c6",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a3396c3-65e7-4832-8849-2fe485128c58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ab202e8-69d6-4e6c-897f-06042764252c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4ea152b-23a9-400f-837e-6a0ddb1c9fbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "734fb9d4-5749-4db4-a99b-34a69d21724c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c280a897-7af8-490a-a259-11b9551eed7e",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb65a253-99b8-43b5-a76a-97a5c665e4af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d29625ee-5e4b-41b2-b571-9c7a2885bad1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b7400e9-2f9b-4337-aa17-1bf1fc5d7d28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a4d2f50-739d-41b3-b8c6-3a405864437b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95f4e5c1-3793-4f72-ba87-9d105412f1f3",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09c05a2a-629b-4793-9b84-3d1e4cd0f7da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f31e20d9-3084-438d-9847-671d95054306"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32226c08-d519-45e0-9ce4-997610a89f5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6486bf82-f9bc-4a03-92de-3691d5efbbc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b917e191-588b-44ae-94eb-f8144543031d",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e16ee06-4cd0-4c04-b89d-9580b92f37a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bde3a20f-597a-48f2-aad9-107212698a94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a1a023b-bfa2-45c3-bf5b-316970317268",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae4757e9-9797-4d18-adaf-d42ba9a46162"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fce66ca-494e-4842-8f33-c338d6646e1e",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4abf71eb-e06a-40c3-a6b0-bd0fd949750d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f7e0b7b-6e11-4fcb-90db-6f6f26555c5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "914cdee5-02e7-4262-9d40-bc38b6031c9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "882b91dd-b9af-4910-82c2-dd245ab50455"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83abd3c8-a726-4c72-9f99-1c97af9aa3c9",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae9600d5-f435-416a-94ef-8fb008db7b1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7e918e7-7d15-4f6b-ba15-56b8aeff006f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a20da772-980a-4dee-ba95-a1d4ae943d6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "133eb681-9494-40e3-9cda-59b7452b9572"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd07cd92-4566-449e-964a-1a2bf22490bc",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64e08cc5-7437-4d9e-9d1a-247d0932a81c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efda3226-652d-42b0-84ca-e045f5010ab8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96ce3c4c-6fc7-49f4-b787-eecbd3cd5d63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "807a869a-9ee7-493b-b63a-490604634c61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eed389fa-5820-4bdf-b3f5-17eaec99ae0b",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef20a42a-e8fe-4f7d-a9c3-d751a3585232",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd8ef120-af85-4230-adaf-b99afce6d4d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "677e0143-2840-4997-8091-c7655d98e48a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "483e981f-f035-4256-a0a2-36e0747c22be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46e6c470-3c41-4bfe-b1c3-87a2ba42d11d",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7b1e8e8-e907-4e1b-ae25-08710d5e38ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39a03f31-7433-4344-8b45-f79d2b0e51bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "036f284c-2868-4959-9c40-0348281d59c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6488345-b57f-49e0-8964-1fa6693479af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af0063c4-4228-4e87-bc8f-fa4d04d7b3dc",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33e887fe-ee7d-4ee2-bfbd-3a543727bb4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "230a233a-0633-4f2d-ba98-dd7c2cf5e410"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ab52c12-68bf-4841-81f2-e190c135189c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b36a0388-84b3-4674-bb94-14e0714ccbe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3df5b162-7c91-4a1c-a800-42e5ebd09de1",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75b70105-e475-40bd-b350-cc5dcd7321b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93c45ab4-3a8e-4d58-9dcf-684d3406a120"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "106feb93-ff28-4d5e-9490-52fc6f5d2d1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21fc89b3-9fb9-4b19-9b55-7ac8d731bbeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72a8fcfe-0efc-4aef-8dc6-32e7bca26a68",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3809e8a-a3cb-487e-9dbf-11077cd5a1ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b76da4a7-51cb-458d-bdf0-56da5db917c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c98d960b-e116-4491-ba71-f8a75e302f91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ba64b53-8694-4c0e-aa9f-9944a5b84ebf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0be1fe0f-935e-4648-aba0-4eb2590606cf",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1546d3b8-c79b-4d1c-ada4-8af9119c2e20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d9c5c00-a076-41b4-823f-00d5265a11c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42adf813-1017-4f87-ae93-b745cd20f669",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e57a22cb-e815-49a4-b688-ee05638f86fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fd43ad4-8e1f-4d3f-bd65-2582c74ff561",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90b4fbbf-ad7f-46c9-8482-28768818659e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad54806f-b3aa-44f7-82c7-4d0f1f227acd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4362cba0-883f-4080-9915-ac8bf947cb51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a2af163-2b06-4e72-bbe8-4d3812e0e0ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "472ca677-fd30-450f-81f8-eab2aefcb4f3",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5cbabb2-454a-4532-b1e4-5099fdb320aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "772bdfb2-ab46-493b-839c-b3af6299a1ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94168dfc-f04c-4a2e-8095-028caf5ccd09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfddae21-a360-4eba-bb1e-02ba8badac05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "573536d5-e29a-4f79-bfc2-05b57326eafb",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e679c39-93ac-41de-bcc1-63eab0ba0989",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f775b89b-33d7-4aa7-a386-928a1e562d21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1bd0ff2-92ce-4889-8361-44a37497f4ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0ebaeab-b06f-4cce-be0e-d358b26eabd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5540c79c-12c1-493e-9a69-c9b622bdb3d9",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed141bdd-67f2-41b5-aa2f-2ec1a8b4e449",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d5c33c4-6b48-4082-8e30-144906fbea46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1956080f-91eb-4aa2-a27a-6fdc9e989b04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e30f15c2-d81f-4f42-a7af-0f329599e396"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a232953-5ef0-418c-9dc4-bdf29266ed00",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5d91443-2e7a-42ea-a323-85230ebb6f5f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31bb4790-71ad-4d98-a171-015a1bf5e220"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "743ebe48-c2e0-43b1-b75d-122e34200906",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bedf4e17-7298-4c59-95b4-ac1c42c6a5c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dc289a4-535c-40bf-ba4c-6772e39ad694",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e632231-2c8f-49d6-b65a-3d7fa4ec36a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45a97e39-90f8-4393-8711-371071dce5b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "981579e6-d3a6-4285-843f-81ddba0195f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e26682c-06f4-43ba-8dfc-8081f6b82f31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e202bc86-a58d-49d8-a053-4a9c5fb7ab80",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85876b39-0aa0-4d1d-a97b-7a4fa4a021c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6864988-ea1d-4264-866b-1ee85f119809"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a220793-5927-4704-adc4-58e8f8091832",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6f5f929-5990-4e00-a3e5-ca0aa1a58f0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16bf2ea8-af42-426c-bbf4-7c0b7b5d557a",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e85a9f67-4d47-4062-b38a-e36e695a78bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "677c3164-b3a9-4869-8409-b002c86ae548"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5712ff36-662e-4e74-af6c-505e22105750",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e615261-4498-4c63-a6c0-17afde8503ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2c6ed03-264f-482b-89ab-d6a8a817fad8",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "088e3d59-5d64-401a-b63c-d611a3d853cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d22108c-09bf-4d34-b11f-ed3c1ab4a771"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7c799bd-b71d-4b0d-a3ab-fca426d9feb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01483791-b591-454d-8c2d-f3694a330810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a998e1ba-0bed-462f-8ccb-ea29e48facc2",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3c4df88-8a28-490f-b9ff-34ab0b163d12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c592715a-df8a-49e2-adce-6870b839aeb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19c4b25c-fccb-4877-bf93-a835250cab13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc1e51b6-53f7-4180-b594-56d76e893c0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72b4cecc-ca0f-4d8e-97cd-0f609c276fb6",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bee0a76-3eb2-430a-8883-ae0fe879c8ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efb7fb0e-6cd7-4bfd-825d-9464f9317205"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bd46a67-1fa8-43db-bb05-8eeff2dba3d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3d52cf6-a58b-4f84-985d-1da59b7b8cac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8d157d1-c87e-428e-97e1-de4080df43e4",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d72f9c3e-a620-4201-8754-14ed9f05cddf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fa0f940-9fb1-41a3-912e-019e709296b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98d8273e-8239-4600-9d01-f2192ba0d381",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c9280f5-8c69-4d5c-b743-e82b94058335"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77f6e7ae-8a87-4615-b388-6da3b083b20a",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c307e1f8-7c65-41a0-a18c-02adf194ee84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a518063-80df-471f-bc32-a3a91083e3bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5178b316-318b-442f-925f-15d17920cf58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac00bf7c-0bfc-46d8-8ba1-31537b6103fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aa8c4ed-2e1c-48fa-bd38-9a0b78ef6197",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57d94f37-7f25-45c6-9172-23da4d8c95d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a43ec9d1-48de-4e23-9c59-4bbf8c8370a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44ad2dbb-047e-43ab-98fc-517cfdd32e4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10db0f52-1bc2-4abe-9399-d67d70e5fef9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c52347c2-8b27-41b7-8bdb-11ff84354fc9",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1142efb5-be33-4197-bcfe-d084bf747192",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30394e92-3c3c-4de1-beaa-30af4699dbc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2783b72-73a2-40d9-a4ad-83e8b6f3d3f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8fb9854-c0a3-4405-b77a-b68a2cc312ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d081f4c-40ea-4ba3-91e2-b4221e5b0da6",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b339fc0-891c-40e7-9470-014a9b8be004",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a76a3c3-d730-4732-84f3-b8b6b20fee35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abfe6733-d3a3-47ca-a009-4148c8541ea8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "848cfbde-df6d-4516-a432-9e1c563eade8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edd37121-a189-4266-a0e8-0da1a36e0685",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a2cb452-edd0-4441-8887-1274418dab42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c53c85e-09ec-422c-8af4-8d2092ba056b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e442924-03b7-4935-ac7c-12530cf00de0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c3efdae-212e-4113-9bde-2d1cc912ef03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71fbe5ef-531f-4502-a66d-a4ae5fa6b674",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87acb29c-2cae-40c3-82ef-4d01af806828",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4a3a7f2-c3a6-4a63-91e7-61026bf627c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6009fae4-a03a-4c9f-b463-8e4f2ac5fef0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f6f6719-e457-4927-a41f-7d4fe67ae1f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84435159-de16-4d60-b991-a8b096b05935",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b601fabf-feaf-4d8b-aac0-5b6cdeddec1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23ce9429-63f4-416e-9052-c3bd8e447d20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56cb769e-4d29-4638-a5e7-6afcf2dba53b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51d23eff-2ece-47da-b6b0-9f56c82223d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07f3f240-cdb7-46de-b209-dfd989105a48",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00a8a72c-3374-4045-9c73-ad87a48ffcc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f66aa0f-e30e-44d1-816a-0403078617df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffff9f66-6c29-4e3a-b253-beaecf052e9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf05addc-6af6-4945-8be6-8668c6ce2d98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1200742-f682-46c5-bc5b-316cdf23af4e",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7bf058e-15cf-4d56-9f57-d23425279d26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8433bed-2db1-4a1e-91f4-1aa4fae40030"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a13dbeb8-a8e3-4c00-86f0-8f2bef396b70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b92daac3-47aa-4f7c-8831-cee1fc211373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e176ecac-8e2f-4538-acc3-a6f89b9718cd",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d59a4172-bb8e-429e-b048-9c0133c4c861",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3d4e483-c877-43c9-950c-0b4cfb53ad53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c66ccaa-dec8-4833-9347-3ab3b4c1f7fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cedc123b-20ba-4685-8187-f9353986f63e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82f3a17c-075d-41a5-851a-ea03d6e4c5b2",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e648569-00f1-4b57-9595-3891747c56d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fbb6b5d-e9c1-49bc-b610-78f2bf139971"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05c0c241-611e-4bd9-99ff-ac155ea73ff8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7b4b465-f517-4688-a8de-2fee731d2739"
                        }
                      }
                    ]
                  },
                  {
                    "id": "084a2c2b-a13b-480f-b0b9-9ff76cce27f0",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47f297c1-e031-4199-acaa-b1224c2f47a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e6f5d78-d2bd-4433-814e-8c98745246b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e0bb77e-85f9-4658-a097-25906f782d4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d861502-6c3a-46c2-a51d-e55bddf74d3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8af1fa3e-4eb9-4ef0-8852-3d87e69c0a45",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35879862-c6fe-4a31-9534-f4b310f15465",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ab3c303-378f-4c4e-bf6e-3ff75c15badd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b288452-3519-4857-bb90-299721538a17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f3e0704-fe3d-4779-b62c-d8121789be73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fcf5bde-5304-467e-9c97-3a8eeeb81fac",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5b911cc-af60-41a8-9fee-1e13569c233c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ece26014-1614-4f25-963e-9eaac6901557"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5230b0f1-3a3b-4a96-abfb-fc0c62a1c8fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2ad11ff-1202-43e5-90de-a57f7707a0d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d8b02eb-bfd4-4482-a891-f5f4fe711fc6",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10d2d252-9980-4ab5-b2db-5270c9195d03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67270250-3b38-463d-886c-8cc65d0dccee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c51aa270-6cdf-445d-b61e-82dc7281d55b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbba92f7-3347-49bc-a54d-eade071a2b9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "508c83c5-4c36-4c03-a637-0051c00e5657",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc4d4791-b3f8-49a7-be27-c92abecde4a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84017343-304b-4a2a-8456-056da6797a8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c79af089-0ab1-41e3-89a1-7c81f0ac688e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "234a79cc-4119-4992-b5bd-995d3cbe9d71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d7565bd-a9da-4315-a131-e03e45d52ebd",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69b076a5-bcc5-49cb-b966-230648aa71a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "264ed0ec-161c-4328-8922-aa3f324a3a7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbc1007a-a651-4610-ba18-ac28eae195dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bcfcf97-e0c6-4835-971a-fc4dd0e3cded"
                        }
                      }
                    ]
                  },
                  {
                    "id": "809657c5-5d22-486b-9ef2-aa4857e1eb9c",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87c0c304-a362-4a35-a399-5e60e58532c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e26751c-1173-48bc-9cee-c8e1ac18ab38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52eaa890-d64c-4f20-8ad4-3be4b9134e92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8286e854-e110-4824-9893-31cd0c530c2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6395ae67-ef83-4765-a4c7-1971fbaf9a89",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b291862f-051c-4201-9da4-ab60d7d1fcb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "160557b6-deeb-4057-9f16-937a45af3270"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e6d7c73-d5d7-4303-9c06-1877bfbcd5fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2d052dd-c99b-4a56-b9b6-d5f1cce6ee67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8d7c251-adc1-4218-bf21-0b363525e262",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50605dfd-b004-4dd7-bcf6-0c464bc5c661",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abaebdf6-baec-47e9-ae96-3f879d6d265c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f60ee6ca-f3f1-4671-bc45-1d7728fd0315",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca1d7560-fe00-49e2-bf68-def0f1514412"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abe7c6c7-45ca-48d0-bfc8-19bd0076da17",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e010535d-cb5c-46e9-8ddc-1c190503e535",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51bcf070-4bae-4062-8af4-289a477c43ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f96abee-805e-4292-815c-db502eca3131",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c34e7702-017a-4331-b419-de039f7c50fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24e045b1-c98b-41cc-a9c0-e402eecaf382",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e15c22fa-b67a-4f92-bc23-1d953d098ca6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52dee0b6-08f4-4337-ac41-f3181bb3c274"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a1faa04-7ee4-4d23-9774-40a37a5e7b23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e982952-59c8-4e13-ae8b-9da84d5a0bcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ea33947-9e2a-4638-94ad-e5194ba4bd55",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5575054d-2612-4f72-8fcd-597c308d31dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d71bb36-c986-4e20-9507-35514a270d4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "413f21fc-3d41-4bf8-9461-fdaa15d7ff59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "332e4479-438f-43d2-8995-9a0da2e89f65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa39109e-0981-4a36-8c81-16351f55f343",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a4f1d29-7dc2-4917-bc5b-122d7cd19538",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c825dcb1-bb35-469d-b756-772a5e7062c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc3f5a9b-7d47-4c7c-a070-cf7071e357b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a445107-6cfa-423c-992b-aa58092b28cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76b7ea25-44ac-4ab1-a765-51028bdc79ab",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c59909b9-9181-42c0-a063-20e0fb947d20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98656583-a41b-4d2d-b75a-079ef98ecf84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3332bf06-53b2-46cc-b487-29fde56955c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd699d48-cadd-4d36-9b1c-e7f62c5d4ea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ac3af32-1efb-4a92-b51c-17df5b2c1ffb",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c49bf23-5c2b-4257-85d9-e78a12cd0e74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b0001da-a884-4c25-821a-9f882f2e75a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "542fefbb-f2f3-405d-8369-41a368dff8e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55d1d17f-9efb-4000-be31-1cd72501cea9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c3c4a20-fccd-4c89-9a59-ff616cb2a88a",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6254e608-78b8-492a-838e-bac546123727",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c2cd04f-02ae-4445-ae16-d9cc20df61ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d59d6f42-d182-4e7a-a9c3-4fa11943258c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3f14ddb-cbae-4c7f-9267-ad30ef047751"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a22494b2-2971-4a94-a279-89b9ce641484",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d42eb353-8fcd-4b03-aeee-9718b2f8b5ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b71ab089-e66a-4075-a593-11f978becd9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e8d28fe-51cd-4016-8a34-551694ebb40e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "024700ba-0c20-4cfa-93d2-841ebf957886"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd2fd5a1-f937-4853-959e-3926ae3320ab",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c73e6356-9e95-47ac-942b-98a6f2e633c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0006c08e-5c11-4c6f-ab41-c64b8cfe291b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d1c530a-ea84-4790-a9bc-d00741b980aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d03c75f-7374-4472-9db1-e94fc750d309"
                        }
                      }
                    ]
                  },
                  {
                    "id": "884b2a70-9309-42e6-be7d-41d709d0ba96",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "371ecaa8-b4be-433d-ad10-8e093c2c21e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9efb24e-7263-400a-9e0a-9c0e327d2a16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c893d900-e535-4953-ab5e-0a8dbddaf8e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "933d31e5-0ca0-4112-8774-41cd5d2cc0d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97ca46be-3b1c-4d9f-be0f-f127cae26d51",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9138c09-882e-445a-8b68-4105c887a432",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7b49281-761f-4410-930e-f01fed29f59e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11cc3e1b-8542-433a-aefe-a85789954b0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e70f36e-de28-422d-996c-a0296cc1ff8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc78bde2-ee57-41c8-bb88-c5c1a0582152",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5c0478e-76ab-4427-8be3-d87965c3c666",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31bcf7d6-a5b7-4e08-a7e8-054e3c4e9def"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "225eea0c-9ad6-46ca-b9c8-fcf501a53731",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "301ae8ed-0570-433d-957f-262ddf1fdb34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96fa8256-26be-4a74-80dd-e5de926284fb",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0809b110-7d48-4883-bc09-d44d9b14cfce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11eba9aa-4550-4775-b27f-f3327557f7f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25e6de0f-dcda-4f30-9511-096c8da88fa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "374bca25-53a6-42fc-b986-2dd8d4fad2e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbff5c87-3fa9-4322-8aa3-fddf2fb2d6ac",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ce3c8cb-0214-4f64-95ad-b105dfd49bf9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1de0708e-2053-43ee-90fe-681836eb7a14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0db18b62-d9e9-4937-a8fe-fa3d76529f3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "192a2b5e-d091-481e-b675-6d7c1df8a5fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90d03e7d-7df3-47b8-9091-8bb6adab1080",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "966cffab-d1e2-4bae-8ac3-6aaefaff4ade",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10988c45-ca00-421f-9d99-72ddf8ac872a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f520ca5-c506-4c94-b1a9-2f3b35bd4a32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "542bb4e0-cfc4-4337-8628-82f930aba0fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f026d0a6-60cb-4f9c-9115-64fefd6f3a04",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eac3aa8a-868d-4ea4-93df-dc5d869a3e6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebf1b48d-5284-41e7-bdf9-23fe62443cd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72869c86-7980-47f4-81c5-e24807363f24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfe2787d-ad42-4cfa-ac30-a2aa0b1d5e5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b16978ce-90d2-49b0-b505-4dfc22a69cf9",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14f4b8de-ca63-470c-b692-5b69916eab24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed932021-70dd-45b9-a5a3-0e6785ffc6d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1936191-e411-47ad-8277-1e3b66a5ec56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5c6321d-e93c-402c-9ea0-dfd6f9538a60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d3b884c-4db6-4350-8619-47622a2f1a7b",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "029c9342-0c70-414e-abde-b17439f6cf85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4550edf6-b3b3-4c4a-b748-0522503aff8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "761e6c16-5e2b-459d-b885-34bb24ca0cd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cf74f73-236e-4b8f-a12b-d5f0ca7d4a9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abff9e5f-d198-41ee-a0f9-bcb4457fe9fd",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b538a26-e451-4722-9c7a-e2ad7503af9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04da1fe0-8cfd-47f5-ae11-cda82dc48dac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9defd272-1ba6-41e0-991d-6a3dbe0091d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58205837-702c-4eba-857d-eb9881d8c1d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3946be0c-2b61-4e8d-9062-7580bd6be521",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fba619bf-b518-4ea4-8357-01b5a069c45e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0289a0a2-5c55-4c76-81eb-b964f428e838"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce948c5a-1fd5-4561-8a1c-08c3bf1b51f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b30dcc2a-7b84-4874-ad48-b7695bd83de9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "518204e1-3907-4d20-8223-d27449ce17c6",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3f780bb-08d3-45f3-b1dc-7f7676661462",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f59edfa-55b4-44fe-a8c7-73653eb63f6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc8f097e-ab06-4ef7-af10-bef66128c2ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9d785ac-bb76-434d-90d9-ef18e64a3534"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43ce4766-c96f-4363-9d75-f6fa222c16d4",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e037bf2-4e97-496e-a740-3820666f2308",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3d6899a-f801-444e-b2e2-d995cbab3471"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "959aa792-1948-4efc-87ba-bfcae207a42e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8142691-f58a-4cea-92cf-ca5153afa1dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7972f822-c138-46dc-8ab0-5cd07d59367c",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "006842ed-a20e-4bd8-9b5b-22a2930ea43e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce8de4ca-d5ad-42da-a263-d496e7dca500"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cce89a6-87cf-49ca-b191-5713b2219a24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b142a6b-9fec-4514-9587-ced4d3b96420"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a40c1140-154f-4511-8ddb-cf3be5a02301",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7419190e-db68-4ab7-97a3-e3e4efe47f97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32b35c0a-c187-4838-8312-11b7288b4f1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56015370-0af6-4e73-962f-8bc28ed92a75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01cb3da2-a148-4ee9-86ca-9feee1335e18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e4d6895-f4b7-4bbf-9675-80d032e59301",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67442744-bf53-4b42-9725-5739ccd14356",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44fc8d69-9b52-4f55-96a7-de77460804a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c30abe51-867b-49c4-950c-3f5fbef1ffd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bdfaf4a-4a5c-4cb6-b2cb-7fdec2f024d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86274a85-e8b5-48bc-9fe3-279633e1ee5b",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "135a896b-b96c-4fc9-bf95-a0b90e989a42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ef98ae1-4d32-43d6-96a3-53732f9ebcec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d84f9fe5-6f7f-4cca-9775-8a875d914e70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f66a893-5b11-49c9-8904-d067cf2476ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "754a0286-ac12-4c7f-983d-abcdf759a67e",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89a414bb-a265-4730-9235-8454045ef2cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b7ec389-f5b2-4b49-85b6-845f08dc0fea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f32417b-05aa-4c04-ac36-070e64f01056",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01e211b1-208e-45cb-82e1-2c644d0e21a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f7d9378-6e22-4a18-8413-50c10d5b0c46",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1360a145-de75-4600-81bc-bd1a5db090fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "398b1148-dfbc-4b8d-9a39-861a4ee15a8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd333498-86ca-46d1-957a-9098ed9610c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a97c6677-7e1f-49c0-849c-a871acb59b71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "336d1faf-27fd-497f-a6ec-29b0daf5519e",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78544d72-6dfa-47f6-936e-965adb1b06fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9b95b94-2cc4-4c55-aaba-78136d1473f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "721cd154-4bba-43ee-9eb2-5cd811dcee94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caa72ebf-11c0-490c-92b7-49527591d5bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3371c291-8871-4c05-8a8a-fcde9613f931",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40f83df6-2a9c-402d-9a1f-96e0c9ba1cab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91c1ea46-ad37-4a5c-bbe7-05bd16545a31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c375183-3929-4455-8e20-0a5a2009fb8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0c8c07e-f57c-4f6a-938e-a86dc55943b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "013e8e72-90bd-40a0-baa4-347d4ec899a8",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ec94cf7-780c-4a4e-ba3b-c598ef6f4cb7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e75d93ba-68ac-4fcb-9e62-afd77e5a01e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2316c6d5-a3db-4c0c-8531-da1c1c218e35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56365edf-fa02-4eb1-982d-52e534a12441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ebf7779-8d73-4d0e-ae65-dd647c94416a",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9d192c2-6a5d-4e9a-881d-7baea63508ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b76b2a92-5fe1-48b3-b22d-c8e24e34f351"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45184a62-91a1-4e08-90df-b0e13abcb2ba",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fb6287c-7d76-4098-90b0-241ecefd5600"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0be6fd49-0107-4f31-8844-24ae099d5df3",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08232898-9e5f-4b98-bb36-041b1feea9f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a5eee69-aca2-4959-8788-0cb964617ea9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8774e565-404e-4502-8712-0f2f00126e6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9505482e-a38f-4b07-b748-0e751891ee9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86c04592-9276-4640-9441-95b5a6defb6c",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "295d2939-bda1-4c55-8e5f-dffdc330ac79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3129bc58-5bb4-4872-beec-1215f96b3efc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce23a7e9-340a-4050-bcc8-002dd02bd2ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b841162-3f89-4a06-9a5a-9515fd2a65b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73b65316-415f-414f-bc3b-38ca68a8093d",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9d5851a-75ea-49b3-9f07-1436807e96b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a689ce8-b0ff-422b-b9f4-30fbe158613c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25664756-3137-4f99-b47a-a639ffc280c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad9272bb-d87a-4c74-b047-a2e21b25803f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0171a850-278c-4976-8cae-606845798052",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fd3ad9c-2d58-4b42-bbb0-886720f6388f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81237d5e-34a0-43b8-be42-81d81d36e30c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4916372a-66e3-4089-9c33-b52467acc708",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3139a02a-3cb8-49ea-998b-e458b26c6792"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d48372b-29b2-49a9-9119-6492a77e3576",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d3de1e3-aa83-4b8f-b2d0-87775d2d665a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c49da6e8-3a82-4a57-ba7c-a2de3d452f05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75dffa3f-9b24-4bdb-a961-5f82b7b7439c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb7d4134-5859-4d8e-8225-a3ad9cf374b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5862eaf6-75b5-4005-a9cb-5197d4e7d1bf",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af543304-c77d-49c2-9973-dd8d995a604e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a46ebc3-d6e9-45af-8424-9e628e411637"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11beebc7-8cf4-4bf5-a3fb-2191aa90c6b2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "946fa618-32c4-48a8-807a-a9c5459ce875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f52a326-d0ff-4b86-b822-e74694bcfff0",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "093bad5c-a380-498c-ad54-1302f00e6b5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c54b41af-039a-411e-9520-67358703e971"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25fb53d3-0ef4-43d0-a3cf-5fec8e90148b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c6a3359-5da8-4cc1-a63d-8051c308dc4a"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3854d37e-b959-4ce0-a82b-59e4ca38932a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "10c1b6cd-1b4d-42bf-b95d-315703bf88ab"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "304f4b2e-acee-472c-8b8c-70c5e0b6f813",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "77216267-7f61-46e3-a0f0-581fa18543dd"
                    }
                  }
                ]
              },
              {
                "id": "9667d6c0-280d-4ae1-9566-cd975ea4913b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7d0e9d5d-86a5-4543-a398-80d2df91905d",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7237875-dcf5-4daf-b689-3d7869ea185e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "d3c24caa-9b3c-497a-ab1f-439b2a5a8bda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db6cb034-51fc-423a-aaf3-92a06444de98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e3ce48eb-0cd0-4a95-94d7-68c207654b8d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0fa4fe95-adb3-4d22-a371-f587e487fbc9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5a48d99f-9632-485f-9799-1b1cc83e335c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7d4b00b2-33fd-4861-ba97-be531ffd8d3a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "50a09c44-7a32-4f7a-a9d5-7598b996e221"
                    }
                  }
                ]
              },
              {
                "id": "bfc6f3e9-a902-46e5-a3a0-cb43bda67129",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "252fd820-013d-496a-b9ad-e256447a4a3d",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf1a252b-0f5a-46a5-80e5-7e076ac164aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "1fcc1b89-4bb8-484b-8cd9-b0c1565aed13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c82c62e4-4343-4730-923b-d7d4de7c57da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be7fd2bb-df48-4df1-bd29-6977e2d6b3ea"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f55880a5-2702-4fc8-b54c-9034d87b92fa",
            "name": "Positive Testing",
            "item": [
              {
                "id": "68f7e69e-524b-4310-9516-901d4278389b",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5b6e215b-79fd-4e38-9b7c-84ae2f6bea2a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "6ea7913b-61ca-4ca3-851d-ccc59a601203"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d351bbe9-6b45-458b-b9b5-4a013f4f43ea",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "78456b9c-90e5-474a-81f2-d239cd999aff"
                    }
                  }
                ]
              },
              {
                "id": "51047dd2-cb5e-4882-b322-4951566fe79e",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "36f44c32-b5c0-4019-adbc-b9e635b14946",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "87843ba0-8971-49eb-bc70-ec5c6dfea96d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "46aa108b-f205-417c-912d-55564658c95b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "31144ee3-98af-491e-a098-2384bf4813ac"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "79566d6a-3d00-423f-8ac5-e13b4367fb3f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "fc8b8e3b-2e07-4106-bb18-4aba2fd419b0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c0bc03b6-88d8-4b3f-a37c-79eb78fb8533",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3ed23eb8-27fa-476e-95b1-91512315839c"
            }
          }
        ]
      },
      {
        "id": "32f950d3-5d13-4c46-aafd-4224dcf7d4bd",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "a0f50786-4f73-4783-9b82-b9326e8ed977",
            "name": "Negative Testing",
            "item": [
              {
                "id": "739e48e0-f9f0-4765-b4c3-6c3cb0a577b9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0af2a5d8-992b-4979-ac9f-fad3eaf335ed",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f2a777d-1e03-4dea-b67e-067beaadccad",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "73a08a65-c8f2-4f9b-8c7e-c8bb35c984af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adda8c84-6177-4045-9536-9c3ee2e46ef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a236acf7-2bb6-4d88-a49f-293569ffbcda"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bd0ab83a-1431-4137-86f2-7e3914984ffb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6ddbf7ab-4735-4735-ac2b-21070a40b840"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bd103595-0a04-4c9a-aad0-3228078797ff",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "901f401f-aa0d-4ef4-8ad0-08972a2601c4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6ca1dc7f-4c80-4c00-a1a3-4dfcd0c6d80d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "3b88eb76-d215-4227-a6b5-fa69494053f6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "137774e7-8875-41f4-aa90-10312ad762c4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "327ac629-e5f1-4547-9974-d7a0e7730e53"
            }
          }
        ]
      },
      {
        "id": "5b270d3f-671d-4b51-856e-d9e3c5f065b8",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "d9b5a557-7b23-49c5-9548-67f31599d205",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7009a7d9-cf4c-4de7-94c9-62d10c169346",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "43ce84df-4e23-42d8-907d-684cad87cb6f",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbbacff5-13f0-4c1d-a4a6-0df92b7522cc",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9efed495-f0fd-4064-9ef3-49fd8b20fd54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c715b0c2-bdae-456c-ad49-fec861b05c2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "84b01755-0ccb-49ed-ae97-330121f2288d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bdfd3726-9bd1-4706-bcc1-18c39188876d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6a3d72e2-7bd2-47e7-9f7e-751364fd6608"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d9926c7c-701e-410f-b499-54209758ac81",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "53c7339f-987f-4479-87ac-cdbcd59e1e99"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d422d3c1-c460-4447-856a-f4fd11f0ae99",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0a4fe056-d7f1-405d-88d2-2faa9c747308"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "51792c1d-2938-41d1-bd39-535a37d1fc31",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e365ba0c-bf28-43c2-9d51-5b35af1fd3e5"
            }
          }
        ]
      },
      {
        "id": "4cf973ae-98b1-4d7d-ae39-811380919a0f",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "b2dd0468-2ab5-4f43-823c-5d77507e5f88",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4c815a06-a3e7-462b-9638-581c5be62014",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bc5ce52f-88e0-4a7f-81c7-9bca252ed953",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2035d062-3bf7-4428-bc93-c51e7b98dc9d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3b9f0745-1e2e-4381-a932-f5206c32c460"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59af17b8-01e6-459c-a33b-b34bd7bd8ecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "558e49bc-2bed-4b5a-9ef8-dd6d68f7f9c3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8700edc0-a28d-4e77-a60d-5c16a116b586",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "507bf9e8-1e09-47f3-b30b-ee28673bc804"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b67441ed-3ca8-4891-bae9-eaa556c22a1c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "739ea659-ef9c-4197-9147-44dd2fc44fdc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a3d1ec1c-fe6e-4cd0-a203-56a9aa4e6ab1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "72bea4fb-90f1-4a05-bb41-4453a5fd4d3f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9722de1e-b9b3-43ad-9676-23d6ab5f81a3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3420a095-f981-4918-838e-410e84fd2bde"
            }
          }
        ]
      },
      {
        "id": "8350ed66-fbe9-4181-960c-81fc34b39dc7",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "30ddd454-ca6e-4aa4-9dd3-566d38c45b28",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d6167380-c2da-4b6d-bc68-dec190f79a47",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "d729cfb2-80f3-4624-b489-a70b9e434602",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e0006873-d0a2-408a-a937-e9d1e2ce9acf",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7c56307c-25e4-4208-ba70-c274d5560671",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1853,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 246,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 495,
        "pending": 0,
        "failed": 30
      },
      "testScripts": {
        "total": 931,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 922,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 270.2357723577234,
      "responseMin": 6,
      "responseMax": 5320,
      "responseSd": 797.438807513447,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1686161876458,
      "completed": 1686161953803
    },
    "executions": [
      {
        "id": "0b036b42-82ad-4bc8-a428-0bdfed0413d7",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 244,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "95e76712-16a1-4128-acb3-e1fb4a636383",
          "httpRequestId": "6aa98128-b2f2-4513-a379-f420fe4e9566"
        },
        "item": {
          "id": "0b036b42-82ad-4bc8-a428-0bdfed0413d7",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "d4082acd-22f4-4e73-9ca3-4b9a35710091",
          "status": "OK",
          "code": 200,
          "responseTime": 54,
          "responseSize": 0
        }
      },
      {
        "id": "fd505f58-aaf3-468f-9c15-2f58c231d812",
        "cursor": {
          "ref": "b99cc8aa-226c-4aa0-9c24-8d3afb6e893a",
          "length": 244,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "84aa5573-1f92-403c-b889-dd3e6aeeb834"
        },
        "item": {
          "id": "fd505f58-aaf3-468f-9c15-2f58c231d812",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "cb132ff6-04a7-43f9-a9e0-0363b46f9512",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "0e8bb09b-eab5-4853-bb33-3ed0090c1c6c",
        "cursor": {
          "ref": "0918c142-5d30-4525-bb9d-3f1b690e3480",
          "length": 244,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "0d380f94-75f4-4c80-a9ce-6a4d5d17d2b3"
        },
        "item": {
          "id": "0e8bb09b-eab5-4853-bb33-3ed0090c1c6c",
          "name": "did_json"
        },
        "response": {
          "id": "96f94ad8-3d91-468c-96df-dccc9bf1f39e",
          "status": "OK",
          "code": 200,
          "responseTime": 1208,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80922004-85bc-4ac7-a074-4e19267018d7",
        "cursor": {
          "ref": "d070cc69-37a7-4631-b696-41bd6838d82b",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c1ef4390-08d2-482f-b7a4-b58c3a15787a"
        },
        "item": {
          "id": "80922004-85bc-4ac7-a074-4e19267018d7",
          "name": "did:invalid"
        },
        "response": {
          "id": "e06bc320-521f-494d-8eba-1270abb15e20",
          "status": "Not Found",
          "code": 404,
          "responseTime": 843,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "80922004-85bc-4ac7-a074-4e19267018d7",
        "cursor": {
          "ref": "d070cc69-37a7-4631-b696-41bd6838d82b",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c1ef4390-08d2-482f-b7a4-b58c3a15787a"
        },
        "item": {
          "id": "80922004-85bc-4ac7-a074-4e19267018d7",
          "name": "did:invalid"
        },
        "response": {
          "id": "e06bc320-521f-494d-8eba-1270abb15e20",
          "status": "Not Found",
          "code": 404,
          "responseTime": 843,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "9c239c22-e2be-47e2-9419-f9944c2aa94e",
        "cursor": {
          "ref": "762871ad-49c3-4b7e-98ee-3865e57484e6",
          "length": 244,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "55a21e71-f571-4dc2-945a-9f463eb6eaa1"
        },
        "item": {
          "id": "9c239c22-e2be-47e2-9419-f9944c2aa94e",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "1b6969ae-c920-4e2e-bf61-e854b3f0674d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 38,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "677ff343-56e7-4d12-b8c7-ced8c5b2ea96",
        "cursor": {
          "ref": "38e7361f-b2f1-4df9-952c-030ff2ada4d0",
          "length": 244,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "fc977c02-803e-4a06-b347-2d6b67559ed0"
        },
        "item": {
          "id": "677ff343-56e7-4d12-b8c7-ced8c5b2ea96",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "bee00366-0d74-4a79-b1f6-d675246cf33a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 38,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a72f90f-a9d3-4ec5-b750-958067bb2a0e",
        "cursor": {
          "ref": "4f0cac03-9a1c-4433-9c70-394d6968a920",
          "length": 244,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c6db3ec3-cb06-45b6-ace3-8c93ab05e7a4"
        },
        "item": {
          "id": "8a72f90f-a9d3-4ec5-b750-958067bb2a0e",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "ca8b5100-8c58-4a85-8673-07dbd7bb9c53",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 71,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "1a40275a-5856-4898-8ece-0c0b2d42a96c",
        "cursor": {
          "ref": "bd23e0ee-ae15-4968-90a0-bf9c1246726c",
          "length": 244,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "cceaba1f-ce79-4f2f-8409-6c2beb28f9b3"
        },
        "item": {
          "id": "1a40275a-5856-4898-8ece-0c0b2d42a96c",
          "name": "identifiers"
        },
        "response": {
          "id": "ba85d3eb-10ce-4287-8999-c2c7b38d6eef",
          "status": "OK",
          "code": 200,
          "responseTime": 219,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61dd3fe3-dcd1-4eba-aac8-23ddd3c39791",
        "cursor": {
          "ref": "2dcc40c2-aa09-4f5e-b635-950e83fea26a",
          "length": 244,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b42bd038-6539-4d1d-9039-0c8a987d9703"
        },
        "item": {
          "id": "61dd3fe3-dcd1-4eba-aac8-23ddd3c39791",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "7b4acc70-a5ac-4f4c-9731-08db57a47363",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e4bfb23-d297-4cfa-a20f-3b5e592b73e0",
        "cursor": {
          "ref": "154b5776-3508-4fcd-b978-bad930a12d5f",
          "length": 244,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "51efae13-60be-40f9-9775-53b2df2ce321"
        },
        "item": {
          "id": "2e4bfb23-d297-4cfa-a20f-3b5e592b73e0",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "4a9c5cae-1896-4825-a659-7ccdeb2a9028",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbdaecdc-da66-4dab-8d21-4f4212ad80f8",
        "cursor": {
          "ref": "93ed4987-dbe3-4bd0-8747-5ed8c426b3e5",
          "length": 244,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "d5c55bfe-5e46-4261-80a4-b2e3ac869316"
        },
        "item": {
          "id": "bbdaecdc-da66-4dab-8d21-4f4212ad80f8",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "6cb6a4aa-bb23-4b8d-80aa-41388c03a34d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1815dad-3503-4262-b5c7-bbd8f923350f",
        "cursor": {
          "ref": "531f0102-2c90-4228-8de0-c09f784feb13",
          "length": 244,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "53509527-1794-45fe-8935-ea60d6c77723"
        },
        "item": {
          "id": "c1815dad-3503-4262-b5c7-bbd8f923350f",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "251f3c77-e284-45d3-ab1a-e5e0720384b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f327bfb-d869-4358-819b-53638cd0bd47",
        "cursor": {
          "ref": "24f2b883-a858-433d-a222-5b93dec15bd6",
          "length": 244,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "067dfed6-ef99-450f-93b2-84eb27c2db7a"
        },
        "item": {
          "id": "7f327bfb-d869-4358-819b-53638cd0bd47",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "6cd06c26-f3ed-41cc-bdad-ac06190a0213",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2d086ab-5e3d-42fa-8887-54d224608237",
        "cursor": {
          "ref": "1fb5bdd5-d4a5-4497-9ad2-807e5750479a",
          "length": 244,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "80ea7697-777c-4423-890c-123b1b0ec231"
        },
        "item": {
          "id": "e2d086ab-5e3d-42fa-8887-54d224608237",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "5a971c65-db77-4076-842b-30144c31a32f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 231,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43f2b4c0-a5d9-44c4-9aa9-4e0ecad89719",
        "cursor": {
          "ref": "9fae44e9-31c9-4d4c-b738-de57048a5e02",
          "length": 244,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "7f90fad2-57d3-494d-b895-8004b4542dea"
        },
        "item": {
          "id": "43f2b4c0-a5d9-44c4-9aa9-4e0ecad89719",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "3928128a-6639-4ccf-b514-72df07b97e10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1392495-b2b0-43f1-aa47-8e77abff4ee5",
        "cursor": {
          "ref": "90c125b4-191f-4b88-858a-53f676084b89",
          "length": 244,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "831d0d08-fea9-4e9c-89eb-2390043c0c01"
        },
        "item": {
          "id": "f1392495-b2b0-43f1-aa47-8e77abff4ee5",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "91391793-8ff7-4554-9b6c-bfc01ef40f3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb1f734d-d44f-4990-85c1-0066a74b2592",
        "cursor": {
          "ref": "b94066d1-1111-4176-a501-972c3f1bf496",
          "length": 244,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "53da19de-c305-4c02-bcae-ffa65b50bf8d"
        },
        "item": {
          "id": "bb1f734d-d44f-4990-85c1-0066a74b2592",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "d9c316a3-8a4d-45b1-8741-0f7cff4d0576",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac263f77-c0b5-4b15-bc6e-ef34faebb533",
        "cursor": {
          "ref": "0b45897e-f3b1-4fa6-a17f-c2f7b30c0bae",
          "length": 244,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "647b125f-2a1c-48e2-9aa6-c981abe5105e"
        },
        "item": {
          "id": "ac263f77-c0b5-4b15-bc6e-ef34faebb533",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "f7b823dc-64a8-4499-b9ab-1e38fc13a371",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90c7f4cb-86ab-4f37-8fa8-2ce5a8db514f",
        "cursor": {
          "ref": "f4128f13-8b61-454f-ac4a-fe5fb9aa927a",
          "length": 244,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "1ae2f0be-f716-434f-a7e4-18cf658b53e6"
        },
        "item": {
          "id": "90c7f4cb-86ab-4f37-8fa8-2ce5a8db514f",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "6cac5dea-5d3b-4f9f-aada-7ef921b16750",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1de62e2e-b2bf-4446-b9d2-de22ed7bfdab",
        "cursor": {
          "ref": "3c4bfe9c-47b0-4f3d-9f57-17675b3a4afb",
          "length": 244,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "424b7487-8046-4444-8289-8ff54219a392"
        },
        "item": {
          "id": "1de62e2e-b2bf-4446-b9d2-de22ed7bfdab",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "c59d3735-7744-4638-b1a0-d8125cdf856f",
          "status": "Created",
          "code": 201,
          "responseTime": 1429,
          "responseSize": 980
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "d655d677-d1a7-4d08-beeb-2d64e80d5fbf",
        "cursor": {
          "ref": "4b66e8ef-9b52-4a45-8668-a6e41aefc834",
          "length": 244,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "3f051cab-592e-4034-a849-62bcfc47d6a0"
        },
        "item": {
          "id": "d655d677-d1a7-4d08-beeb-2d64e80d5fbf",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "4fe51fb6-dbbe-41f6-846d-560e39134017",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a487913-3551-4970-ac92-61c0f656c6d5",
        "cursor": {
          "ref": "663bd463-7f35-466b-ac86-3dff29aaa32f",
          "length": 244,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "c319ce42-ef67-4120-ac33-11f03757eabb"
        },
        "item": {
          "id": "2a487913-3551-4970-ac92-61c0f656c6d5",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "2f8251d7-6d38-4b6c-a4d3-bf4bf5902d45",
          "status": "Created",
          "code": 201,
          "responseTime": 5320,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "16cc6336-d96a-4dc4-b4c7-49960f1c1478",
        "cursor": {
          "ref": "1061ec0d-34ec-4703-b126-e343c1291a01",
          "length": 244,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "8787c95f-b746-46fb-a52a-c956f3b3ee3f"
        },
        "item": {
          "id": "16cc6336-d96a-4dc4-b4c7-49960f1c1478",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "7eeaa909-30cd-425b-90f8-4b1e939e5505",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1d757bd-a018-4415-a69b-7ef0d50e0376",
        "cursor": {
          "ref": "494148f3-1b80-4c53-ac6f-73e0714728f3",
          "length": 244,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "a6dc7ba5-af3c-45ba-b69b-72b24c0241ed"
        },
        "item": {
          "id": "c1d757bd-a018-4415-a69b-7ef0d50e0376",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "2622bd88-1627-491a-af99-dfa464e3904e",
          "status": "Created",
          "code": 201,
          "responseTime": 4384,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "62e6b9c0-0a14-42b0-93e8-4d5dc6ef6ceb",
        "cursor": {
          "ref": "68a52d2d-d6a6-448e-9f26-93d0e32fe52e",
          "length": 244,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "e22054b7-500e-488a-853d-2e4f949ecee7"
        },
        "item": {
          "id": "62e6b9c0-0a14-42b0-93e8-4d5dc6ef6ceb",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "942f27b4-3571-4c21-8d7e-432b6ef7af83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "322f07f3-5647-4b97-8a15-19865a9a55e0",
        "cursor": {
          "ref": "30432703-8215-4109-b69b-3762b8a443e3",
          "length": 244,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "c44311d1-3f49-404d-8baf-08a31e6a2605"
        },
        "item": {
          "id": "322f07f3-5647-4b97-8a15-19865a9a55e0",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "c2f815e2-9a48-4def-a5fd-03593a64d9d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1c5117f-3d46-4587-b7f0-e14f9decb959",
        "cursor": {
          "ref": "3c957a52-953a-42d9-b981-df823113602d",
          "length": 244,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "397a33d2-22d2-4381-a1f5-f6a1ec55d065"
        },
        "item": {
          "id": "c1c5117f-3d46-4587-b7f0-e14f9decb959",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "6bec9a5b-82a8-48b9-a75f-87e1b16c81dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dbdb666-93a7-44cc-a2ba-a71d05e07f5e",
        "cursor": {
          "ref": "2b54e919-c36a-4f59-8bf4-775e92df937b",
          "length": 244,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f3924750-70f4-4d63-846e-022881966695"
        },
        "item": {
          "id": "3dbdb666-93a7-44cc-a2ba-a71d05e07f5e",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "cdc41b61-30da-4e88-9da3-e2454b712be8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5069e1d-ca5c-44ba-b7dc-9ac6e3552d3d",
        "cursor": {
          "ref": "142e99ca-1b62-4f86-8343-a8893cfd7cf9",
          "length": 244,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "681a3688-8664-4bf6-82f2-5c309fcdcfbd"
        },
        "item": {
          "id": "b5069e1d-ca5c-44ba-b7dc-9ac6e3552d3d",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "9881e4d6-2d91-4ca6-9ef1-e54f19c35ae1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b3e596e-549c-4d15-80ee-de509841c0ce",
        "cursor": {
          "ref": "2b3491d0-aa22-41e7-96ef-ba2f260a5cb4",
          "length": 244,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "3342f65a-ad84-4dcb-88f2-18755a3e3986"
        },
        "item": {
          "id": "3b3e596e-549c-4d15-80ee-de509841c0ce",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "20a1ba28-1774-4926-9e69-fb66eef4e4ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d210582f-1945-4342-9422-0a9dd8a4cceb",
        "cursor": {
          "ref": "93709108-f0e3-4f0d-a730-5f757e9af699",
          "length": 244,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "ec0a8d8c-6d31-4e23-a7fc-e59912590bf5"
        },
        "item": {
          "id": "d210582f-1945-4342-9422-0a9dd8a4cceb",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "74665940-1f97-4520-a0ce-fe099d173322",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bdcc492-4ac7-49fc-9038-bd8f54e22b76",
        "cursor": {
          "ref": "6ca0ef3f-8acf-454a-8ade-01153e9322e4",
          "length": 244,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "1a3ab913-5634-4357-afe9-06103eb01384"
        },
        "item": {
          "id": "4bdcc492-4ac7-49fc-9038-bd8f54e22b76",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "663b0127-d12b-4163-9382-0df3371e69d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 133,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d903a0a7-81f1-4bb2-b684-08630d0e8a4c",
        "cursor": {
          "ref": "a2d7890d-59f4-4e2c-a326-91c5c2dee004",
          "length": 244,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "a12f9d92-f817-4684-82f1-6907b626f0d2"
        },
        "item": {
          "id": "d903a0a7-81f1-4bb2-b684-08630d0e8a4c",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "a337f5f1-a5b0-4396-831e-e7e0bfe83263",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea559869-5070-44cb-9ed5-e41ef6152f28",
        "cursor": {
          "ref": "be9a3ade-83f6-4584-a897-477f6882baca",
          "length": 244,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "1511fcf9-1060-4f77-b8ff-570875f593bd"
        },
        "item": {
          "id": "ea559869-5070-44cb-9ed5-e41ef6152f28",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "7f6b24a2-7ef0-49f1-8254-dcbef9133693",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aaca0e3-b971-4512-aad4-ede04aae1863",
        "cursor": {
          "ref": "f422bcca-51ff-4e87-9cf3-4c5cc23417cf",
          "length": 244,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "f973aad5-366d-4178-91d6-aacff2381059"
        },
        "item": {
          "id": "9aaca0e3-b971-4512-aad4-ede04aae1863",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "60403177-5cf6-4801-9bfc-95561d65cef4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bca15d88-c986-4222-a1c7-dfbc54c340e6",
        "cursor": {
          "ref": "82548e5a-9fbd-41e0-b387-b24ca096cdd1",
          "length": 244,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "245aaf7f-9b6f-48e0-808d-3e92f8153e42"
        },
        "item": {
          "id": "bca15d88-c986-4222-a1c7-dfbc54c340e6",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "faa3cc09-6943-46c7-b159-b5a7a8a3a6f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c05ab423-0474-4e89-bcd7-782b9be27511",
        "cursor": {
          "ref": "d17b457d-fc93-4a39-b46d-cf244a0aa48b",
          "length": 244,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "938b1128-9c9b-43df-bf17-2c9f22184c87"
        },
        "item": {
          "id": "c05ab423-0474-4e89-bcd7-782b9be27511",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "db376565-1e28-4301-ba6d-e419249c13a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "278aee6d-3d62-4245-ba2c-c3f6a4afde3d",
        "cursor": {
          "ref": "f0158267-4f40-4da3-a558-bce78bb63767",
          "length": 244,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "9d502567-0467-46a8-b2e2-f0915f02b36e"
        },
        "item": {
          "id": "278aee6d-3d62-4245-ba2c-c3f6a4afde3d",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "8a7b5af9-8490-447c-877a-f825bcdcce99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cff1db6-0547-4a08-846e-835675bedcec",
        "cursor": {
          "ref": "a74d382c-3ea1-459f-adf3-8919db77011d",
          "length": 244,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "fbab47c3-31e7-490a-aa6a-d107aec4127e"
        },
        "item": {
          "id": "3cff1db6-0547-4a08-846e-835675bedcec",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "6db8075c-0a68-4166-9282-546d23679f1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b08cd3f4-a12f-4c62-b4f8-a57ca8353ce3",
        "cursor": {
          "ref": "bb34564d-d02d-428b-86a0-e33e7abdf077",
          "length": 244,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "db137150-2604-4637-84a9-bd32b8828607"
        },
        "item": {
          "id": "b08cd3f4-a12f-4c62-b4f8-a57ca8353ce3",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "548b6db0-ff4f-4e12-b098-9b50c27685a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8f7938b-3f2c-4600-976f-3582cd8741ef",
        "cursor": {
          "ref": "540cbbde-83b9-4a65-a54d-389f464e2a85",
          "length": 244,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "b4fd7c9e-3f98-4a9a-a202-06f9fe937c98"
        },
        "item": {
          "id": "e8f7938b-3f2c-4600-976f-3582cd8741ef",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "b9e11a21-6b8c-445b-b4e2-7c176051478c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08a404f9-5f45-46c3-a97c-abe7c130a324",
        "cursor": {
          "ref": "cddec52c-3640-4a96-b88f-0a0700f205f5",
          "length": 244,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "087bf3be-a1d4-4ecd-8fa0-43b08e070ebc"
        },
        "item": {
          "id": "08a404f9-5f45-46c3-a97c-abe7c130a324",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "d48874f9-154b-40f0-9859-c50978b5c6fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "967e41f3-5d3d-4da6-b7ba-51485fb7aa01",
        "cursor": {
          "ref": "93f3f3d8-20e7-432d-bdb8-a31b49753975",
          "length": 244,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "5aab5dfd-0eb0-4128-b265-bbc46050ba02"
        },
        "item": {
          "id": "967e41f3-5d3d-4da6-b7ba-51485fb7aa01",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "c085a68a-6b90-4844-bb13-6c511a67fd01",
          "status": "Created",
          "code": 201,
          "responseTime": 2634,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "5e2d8703-a7c4-4da2-a234-cc5bf9d6dcf7",
        "cursor": {
          "ref": "82297228-bd68-4a1b-a4a9-75949b74c00b",
          "length": 244,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "fc8941ba-aaea-4381-acce-39d14cb8412e"
        },
        "item": {
          "id": "5e2d8703-a7c4-4da2-a234-cc5bf9d6dcf7",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "c28d6152-8f0b-4673-88a4-3792653ca261",
          "status": "Created",
          "code": 201,
          "responseTime": 2538,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "d8bcb64e-8e57-40d4-992e-62cd8534a029",
        "cursor": {
          "ref": "2b724eeb-2c92-4809-a876-5b202aeb716d",
          "length": 244,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "9620adb4-63f5-488c-907d-859c63c83cca"
        },
        "item": {
          "id": "d8bcb64e-8e57-40d4-992e-62cd8534a029",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "d5b3771d-b024-4ce9-9e24-647ad44db1cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "448ac8c1-d641-4d4a-a11a-915a1fa800a0",
        "cursor": {
          "ref": "488e9513-71b6-49c7-8a09-e245ac74f892",
          "length": 244,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "d6d823a8-2671-4f49-ac78-b4b311a121de"
        },
        "item": {
          "id": "448ac8c1-d641-4d4a-a11a-915a1fa800a0",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "b1594f56-c195-4f22-a2fd-154619b7caed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1ee30b3-7239-422c-ba7d-8178f7da2415",
        "cursor": {
          "ref": "a89d60eb-149d-49e1-a334-efa38b058e87",
          "length": 244,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "240b0c46-6491-4373-b1d4-da31f1cb7d26"
        },
        "item": {
          "id": "b1ee30b3-7239-422c-ba7d-8178f7da2415",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "4105950c-5a33-46d0-b3c3-4a78d595b34a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b61cf0f2-434d-42fc-a543-bca253bfa35e",
        "cursor": {
          "ref": "449eeabd-ebc9-4bde-82c8-9fdea79ab941",
          "length": 244,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "1305fba6-c477-4310-8d94-ea13006eee06"
        },
        "item": {
          "id": "b61cf0f2-434d-42fc-a543-bca253bfa35e",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "1f2285f3-cbc0-480b-b76b-7ecbf9903ba1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed922030-9cd8-4891-96d6-9f712058b0fa",
        "cursor": {
          "ref": "e61ac1a2-aeb7-4136-a075-609ba38733af",
          "length": 244,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "b7500106-21f7-400f-8831-8e608f832692"
        },
        "item": {
          "id": "ed922030-9cd8-4891-96d6-9f712058b0fa",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "c82b01f2-cf35-4a09-ad1b-7b6d68297637",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8c0ca12-d333-4c41-b8de-918b78901f01",
        "cursor": {
          "ref": "2bd43d90-d61a-4f1d-99ad-8efb7330ce12",
          "length": 244,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "e70999c3-b326-409b-895b-2a9a61e32dc7"
        },
        "item": {
          "id": "f8c0ca12-d333-4c41-b8de-918b78901f01",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "316a69bd-9328-4592-a8c1-f4c5232fdab0",
          "status": "Created",
          "code": 201,
          "responseTime": 2632,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "c02c9343-fa94-4302-acf6-d48a2e8f8de0",
        "cursor": {
          "ref": "7c804d70-788a-4476-8317-71c1e8cb9c8e",
          "length": 244,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "e4cf9a4c-bdce-43ad-a082-1c25e2097b91"
        },
        "item": {
          "id": "c02c9343-fa94-4302-acf6-d48a2e8f8de0",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "dac846ce-e490-441d-ba19-36dd5ccc9882",
          "status": "Created",
          "code": 201,
          "responseTime": 2561,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "244de6a4-26cb-45de-b87c-a1ecb7915d0c",
        "cursor": {
          "ref": "85ffbd6b-e82e-4614-87be-4fffa9e67502",
          "length": 244,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "d725c93d-bfc1-43a4-b19a-c18db697da86"
        },
        "item": {
          "id": "244de6a4-26cb-45de-b87c-a1ecb7915d0c",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "2a6cb4ae-7a8e-4c16-bb31-31a045d173bd",
          "status": "Created",
          "code": 201,
          "responseTime": 2697,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "80dc2f98-7d38-434e-a8b3-204bec90e63a",
        "cursor": {
          "ref": "d809b0e9-fdc8-49ca-82fa-0b9ed072becd",
          "length": 244,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "9db8dacf-ee53-4338-8e6d-23dc4ef8f832"
        },
        "item": {
          "id": "80dc2f98-7d38-434e-a8b3-204bec90e63a",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "7a8d0eee-9e86-41f7-814d-3ac9ef21ab05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "708b43d3-d72c-4ed1-97a8-87dc19271d87",
        "cursor": {
          "ref": "850489ff-171a-462e-90c4-537c528e09b1",
          "length": 244,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "5a99e0eb-b7f5-4c45-89da-03e9a4d1d057"
        },
        "item": {
          "id": "708b43d3-d72c-4ed1-97a8-87dc19271d87",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "8a25e4be-0cb8-486c-a48f-8125382af9f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "893a9413-52ee-43d7-8c4c-8fbbcd62f641",
        "cursor": {
          "ref": "91fc3dc8-b42e-4d0e-9ab8-a160d94a35d0",
          "length": 244,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "ff57d1d3-eeba-43f6-8aa7-431a2ec5b3d6"
        },
        "item": {
          "id": "893a9413-52ee-43d7-8c4c-8fbbcd62f641",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "fd14f40a-15bb-4a17-9b7f-4950c17ad37f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "838e4311-58a5-4206-9ca1-6ffc64b48e73",
        "cursor": {
          "ref": "35df710b-f85e-4ef7-ac8e-31c196876079",
          "length": 244,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "b3e8eb9f-9de0-48cf-913f-a9f4cce1498a"
        },
        "item": {
          "id": "838e4311-58a5-4206-9ca1-6ffc64b48e73",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "07250fd4-a60b-4ccd-847c-aadc8351d161",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c56c2fd9-21d0-436e-ad42-bed08fcb6ef2",
        "cursor": {
          "ref": "f13097f7-93b3-490f-8e6e-90ed142eaadd",
          "length": 244,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "1facbeed-14e4-45c5-bb81-51a3e1d4a05d"
        },
        "item": {
          "id": "c56c2fd9-21d0-436e-ad42-bed08fcb6ef2",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "ac6d9b33-59ad-4d82-b916-4a499dbf6637",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f1b56fa-c72a-4ed3-a162-827fe4945a92",
        "cursor": {
          "ref": "7d834d84-2139-4d0d-bf5d-e0d39131fc82",
          "length": 244,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "ddfbd10e-e45c-4e8d-8e9c-3608e509cea1"
        },
        "item": {
          "id": "0f1b56fa-c72a-4ed3-a162-827fe4945a92",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "b8cc3006-0afc-4506-a8a7-d544822af482",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75e274d9-03e2-4213-8302-bb7b270e55a2",
        "cursor": {
          "ref": "8967f215-067d-49cc-af76-072bd187fe6d",
          "length": 244,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "476b3d45-d550-4c56-ab5b-ad6a2a60f62e"
        },
        "item": {
          "id": "75e274d9-03e2-4213-8302-bb7b270e55a2",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "ae36a928-2116-42d8-88b7-184b9a360342",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d71cc375-161a-4f4b-9d74-103582aabf58",
        "cursor": {
          "ref": "5fc6d2e2-a41d-421b-b12f-b7042483c613",
          "length": 244,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "a69ef337-f914-48de-95fc-35a259c26e76"
        },
        "item": {
          "id": "d71cc375-161a-4f4b-9d74-103582aabf58",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "d77733f4-9e59-4660-85b8-070f24a4de59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71a53b3f-f30e-447e-a505-0552e1d5df13",
        "cursor": {
          "ref": "76f9f1f6-5966-4555-8c79-3dcf346a25af",
          "length": 244,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "1a763026-9a35-46a3-95d4-9b1810842ffd"
        },
        "item": {
          "id": "71a53b3f-f30e-447e-a505-0552e1d5df13",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "fc9af2bf-0fa6-4486-a128-340f2e34ddc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9462ca9a-68ed-4774-83b4-a838b7e6e82f",
        "cursor": {
          "ref": "705eea59-d812-4ff4-98b8-482d4685eb47",
          "length": 244,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "ec7c8e98-66ae-4acb-9a45-656d700b62e2"
        },
        "item": {
          "id": "9462ca9a-68ed-4774-83b4-a838b7e6e82f",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "a4c843ba-fa07-4c6e-a73c-9670db6f5a74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dba5d5ea-7793-4f07-a247-24dbd46fc3e5",
        "cursor": {
          "ref": "a443540a-883a-48e6-b552-02fe1c181e2b",
          "length": 244,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "f59e17e8-896a-4567-9a20-b5c748b57277"
        },
        "item": {
          "id": "dba5d5ea-7793-4f07-a247-24dbd46fc3e5",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "280fa40f-97eb-4ee2-8bf3-a89519f43a96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49bf93be-7cee-460a-9943-8149c6240993",
        "cursor": {
          "ref": "65de773d-58b9-4c85-9368-6516e5a05338",
          "length": 244,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "2287c699-08db-49a3-a392-dfb67b10734c"
        },
        "item": {
          "id": "49bf93be-7cee-460a-9943-8149c6240993",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "397908da-3e4b-4a47-bfba-dc207ec62ff4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "339ea84b-1754-4fff-bca3-f20f9f9893fa",
        "cursor": {
          "ref": "2283c5b6-c91b-4551-bf01-b96f9dd8012e",
          "length": 244,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "1d9307c2-f929-48d2-b4ed-30f5b2e29644"
        },
        "item": {
          "id": "339ea84b-1754-4fff-bca3-f20f9f9893fa",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "8ffb78e7-1fde-4c3c-80e7-4c77ecbbb86b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa908436-db44-4e92-9348-d02b0c4efb5c",
        "cursor": {
          "ref": "54826caa-679a-40a6-8f96-8efc469db448",
          "length": 244,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "91a055f8-25b9-497b-9097-5ba235f76572"
        },
        "item": {
          "id": "fa908436-db44-4e92-9348-d02b0c4efb5c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "f875cc13-cdb3-471c-81f2-c83e722cb2a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91a7ee9d-53db-448b-a4e5-38c26e16bbbb",
        "cursor": {
          "ref": "c7a64cd8-3984-450d-923d-2a21d7e247e5",
          "length": 244,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "d58a6537-139f-4dd7-b9e7-bcc23263227c"
        },
        "item": {
          "id": "91a7ee9d-53db-448b-a4e5-38c26e16bbbb",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "87a2d4ac-44ee-4952-8194-ee5a7df1e152",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2ebf26a-4eaa-4ef6-bb8b-7211447752fd",
        "cursor": {
          "ref": "490d8370-8a28-426c-a5b3-432bf63d0918",
          "length": 244,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "eaba739c-c2d2-4f70-aa3c-9ae75df789ce"
        },
        "item": {
          "id": "c2ebf26a-4eaa-4ef6-bb8b-7211447752fd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "d8fb8cc1-5dbd-4f49-ac64-5f60c232fa8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddaa919f-7fde-488d-8afb-d42e765129f9",
        "cursor": {
          "ref": "7e95e74c-c3e6-4f92-8ab0-0b693b75aa6c",
          "length": 244,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "3e6c451e-ce89-478a-a628-ecc073c370f0"
        },
        "item": {
          "id": "ddaa919f-7fde-488d-8afb-d42e765129f9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "83882032-0865-4dcc-b5f5-30dfec5067c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2247aad0-0643-4e33-a7c4-457bf486bca0",
        "cursor": {
          "ref": "6104ccd9-fc4e-4bd5-a7ac-fdde9375292a",
          "length": 244,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "d11ac7ca-07d2-49bb-a208-7495f73c7830"
        },
        "item": {
          "id": "2247aad0-0643-4e33-a7c4-457bf486bca0",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "9f06efe6-5657-455f-8450-215a6eaeef2a",
          "status": "Created",
          "code": 201,
          "responseTime": 2140,
          "responseSize": 979
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "6f5c64d7-2f7f-4f10-bc7f-b37b312ae850",
        "cursor": {
          "ref": "83c1e01a-03a0-4e9f-b78d-f5217a944bd3",
          "length": 244,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "89cc6d9d-433c-41d9-8b2a-f9872f0cab8a"
        },
        "item": {
          "id": "6f5c64d7-2f7f-4f10-bc7f-b37b312ae850",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "d69f0c28-40a8-485b-a569-6e38f057ab9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdf369f8-5acd-40ce-ac91-769a473e80c2",
        "cursor": {
          "ref": "d9f02dbf-b000-453f-a857-1e71e7866af8",
          "length": 244,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "88a7d2c1-889a-4f30-b618-248f02996cc4"
        },
        "item": {
          "id": "fdf369f8-5acd-40ce-ac91-769a473e80c2",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "4c1620b8-0807-4b64-95b1-bf3bb7118cad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76d83880-d625-40a2-9a5d-9ada9eea411e",
        "cursor": {
          "ref": "9dca95a7-68d3-4dd0-96f3-bfbb3e16c261",
          "length": 244,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "582870da-70c1-454d-8888-8691da0d8892"
        },
        "item": {
          "id": "76d83880-d625-40a2-9a5d-9ada9eea411e",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "8884042d-7a74-46ca-8efa-5bd6c6a9cd6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 153,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49880375-c88e-4311-9b42-c521315a24cd",
        "cursor": {
          "ref": "ef2b690b-dd23-41b7-9ce6-f3e2d56721d1",
          "length": 244,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "7b5a59fb-8440-4c1e-91b6-5f2ce97bc0ae"
        },
        "item": {
          "id": "49880375-c88e-4311-9b42-c521315a24cd",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "43ef72e2-197c-4ab6-94d0-02ecc76ea656",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "463a0b7f-1e5b-4f1b-8631-10ceb259b6ac",
        "cursor": {
          "ref": "114ac76c-e8ca-4c28-ac68-be20e70088ca",
          "length": 244,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "cf4b135e-8975-45c1-af8c-d082ae58035a"
        },
        "item": {
          "id": "463a0b7f-1e5b-4f1b-8631-10ceb259b6ac",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "341bf188-3830-4edb-8e91-c93e8c95b58e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1e46e89-ec95-41d4-bef6-5d517d3740e2",
        "cursor": {
          "ref": "d7712d56-e4ba-4841-9fff-1ec98a3165f9",
          "length": 244,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "18d768dd-7873-4d1e-8594-81f27fd3c903"
        },
        "item": {
          "id": "c1e46e89-ec95-41d4-bef6-5d517d3740e2",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "ac622a84-0b0d-4af3-bddf-e620c033e383",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95f4fa7b-7fc2-44a6-9c54-e8fe30bc00c6",
        "cursor": {
          "ref": "ba54719d-91f9-422e-9c4e-ffb79224318f",
          "length": 244,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "861a368a-6ac4-4fb2-bce7-fbce7ad448a4"
        },
        "item": {
          "id": "95f4fa7b-7fc2-44a6-9c54-e8fe30bc00c6",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "a6f750fc-fc8b-4b1e-b485-e07ccfae783b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6756dd5e-8ea3-4c53-990a-9b3a48ab1de8",
        "cursor": {
          "ref": "e03c8f42-b954-48e3-b0c4-d5488b88d3e6",
          "length": 244,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "6ad6ad8d-5c34-48c4-a2d8-cfbd8822276c"
        },
        "item": {
          "id": "6756dd5e-8ea3-4c53-990a-9b3a48ab1de8",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "b2ef476b-8db4-4304-ad5e-3718ce46c3fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "424f3dd1-7ad4-49d0-a8ac-6316d375b70a",
        "cursor": {
          "ref": "fa4a42fd-15e9-4c3c-b5f2-7512271601e2",
          "length": 244,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "3b626e72-934d-419c-9217-f22695b50f4c"
        },
        "item": {
          "id": "424f3dd1-7ad4-49d0-a8ac-6316d375b70a",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "4a6d83bd-ee1f-4692-a247-eba62bd13050",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "708738d0-fefb-4b18-9c81-011d3b85f32a",
        "cursor": {
          "ref": "56696c16-e8b6-4208-944c-8ddbb9078f13",
          "length": 244,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "cdf3a921-5321-4507-8858-336ac7e7cda4"
        },
        "item": {
          "id": "708738d0-fefb-4b18-9c81-011d3b85f32a",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "47a4d28a-d331-4af6-997c-235e92dc234b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65b2edae-f149-43e5-82b4-bd4ded57c9b4",
        "cursor": {
          "ref": "6cbd0ef6-f46d-449b-b493-def30a6792db",
          "length": 244,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "60edf7b9-043f-4316-b44f-f275f4a12704"
        },
        "item": {
          "id": "65b2edae-f149-43e5-82b4-bd4ded57c9b4",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "24729b45-522c-43b5-b320-ab0d1760ec64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e111b311-2506-4830-9568-26ce3a30a7e2",
        "cursor": {
          "ref": "3068f5fd-72dc-4c7f-8428-1d42e4d3bf9b",
          "length": 244,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "47bef9ab-2c37-48fb-a584-d10a2505e98a"
        },
        "item": {
          "id": "e111b311-2506-4830-9568-26ce3a30a7e2",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "a94efefc-df0a-4327-b6fe-6b7581560fa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58e20b6d-d481-43a8-8aeb-a991970fa468",
        "cursor": {
          "ref": "62adf0c5-5440-4372-804b-a791b6bd5157",
          "length": 244,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "14146c89-e67d-4b1e-81d5-a3bf16ce1a54"
        },
        "item": {
          "id": "58e20b6d-d481-43a8-8aeb-a991970fa468",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "cc01e65a-d023-4d5d-9846-d6457ef85602",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0101ccac-3a35-4521-85a9-6197c8c1b38a",
        "cursor": {
          "ref": "28653f71-b48a-40c8-b28f-6f5e8e43d6e0",
          "length": 244,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "d482044d-ab59-40f1-931d-6dc57ef69eb2"
        },
        "item": {
          "id": "0101ccac-3a35-4521-85a9-6197c8c1b38a",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "a789c400-a971-4020-b7bd-864c0a7daac0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "739da6e4-fe2a-473a-b785-ac51c8be80f4",
        "cursor": {
          "ref": "e2e84c4b-d2ef-4faa-8d38-059a491f17a9",
          "length": 244,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "211007b6-e637-4c8a-be60-5fa874eed410"
        },
        "item": {
          "id": "739da6e4-fe2a-473a-b785-ac51c8be80f4",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "72159eb2-0bce-41ee-84d0-2353c168ad9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aa3eaed-fa14-43be-8019-baa101483ddd",
        "cursor": {
          "ref": "5a94a5cb-63d7-4544-a27f-7c5ebf53b184",
          "length": 244,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "fbcd3af0-94e0-4c05-a3d5-8315c786ece3"
        },
        "item": {
          "id": "8aa3eaed-fa14-43be-8019-baa101483ddd",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "30e4b73f-ab92-461f-85aa-4fe397c01c34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2409b44a-aeef-4764-b576-579618df49e3",
        "cursor": {
          "ref": "b43d3d78-4a92-4d71-a212-8b1f5d7d39a2",
          "length": 244,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "5247b8a5-27af-4277-97e5-0709441e648e"
        },
        "item": {
          "id": "2409b44a-aeef-4764-b576-579618df49e3",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "638ca37c-c1f1-4534-98f4-c769cf4c6ae6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f22c4127-f0a7-4d16-b876-f2292c9f8e18",
        "cursor": {
          "ref": "818040e6-0820-442c-b5e4-0f96859cc7fa",
          "length": 244,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "6c0f6d8e-f017-416e-9c07-2cef56bb29c9"
        },
        "item": {
          "id": "f22c4127-f0a7-4d16-b876-f2292c9f8e18",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "84e25540-3db9-4ece-9131-fcd65caaa696",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79227d05-43db-42e7-a356-07706eb0f805",
        "cursor": {
          "ref": "5ddd335a-5538-4a59-b0a2-8bd04e77a0ce",
          "length": 244,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "b038c6bb-5fa0-4001-b864-fc47493896bb"
        },
        "item": {
          "id": "79227d05-43db-42e7-a356-07706eb0f805",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "6031243c-49a4-4479-8b26-bbe128c04f14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86380a6c-4145-4766-a4d2-a3f18dd7df43",
        "cursor": {
          "ref": "1b9fc028-500d-4a9e-a87f-e0bbd5ebb477",
          "length": 244,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "4b326a8d-83c6-409f-9f60-090b257325c0"
        },
        "item": {
          "id": "86380a6c-4145-4766-a4d2-a3f18dd7df43",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "09041b1e-ecd9-4162-9edb-cf72e9554769",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "655c0aa2-265b-42d7-aa4b-dcb9be8942c5",
        "cursor": {
          "ref": "38397070-a669-43b1-a8cf-03728939376e",
          "length": 244,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "598734f7-64dd-4749-9a8f-a804eda1a28a"
        },
        "item": {
          "id": "655c0aa2-265b-42d7-aa4b-dcb9be8942c5",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "91221be3-cd64-4460-8b78-4b2602c49135",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "772c3776-887a-4dec-90a2-bdc314571513",
        "cursor": {
          "ref": "0a7c6c11-407f-4d1d-be62-2d98ccb4c9d3",
          "length": 244,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "2d79d818-7fb4-402a-8914-f8d707a4791f"
        },
        "item": {
          "id": "772c3776-887a-4dec-90a2-bdc314571513",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "5a0cc60f-c7fa-4407-b558-1aeb96c2426c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c39ef439-1ce3-4173-ab00-bca6ddf09434",
        "cursor": {
          "ref": "1bea540a-3b3a-42d3-8bcd-f093a8ff37ba",
          "length": 244,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "c03c885d-32aa-4c1f-8ce1-7adaf434a236"
        },
        "item": {
          "id": "c39ef439-1ce3-4173-ab00-bca6ddf09434",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "849aeb30-71d3-43bc-841f-621b6ea98381",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "285185ed-3517-402a-aa42-dc73128e2bed",
        "cursor": {
          "ref": "21988ed9-918b-4c9b-a1e0-838f3f0991ec",
          "length": 244,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "d713ee93-7067-49e5-b209-6cfb68665749"
        },
        "item": {
          "id": "285185ed-3517-402a-aa42-dc73128e2bed",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "3e055d0a-d64b-49ee-9190-dada460e10e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91df52ed-aa0b-465b-a6ae-327e24f11596",
        "cursor": {
          "ref": "bcbeb96d-f08e-462e-ab87-646e25e3fa6c",
          "length": 244,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "8b0d4eb8-60f4-40f9-a49a-ba5f164fa446"
        },
        "item": {
          "id": "91df52ed-aa0b-465b-a6ae-327e24f11596",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "0eb51c80-7255-4b4d-a0ee-7af8d2442f54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb365924-3aa8-414f-9116-a09f659008dc",
        "cursor": {
          "ref": "3e204dbc-d0d1-44dd-b23b-b83396357411",
          "length": 244,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "6a17cc21-c31c-472d-ac0b-675ca53ef5c3"
        },
        "item": {
          "id": "fb365924-3aa8-414f-9116-a09f659008dc",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "b5d214a7-9c6e-4e78-bb0f-cb43fa0351a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2bb3fad-8071-432d-9d90-b1e5c5578b2e",
        "cursor": {
          "ref": "118bb134-59e8-4c16-ae18-4ae72ebc7686",
          "length": 244,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "5f556a3f-5522-4f47-a205-2c63377b76e7"
        },
        "item": {
          "id": "a2bb3fad-8071-432d-9d90-b1e5c5578b2e",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "72d0b275-ecc4-499b-a02f-e0a4231da5ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d1578d3-5726-4b50-b10e-204dad9e00e9",
        "cursor": {
          "ref": "03bc4f6d-2e35-43ee-8af2-a5ddfb53b497",
          "length": 244,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "9a564844-291c-4f29-aebf-911b74161908"
        },
        "item": {
          "id": "9d1578d3-5726-4b50-b10e-204dad9e00e9",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "bc0394a4-0934-4fae-98e1-717bbcecb21d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b78364f5-2e7e-46a0-9297-193141d1dfb7",
        "cursor": {
          "ref": "bea70fd6-d706-4220-8188-cf8c88b3c164",
          "length": 244,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "38d098a5-ac7d-4754-a2d0-8ace1b470bf6"
        },
        "item": {
          "id": "b78364f5-2e7e-46a0-9297-193141d1dfb7",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "5747dabd-cb27-4ea8-a7e6-2316d3455c3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4328418-a01a-4046-aaa5-9e6c31f8b039",
        "cursor": {
          "ref": "91ed0665-7173-4160-86aa-31ca0fde6f0c",
          "length": 244,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "3a1aa68c-8147-44b3-a402-a4a8b909a450"
        },
        "item": {
          "id": "b4328418-a01a-4046-aaa5-9e6c31f8b039",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "b4d40027-d25f-40c4-91f7-94cec27685e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ada2a74-c5b3-44b8-b918-b7cdcb662788",
        "cursor": {
          "ref": "83fd8600-175a-44ac-8482-8572ce344099",
          "length": 244,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "2ed67835-bf57-47cc-b381-52b88855e12c"
        },
        "item": {
          "id": "3ada2a74-c5b3-44b8-b918-b7cdcb662788",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "98c427b7-4518-400a-82c3-00196d5c6268",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "7dc372cd-9062-420a-9194-492965620abb",
        "cursor": {
          "ref": "bb10d0db-c979-42bf-8030-6b8ad0f17cf8",
          "length": 244,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "3d9ada8d-1bc2-4337-aa0d-2f7c6e708ea7"
        },
        "item": {
          "id": "7dc372cd-9062-420a-9194-492965620abb",
          "name": "credentials_issue"
        },
        "response": {
          "id": "6eae7fc1-a8a0-4b0e-bdab-c92e093210de",
          "status": "Created",
          "code": 201,
          "responseTime": 1987,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "30ada5da-8bc6-44df-ac89-ac05936aba20",
        "cursor": {
          "ref": "cff96a27-3544-489a-ab85-5bab1dbb7db4",
          "length": 244,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "6b7e11de-68b6-46d4-b73e-0bb8b3485126"
        },
        "item": {
          "id": "30ada5da-8bc6-44df-ac89-ac05936aba20",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "68567a82-93c3-45e1-a8a3-4c5592b56b8a",
          "status": "Created",
          "code": 201,
          "responseTime": 2342,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "465f9651-ec56-4a83-bf55-6f73645c2d3e",
        "cursor": {
          "ref": "61b4b149-f5b3-4b93-8d68-3ed148dc776f",
          "length": 244,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "355c66d9-300c-4e7d-8c1f-747aa0ce6020"
        },
        "item": {
          "id": "465f9651-ec56-4a83-bf55-6f73645c2d3e",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "bd6f0019-457e-4759-97d2-dc7e37319519",
          "status": "Created",
          "code": 201,
          "responseTime": 2385,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "21a42099-bf47-48c9-a0e5-08506be23665",
        "cursor": {
          "ref": "a372948e-7934-4edc-9f31-10a9d72b88b3",
          "length": 244,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "9f4d2e3b-bba4-400f-8bbc-b92fb0cca917"
        },
        "item": {
          "id": "21a42099-bf47-48c9-a0e5-08506be23665",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "bdee4242-790b-4ced-b964-375919d15758",
          "status": "Created",
          "code": 201,
          "responseTime": 2310,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "aff6089a-046b-4217-a02e-2817eab58fe5",
        "cursor": {
          "ref": "b63c0df9-cd5e-46c4-81b4-627e71234340",
          "length": 244,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "f68f5bd8-9a4d-4ad4-8dcf-0e8be3b96fbb"
        },
        "item": {
          "id": "aff6089a-046b-4217-a02e-2817eab58fe5",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "f2a6253c-5233-4fd1-b40b-17cce082945c",
          "status": "Created",
          "code": 201,
          "responseTime": 2944,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-06-07T18:18:50Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-06-07T18:18:50Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "d72cd67f-83a8-4352-acbd-82e7ff81525e",
        "cursor": {
          "ref": "43cd3d5b-d494-4af6-9b73-456f7a092007",
          "length": 244,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "fe1182ba-afcf-433d-b30f-110612621fad"
        },
        "item": {
          "id": "d72cd67f-83a8-4352-acbd-82e7ff81525e",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "618ef86b-f324-438a-905f-9a483f7e0afd",
          "status": "Created",
          "code": 201,
          "responseTime": 4244,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51b0bbac-2604-48b1-bc4f-c936c7657dd2",
        "cursor": {
          "ref": "64af3946-dad4-4459-9b8d-9f09bd564801",
          "length": 244,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "57efcf70-7757-4158-b2ee-877863b631c9"
        },
        "item": {
          "id": "51b0bbac-2604-48b1-bc4f-c936c7657dd2",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f9487497-78da-45f0-af2b-e5a7bb77703e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcb69983-f47e-4bd5-9bb8-05d849779f30",
        "cursor": {
          "ref": "08e11d13-7ddc-48cb-bc47-2e47cf5013a2",
          "length": 244,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "78115638-a59a-4fe1-b709-decdae2f80c6"
        },
        "item": {
          "id": "dcb69983-f47e-4bd5-9bb8-05d849779f30",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "4a6880d0-8704-4639-8f06-86d47f3c7bd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "439b8a8b-a63a-4455-9db1-f7df6749feb6",
        "cursor": {
          "ref": "7c8d2912-5166-4c92-aa37-19308ce4f2e2",
          "length": 244,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "6c656455-79cf-4f13-8010-b48fab8c237f"
        },
        "item": {
          "id": "439b8a8b-a63a-4455-9db1-f7df6749feb6",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "bb66949a-4a69-4d1f-959c-b1a9be1053b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a83225a-62a9-496c-9886-fed920207f90",
        "cursor": {
          "ref": "23fffb2c-51f1-4999-887f-763263546023",
          "length": 244,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "3f74912f-557e-4b6b-a528-f40313d84c7d"
        },
        "item": {
          "id": "4a83225a-62a9-496c-9886-fed920207f90",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "868df35c-87b6-470a-af66-1201a6b4a60b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 147,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4a0356d-3851-4ebb-8f14-b572439cdb42",
        "cursor": {
          "ref": "4a2df881-1476-4467-b081-4bacbb7f2f03",
          "length": 244,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "7054b3e1-c8e2-4004-8678-63820962bfff"
        },
        "item": {
          "id": "c4a0356d-3851-4ebb-8f14-b572439cdb42",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "7059e165-8269-409c-8e3b-b041ef24dd78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8671737-566e-4350-b7a3-8917e5204d20",
        "cursor": {
          "ref": "63cc80b5-8c16-4ea6-9a66-2b5d03eba6d7",
          "length": 244,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "59d37ddd-e95b-4d58-b66f-da97f39cfc44"
        },
        "item": {
          "id": "e8671737-566e-4350-b7a3-8917e5204d20",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "35bcd09d-f7d0-4718-8289-47bba1f81623",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfe2cae6-fe26-4057-8bf5-0d7a6d62bcbf",
        "cursor": {
          "ref": "af56186e-f0d2-4f45-a18c-4a946ac2dd76",
          "length": 244,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "cb6bfe65-ffdb-4b9c-bd8f-6807deccc1ae"
        },
        "item": {
          "id": "bfe2cae6-fe26-4057-8bf5-0d7a6d62bcbf",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "a7aa9b98-99d0-4606-8b92-ecf14da4374f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 598,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60f19974-9a60-4467-82cc-72ab545ea4ec",
        "cursor": {
          "ref": "6a9c9f3c-2067-45de-92a2-8ded1a71a651",
          "length": 244,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "882cb811-69e5-4630-852a-56aee79423bd"
        },
        "item": {
          "id": "60f19974-9a60-4467-82cc-72ab545ea4ec",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "0c7b9546-70b4-433a-bfac-210a4def9440",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ceba122-8ae8-4af5-bfaf-45859bea9290",
        "cursor": {
          "ref": "5fe9a88e-2eca-49bb-b086-68b3f4ae37d1",
          "length": 244,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "463a0540-f993-4325-9a5b-ddc42396e34e"
        },
        "item": {
          "id": "5ceba122-8ae8-4af5-bfaf-45859bea9290",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "6c88532d-e408-4e14-afa7-0922b265d8b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f87d45da-a074-4c42-9612-56ad7e004908",
        "cursor": {
          "ref": "75c9570e-7890-487a-8c1b-c7100c15867d",
          "length": 244,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "2d75baf9-7fe6-4d7f-abe1-a2a87266ca39"
        },
        "item": {
          "id": "f87d45da-a074-4c42-9612-56ad7e004908",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "92e2556b-8edd-42fd-8fb7-c89ee51e1119",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57f2044b-fc69-4153-b952-5578e6cd6bcf",
        "cursor": {
          "ref": "138e7c86-7206-4adb-8ab8-8afb4b23b44a",
          "length": 244,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "f75b39ea-d5ec-478c-b916-83f269d3df5c"
        },
        "item": {
          "id": "57f2044b-fc69-4153-b952-5578e6cd6bcf",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "50eb086a-5d1b-4cf4-acd9-c0d4bec40c65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b743856-9a9e-4dc0-8da1-f3008f9934c9",
        "cursor": {
          "ref": "3b7daf14-838f-4305-bea7-88646eca7976",
          "length": 244,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "5d631c98-3583-463a-9ca5-afcc53c61630"
        },
        "item": {
          "id": "3b743856-9a9e-4dc0-8da1-f3008f9934c9",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "06e8d38d-a3fa-4a00-a679-5508fa4e2e5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d69df00-192f-4f14-b034-1fcb4ec7f5e9",
        "cursor": {
          "ref": "418a317a-d816-45c4-984c-2eb2020420c4",
          "length": 244,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "0e2c7a7a-c82b-4c00-9907-f8e84da2c392"
        },
        "item": {
          "id": "2d69df00-192f-4f14-b034-1fcb4ec7f5e9",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "af05b015-0cdd-4861-ae0d-ababdd3f6819",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b051590-bacd-42c3-8e99-597b98c789cd",
        "cursor": {
          "ref": "6e0f2ca7-ac3a-43df-964c-45b4a7d773d3",
          "length": 244,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "98fecea4-992c-456c-abc2-52049689c45e"
        },
        "item": {
          "id": "1b051590-bacd-42c3-8e99-597b98c789cd",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "134e2627-3acf-43f5-9efa-5bae1729ea8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b5a1aa0-36a5-4ef7-b8a5-6864d1feb492",
        "cursor": {
          "ref": "83f11a1c-c135-4c65-9a71-21c7ee04c0a3",
          "length": 244,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "ea622e41-88b6-4540-af4c-502676950c59"
        },
        "item": {
          "id": "2b5a1aa0-36a5-4ef7-b8a5-6864d1feb492",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "477d24f7-145f-4404-a520-61104bf27117",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebb8203f-3664-4044-b624-f3f4d43c1801",
        "cursor": {
          "ref": "d155d582-c386-4678-afa4-19527ed96022",
          "length": 244,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "19c73d26-ab00-4fcd-b956-6ad08efd46b2"
        },
        "item": {
          "id": "ebb8203f-3664-4044-b624-f3f4d43c1801",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "adea08b4-bb4d-4a25-a250-0bd1c8e0dd6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e87f335a-84f3-42f5-b86b-2bd92b90b6ba",
        "cursor": {
          "ref": "0c641af9-9a35-47ff-a3c1-091dc6da3d13",
          "length": 244,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "2fa65776-57e9-4681-8ead-7890a69c7fbb"
        },
        "item": {
          "id": "e87f335a-84f3-42f5-b86b-2bd92b90b6ba",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "6a0cda6a-a955-407d-8f2a-2e6b9febd5ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3537481e-cf23-4693-bfed-56970011aace",
        "cursor": {
          "ref": "a5e3c1b0-aeb2-4f9c-a1eb-30a97687926c",
          "length": 244,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "568f308c-b4d0-4aa5-af9f-44d2d7e46432"
        },
        "item": {
          "id": "3537481e-cf23-4693-bfed-56970011aace",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "2abd360b-928b-42a5-8a12-42947ca6e6b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3432f622-c5f0-4221-b775-3e09c4208d52",
        "cursor": {
          "ref": "9110c169-8672-434d-9f0d-5c05b32ce853",
          "length": 244,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "8e5d7bf9-6de0-4f04-90c0-6ab0d0b504aa"
        },
        "item": {
          "id": "3432f622-c5f0-4221-b775-3e09c4208d52",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b2b1ef35-467d-4d80-b801-c7472241c8a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b597a0e-686d-427b-a3c1-4f6cfc0e14ef",
        "cursor": {
          "ref": "1a1a28bb-6458-4fe9-b037-6b0ac03cf689",
          "length": 244,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "2b92044e-ad08-496e-bf95-5331f847b2c1"
        },
        "item": {
          "id": "6b597a0e-686d-427b-a3c1-4f6cfc0e14ef",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "733b2b5c-54cf-4729-a9ef-14bdab20fa46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb3d1219-cdc1-4a3b-93e9-888bcb2504a0",
        "cursor": {
          "ref": "27fee71c-3a9f-47c2-8e55-9a554f97217f",
          "length": 244,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "a3819d41-ae7e-4d16-b6a4-bd3fe15ebdd1"
        },
        "item": {
          "id": "bb3d1219-cdc1-4a3b-93e9-888bcb2504a0",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ac02828c-23ec-490f-8404-51708296a732",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e62d673-b660-4d4d-b298-bddbd706b3c4",
        "cursor": {
          "ref": "dc4abb96-c827-473f-a09c-d92b0eff94e3",
          "length": 244,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "5835b2cf-92b5-4dd8-b7be-65fa745936af"
        },
        "item": {
          "id": "6e62d673-b660-4d4d-b298-bddbd706b3c4",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "2674c67e-594d-4a01-b412-5b0df061ae45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f14b6043-d247-4dbf-b721-2d43f42c138c",
        "cursor": {
          "ref": "f59a096a-7e5d-459b-bbb0-239e5f9c6a42",
          "length": 244,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "1fef5579-f9c4-4100-b1e1-f2cc956cb981"
        },
        "item": {
          "id": "f14b6043-d247-4dbf-b721-2d43f42c138c",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "e6a90b3a-ae6d-4740-8d6b-cadff1c56ecd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c44a340e-ecbc-4836-a35f-4afe59b46958",
        "cursor": {
          "ref": "cfd0c6ee-378b-4f08-bd1e-b76570bd12c1",
          "length": 244,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "bc8d70e0-017a-4091-821e-c0f535e328a2"
        },
        "item": {
          "id": "c44a340e-ecbc-4836-a35f-4afe59b46958",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "58b66b42-70e3-48ec-8d94-8947cc579345",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79f886ef-1a85-44c3-b5e3-eb47eeac238a",
        "cursor": {
          "ref": "986e315e-a2c7-485a-8221-935e3b69ea5b",
          "length": 244,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "4c58b6b1-c690-4c78-ad08-c3acfd8051fb"
        },
        "item": {
          "id": "79f886ef-1a85-44c3-b5e3-eb47eeac238a",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "eb88afd7-1ba6-4e24-8f22-8be69f096473",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9943a0bd-7ab1-49ba-ba75-a48e69f606dc",
        "cursor": {
          "ref": "2f3aa4ce-9a38-4e18-a6e1-72933018f617",
          "length": 244,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "142d53d3-fa1d-4d52-b986-ca3bbdcd38b6"
        },
        "item": {
          "id": "9943a0bd-7ab1-49ba-ba75-a48e69f606dc",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "fd110baa-1d32-4379-a02e-428a1c6914cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "402abdb5-1fe9-48c8-9a38-c4765077f324",
        "cursor": {
          "ref": "53f49cb2-3737-4a9b-ac47-de8b76a099c6",
          "length": 244,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "cc8a0ba7-a1f1-45e3-84eb-191a37edb4c9"
        },
        "item": {
          "id": "402abdb5-1fe9-48c8-9a38-c4765077f324",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "8693f796-6cde-4497-9790-6413e3f76abe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1abbaba1-3fbe-4c82-b107-f742e0c660a0",
        "cursor": {
          "ref": "a792f529-faef-4de4-ae35-e21866677b23",
          "length": 244,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "73898010-e777-401e-9f9b-90b3906683e5"
        },
        "item": {
          "id": "1abbaba1-3fbe-4c82-b107-f742e0c660a0",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "b2901cde-b5cd-413d-ba8f-5e87e19f3c08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97baaaf9-d976-4be8-8dcb-e14658a40338",
        "cursor": {
          "ref": "620196e1-05fd-4da4-b5c5-94ce8690160c",
          "length": 244,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "4d2c5a01-f70a-4d69-91f7-7de2dbb083cb"
        },
        "item": {
          "id": "97baaaf9-d976-4be8-8dcb-e14658a40338",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "2f2c7fac-4239-46e0-8a2c-e833d0dfb87c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d3a066e-a003-43e6-b8fe-ea9219c36f21",
        "cursor": {
          "ref": "1b93b57f-baf7-4af5-92a2-724badf10b2b",
          "length": 244,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "1ea00ec4-1818-4969-9820-fb847d92fb34"
        },
        "item": {
          "id": "9d3a066e-a003-43e6-b8fe-ea9219c36f21",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "bd5e85a5-5f11-40de-a8e9-6ef8324d3c57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eabe678f-5c4e-4733-a058-a778abc38339",
        "cursor": {
          "ref": "694da921-e58f-4088-be21-047873529642",
          "length": 244,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "85086b32-05a6-4db2-b492-7e79e46bd40c"
        },
        "item": {
          "id": "eabe678f-5c4e-4733-a058-a778abc38339",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "afa126df-ce9f-4940-9e6f-c2b8cc72ca6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf0b81c7-c2e8-493a-9372-4e76cc1ba67c",
        "cursor": {
          "ref": "6341d191-65a7-4bb8-a183-26b1a3a6b2ab",
          "length": 244,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "d916880d-9258-414e-b92f-17f6eac765e9"
        },
        "item": {
          "id": "cf0b81c7-c2e8-493a-9372-4e76cc1ba67c",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "50fbc2b4-482f-4f1d-80fa-807372a1b2e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e535768-58f0-4789-8f54-ce86cb1be80f",
        "cursor": {
          "ref": "212f8051-4fcd-429f-bc68-2574a88a5007",
          "length": 244,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "b5f716d8-5136-449b-8b9b-5fb3f0f04d0c"
        },
        "item": {
          "id": "5e535768-58f0-4789-8f54-ce86cb1be80f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "9a718bb7-dcd0-4d06-a92d-a1ac3c140764",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "13d95dce-82ca-408a-a632-ab15efbed036",
        "cursor": {
          "ref": "9dac3640-eadf-446f-bf25-299540772d9e",
          "length": 244,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "f013a644-e7ac-4847-882b-518413c30e6d"
        },
        "item": {
          "id": "13d95dce-82ca-408a-a632-ab15efbed036",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "c04a64aa-e9a6-4269-b73d-189ae3623b85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 217,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fedb9d7-1ab8-45cb-aa27-08d58e7fe89d",
        "cursor": {
          "ref": "e4af51ed-e7c3-4915-aa1c-4417eda081cf",
          "length": 244,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "5525c8ac-5325-4238-bfe6-864b997de5c6"
        },
        "item": {
          "id": "8fedb9d7-1ab8-45cb-aa27-08d58e7fe89d",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "b10790cf-0c63-4fe3-817f-126c4750b756",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d63af27c-6e16-48dc-8a0c-a8dd14ce32db",
        "cursor": {
          "ref": "363e7db0-2034-43d8-b87a-b3f18ac42b97",
          "length": 244,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "74cae6bb-311a-4c52-a4f6-b91297aaf048"
        },
        "item": {
          "id": "d63af27c-6e16-48dc-8a0c-a8dd14ce32db",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "5bccfc68-2448-4c0e-86ec-b3cc86910ea5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 228,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2691b590-5934-43f2-80af-af199897641e",
        "cursor": {
          "ref": "ce7d1b24-cf71-4db9-9d86-da187b03d2ee",
          "length": 244,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "be133b9f-26cb-4b0c-9a28-c1073ab5588a"
        },
        "item": {
          "id": "2691b590-5934-43f2-80af-af199897641e",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "57f9f6f9-6c32-4401-b753-27986237749c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68c451a8-9855-4759-9f09-ea1cb9f1e55c",
        "cursor": {
          "ref": "b4df92c0-f521-4ab3-ac68-bac27f2542a2",
          "length": 244,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "c9811163-facf-4f0d-8cf9-d299e8e060f2"
        },
        "item": {
          "id": "68c451a8-9855-4759-9f09-ea1cb9f1e55c",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "262e6689-e49f-4634-944f-302226d8f5f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f78a0286-ee14-4fe3-9b68-e685e5900dcf",
        "cursor": {
          "ref": "c7b8a17b-a362-44bf-8698-123195fb195c",
          "length": 244,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "95def9db-0202-4030-848b-5233f8ccabb2"
        },
        "item": {
          "id": "f78a0286-ee14-4fe3-9b68-e685e5900dcf",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "aab48978-2c22-4dff-9362-d455bbd44a26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6d4a13c-fddc-4c8d-81ac-c54f01adc5d1",
        "cursor": {
          "ref": "09df1cbd-cc81-4753-8e1d-66b54feb9197",
          "length": 244,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "a58b396e-19fd-4edd-9a4b-a9433f4550b5"
        },
        "item": {
          "id": "b6d4a13c-fddc-4c8d-81ac-c54f01adc5d1",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "cfa3c1ef-6248-4cb1-8981-35d367794871",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96bb48c2-7c55-4c12-8e4b-c9d929d3a9f9",
        "cursor": {
          "ref": "4718ca6f-3b47-45d0-af20-2ec46cafd75d",
          "length": 244,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "d4098945-4ed9-4294-b9d7-57045a2d82d9"
        },
        "item": {
          "id": "96bb48c2-7c55-4c12-8e4b-c9d929d3a9f9",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "9c23a61d-9bf7-4068-9a0b-e1d89ea8646a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1fccc67-2292-4c23-9d09-75d65d3e774d",
        "cursor": {
          "ref": "ee6e3137-0bb7-4a5b-a567-64dcaa8fd103",
          "length": 244,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "4d70c226-ffae-4ec3-9d61-bc81e310cab4"
        },
        "item": {
          "id": "e1fccc67-2292-4c23-9d09-75d65d3e774d",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "8449b829-17a7-457b-a7b7-ca510e8b9058",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2186f38-97d9-495c-a53c-50329f0d4ad2",
        "cursor": {
          "ref": "9d51ff8b-9a3c-4454-b28f-9b1995e55b61",
          "length": 244,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "8fc0b05f-dcbd-4a71-b52f-0025f8edd7a5"
        },
        "item": {
          "id": "c2186f38-97d9-495c-a53c-50329f0d4ad2",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "2906a60c-5db9-40dd-b049-a75fed440510",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d97a7c77-bd78-4569-ac50-e78b5dfe8a23",
        "cursor": {
          "ref": "3f356523-0b72-4f2e-8dec-b2f7fb525727",
          "length": 244,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "c7886978-87d8-4d74-9d34-52d61c64953d"
        },
        "item": {
          "id": "d97a7c77-bd78-4569-ac50-e78b5dfe8a23",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "804a2475-82d6-4ea2-bd20-ea4132b990fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cd0764c-698d-4239-8b85-2685b6d973b6",
        "cursor": {
          "ref": "5baec0df-4958-4e1c-a130-c2ac99a40e03",
          "length": 244,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "ce959693-ce67-4307-bc0a-3034c5873cff"
        },
        "item": {
          "id": "8cd0764c-698d-4239-8b85-2685b6d973b6",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "e307636a-1be6-4bc0-9830-f0b053381a10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "315e3dc7-8e54-4a83-a310-6e45685def48",
        "cursor": {
          "ref": "278b88ee-75b9-4147-840b-bd2fd4d05c4c",
          "length": 244,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "ba3ca708-ae9a-47f5-9fbe-1083971095c8"
        },
        "item": {
          "id": "315e3dc7-8e54-4a83-a310-6e45685def48",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "bc4965ab-eb0f-4e49-81b2-89437937f45e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c326ffa1-d839-4009-8b40-61e8eb0995c6",
        "cursor": {
          "ref": "d8d91b82-7a36-4b67-b2d8-6bb04ddd2865",
          "length": 244,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "66f1ed3c-6936-405b-942b-c541cbcaee83"
        },
        "item": {
          "id": "c326ffa1-d839-4009-8b40-61e8eb0995c6",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "e6fa7dbb-5469-470b-b28b-ee0742fd9d92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c280a897-7af8-490a-a259-11b9551eed7e",
        "cursor": {
          "ref": "83e57a51-1d3f-4ed1-9d12-103f9349d9d4",
          "length": 244,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "d9f0c437-90df-415c-b6de-07bd591e77ed"
        },
        "item": {
          "id": "c280a897-7af8-490a-a259-11b9551eed7e",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "940bc7fa-ffc3-440c-9efb-2ed3a0fb4298",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95f4e5c1-3793-4f72-ba87-9d105412f1f3",
        "cursor": {
          "ref": "2f0b50a9-b8d2-46e3-94d1-11b744d3fb4c",
          "length": 244,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "1c66e646-f3f8-41cf-9067-16b185e9a635"
        },
        "item": {
          "id": "95f4e5c1-3793-4f72-ba87-9d105412f1f3",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "ab75f5ba-2686-4887-a1c5-1601e516a8db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b917e191-588b-44ae-94eb-f8144543031d",
        "cursor": {
          "ref": "2f441e13-9349-4e50-b74f-9ee4e9a6e3b2",
          "length": 244,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "f21a848b-072b-4ba6-b096-834254800027"
        },
        "item": {
          "id": "b917e191-588b-44ae-94eb-f8144543031d",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "8278211d-7545-43d0-9ea0-6cb15f842773",
          "status": "OK",
          "code": 200,
          "responseTime": 695,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "7fce66ca-494e-4842-8f33-c338d6646e1e",
        "cursor": {
          "ref": "c4dde96f-0892-4466-921b-8e2e79f00684",
          "length": 244,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "c396f114-ba40-4943-9ea8-b0e6c8a6f1c1"
        },
        "item": {
          "id": "7fce66ca-494e-4842-8f33-c338d6646e1e",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "6711f5d8-229d-4773-90d5-eb11cf95b83b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83abd3c8-a726-4c72-9f99-1c97af9aa3c9",
        "cursor": {
          "ref": "4d128517-c532-4cc9-8c9f-88f1f37cfa6b",
          "length": 244,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "fd6dc334-33f2-4630-a645-e915d1eb04c9"
        },
        "item": {
          "id": "83abd3c8-a726-4c72-9f99-1c97af9aa3c9",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "d46bf191-b02d-4efc-8bad-f0e963e9c668",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd07cd92-4566-449e-964a-1a2bf22490bc",
        "cursor": {
          "ref": "f59f5d1d-fd27-4027-af0d-f7c8664e28a9",
          "length": 244,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "d7be7831-6689-4ed3-ae8a-de9f5cbefc1c"
        },
        "item": {
          "id": "cd07cd92-4566-449e-964a-1a2bf22490bc",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "8ab007a9-1435-4c19-b9a0-40a9792f127d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eed389fa-5820-4bdf-b3f5-17eaec99ae0b",
        "cursor": {
          "ref": "16f08e17-d2cf-4736-beb5-97f26811cac7",
          "length": 244,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "eb8ee358-63d1-4047-aa09-ae846d24ad20"
        },
        "item": {
          "id": "eed389fa-5820-4bdf-b3f5-17eaec99ae0b",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "f6616746-b85a-4abc-956d-cabef56d86f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46e6c470-3c41-4bfe-b1c3-87a2ba42d11d",
        "cursor": {
          "ref": "0209ab91-1542-4b23-8eb9-a1721f4b48e9",
          "length": 244,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "cf2a3863-cc19-4093-8ac9-b3675e8415cf"
        },
        "item": {
          "id": "46e6c470-3c41-4bfe-b1c3-87a2ba42d11d",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "aee0e1ef-aaf2-4c28-975c-28104be706f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af0063c4-4228-4e87-bc8f-fa4d04d7b3dc",
        "cursor": {
          "ref": "054dedae-e7c4-49a8-8c39-cf33a6271a2d",
          "length": 244,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "e86a5e0b-62a1-4f9f-b7d6-c70298ba593a"
        },
        "item": {
          "id": "af0063c4-4228-4e87-bc8f-fa4d04d7b3dc",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "7f44658a-0820-4f8f-b82e-4a0041e887ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3df5b162-7c91-4a1c-a800-42e5ebd09de1",
        "cursor": {
          "ref": "580e3d33-4151-46ca-9700-f6587f75f3e5",
          "length": 244,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "cef5fca2-630c-421f-86b7-61010c056d4b"
        },
        "item": {
          "id": "3df5b162-7c91-4a1c-a800-42e5ebd09de1",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "7ebc0d71-e1a1-4a98-b6d0-9ac5cf94f4c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72a8fcfe-0efc-4aef-8dc6-32e7bca26a68",
        "cursor": {
          "ref": "298a16e5-3bde-4344-8e06-a19c718edcdf",
          "length": 244,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "b464d38c-83ec-4c03-a8e5-9b171368ead9"
        },
        "item": {
          "id": "72a8fcfe-0efc-4aef-8dc6-32e7bca26a68",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "4ab73b62-9c41-4899-b76a-25a3a7779695",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0be1fe0f-935e-4648-aba0-4eb2590606cf",
        "cursor": {
          "ref": "538f2b60-bafe-452b-a135-6dd959b56710",
          "length": 244,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "ca03e988-1080-4f0d-be81-f3a2cba06242"
        },
        "item": {
          "id": "0be1fe0f-935e-4648-aba0-4eb2590606cf",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "805236c7-d851-445c-8633-2d910b232fc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fd43ad4-8e1f-4d3f-bd65-2582c74ff561",
        "cursor": {
          "ref": "8a8ae6fd-f85c-4dae-8759-1b53193352bb",
          "length": 244,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "52b9f252-34bf-4c88-a7d1-7bc53167b391"
        },
        "item": {
          "id": "4fd43ad4-8e1f-4d3f-bd65-2582c74ff561",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "e7d3e868-7768-488c-b0ab-98c29ac07306",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "472ca677-fd30-450f-81f8-eab2aefcb4f3",
        "cursor": {
          "ref": "5d93fb4d-1944-4a55-95a3-74ebef8b64b4",
          "length": 244,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "83607bd5-56b2-425a-949e-3eef8db3058a"
        },
        "item": {
          "id": "472ca677-fd30-450f-81f8-eab2aefcb4f3",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "1134da1c-e43a-423b-93a9-2c27eba8196f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "573536d5-e29a-4f79-bfc2-05b57326eafb",
        "cursor": {
          "ref": "3eb340e5-1351-48b1-a8fb-d77a60334217",
          "length": 244,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "1381ac29-ffa1-42b5-b343-f49f027f1e1d"
        },
        "item": {
          "id": "573536d5-e29a-4f79-bfc2-05b57326eafb",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "371c4c35-ef1a-4ed0-982a-927715627287",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5540c79c-12c1-493e-9a69-c9b622bdb3d9",
        "cursor": {
          "ref": "bcff7a13-4ba0-4e2d-8c73-3a09d2e78261",
          "length": 244,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "30c19f74-25af-4c32-9610-b5e93e8c8063"
        },
        "item": {
          "id": "5540c79c-12c1-493e-9a69-c9b622bdb3d9",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "968a4798-c8e3-47f4-810c-fb72f4fa3e8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a232953-5ef0-418c-9dc4-bdf29266ed00",
        "cursor": {
          "ref": "700fe7a4-f329-4698-8d88-4ed6b19a0361",
          "length": 244,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "dab079e9-bef7-4b08-9e69-ca006d79e372"
        },
        "item": {
          "id": "1a232953-5ef0-418c-9dc4-bdf29266ed00",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "85799ce0-6002-4240-b58c-8ceb7226d64f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dc289a4-535c-40bf-ba4c-6772e39ad694",
        "cursor": {
          "ref": "c56516b9-994f-41ec-99d9-2ab796ec23c9",
          "length": 244,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "3434af57-7260-4531-b3cd-af95d9967481"
        },
        "item": {
          "id": "9dc289a4-535c-40bf-ba4c-6772e39ad694",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "9afb4311-d7d4-48b7-8087-b25c34c74678",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e202bc86-a58d-49d8-a053-4a9c5fb7ab80",
        "cursor": {
          "ref": "71610efc-5f98-4dc5-97b8-564f569b2c14",
          "length": 244,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "11c2bbbf-3126-4dad-984f-f36931e45309"
        },
        "item": {
          "id": "e202bc86-a58d-49d8-a053-4a9c5fb7ab80",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "68ae3a35-774b-4c14-97bb-52bb731a890a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16bf2ea8-af42-426c-bbf4-7c0b7b5d557a",
        "cursor": {
          "ref": "c4b316aa-f0a1-4aae-98ea-d0acbdba90a3",
          "length": 244,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "5dc0ea97-f3a8-4dec-a8d3-30b993bd71a4"
        },
        "item": {
          "id": "16bf2ea8-af42-426c-bbf4-7c0b7b5d557a",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "0f4532b0-1f7a-4371-b4ee-2dd79cd76b44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2c6ed03-264f-482b-89ab-d6a8a817fad8",
        "cursor": {
          "ref": "d197249b-f592-4b81-8079-30c9de40435e",
          "length": 244,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "1a75c9e1-9ba7-4232-8ffe-9f54836c4c46"
        },
        "item": {
          "id": "b2c6ed03-264f-482b-89ab-d6a8a817fad8",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "0a13702c-3624-45db-b640-39d55484be81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a998e1ba-0bed-462f-8ccb-ea29e48facc2",
        "cursor": {
          "ref": "e5423b47-d0e3-466a-aa5e-885726b6524d",
          "length": 244,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "170776bb-50db-48d2-b846-610a6437f70b"
        },
        "item": {
          "id": "a998e1ba-0bed-462f-8ccb-ea29e48facc2",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "1a04ef53-09fc-4d73-8580-f88f24be81ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72b4cecc-ca0f-4d8e-97cd-0f609c276fb6",
        "cursor": {
          "ref": "2caffa8b-61dc-4e94-8518-1893051436b4",
          "length": 244,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "3e595b09-64bd-4182-9238-b61abd2bb9db"
        },
        "item": {
          "id": "72b4cecc-ca0f-4d8e-97cd-0f609c276fb6",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "c26c660a-5255-4702-a27d-bbe462e9f5ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8d157d1-c87e-428e-97e1-de4080df43e4",
        "cursor": {
          "ref": "fbb4aaf2-925b-49ee-849e-510f1715e960",
          "length": 244,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "0e24f624-14bd-4b98-82c5-9fe14806f9d7"
        },
        "item": {
          "id": "a8d157d1-c87e-428e-97e1-de4080df43e4",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "27c1f747-d4ec-4c04-90c4-15794b865553",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77f6e7ae-8a87-4615-b388-6da3b083b20a",
        "cursor": {
          "ref": "2b4d0d8e-8dfc-4e94-9c7d-b52259001170",
          "length": 244,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "55251c77-0c1a-40e2-8093-63b8f9ad75af"
        },
        "item": {
          "id": "77f6e7ae-8a87-4615-b388-6da3b083b20a",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "e79e5a7e-c867-45f4-9e3a-9a5590197cef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aa8c4ed-2e1c-48fa-bd38-9a0b78ef6197",
        "cursor": {
          "ref": "89c28445-f803-4701-8ba5-d7265e06f3bb",
          "length": 244,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "b199ea48-f0af-455f-8cf2-06c9372b66e2"
        },
        "item": {
          "id": "9aa8c4ed-2e1c-48fa-bd38-9a0b78ef6197",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "5a7db1ed-daaa-480a-84a0-cebe70ffeee4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c52347c2-8b27-41b7-8bdb-11ff84354fc9",
        "cursor": {
          "ref": "2feb1e40-80fe-4e23-bd32-20908c0fc7e5",
          "length": 244,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "62b6ee2b-20e0-47e0-b865-ff6bef577b17"
        },
        "item": {
          "id": "c52347c2-8b27-41b7-8bdb-11ff84354fc9",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "822da51a-fc85-447d-a9bf-555347820177",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d081f4c-40ea-4ba3-91e2-b4221e5b0da6",
        "cursor": {
          "ref": "18689c7e-1c49-47ad-8cbb-b64c9a6b3314",
          "length": 244,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "2a69ae76-66e7-4ae8-99e5-645bbbb85770"
        },
        "item": {
          "id": "0d081f4c-40ea-4ba3-91e2-b4221e5b0da6",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "2967e36a-c9a5-4d05-b243-c4e5df4d5d31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edd37121-a189-4266-a0e8-0da1a36e0685",
        "cursor": {
          "ref": "a617c46b-87fc-493e-aaa0-d58b9fe1b1e6",
          "length": 244,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "5706cf4d-6cd0-446d-827f-fd5f313660ef"
        },
        "item": {
          "id": "edd37121-a189-4266-a0e8-0da1a36e0685",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "5317415d-db75-46c9-969d-f5d00d5372a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71fbe5ef-531f-4502-a66d-a4ae5fa6b674",
        "cursor": {
          "ref": "1f27ce61-54a0-4444-b521-cb4af41baa3b",
          "length": 244,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "01a7ed53-13f9-404b-8014-e7e342b16e98"
        },
        "item": {
          "id": "71fbe5ef-531f-4502-a66d-a4ae5fa6b674",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "56b15128-27ef-4615-94e6-7bf565978579",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84435159-de16-4d60-b991-a8b096b05935",
        "cursor": {
          "ref": "6ebb6136-1ae0-4437-a8d4-9e4c8e2d9575",
          "length": 244,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "dd8a8fdc-97b1-48a5-922b-db0425ca4a2d"
        },
        "item": {
          "id": "84435159-de16-4d60-b991-a8b096b05935",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "d2a2bcef-3c12-4eef-b0bf-a59b5da88e31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07f3f240-cdb7-46de-b209-dfd989105a48",
        "cursor": {
          "ref": "6827fac9-f1e5-48f2-baca-2d181ae415b2",
          "length": 244,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "882d885e-e35d-4473-87a1-c478108ef123"
        },
        "item": {
          "id": "07f3f240-cdb7-46de-b209-dfd989105a48",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "1c76ee1a-9ce9-4cc8-8082-441fd406827c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1200742-f682-46c5-bc5b-316cdf23af4e",
        "cursor": {
          "ref": "b4caef5c-94a5-4972-b321-ec6d42bf206d",
          "length": 244,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "992d9d42-4e3c-4e47-8a58-7de2f96eb2d2"
        },
        "item": {
          "id": "f1200742-f682-46c5-bc5b-316cdf23af4e",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "2ff4bf46-3310-4ed6-99d8-b9730df78df9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e176ecac-8e2f-4538-acc3-a6f89b9718cd",
        "cursor": {
          "ref": "2d7d8606-ef41-43c0-ad24-596991d17ce8",
          "length": 244,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "20807161-9396-4ad2-8b92-6c6e01b97be3"
        },
        "item": {
          "id": "e176ecac-8e2f-4538-acc3-a6f89b9718cd",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "b66c7e33-35ff-4b78-b090-2d9ea2d93dc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82f3a17c-075d-41a5-851a-ea03d6e4c5b2",
        "cursor": {
          "ref": "07a32ecd-aa3c-4127-837f-c88c6606a2a2",
          "length": 244,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "d24c1730-1489-492c-adfd-9745e858ed96"
        },
        "item": {
          "id": "82f3a17c-075d-41a5-851a-ea03d6e4c5b2",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "c3ddf7e9-5f2f-4c94-a22d-0eff712216bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "084a2c2b-a13b-480f-b0b9-9ff76cce27f0",
        "cursor": {
          "ref": "6312f953-d4ef-4298-b4fb-3c4fb7a11536",
          "length": 244,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "17549e4b-087b-4186-80df-c6875545c945"
        },
        "item": {
          "id": "084a2c2b-a13b-480f-b0b9-9ff76cce27f0",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "1a738551-f399-45e3-b9ac-d2525f80fff3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8af1fa3e-4eb9-4ef0-8852-3d87e69c0a45",
        "cursor": {
          "ref": "eb77f473-b982-4209-b06b-25add4b5828d",
          "length": 244,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "a7c523ab-9808-4801-b1d5-2be10504196b"
        },
        "item": {
          "id": "8af1fa3e-4eb9-4ef0-8852-3d87e69c0a45",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "0a0b4090-7014-4797-bf5e-46daf80ed871",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fcf5bde-5304-467e-9c97-3a8eeeb81fac",
        "cursor": {
          "ref": "c836a485-9cfc-4476-9752-6e32362d72db",
          "length": 244,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "8b719e94-5952-475e-a6a6-964695fedf51"
        },
        "item": {
          "id": "6fcf5bde-5304-467e-9c97-3a8eeeb81fac",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "b157dc2c-71af-4062-8c87-7be3473faf6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d8b02eb-bfd4-4482-a891-f5f4fe711fc6",
        "cursor": {
          "ref": "7b00e99d-7871-4c37-9f84-9044899694d5",
          "length": 244,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "9a7e018b-3bfd-45ef-9f83-0333f39c0311"
        },
        "item": {
          "id": "0d8b02eb-bfd4-4482-a891-f5f4fe711fc6",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "14a7edac-a2a6-472c-9706-6fa88a0e06fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "508c83c5-4c36-4c03-a637-0051c00e5657",
        "cursor": {
          "ref": "4007bfdc-c647-407f-a939-a3f0872bf1c3",
          "length": 244,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "5d02d7c8-af5f-41c8-9967-4a1e95639e61"
        },
        "item": {
          "id": "508c83c5-4c36-4c03-a637-0051c00e5657",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "76ac767e-51bd-49ef-b303-0cf680844c71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d7565bd-a9da-4315-a131-e03e45d52ebd",
        "cursor": {
          "ref": "9ee2eacf-8144-4b20-a288-c2f6519e82c0",
          "length": 244,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "a32933e8-3933-4992-98d5-a2c04afeaa32"
        },
        "item": {
          "id": "5d7565bd-a9da-4315-a131-e03e45d52ebd",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "3698758a-6c47-4bfa-b933-d9e26e717b6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "809657c5-5d22-486b-9ef2-aa4857e1eb9c",
        "cursor": {
          "ref": "ab821c34-3930-49f0-907a-cfdb941ff687",
          "length": 244,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "96ff77b4-99ff-43e2-a162-97be837683d8"
        },
        "item": {
          "id": "809657c5-5d22-486b-9ef2-aa4857e1eb9c",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "80bfb235-6ccf-45a0-b45e-50f5a5304464",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6395ae67-ef83-4765-a4c7-1971fbaf9a89",
        "cursor": {
          "ref": "9114f7d6-403c-4f00-b8de-1109e86c7366",
          "length": 244,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "c87ba625-05d3-401e-93b4-958689b67ea1"
        },
        "item": {
          "id": "6395ae67-ef83-4765-a4c7-1971fbaf9a89",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "eaacba0a-1faf-4814-be30-eac5c471345e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8d7c251-adc1-4218-bf21-0b363525e262",
        "cursor": {
          "ref": "18f9ea10-17bf-42bb-ad24-0e10da5f7bb8",
          "length": 244,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "876fe037-e0e9-4b5c-bf36-27148327f5b5"
        },
        "item": {
          "id": "c8d7c251-adc1-4218-bf21-0b363525e262",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "28d7771b-1ad8-44bb-8cb6-37f7a1bcbf69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abe7c6c7-45ca-48d0-bfc8-19bd0076da17",
        "cursor": {
          "ref": "e7c8352b-d6e5-4f54-a66a-010fc70c14cc",
          "length": 244,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "c64d81c0-b995-4321-8955-b73297ad3a2d"
        },
        "item": {
          "id": "abe7c6c7-45ca-48d0-bfc8-19bd0076da17",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "75c9ed70-a9ad-4d84-9202-d9b33f8b7449",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24e045b1-c98b-41cc-a9c0-e402eecaf382",
        "cursor": {
          "ref": "148fbd8b-9c80-4443-aec6-08129498348b",
          "length": 244,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "b2fc61e3-eda1-491b-99a0-80beb9894dc2"
        },
        "item": {
          "id": "24e045b1-c98b-41cc-a9c0-e402eecaf382",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "f18bd771-060e-4d01-b715-15998338aabf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ea33947-9e2a-4638-94ad-e5194ba4bd55",
        "cursor": {
          "ref": "067b80fa-02ac-4e47-a397-35842b88c80a",
          "length": 244,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "aaf11271-0794-4c65-82eb-bd326e5992b6"
        },
        "item": {
          "id": "9ea33947-9e2a-4638-94ad-e5194ba4bd55",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "e8c0dca4-0e07-4d1a-a69b-f2e2b457d470",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa39109e-0981-4a36-8c81-16351f55f343",
        "cursor": {
          "ref": "fece968a-7a71-4f21-94f2-25a44a094a59",
          "length": 244,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "ff450256-ebe8-46fe-8daf-7604d0c47e81"
        },
        "item": {
          "id": "aa39109e-0981-4a36-8c81-16351f55f343",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "6a2b72d0-3bc2-48cf-bfc1-38603fa67076",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76b7ea25-44ac-4ab1-a765-51028bdc79ab",
        "cursor": {
          "ref": "c617200f-d5cc-47ea-905a-803f14f6e288",
          "length": 244,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "e7a19fdb-4ecf-4a35-959e-dc04941203e7"
        },
        "item": {
          "id": "76b7ea25-44ac-4ab1-a765-51028bdc79ab",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "c52094f6-9f38-41c2-b1e9-36a329d43272",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ac3af32-1efb-4a92-b51c-17df5b2c1ffb",
        "cursor": {
          "ref": "f9a7c8fa-dffb-418c-bca4-82046944b3b3",
          "length": 244,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "da54165e-f5b6-4f28-b8ec-57fe1dd99fb9"
        },
        "item": {
          "id": "9ac3af32-1efb-4a92-b51c-17df5b2c1ffb",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "5757c2c1-dd01-42c0-a6b4-c613d69f8f81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c3c4a20-fccd-4c89-9a59-ff616cb2a88a",
        "cursor": {
          "ref": "965cd46a-30ab-4f87-8af3-e803752e959e",
          "length": 244,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "b8028851-212c-4270-829c-d563a45057a2"
        },
        "item": {
          "id": "2c3c4a20-fccd-4c89-9a59-ff616cb2a88a",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "f0b7c808-6488-4cc9-b8ef-cfaadf440497",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a22494b2-2971-4a94-a279-89b9ce641484",
        "cursor": {
          "ref": "53771463-89f9-4270-9237-0fb80dc47788",
          "length": 244,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "9d707ccf-eb34-4714-b7ad-32593b033136"
        },
        "item": {
          "id": "a22494b2-2971-4a94-a279-89b9ce641484",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "49acf99e-0e55-4819-a277-91b6258ee45a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd2fd5a1-f937-4853-959e-3926ae3320ab",
        "cursor": {
          "ref": "3ce0f357-2c2d-4be8-8c92-8d36153d88ac",
          "length": 244,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "064029e2-6548-4dbf-a76c-889642eaa480"
        },
        "item": {
          "id": "cd2fd5a1-f937-4853-959e-3926ae3320ab",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "cfc01cdc-6ce4-43cf-ad47-aec10a49d90a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "884b2a70-9309-42e6-be7d-41d709d0ba96",
        "cursor": {
          "ref": "a554be46-5004-4d91-93f2-7fe7d2fd51f8",
          "length": 244,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "b37a814e-59d2-47df-b52a-0ebdb2754027"
        },
        "item": {
          "id": "884b2a70-9309-42e6-be7d-41d709d0ba96",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "197bac99-b6fa-4626-aff1-884c86eb2ae6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97ca46be-3b1c-4d9f-be0f-f127cae26d51",
        "cursor": {
          "ref": "09b2ac93-c8ea-44d1-9514-83a2c1a76bd4",
          "length": 244,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "668b2d11-f5a8-4e48-8659-3b0b220da6fd"
        },
        "item": {
          "id": "97ca46be-3b1c-4d9f-be0f-f127cae26d51",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "bfdddaee-e55e-46a7-8aed-f00059193cf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc78bde2-ee57-41c8-bb88-c5c1a0582152",
        "cursor": {
          "ref": "fc38394b-a676-4842-89ee-3a454118f770",
          "length": 244,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "3911cfab-6b4d-415d-b459-8255b476930b"
        },
        "item": {
          "id": "dc78bde2-ee57-41c8-bb88-c5c1a0582152",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "9cce294c-79c2-4858-be99-256b6834e2d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96fa8256-26be-4a74-80dd-e5de926284fb",
        "cursor": {
          "ref": "ea7933ea-f423-4de8-acaa-a774a56a4edf",
          "length": 244,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "b381be5a-68bd-4cbb-aedd-6f8f1964a47d"
        },
        "item": {
          "id": "96fa8256-26be-4a74-80dd-e5de926284fb",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "29a98905-6d66-4f4b-88cf-37fecfdd4a2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbff5c87-3fa9-4322-8aa3-fddf2fb2d6ac",
        "cursor": {
          "ref": "6c91a80e-e1a2-4a40-9c1c-2e5435ec4ace",
          "length": 244,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "bda6d064-c07e-45e0-8ab6-043da2c50fc6"
        },
        "item": {
          "id": "dbff5c87-3fa9-4322-8aa3-fddf2fb2d6ac",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "64bdf22c-30c2-49f8-b2af-91bf2db1cd6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90d03e7d-7df3-47b8-9091-8bb6adab1080",
        "cursor": {
          "ref": "147b6ee0-bad3-42d0-a818-69fc44281516",
          "length": 244,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "ec204033-fdbd-48e6-8186-4c428c405cb7"
        },
        "item": {
          "id": "90d03e7d-7df3-47b8-9091-8bb6adab1080",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "06903b8b-30e6-4384-8e31-6afa65bae6bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f026d0a6-60cb-4f9c-9115-64fefd6f3a04",
        "cursor": {
          "ref": "8591c354-d7b5-4737-bc6d-b8705a7515a4",
          "length": 244,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "2e6c6e56-e491-4c3f-a8a2-50e54b4188c1"
        },
        "item": {
          "id": "f026d0a6-60cb-4f9c-9115-64fefd6f3a04",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "e3dff3b7-16ec-49df-ad1b-5f5c8dcd0c61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b16978ce-90d2-49b0-b505-4dfc22a69cf9",
        "cursor": {
          "ref": "d833ceda-3bdf-4a01-a6f3-39371076267d",
          "length": 244,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "97cd9cf8-c5bf-4c19-a97b-305353c2c5dc"
        },
        "item": {
          "id": "b16978ce-90d2-49b0-b505-4dfc22a69cf9",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "a96a05e1-3258-497e-b984-0589a9ab3303",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d3b884c-4db6-4350-8619-47622a2f1a7b",
        "cursor": {
          "ref": "34e5eb83-35e8-44de-9c87-53157d366fe2",
          "length": 244,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "2a739b79-b825-41e7-8481-711cdedb6cab"
        },
        "item": {
          "id": "3d3b884c-4db6-4350-8619-47622a2f1a7b",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "3f4e5a2e-f1b9-4e78-a3d2-f57757664401",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abff9e5f-d198-41ee-a0f9-bcb4457fe9fd",
        "cursor": {
          "ref": "bbf0dce1-c3e0-4c0e-87e6-b7cf25473aba",
          "length": 244,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "a2effa4c-01c6-497c-9203-e87195397a4f"
        },
        "item": {
          "id": "abff9e5f-d198-41ee-a0f9-bcb4457fe9fd",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "56db5d8e-366e-449f-b859-314c404515b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3946be0c-2b61-4e8d-9062-7580bd6be521",
        "cursor": {
          "ref": "1427d9df-272f-42ae-8dd0-a884a55227c1",
          "length": 244,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "8d071e23-cf8d-421e-a1b6-68b6e4197b45"
        },
        "item": {
          "id": "3946be0c-2b61-4e8d-9062-7580bd6be521",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "bdf51041-89a2-485f-af83-572bf43d986f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "518204e1-3907-4d20-8223-d27449ce17c6",
        "cursor": {
          "ref": "595cb6ed-cce7-4757-a2fc-4b6813ff0daa",
          "length": 244,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "33eaba30-1c05-45c1-9ef6-6106cc860349"
        },
        "item": {
          "id": "518204e1-3907-4d20-8223-d27449ce17c6",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "b76e4812-9de7-499f-9051-545a94207eb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43ce4766-c96f-4363-9d75-f6fa222c16d4",
        "cursor": {
          "ref": "761beb98-4cde-4ab4-8e09-2220bfac4d5e",
          "length": 244,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "4e851347-418a-4fe4-ac01-660e769e6868"
        },
        "item": {
          "id": "43ce4766-c96f-4363-9d75-f6fa222c16d4",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "04a2c0d9-32b9-4bbc-99d6-5e1d07534e59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7972f822-c138-46dc-8ab0-5cd07d59367c",
        "cursor": {
          "ref": "77d69b25-1ebb-4c20-864b-023e2e7005dd",
          "length": 244,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "aab1a0bb-a57d-45eb-8986-0de4a62b8a92"
        },
        "item": {
          "id": "7972f822-c138-46dc-8ab0-5cd07d59367c",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "e1ea20bc-27a8-4511-986a-f03cef5d6bd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a40c1140-154f-4511-8ddb-cf3be5a02301",
        "cursor": {
          "ref": "71e579f2-c66b-4b0a-9598-4c0c27bc420a",
          "length": 244,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "6f84c75c-8d4d-48c1-adce-1c3e9943ad3d"
        },
        "item": {
          "id": "a40c1140-154f-4511-8ddb-cf3be5a02301",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "c9b9d25c-1f7d-4399-8a5d-56490090c218",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e4d6895-f4b7-4bbf-9675-80d032e59301",
        "cursor": {
          "ref": "c8815724-4951-43f0-9be9-8cde998c1342",
          "length": 244,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "c89e5313-de4d-4b95-8af0-ed5dfb495e35"
        },
        "item": {
          "id": "8e4d6895-f4b7-4bbf-9675-80d032e59301",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "eb2ad104-9e3d-47ae-95b4-e21a1c20d1f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86274a85-e8b5-48bc-9fe3-279633e1ee5b",
        "cursor": {
          "ref": "cf34b2fe-8667-4ecd-86d7-98a13da26e80",
          "length": 244,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "34487a7d-249e-4f29-8283-4ba747d3bbec"
        },
        "item": {
          "id": "86274a85-e8b5-48bc-9fe3-279633e1ee5b",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "0893d3ee-907c-4fdd-8114-853e031c9706",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "754a0286-ac12-4c7f-983d-abcdf759a67e",
        "cursor": {
          "ref": "30cf7aa1-bb3a-4191-8a2d-0efa2128e20d",
          "length": 244,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "a599888e-0b96-492c-a0c5-0a83545827ef"
        },
        "item": {
          "id": "754a0286-ac12-4c7f-983d-abcdf759a67e",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "f12ac394-abbd-42e5-8674-02f411f5b2af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f7d9378-6e22-4a18-8413-50c10d5b0c46",
        "cursor": {
          "ref": "18097685-81ce-4c79-9a24-50a1c31e17d6",
          "length": 244,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "3d275b31-490f-4395-97ae-264862439d1d"
        },
        "item": {
          "id": "9f7d9378-6e22-4a18-8413-50c10d5b0c46",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "d4b553a9-9328-4fb9-b296-e9346286fae2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "336d1faf-27fd-497f-a6ec-29b0daf5519e",
        "cursor": {
          "ref": "4efc0ca9-73a6-4a92-bd9b-67f98785ae40",
          "length": 244,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "cf396373-e2ec-4a31-bbdf-47fc644e651f"
        },
        "item": {
          "id": "336d1faf-27fd-497f-a6ec-29b0daf5519e",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "a1061c4a-37a7-44af-aa5c-49d85e79d5f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3371c291-8871-4c05-8a8a-fcde9613f931",
        "cursor": {
          "ref": "c7e2ba30-00fb-42df-ac2c-4f57b42584f8",
          "length": 244,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "d30f1df2-e800-4eae-ad85-b7e1eba7deb1"
        },
        "item": {
          "id": "3371c291-8871-4c05-8a8a-fcde9613f931",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "372e0c8d-81f2-4295-b6e5-2717b9dd0fa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "013e8e72-90bd-40a0-baa4-347d4ec899a8",
        "cursor": {
          "ref": "73cb86cf-779a-4610-ae52-79d7f7607646",
          "length": 244,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "bf46e294-f5f7-45e0-8cc8-03d304715e08"
        },
        "item": {
          "id": "013e8e72-90bd-40a0-baa4-347d4ec899a8",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "4f196c10-7a6a-46a5-a9a1-16221cb12230",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ebf7779-8d73-4d0e-ae65-dd647c94416a",
        "cursor": {
          "ref": "1a5418a4-f565-4d42-a016-1b43d2f6efec",
          "length": 244,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "87497f0a-b043-44d4-900c-b44783584edc"
        },
        "item": {
          "id": "5ebf7779-8d73-4d0e-ae65-dd647c94416a",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "6f1f7f84-8d69-45ad-8309-e5091b71e052",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0be6fd49-0107-4f31-8844-24ae099d5df3",
        "cursor": {
          "ref": "ad9adf3d-232f-45ad-bae5-d164c76fc672",
          "length": 244,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "93e2707a-e3c6-4aa3-9e88-7e5c05ba61fb"
        },
        "item": {
          "id": "0be6fd49-0107-4f31-8844-24ae099d5df3",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "ed70755a-d868-410d-8261-539e9657aaae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86c04592-9276-4640-9441-95b5a6defb6c",
        "cursor": {
          "ref": "57309bae-531b-49b6-a4f1-d34a4d5d105c",
          "length": 244,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "c4ab5f40-9c49-4d6a-b99d-8501cf092746"
        },
        "item": {
          "id": "86c04592-9276-4640-9441-95b5a6defb6c",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ca4f6a77-7304-40cc-9566-83f1d65c111d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73b65316-415f-414f-bc3b-38ca68a8093d",
        "cursor": {
          "ref": "bde02df5-216a-4948-84dc-08f3ceb9ed6e",
          "length": 244,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "56779212-8245-403b-b7b9-88cdadcc3345"
        },
        "item": {
          "id": "73b65316-415f-414f-bc3b-38ca68a8093d",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "3766ad5d-d8bb-42b5-a12a-aa11eb22ab32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0171a850-278c-4976-8cae-606845798052",
        "cursor": {
          "ref": "7dbee16e-0cb6-4472-b957-36475ffeb5ad",
          "length": 244,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "bd4b5c1c-95fa-4e44-a1d8-976e74feaf0e"
        },
        "item": {
          "id": "0171a850-278c-4976-8cae-606845798052",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "e532ae86-4f6b-4568-9704-70ebc6bc56fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d48372b-29b2-49a9-9119-6492a77e3576",
        "cursor": {
          "ref": "372889b4-a2f2-4f7f-872d-f205e3568b61",
          "length": 244,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "ecab8e44-3d79-4edf-95bf-b307c8998bb4"
        },
        "item": {
          "id": "1d48372b-29b2-49a9-9119-6492a77e3576",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "c97261ef-5591-408d-86a9-057e6ad2d043",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5862eaf6-75b5-4005-a9cb-5197d4e7d1bf",
        "cursor": {
          "ref": "7c088d92-104c-4d89-bdd7-168b187fa5c3",
          "length": 244,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "ea02df75-9efc-4570-9d61-777076efee79"
        },
        "item": {
          "id": "5862eaf6-75b5-4005-a9cb-5197d4e7d1bf",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "abb19241-fb4d-496c-82d9-296b61f797a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f52a326-d0ff-4b86-b822-e74694bcfff0",
        "cursor": {
          "ref": "8071aff3-f9fa-4fc3-9a85-ffa2ddbcfc21",
          "length": 244,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "552eb86c-d8ca-49d6-b952-b2e01e9f12e0"
        },
        "item": {
          "id": "6f52a326-d0ff-4b86-b822-e74694bcfff0",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "12751956-d671-404b-aa54-a023ca9e97d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d0e9d5d-86a5-4543-a398-80d2df91905d",
        "cursor": {
          "ref": "cd68ba31-10e6-4b16-a799-67e9589dabcc",
          "length": 244,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "b0dec76d-a854-4411-8616-7fc7ca0fcf63"
        },
        "item": {
          "id": "7d0e9d5d-86a5-4543-a398-80d2df91905d",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "c48cb618-76e8-40fd-9894-cc5e5751d681",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "252fd820-013d-496a-b9ad-e256447a4a3d",
        "cursor": {
          "ref": "728b27dd-1dd5-495c-87e8-2f5fe6aea5f4",
          "length": 244,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "e3155cf4-45a6-44c8-807d-65aab6c6a661"
        },
        "item": {
          "id": "252fd820-013d-496a-b9ad-e256447a4a3d",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "a8801eff-487e-4daf-adac-208390ee5b1e",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "68f7e69e-524b-4310-9516-901d4278389b",
        "cursor": {
          "ref": "da677fc7-b7f3-40b9-85f6-aabc05dc8890",
          "length": 244,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "168e59bd-7353-498b-92f0-faf1e107f715"
        },
        "item": {
          "id": "68f7e69e-524b-4310-9516-901d4278389b",
          "name": "credentials_verify"
        },
        "response": {
          "id": "b5c2042b-07c2-4051-890e-8a9aade93ec4",
          "status": "OK",
          "code": 200,
          "responseTime": 1807,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "51047dd2-cb5e-4882-b322-4951566fe79e",
        "cursor": {
          "ref": "7d24f372-2e53-4b6c-b586-cf9dcb51cdfe",
          "length": 244,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "4dd87dc4-9f4f-4092-a034-8400f458ba24"
        },
        "item": {
          "id": "51047dd2-cb5e-4882-b322-4951566fe79e",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "8fcad2c4-3a10-4e90-a35d-2155bfba4212",
          "status": "OK",
          "code": 200,
          "responseTime": 2112,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "0af2a5d8-992b-4979-ac9f-fad3eaf335ed",
        "cursor": {
          "ref": "d0746416-8aa6-4906-b06a-ec417c487e68",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "975d1a93-5e65-476b-badf-f416030ce3b0"
        },
        "item": {
          "id": "0af2a5d8-992b-4979-ac9f-fad3eaf335ed",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "91d824e9-1b2c-4d6c-974e-53f7ef8b0280",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "0af2a5d8-992b-4979-ac9f-fad3eaf335ed",
        "cursor": {
          "ref": "d0746416-8aa6-4906-b06a-ec417c487e68",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "975d1a93-5e65-476b-badf-f416030ce3b0"
        },
        "item": {
          "id": "0af2a5d8-992b-4979-ac9f-fad3eaf335ed",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "91d824e9-1b2c-4d6c-974e-53f7ef8b0280",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "43ce84df-4e23-42d8-907d-684cad87cb6f",
        "cursor": {
          "ref": "063942ca-fd66-4e15-9a9e-db4476420c5f",
          "length": 244,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "faa7bfe7-4e25-48da-a455-ee395ad143af"
        },
        "item": {
          "id": "43ce84df-4e23-42d8-907d-684cad87cb6f",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "5e1567dc-ca71-454b-b7e2-396a85fcf0d7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "bc5ce52f-88e0-4a7f-81c7-9bca252ed953",
        "cursor": {
          "ref": "2bad598b-33c2-4f17-9cc8-1191bd02367e",
          "length": 244,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "8b2485db-d476-4cd8-a1e8-f9343e44af6f"
        },
        "item": {
          "id": "bc5ce52f-88e0-4a7f-81c7-9bca252ed953",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "689ac1cb-530b-466c-a5f5-8c06458d1fab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      }
    ]
  }
}