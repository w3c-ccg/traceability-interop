{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "6052114b-c26d-42d7-aa93-3ed7a306b298",
        "name": "Clear Cache",
        "item": [
          {
            "id": "891be78d-83f0-42fb-b73a-0a0dd20ce3f4",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a11fcf1c-8edd-403d-8b88-8dc3811b8e22",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d5e054ac-229e-46df-afa0-61191261253c"
                }
              }
            ]
          },
          {
            "id": "ed01be63-965b-4530-96b0-f886a4af6319",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "23116f46-720b-40e4-b559-c6d9f725e690",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f0a74805-58b8-41d5-879a-61577da5f7e3"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "35b330be-cd2c-48be-947d-086d807efcd3",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "7ff1f8bf-0216-4a2b-8959-02542c175c32",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d56ef0fb-206d-4ff7-a6e3-32fa73d2ccb0",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e67531ee-8ddb-42e8-85ec-a7f798bac431",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "af1ee2af-3d91-41a2-a8c8-e184773221f0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5d609a33-1aab-46a6-b0b8-c02d12d891d2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "21a7f4f3-f228-4e86-bd75-d4ad0bb90e9a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "082a9614-aa97-4b8e-b311-189361c8be59",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7d3daf16-e483-48b7-8f57-b4c3b1abd7f0"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "021b9898-a6d8-43c6-bb62-03147395cb97",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "1ad1b28b-0dd3-47aa-bb69-6eea13b086fa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "73fefb16-a604-41bd-a4c2-ba0ed7b9db66",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2a77ec97-b24d-4ab2-9b37-ee0337cbd727"
            }
          }
        ]
      },
      {
        "id": "cb90705a-ce6a-4b18-b927-1610d8da4129",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "8b7998ba-dde0-44ae-8096-3278d943e1de",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ea9c11a3-3f44-4eaf-b413-4286a5d5406f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3ddac234-c10a-4862-a8cb-4301aa9da721",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60828e18-a6a2-4728-ad66-b3c47f19f774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3e584d09-6b76-4116-a81b-f890ef49a90a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f979a4e0-7c98-440f-9280-f6858708042c",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9df63c3e-b790-4f64-9881-0e508cfee079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "31b29381-f60d-41ab-aec0-47e2ca66b976"
                        }
                      }
                    ]
                  },
                  {
                    "id": "065a6341-7b63-41d7-af2c-fec412680229",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94f94f1d-febc-441f-b654-3181aa408baf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ed03c1ee-9ca9-4a37-b552-30b3f1077470"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c7ee623f-3d5a-4df0-a0c7-adaadaaa073c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "05f9a349-f9fd-4cf3-8613-e75dbadcce87",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f368bd2-39b0-417e-a36e-e4dd327ae607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "83bdea1f-6f09-4e2b-8e8b-f629f4553ee5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d421e86-4301-48fa-b145-c1d93a8a98eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02ece314-3a8c-4741-b827-64de39736d69"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "952b5476-2e9d-45fa-895b-1248d36e69b3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7b847a24-51fa-441f-85bb-9ada1b97e916",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "12fbcb44-5c1d-4c57-8a80-759b8755342d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "72fd125b-dafe-4d7a-ba49-ff5bed768510"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6d1105c0-2491-4277-ad0d-8893ddfaed09",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "5cdd3d32-bd53-4b62-8412-384e848bd04a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1fa32038-ff34-4502-bb62-36b521a4021c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5b1b3f95-bbda-4a03-a321-b13347ed3853"
            }
          }
        ]
      },
      {
        "id": "74eaf613-5fc0-4473-85a5-5eb20ecd9ab3",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "3e5fbd5e-227a-486e-b633-af82438b7be6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "027e6310-ab6a-4897-bd83-a2da9bddbf57",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "6e428c88-d9ee-451b-8dca-ffe1a52247d9",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15482972-4ae6-4455-9312-d8059aac7265",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9422ae9-e17a-474b-888b-80170e55c9a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "613ff4b3-8027-4dc8-b957-1efa7f3e3d38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9cf0e948-f695-45e0-9d70-f61e03855946"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a35c1d50-e58c-47a2-8f27-a8c2d71f5852",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cb4cf98-27e5-452b-a03f-2cf11b947872",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c70739a-d8f9-47da-827a-f59b8d00db3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0ab221d-8486-4ddf-8929-ff850334a8ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "080c9cc1-b3dd-4fd6-8db6-ba4d11dfb869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d18658c-22e9-4250-9e9e-a5891be5d22e",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad47ec21-04c4-4efa-ae74-4834e6e2090a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0435e82-d82a-49c4-8dea-1fc634563e38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e3a7924-1500-4660-928f-99dfffdfdbae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "189cfe2c-ef96-43e9-958c-cb02150c2b71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87a5998a-1f16-484b-a3ae-8c768e33ae0e",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89c23eee-bea3-4e96-969e-785e7313e9d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d10d3e8c-ade8-4a3a-9dc7-30377d5d5921"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9d990fb-c7dc-448e-a28c-5170b39372ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "52e5a3d6-d815-4e4e-aca6-bae054004259"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6f8f147-99ec-4712-8e1c-b6537e445f7b",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1422f4a0-664d-4db2-b779-7d019f210f3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b367c41-b80a-4aa3-a4df-a2a8379fa93b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fee115c6-97d7-4326-8030-6faa334c052b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b38df16f-6214-4e28-9b9e-dad70c80afdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92110da8-1ac4-4e1d-b523-747301017428",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab101e1b-00fd-4b01-a424-c753eac3c95b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0a564c1-8449-446f-bbca-a12047d42236"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69185c0e-57f4-4f39-a7d3-af7b96f04341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0dbecca6-2cc5-4232-8ca0-38e86dc588bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95b7ac30-bd29-41ae-9bd1-7395bd67d055",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1af6c8d2-f5f2-458e-8804-9ca4f1ade017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00fc6093-ed39-4bee-a94b-5e0170b0526f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be56f75a-b407-4c0f-8457-efaa9dfc86c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "478e798a-fc3c-49ea-8a15-fced8d807304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aefb3996-0599-4801-91ce-ee0f08d920de",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5905af90-275f-4355-8388-b6ef428730c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1239429-0055-4592-8e4b-8d6d2d723e30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ef6d3ae-58b7-41a7-a372-e8a48116afe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a742c6a4-820a-4316-a80a-66df2c4913ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4f562e3-15e2-4169-9867-95459bd4df42",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f183217f-5566-44c3-9a83-91c7001d0f1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c109b617-d591-48ea-b364-35661b24e3eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eea762e-2417-4d53-9b1b-ab07cb57ac12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "06aa2661-d3d9-470f-abfe-d560b17d63fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "759d8cab-319b-4864-9fb4-b31cdcc3247e",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32ac84fe-59fa-4da7-bb7b-9006541677f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ac33a34-500c-4777-8b30-600bb5fa4455"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c9c2f76-92b5-44a6-a3a9-1012fef114c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6d74be4e-36fc-40aa-af09-811b42a0ca9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a594927e-2593-4d61-9802-f84871e93d57",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf9fd3a7-a72d-4cb9-a58b-7e03c0aaa8bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3883ded1-fec5-4e9d-a9a8-ac78774c8c89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32ceff3f-e089-41ef-af40-4fd35d1a87db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e206f77c-22a1-47e3-b3c4-c96647da48c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ecf6688-35fa-45b3-8e89-7ebe4ddb7871",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "408b5857-be6f-4d14-84d2-738e3d3d288f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58a69f65-7b9b-4dd5-9228-ac55ac99daf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e6aecc1-57c3-430f-b066-966191f7d8f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "85a41a2c-3197-4c1e-9190-57e2e2cce03a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5104b21c-cd43-4a41-9d87-df828ec339dc",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc2efafb-8a0a-41ac-8c71-94bfb6fd07d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ef65944-4bab-443a-8f66-4acb4130734c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7386f9c8-5034-4773-a8f2-4613e7cc2158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6cf3c5b8-26de-4f20-80e4-f833fe83552f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b00bc3d-6b81-4f46-bab2-b304ea9afb18",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6efb292-d7c5-48c3-b569-ec3c6df06396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58f63213-f4c7-43bf-b43b-d852ecf282ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cf48924-60a1-43ac-a065-08c8a52475df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6dc76d32-3f0d-418d-9693-900b994a99f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caa842b2-4a84-486d-8bc8-23bef5f9798e",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "472ba704-ed39-4810-bc63-d13ddfae0aae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28a37872-ce77-41f6-948b-56947c2fd766"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "552b1332-27ee-4353-a538-d722ae9a99a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dc9de980-57d2-4ee5-9a50-6ca89fa57dae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebf9b1aa-c33d-4d1e-ac97-a5cee8dbd9a6",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8451601e-cd07-4ae9-828e-cd6785bd08aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c552d46-e795-4b97-99c1-8250450c690a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78df380b-4319-47de-a9fb-4bad5535d2b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ad16ab11-2b88-42be-9941-ae0ae8cc3e83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09245878-3956-40e3-b316-6e3dece13a57",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2207fe9e-0665-4cd2-8376-23882f632497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bb1607c-9723-4ce3-8d48-36a5b41171e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba232d39-2b35-4493-9187-bd538c7da253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d44dd960-5c03-4648-9d9b-5d168e5634c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ed8c5c2-d56d-48af-869c-898494500634",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c705dd1-f1ad-413f-864e-cf22556c1300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8dd445e-ffbf-4a2f-bf43-ad14e1aba050"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4281b79-651b-4910-8193-5c426ef36f3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2f7e55e-a96a-4e8f-9d2a-880ef4ecc1c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3147d661-1989-4846-a783-b9151ce0a147",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f436294-ffa7-4078-b431-7215faf0eabe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ea6783d-f464-4509-8974-86d0928f9470"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7d05f5c-40e4-43fe-aeee-84b1fed6cc94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eafd2304-fede-433a-bd8b-6c4fdd5b7285"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2148df5d-ef6c-4d7e-b6a4-7adf27932244",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7a71036-5a5d-4866-bc0a-ed79a9a2b8b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7953e5b9-55f3-40e4-87dd-488673b12200"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "523dc885-5408-4486-a740-a67bd30d3874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "765603e2-7bc4-4477-89d9-5c769a109036"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b785bf5a-3cc7-4ec6-9baa-44f940852bcb",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d171cc3-328b-4018-a686-7fc189db25cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cff1939-4ec3-43eb-a5f3-97d98e3aba08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7f824d8-4b1e-468b-bec5-e9a804493241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "94372297-a97d-4c6e-aee2-ac2af619ede7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8f971c7-93f9-402d-bc86-907654e684c6",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a1402ab-dce3-47f8-a210-c9fa0dac8707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89124a5a-2629-4af0-b32c-18da76f5cf10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36db3da7-f07f-4b72-a457-1696b3247e44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f467b1b7-b887-4d75-a470-5274d2b7e33b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efc3888a-2eef-47d2-b6d9-514649c2bbbc",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2601fdd7-9f23-4648-aa4f-af807768b6ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d3de494-a3ad-47a7-b2e0-a8268236d257"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa147484-523c-4843-b543-6978a0e8055c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "78c78fbe-4e78-4ac3-803d-d07a10e125d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "343943c2-96b7-45d7-8de7-7793e38c7ba1",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a7ab7ae-0815-4296-a9dc-0fcbc9d103bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53fe3b53-0163-493f-be5d-2bbc4c2a961f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40104638-6626-4986-83da-6f2a8ba057ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "351fa641-68aa-44ef-8a31-af8ee84bd774"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6e9fb2c-d548-4a28-be08-7a95216ded24",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc31f5d1-7e46-42e3-9842-82033ca8519b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c84d168-84c0-41fb-878e-f587ac0d419c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c216945e-20db-4982-8cfc-d2e7f7999281",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ffe93002-7db8-4bcb-99ee-9ad6d3b7a210"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f53a7421-e817-4a61-bd1e-b6fa137f5373",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0111d9b7-771f-4a2e-8ef0-efb544daef88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d95bbc4b-03bc-4a11-8344-aab4c25df8de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac326124-1b55-48e3-85d7-7ebca89d6c7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d44a2a5-d38b-42b0-a05f-9b0283232337"
                        }
                      }
                    ]
                  },
                  {
                    "id": "497a6719-6e67-4b71-976e-26b0908bffe7",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3dded53-fa80-405f-84eb-503083455194",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db97e95e-b9bd-494f-999e-6ec7df689408"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d21a3528-a9d8-4cec-a325-ca5fc36de020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7507c353-074f-499e-9a13-37bac1bff33f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2207301-4fe9-4851-909e-58d826bb994f",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0feead76-c559-4416-af85-6b6af4f0ce84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3af3dea7-4658-481a-a5c3-f08e4a7e949b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2657d8ca-550c-4682-bb77-b260f67476b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "854fbcb2-a29d-456e-b5d0-4cf0ea278ad1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5002561e-5e7a-49bf-8c91-204fa762e34f",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9082d63-907b-4fcf-973f-c0fbb38b1274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "268203d2-72c8-4824-934b-a039ecea1843"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "587ff0b1-8c2d-47ee-a4d6-cc4e7889954e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "86f20eef-20e6-41c3-bf37-a03cbb72a7ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63e8b94e-a890-4aca-8a0b-b80cf9dcc120",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5395b768-aa70-4740-9c1d-a56a9e317f3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a7a3e26-003b-42c9-9ab9-acbeec821203"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "471cdcad-f357-483e-97d7-3b5bea87dfee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b7f7598-0a03-49fe-95d7-6f8a6b321a09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e162285b-bad2-436f-8215-01d481a1a60f",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a222a3c4-cd06-41c4-a558-3e7c3b050389",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd6f2b7d-2557-40d3-8ca4-b61e2854ece5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "739306bb-5af2-4b88-a111-9a634fac5119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4607e28a-45fa-4e02-a74f-c0d9a1134f6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd0b71a0-9162-4c5d-8b66-e3b734e62c1a",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d9d80d8-be19-4aba-b0ff-5bb82d136aad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae63da3e-d0aa-48c8-b93b-166f86594427"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50fa646d-df87-4264-b7ff-1ad2b12dd238",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a50cb127-30b4-4f98-8dce-b08ad0f059df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c5d5a05-be17-443d-b073-82c9b2f8c72c",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fa98e6b-52a6-45ca-b68d-4c75acac793f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "544a1ca7-6783-4299-926a-e1df349f01b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52b121af-e805-49f4-a901-f8c32cbed0ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b061629-47b7-468d-a13e-d0f89ec4cdd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56610bdf-8e3f-4084-acfa-e23f73656047",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86294c39-432f-4713-b851-24a85429497b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "900dac41-b09c-4558-8f2d-ded7a1f710ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7322c201-e927-4ca4-86f9-dd09740296c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0efebee6-0e15-48d8-8fea-4dae915d73ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cb55eef-5716-4145-8d52-91b428041e4e",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "549c2074-2d79-48f0-9875-5248beb9c202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cb949be-6cd9-4b52-8d8d-12486c1c4d2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fe2a444-960f-4ff5-b7be-924aab7a41dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "8417789f-7774-4b0a-a0a8-477e8e61f9ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "435685d9-a944-4a1e-b1b7-09a448ff4ae1",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b09a3c65-9811-4361-9d21-63153e2a2715",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2e9491c8-cbb2-44ca-a685-d03ddffb70c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "508ed5b8-5b10-43ee-a0f6-331d2f8042b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "367971f2-6ebc-4625-9aa1-a87bdedcf5fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39c4bef8-4bd8-4d53-bc8e-7b91f7f0ddf2",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c298362a-8943-48c4-b309-34de14ea3fce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7da52739-9324-4cec-afd5-f06c9b8c2426"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3871b5e3-bc73-457b-9cb1-cf7107f8c999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "90b06967-71e2-4e1c-9dbc-a56cbf4b064c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5d28de1-6c99-48d1-aa4e-b1995300c6fc",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c13bad9a-8ccf-4dea-8f0e-1fb0fa7cc7fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5d12ff9-d315-4a4c-a55b-c145f93a5636"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d74d606c-a1c2-4f64-b3f3-63489155464b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f7a80f3b-0beb-4635-9521-aa4bdf0ee141"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16864b50-10c5-4cd7-9049-5c2d9e904d1c",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d67b4e16-fc8c-49c5-a76e-83495ca62b4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89f57d5e-da85-484a-91b6-b3ef6279e2fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93cb0c02-303d-4a68-81e9-ed72e998cead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "11136923-22d1-471d-95a0-6f2c2048a779"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e517dfc4-8243-4cbc-8001-37dcc9a45ae0",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46e67c67-3960-41e3-92a9-45e0bce53b69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f53ba125-aa41-41c6-8e88-e0874b3f8b72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "971ce415-6227-4c33-b2b7-e14eeed79903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9a84af06-70bd-4910-8d91-ce3811eae839"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1dc9ce8-e4a2-463d-bfe5-1300b726f97b",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9320aa31-9611-49be-94ea-b08263290da8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7d7c4ea-35a5-41ee-89bc-acfee908ea90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea936a66-6a9d-47c2-967c-502496b2018f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "cf0dc53a-0cea-4f38-9e09-0564d15fda1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fc7d097-ea65-4272-ae23-e5121a180639",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce171312-bfda-429a-8af9-4f21af9fef9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a95c2bc-822f-4c55-b2a5-551ab8619786"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d87bd02f-ee08-43af-a213-34171d3414a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "858980cb-c091-4a04-97de-1b0bf45682d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "606bb180-229a-4e4e-a953-e756f7e5e2b0",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "705f39e5-4816-4ab5-b748-3951f0a6e0da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba4cf06b-15f4-4c93-a903-a76b0af9bfd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78303d31-02ba-4975-b58c-5fa24a893891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d234d7ba-f906-4379-b0f3-c5b496436f9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1398e77e-9344-4656-a044-603b052cd8e9",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b08b3f9e-721b-4594-b43d-68c0bc82ddd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3480a807-9c85-47d1-9b04-88eaf5b7e7c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "178bc662-d193-4100-a111-6dc748cf9166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "2215bdef-a9f1-4388-b0c1-a9ca28ca9101"
                        }
                      }
                    ]
                  },
                  {
                    "id": "892555dd-ad28-49cb-9e3f-ba042e658601",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9143ad79-02f4-4eec-9c3c-0c0440f45a8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee7749fe-0859-4b3c-8ff9-2a7f42428403"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df093bc8-2aea-4a5f-8852-5cf75f04f186",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0a3d7c2-ba4d-4b09-a9d3-901b50ad6535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6e4dc24-f368-4234-ae52-f6f40709f81d",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5020e88-f115-4bb0-8ab3-f8d58ab92160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdb95fe4-eb4f-4402-acbb-483365f3ad8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b491474c-c7c3-42f6-9f9e-e74abe1c54f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8fbe045-d5d2-4875-a03f-1ae490e518d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf0cbf34-c279-452f-9271-179d46964984",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94144999-e67e-41c9-940b-367b5f22bc54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42459b2c-f950-457e-ab0a-9f412ae2567d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a2ddeb5-7789-4c44-804d-2b23141a4915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c89e6ef-5ebd-4759-9ca5-27d972ffce5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8aea9e8-88fd-46aa-98d7-4b485585b299",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de531ac9-7da9-46ce-8443-6299afc61ca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea88ca72-337f-4994-b385-36ed9983e04f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bdaeb16-c210-4c6c-97f4-2c6981b467e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4bcc1de9-c2c3-4756-8fc7-29806bd987a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f50994a7-29b0-4c7f-b21d-70a1716997e1",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a1d726c-d59e-4dd8-88a8-11f6bd53ac3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a8352f6-c5e8-4fc7-9ddd-bd333e447de3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b59503f-5e5a-4b67-be3f-198c58ec50d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e732fb3d-6240-4873-863b-c6590da49ddd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf12d4b1-6471-44af-8eff-b0ee3f449123",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ba1ccaa-b8b3-49b0-886c-cd39fb60dcf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0813d850-b1b0-4663-8a22-0aa4a3f200ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0c5b667-1161-4309-95e7-0ce320987234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "21b9b48c-f5c0-4a7a-94ae-022f2a7e71a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "804e94be-a6c6-4eec-badd-90c3cd7d9c0b",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a148464-37a1-4e7f-9a40-308b0dd59cc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaeb9326-7831-484b-85c9-6981f8936a32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92d4fa22-e553-475b-b795-680f8e2042b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "91cafb32-7521-4f89-a915-474a4ad86544"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0547a81c-141c-4a2b-94fb-9d5ad88f393f",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91dea905-8787-4b7b-aa00-6ed1c27a428a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b852419b-d73b-4d3c-86d7-3519cb32d924"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93ab9b7a-a851-439d-bcbf-eb01224f0bab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "858e00b4-5616-4a9b-b279-37561e9f5598"
                        }
                      }
                    ]
                  },
                  {
                    "id": "883aa0b5-57c4-4e28-a771-21c8cbd26b9b",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d43e6a57-d6c6-4f96-824e-1ee7eb207720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6231fac7-5d66-4ccd-bebe-6e873a6d78fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d3c8ec6-4630-4386-a35e-2f256a118a7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "15b9228a-1a1f-4173-b3b9-e9ad431578f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "439204c2-db92-4162-b60e-e01e1885eb51",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e56bd60-1f70-4a89-addc-5d6dd0e82ba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c37e6551-23f4-4f10-964b-2dc5e7da7b6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "735c228f-d2d3-4cd1-8fb8-bd80274fd5e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae540286-4c22-4ff9-bd2d-328797916ab5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d64e2909-0fcd-4c22-823e-41d658204fb0",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f819dfd-2aa2-41d4-8dab-674e48c7e09c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac990125-5519-4844-b62b-a482ac6767ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a80182c-d6aa-498a-b29c-6e0592c2a2af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f64ff48e-afd0-476d-971a-cecee1af8a0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7785fcaa-46d4-40cd-94e0-56859dda7242",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dea3be51-ed75-465b-835b-bbc4bbc8d378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf973ec4-a70c-48e8-b9f4-cf9540b83f34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "820d937e-9484-44a9-88a4-bbdb34077952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "dc269332-6326-489f-9709-7c7fb4bf05fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a57804cb-5219-4aa4-959c-9e2c08488f5e",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61235e91-11e3-499a-bc7f-35887c6867c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ae38a44-dcba-4f1a-aae6-0424b1ce38fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e4c962d-12de-43c6-8afe-4c779b134380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c807f50-ce9b-418d-bf71-a308b4873807"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd6fd8ad-664c-454f-8d2d-3a84257cd9f6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8960787-0b26-4e7f-bf48-2a3de729d5d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6920927-71ee-4d6b-a53f-ab03ba924913"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73ab1c75-5836-4f2e-a83f-84a4a6db40d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "58412697-f5df-4f49-aab1-a3b35a11c968"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f3496dc-57b0-4c2f-9c77-0b660caa422d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21d77eb8-4bbb-4777-b79e-c20cac7158fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61d3d793-7f0b-4ea5-b651-22c17ab9149b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f83c6e5-6999-4af5-96d0-1073a6bcff27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "28ec5732-40c8-40c3-b06f-6468e3b9a229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2608d5a1-0e5f-4f1d-a375-7a62843bbe7c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3d0134c-0d2c-415f-985f-cba4c6c5fa77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a05e8803-5018-4754-b5d2-d155c71cc818"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b66efca-5271-48b9-8e91-88eca946b2f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e1dafafa-8b88-4e67-a26f-b13251839f26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5ac309c-ebe9-4454-895b-283aa58ab6b6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93c38554-a918-4a59-8697-38ff29da76e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9783554-e5f3-4085-b914-582d29aa616c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac6bd819-0667-4995-8cf8-30f19ce9d00d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "dfaa1ae4-4f94-4aa8-b9f0-92127ce7390f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd7fb029-6534-4325-bc5d-26eee2133728",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37d0793b-17f5-40cb-806d-cdb01432e2a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66f292cb-3538-41f0-ac7f-3d2bb657d442"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d14571f-3497-4e2b-ba2e-891d6f16ef2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "a12cdc4a-3015-4b8c-9fe6-ff4d049d194c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5cca1dd-e89d-47c5-9162-cab6a86baaeb",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db3133e5-1aec-4017-aca1-f10848573b79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bcb98fb-9252-4b6d-86c0-c15c88322bfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32fc576e-098f-43b1-9bab-a935f62bac32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "00237741-abec-4720-bba3-3163ab53e5a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bbe4e6c-24a1-4e0c-a4c7-8c37eec6e652",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2455312-bd1e-4766-bf24-9abd5d744a76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76514505-0961-43e6-8741-a22e63d97ed4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "666c3499-83dd-46f7-b459-7a14c7499ec8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1f972a2-875c-47ea-ad1c-a0fe566c4b4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34df6613-e808-4432-a2e7-b2a22f1e75c7",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92a5553d-de50-4c8b-8cdc-e0f7c53248c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0698fd78-b046-4905-a24d-7ec065e9589b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51f5680d-674e-4912-8644-be693c70efa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e379c546-6fb7-4c76-9ec0-b03d64d8e330"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de098e62-ad40-44a3-bd85-0c2b4409163b",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb5562f2-1d80-4df5-878d-3beaecb59be9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52a2e305-6fd9-46c1-b971-838bd745ff73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "915306dc-8e33-473d-a2b5-cf9b13d17a09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f71e29c3-cdf4-4265-98b0-7711bca5677c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0de7c0a8-5d0e-475b-90c9-c41a5ed07ae7",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15f96f45-4e60-4fec-abb9-9f409cc58ca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef78f260-6baa-4030-94e8-99f0b6dd5dfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29fd7e82-c8c1-443c-8949-a70c60072740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2fc2d83a-e39e-4e58-ae42-12402dffb0da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1918599-23a7-4c35-90a8-02b02133e573",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4570e075-d44d-4da3-bc18-49c9aac6a69e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e469261c-5c89-4ed1-af68-be2f9a4563b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "805d3e79-2058-4f9b-b4cc-8f1239932735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "29eebaab-1e5b-4544-8dee-599086a13974"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4c0aab3-5817-4a97-9a9f-c3d1b3feadfc",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faf8ec3c-58cb-493f-be12-986785a9c888",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "413550d5-5ab4-4149-a485-289ae097e23f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c17e10bf-df75-4857-89de-5dc890a4500d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b204755b-35c4-4edd-94d5-0278d2b7d098"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d77e7c4-6dc4-458b-a04c-187bc7f71227",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8eef23f-a8d3-4b1e-a8ad-b94df68607eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e202e146-81ca-49af-a12f-8bcbd50b2fff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cef8a9a-6d03-472d-b1c5-b4f5b1ea237c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8079cdd-1fac-48c4-bae9-4ed1feb5b876"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da3d3b52-dc76-4b70-bf35-92a51293c5ee",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36e5dbb4-1d81-4984-bd19-7a36555cb069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b794ab90-fe7f-4b72-af91-7d0c8cab3b2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daab783f-785a-4861-8b84-f5e84eff5e5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "99de20d6-0498-43f9-b18b-15d46b9084bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "593a0d11-2b7c-4fe2-a716-67b3fd0aebdd",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a444c8d3-4c60-4d44-9ee0-c10163595ebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d383c578-dfd4-4796-82f7-d8f7bfdbe192"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e90df70e-8076-4700-9e89-efad3e55c817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ffea7518-c207-4a24-a296-f665e3653acb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51fa104b-97f4-468a-83bb-42fb5eb1f937",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec63cc26-dea0-4dc3-bfcd-0221b09f882c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "203385cf-3111-4aad-bf42-8aaf8d348c00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e6f7f0b-6aa4-49f1-b3db-a5b1af80a84b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "64b59987-52b8-4579-820b-e99ab49ce083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba2966f5-08f4-4701-9f92-83b000d48942",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0829c96-6f14-477d-9e99-1f2e4d143e9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f43a22f3-3282-4f53-a039-2a0600070110"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7412f85d-00a9-445b-b34d-49322dbd3341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "337800f9-a0c6-4320-b7f2-243af573920d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25fc9152-26e5-4f5b-a316-80030c4e5a68",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15db07f1-f2e0-4ccb-8f61-3844d9f1b06b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf74ba9e-2a71-4402-a57c-a94b73686851"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9fc62de-a7f9-450b-84cc-0d6de7c88050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "784fdf3a-eaee-46a4-b1d5-04c4aaebfd5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f90534a4-985b-4a5b-9b4e-c336fba62f25",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92581688-0666-42ee-be7f-18e6c135ce26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4828207a-02ee-465d-97d2-746b708b3b2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6310db11-05cf-4a17-9b2b-38ffbf5884bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "98f357df-63db-4d72-b19d-b4d4cc61a7b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8dc3ba6-6127-4007-8892-913e7b1c8cd6",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "025ba0fb-05d4-4d9d-8372-eb319a9e09a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f07b808c-3a71-4142-bed4-3311f91141ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3633c5a4-390a-4c72-87c0-2f5a7a3d20bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "42595f78-2859-4c14-8db3-6b585f63a1c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4716bcc6-8bdd-461d-834e-61955dab27b4",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c384b67-9fd8-41df-85fe-6a53a75a847c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7fd4831-7b25-44b3-a3d1-9d3336304549"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "381e0abc-d3dd-4ea8-8fb9-fc83d2c4126f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "251fbbe2-bd35-4c31-b6e9-6e9c2003664e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c6adfea-1a52-416f-9b7d-030e5106eb68",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0be55c0d-07c6-4a94-ab2d-e29de2fa4423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0e0bbd4-2737-4ef8-bbd5-b700b2e198fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bd57e9c-b147-4b02-b49a-fdf8f1466d98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5da79d4e-ff63-4c11-8bba-09350049a754"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5a7c7c7-8244-4000-bb08-19df0c8305d8",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c274fddb-ea24-49e0-936d-9b3e7ebbf379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "960806e0-c55e-46b8-941e-9e2d2ffd10a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bc67c21-dc73-4a63-9dbb-67fefca0fb01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "acd0346d-ae53-4497-a032-c2a7375f4613"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1842334-b766-47c9-a089-f9da19c2b7d3",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac22a8ea-212b-4bf1-8e77-93d81f6565bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50b5122a-6aa3-40cf-bfb9-ff56335d6a0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2b20d99-83b8-4c20-9180-bcf6c172fbfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1d5dd5a-9e94-4d4c-a46a-579d4699a259"
                        }
                      }
                    ]
                  },
                  {
                    "id": "214926c1-9957-4f7b-803a-152589701927",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c648644c-bb9c-43a0-a477-5a0eaa9c3cae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9f73c48-d5fd-466d-a506-5d1bcec38b9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dad875e-d8c5-4e3e-becf-1783b8270c30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe40b5ce-3d1b-46bf-9d63-777a27db9312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b84b3523-7f22-48e5-9b79-f519d1d4068c",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76536055-3ef3-4f0d-b5f7-989cb2d0adb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02c46ee5-3aac-462d-8606-aa644d46a58f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35b37bb9-6c73-43a7-9fe3-186c13ccedb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d402735c-8686-4bfb-833d-6c295db9a942"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77e68dc9-d000-4976-9045-8ca2244d5e38",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45b9f53b-bcb8-4045-ac01-a0b98f8943d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65866fc3-2482-408e-ab48-6a9ef9cc6e08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a1faf26-82c4-44c5-967b-beecbf3ebe0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0cd24f80-564e-4ac5-a200-5ac0ab326bbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e2a7a84-e93d-40c6-a275-20ee7388ebb0",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecb895cc-4073-488e-b9ce-cfa708ee9ad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51e7daad-7093-4206-839e-a07f02461968"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3f1ae7e-820b-45ef-81a9-b36c8b6c4a36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1bfad623-729b-4832-80b1-94c96baac393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08158f08-e658-4ca2-bcf3-330761ca5ff1",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "781bf0fd-ad48-4b35-b3d3-bf8dfe36da89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b217924-0998-497e-91b6-64518dc7d223"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa9b17e9-c6f5-489b-b463-c11665bb772c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6dc1ff2f-2f52-496a-b4fb-fc0e91528112"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8602469d-c086-4904-a4d7-1ae62cf28733",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f3d6fcc-415f-482a-a340-73f160c95a5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa339a56-0116-4355-8582-1753226aa14c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4d585b5-950d-4ce6-a364-25a05c21822b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9bd9e6c0-1a11-40c0-9150-f6cd9ecb1662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10d2d9cd-6734-46e4-bd25-04014053cfd2",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25c7b867-2b33-4f84-9389-a67f9a3badc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20081015-4654-49b8-b297-5c14cc8841d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51e631fd-a35c-41cc-acb7-ffed4e6b77c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "71abcc49-3eae-4e3e-8272-c36d0acf707c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77c7f2bb-193a-4cec-bde4-54e47b826548",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f4e641c-b495-4bd7-b91b-6b2db6e94062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "162107e8-6a1c-41b4-a5f6-29e2263371ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "377592c6-6896-42ee-871e-ae812c528bca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d4f11675-2216-42fc-bdbf-67017fbff9af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7498e901-a560-4830-85d9-c8b5152d89a9",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6807ded9-8a05-49a0-8337-a22a333c68b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c39724c9-a864-486c-b6ce-cb93ac9f715f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21088dc6-b4a5-40d9-a3ab-be8b7a24423a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "cf1d0d03-b7c0-4215-89bc-c6eac4a88b32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35b70430-ebb7-4fa4-8d25-460c5e295a3a",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45890f17-bd87-4b87-b632-ff44b2814db0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc343255-ebc6-4739-bbf9-dd8ae62f237d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3301eff-ac1e-4ba1-aa32-a1a37e17b67c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "42db02fa-f002-43c3-a241-b75a53310d80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a09b4246-d696-41d8-befd-ba22754fc7f8",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f2a04e0-d5b2-4a86-8c1e-84d5544f8c12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "d63215fa-6bbf-4123-aab6-bab289cff232"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af174a33-7391-469f-924c-58ed74cd7fe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "228c7369-29b5-459d-b77c-431e1660d541"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "72ceaa4c-d638-4184-828b-3fc437ac27bb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c407ecad-88f4-4933-a8ec-3e10faa36ce3",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "475d5b62-9675-4bd5-b137-104da4d1ceb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c18e8f53-d7ae-470d-a9a4-436a3a4cd350"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f3beea5-dc3f-4357-88fb-b7b1842843ba",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "96c62256-2e9b-48e0-a9ec-32f95654ce4b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e5126e07-58cf-4b4a-8b99-9d9f4818d317",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ae7f4c30-22fc-49c2-90ea-237d59f5ff49"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "97b7d4b7-f858-4432-b99b-4da03b5e875f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6902afb7-cc27-4c62-8ee1-d003d59f7e0e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "630c90b6-b299-47d9-8c53-30c6a4b9329e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0f99a7af-88f1-4691-9094-d66baaf5a10a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3132d86e-5105-418e-aee0-a2beb18a10ea",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "856584f7-d975-4e39-85da-4c7b6e8a43fb"
                }
              }
            ]
          },
          {
            "id": "88134e9d-b2d1-4a36-9497-1246208d22da",
            "name": "Positive Testing",
            "item": [
              {
                "id": "16c73c76-02e0-4c1f-b112-0f6d92f70f6c",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "72510176-0d73-439c-a909-e528f3493cc2",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f9c1083-0263-4d52-9542-1003c44866fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "542956f3-8009-48ed-9c56-720897b1d794"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a1532bc-fa19-4f32-97a2-37d45bea82ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1830a33-0c09-4bdc-b65a-5beeaedcfdf5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b9603587-e09c-419c-8df5-00a450925b0a",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "28618b45-bc37-474d-98b7-863f41db4ee6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "17b54aee-6c98-4e44-bd5a-3178cc4623ed"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8370f38a-7497-44d5-b9d2-6476ffb9d598",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "218f59f5-cb92-4b43-906c-8fb74a4f600a"
                    }
                  }
                ]
              },
              {
                "id": "5a72bfdd-e378-4956-bace-3f83a41931c2",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bafca085-786d-486a-9d8e-a326c1f5ded7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "90a8adb0-bd76-44ee-8bc9-2410ffa71500"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "79a05fb3-80a4-494f-ab27-315e754f5738",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3975ff06-1d2f-4514-afb6-fba06c1edf51"
                    }
                  }
                ]
              },
              {
                "id": "9b2cb06b-1ea1-40e1-9d41-f0f193924a4d",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "05133e33-66f1-4c9f-a35f-3f73d169dd4d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2c80c749-dd24-44fa-8d9f-2b97cf6bd479"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "31eb3b14-3f82-4e9c-9d8f-76135489cc68",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6939fece-afc6-45a1-9a40-4b0f95f3dc40"
                    }
                  }
                ]
              },
              {
                "id": "76eea73a-4c2c-4d63-a4a9-f264737da83e",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "58e07a44-ff75-41ec-9c8f-46feb3592a61",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "51b20b9e-af47-4808-a737-29fe6637383e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "66adac88-cc91-448d-8344-9a0694328e51",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "c29d6da2-1ff1-4f4b-a150-8b7c368d6a41"
                    }
                  }
                ]
              },
              {
                "id": "418803cd-e7a1-46d7-b806-18c4e7ac06b7",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cbd3d76f-1bef-4bba-b8a5-caffeead658f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9bbafd9a-1d51-4603-a805-32b255461a79"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "db0bc871-5b25-42d7-b63c-275f6b7d41a9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "284204d1-91a3-4c4c-be2f-2fca4ddc0d2b"
                    }
                  }
                ]
              },
              {
                "id": "4379d5e9-4b91-4693-8d6c-0da17f62fbfa",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5608bc92-941c-4bea-8dd6-20a4c8bc13e4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a2372a05-821f-43ae-a726-41b7e3e38fcf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a969b76a-ec52-4196-a1b1-6ab49bbc5124",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "265a0d84-12d1-493e-a66f-6759bbaa8685"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b4133a24-3118-4aaa-9e52-0091e04d562f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1fbba252-b5e7-4aeb-a14d-2b45ce8e4887"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a7e8888c-3326-4a96-93a4-1882ce40c377",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a44c1cb1-0f03-4869-ba2d-4eca87e5efc5"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e3b90f01-7cd9-4ea7-85d7-7f81c9d3b47c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "14c6ed7a-a32f-4dc4-800f-1d848d457e1f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "49e4fffc-8549-4a15-bd5f-345e7ab4a5bb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fdb3cc62-d42e-44be-a0cb-030dd365c4c5"
            }
          }
        ]
      },
      {
        "id": "9bcfd071-7ab2-4014-930d-0ff55f389ea0",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "115c0438-1882-47ba-a216-f8261b335ef2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4a7ad9ec-d610-4fa4-b3ca-7d31eaf2a582",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "eb96c619-5c10-4454-b6b5-a422edeefc58",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30cfffa4-95d0-457f-9424-2ee68e032911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08919f69-446b-4d8d-b231-34230e6fd361"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fdf81b1-b9c4-4f12-9976-b047bce0722b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a9da78f-c54d-4c16-9a7a-e34f50319712"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c218b2b9-d764-4288-8224-8362e5769f91",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10f88e12-383c-4212-a309-ccd194e52290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cfd67d6-b813-4b95-8d8a-1496e4f320f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73f67291-c8aa-4338-8ec6-fbb3d446bf31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3895109f-6c43-4f37-885b-3718cbe07586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed3c01a5-0595-4de7-8760-9650765b2c9c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "addfac0a-3dda-4aa5-9668-12aabc8aa94e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae659c13-8b3d-428b-bad7-a2da2e467dbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37dc702e-1e2b-499b-b7f4-6a1a6ecedb0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4606abc-1a4a-41dd-b1a1-5cf2deba3665"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c7d9f62-d881-4c33-bec4-fae20ac588ba",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c5338e0-1c59-443c-b325-b33a2760c960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4a70d9c-91a5-4aee-af8f-0712cb412d57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24df57b2-4842-4f88-8183-d00ac0da69b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e0527b4-96ca-4b8a-a26b-540028decff7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7daa9d03-0077-4b3e-88ed-a2713ab770ec",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f9d81f0-14cc-42fa-9d15-9f9658086970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57c86f6d-d9ee-4020-ac1a-b179c9e68aa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8269449c-f1b8-473a-a3fb-2200c50ba5cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "12b4a364-48e8-4ae9-8e0f-a59911b774fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "975fda44-2889-4a6b-84b7-b2c2f025ba9c",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "509a1cf8-5896-4f41-a2ab-48cf0b0fd2e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b257605-5487-4e82-b88d-644989e11734"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a54bf097-01c0-4fac-8c6b-b5b05a11fb98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9b29c6c2-b5a7-4f7f-8ae0-f4b31ed74e4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84f2b538-d727-45b5-ba33-e279f468a8f0",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b27956d6-2136-4a93-8c1f-36318e62645a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fda176ca-6323-42ab-bdf2-2bba1122de70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc905ac3-0532-40ee-ad9b-e08f9094909f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "af8faf34-5e92-43fe-be91-8c0e15e86fd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "989bbc62-4f06-489f-81e5-45c1eefc7e3a",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "107888e2-c7e5-4982-bb3b-28d159093f28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9b69f48-3568-4872-8be4-d5f2e86ee2f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3013b83c-5a6f-480b-9d5f-5080be66b92c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b989a61e-40b1-4cac-89de-8b8a88ebe454"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82fdd930-229a-4d0d-a5bb-8ac264601e69",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b235eed-744e-4921-89ce-fd654f7364f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "315e960c-4d03-49b1-9e27-08a8605a559f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2319ca4-3773-457c-b9f4-248f34b35b28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "22b53c56-db3a-4ad6-8b89-cf6c8a2a1afa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e228c171-c8e0-4ef9-8be4-8755b158dc56",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3679f87e-9717-4d94-a9b8-718a94fe7c4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9358ac69-a67b-414a-8a93-4c30bffae10b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c353aec-c4fc-4efe-a61a-487ee311d051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ff0aec5-1ecb-4e94-abf2-0aeca2fd0cd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4efb116-3864-46d2-8ff9-6bbe82e07208",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9108c055-f68b-46dd-b4d0-4aa3589ed8eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d79ab8b-c4cb-4a75-a1b1-bb44798fe3a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1006bdb5-1835-4033-a170-27659be93a83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "b5a28567-5fd1-4805-a0fe-6d7b71fceb0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e862aaa-fcf1-443a-b82c-7b0deab901b3",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38c84114-1833-4d22-8e24-ec90054eef4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2678d52-b5bc-4b56-9c69-159e1b7adfcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8658b37-a126-416c-b203-29df2671c85d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e35f3a8b-5949-48ac-ba99-a45ab9c596f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1d9625f-af81-427e-a34e-23a0f7830afb",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39c2b9bb-617a-4a4e-aa7b-4277de3bbd2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64d3d9df-5f20-4f49-97c0-cf5bffeccfbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f08ff2d-e63c-4704-84c9-b770ef15749d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a6386a6-17a8-4358-8178-059f6754a43c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e77e8ed-a851-45fd-ac30-e9f8a47eec7a",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e97904d-5821-49a8-9e68-db4ad1efd12f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae8f71c3-3ebb-494b-8eff-481e3bf9a78e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2edbaf85-7fe5-4d90-9362-72c6d8bc5df9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0ebb75d-68bd-4312-a449-c2a265a77d34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b62e716-e9f7-47e4-ae59-35ccbd7cc24c",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c6d57fe-e4ed-47f5-8798-ad400e11d8eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20867d75-410c-4d33-97a3-8a7a818e6a2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccdc864c-06f8-469e-a19d-7de20c0e096c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3b96138-ecac-4b32-9ec7-e6fae60833da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12b1278c-3ee2-454d-96af-efbeeba1ea76",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "566e5a6a-a5a4-49ee-8f4b-f2afba2f895e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2bd01db-cea7-4f40-abc2-86388e8cb32a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee161c6c-86ee-40bf-bcd3-a3ffcb11644b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "b50fcc16-c03a-495e-ad6b-b23aa212a31f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6968534-1208-42fa-a75c-37ecd3e25068",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb6fd4c8-ae64-443b-b82f-c8e13356d8f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f4f7b01-0247-4292-b11a-cd135e8f9cf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ccb9e86-8ebc-405a-99b0-bf547e9a66b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "2df6127e-db4a-40f0-9c64-8020f219fd74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11ba3cc4-99e3-4997-bfd9-57052995d52d",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a576fef9-cf91-4918-97b3-c485de81d414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d2d5f4c-3e2d-4a7b-82da-be067a65d1b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8877fa0b-4727-4532-9d71-574984d72be4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0207968-a692-4eee-a699-c8cf16c8cc4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6b862ab-93fe-4f8f-8620-8e7516b50708",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba49954a-404b-413c-92f3-f453f5cadcc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9409e7f0-187b-42b6-9e0a-2a214c51093e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd234093-1fa2-4826-ad5b-51e2f20f7cbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f947097d-6fbc-4eec-a0dd-ed4c2dcfea32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a14beb5e-0d85-4f00-98d2-48a7a1ab3649",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9f0b698-4325-49dc-b833-23acca422ef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "507428bf-ab76-4648-ba2f-0b502d768a8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94697093-3a89-421d-a015-89b13e0f32eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3fadfab7-28dc-4d42-a098-f98e1059442d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87e95b82-bf5f-4316-8e3a-7a7d4a2ffed2",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc1c9b24-e52c-450b-9a6c-ad5985512459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b22948b-b88d-457b-9032-4670a3d1a7d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adfb7418-2678-45bc-99da-e336ea3c4199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff77d0d3-c88d-44e2-87cf-31a8768afea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a595079-3fa6-4943-b51a-fe4730d6b9b6",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b181f8a-e8f2-451f-9944-1a8903683114",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "858f1a01-4b2a-4f6c-86f2-4d1e58a4116e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "917d0e72-0ac1-4928-b219-65d53e93c5e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "662ea1b2-0113-47a4-a910-2195cf824616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0234054d-56cd-4c56-a465-9f535e2cc36b",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64e56b38-a135-47e3-9379-5482b00d2d71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cbeced8-060d-4647-b925-142e39f93786"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0d7beef-1f44-41ff-bb8b-90966ff76586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "10cba998-e8a7-4f4c-968b-5b950571b524"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf678702-dd6f-4349-b690-25fcb1df53cf",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d6ac4b6-bb27-4e7d-a970-b25194f0897f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ece3c02b-7efe-4aa3-aaa5-fa4f803a5bad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ced5255f-a274-4689-8aad-516c1f1b4149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "50db0d01-a294-4dce-a8a3-1a84664f3a07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e45b2447-43c8-4aac-8d99-376c0767468b",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbd5302b-6edd-4ef8-b9a5-b77a30f06859",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d681657-3ce8-4c05-a9c5-d02947b5070b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c702be41-948c-4aec-bb47-6b3355d0b887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3d3a180-463d-4ef9-bf64-2c7e83c3e585"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abc807b2-4398-4736-a131-63f40d0e01a9",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33a23f46-9c12-4218-b2ce-e65fb6c2832e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2566dde4-9f60-4898-9a37-fa8360dc8e07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc2b0e1d-0f99-41e4-ada4-134ec50cb3ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "89423168-8faa-41cf-85d2-87cd4d2f5078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a842e85-79dc-4fc6-aa9f-cddac14426f7",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43a15303-bd79-4b99-9a12-56084fd453c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82f473a0-4ceb-493e-aa8b-c7322d1d431a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b36d88b-7e5b-46d7-8342-6baea0df55c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "43cd9bfe-0722-45e9-a5fb-0899cd5ed6b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "339dbdfe-913b-4e9b-9982-7d16cafe9d75",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e331157e-ca61-4783-a331-e8bbc772cbb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76b64c29-00d6-4811-bc17-1bdefc5b58b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9189e24a-4e75-43e0-bdce-4a2b9862db1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c4ce948-9e72-4fdf-9928-4a8cabf047df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5c015fc-c3da-499e-820b-9de664890494",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b82252b-55b9-4231-b195-8ce401b00f29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68eafa00-8214-47eb-89ca-5faa12b916cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "471033ed-b30b-45ec-ba98-96e38ffd6b01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab95d712-fc9a-4048-90bf-55f687f89a45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f8590fa-6cfc-492c-9cfc-7e93dc68689c",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89ed36b5-ed35-4950-bf8a-d874ce41c25e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acf2c026-0f63-4f78-8732-ae0ac8605aa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf7a34f6-4eed-4386-9a04-734f04191a4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "476c3db2-2828-4616-aef2-e852fe697fc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4757a303-80fa-4a4d-9771-58a67c4a18de",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "510b5898-301a-4c69-9970-396d12f6125a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4386808-bccb-4a3d-96d6-0d64e0befdeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d66e23b-5d09-4713-8412-90e8c2a1d31d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "474e7972-8599-499c-a999-11452ea2cbd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "404f3767-1138-4292-bf75-3bd2d5c023cf",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76c2e573-874f-4d1a-a7a2-680f0a9992d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ca927d2-c8d1-4ba0-9ffa-3d316640b4fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddd5782d-17fc-4c47-9d7f-61fc6a38db94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed190a57-ad4e-47f7-a889-2be7a6ab48bc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "002c0bb4-2980-4c24-8c85-e8a27964da54",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "521779dd-31a8-486f-8ba9-c283edc5bd4a",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bab4c2e-784b-43e4-8e05-b8d8c33d8b5f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "33a20577-c022-4ff3-8790-672e20587232"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b205e73c-0d15-42a2-aacf-eb8ff0894953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a3c14718-8212-4317-bd6f-80aa81bbde00"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dde246ef-8df7-4812-a177-aaf1dd8b3dec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bd18968f-7dba-44e5-b546-b62bb210e616"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b88785b2-7a70-4dde-84ff-cf7f08121f44",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9ca3660d-294f-4859-97bf-208b7e8c12c3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "37e4c2bf-3e0d-4d40-b464-1b47fa1c5ee7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "11ec931b-83ee-4287-ab07-a37c79a158e6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "23817b67-0ffd-46f6-8380-639781ab7124",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "01845fff-ec91-4007-b6b7-b590ba606f83"
            }
          }
        ]
      },
      {
        "id": "0a5732b1-5499-4171-859a-c1500ccba420",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "a60a0097-e5bd-4c60-990a-1c712fe89c0f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "38f05fe2-7258-4be6-af44-9ac7ddf8a9ed",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "096bef79-4df0-429b-ac51-d11805b56487",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6be917e8-d9fc-45c1-a7e4-c4fd0ea93d6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d64431d3-641b-4b4c-b6ee-1d8e0ddba005"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bdf6b77-d8e4-4a6a-8316-e89733a8916b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "c590b5d2-b5df-4116-82d5-31309deb0ad0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b86590f-1320-4143-a56e-eb93714b7239",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33feb210-1faf-48be-95fc-39b8cb942743",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e57f93c-9d48-46a9-ba10-55433ab3b392"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf2edee8-afb9-4ba9-a362-65de1f925ddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5e1a227-6143-4445-bc41-9ddbbbf61541"
                        }
                      }
                    ]
                  },
                  {
                    "id": "306aaa8d-af52-44d0-9cd6-f53810820682",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e563d086-0e45-41cc-b2b3-ca5c899bfa22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67779b7c-a6b6-45a1-89a7-e479dd5ebe46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31dc0c90-28cc-4283-9871-aa50c62413ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "571cb08b-554e-416e-9e5c-1080821b9229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b564417b-637a-44b4-ab9e-d296dd5f77a9",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48e5539e-8054-4ed3-8ea5-604c70eb9293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f809748-e2a3-4066-ae57-09ac9c446239"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31b2c41b-6ff0-4cb8-87eb-979e6689797d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "51b8e5f5-42d7-4d26-ac96-bd229aad2ffb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17e0f19a-329e-491a-a367-3d33c80ce8ad",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55cb8528-e69e-4d56-ba5f-a94c7807e62a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63b26466-0a74-42a2-bc85-1fbdf768c668"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3599f04-c49a-43bb-a627-78141a1c844a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "949492e7-b5f4-4674-8ef1-80984d097119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "375b9414-c770-4195-8914-e4db51e1b9a4",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29782766-f645-4481-8a79-c9e531d64f6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d31574f-2719-4266-bade-f5a1b3b56171"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64d952d7-82bc-4a90-adf2-8cc61fe14d15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4665957d-5fc8-43ca-9586-6500e0ebe2d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fea88cd-5020-41c9-8887-07edc1a7f573",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b83d9758-235c-4bd0-9f6d-26be116a3c0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f238ef5-7913-4f03-9751-d6ef2fc9536c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29928a9e-1e26-4ceb-92cd-d14cee76f2a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "b88370e2-6cc1-4723-bad9-9e2aaa3682c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1632d325-1e8e-4af8-99d1-006d9c2809f3",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cd50f2a-fb64-4939-a66d-ee61ef380c80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a08ebf8-218e-4f26-967d-688ad10634d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06f3d76f-6158-4e84-a03e-872b286ff634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a47e4c39-93b8-4851-94f4-c6add14f5048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d2191d3-9d0e-4d57-9012-065432901b22",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a4b330d-6e92-41a9-8346-c4993a887974",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9637f06-b16f-4fea-8e1b-16ca9a7f02e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a969d83-93c6-41e2-a141-14549649e31f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "978a6d98-6266-45d6-96f8-05f3926acfd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0db6478b-d8ef-443a-b5a5-8e881edc92d2",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0db499e8-d324-4c89-84b3-288d481f7505",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b109783c-e5d9-4979-a825-f09e14178082"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f14e0266-8d84-45dd-ab93-48672d4c37e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef2d2bb6-dbec-400d-b1b4-ab248b9fc5a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "398d3364-8b31-491a-8e49-6e27eb67e6db",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bcc7999-ae3b-4266-af20-812859e7204b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2f3d8fa-d424-427f-9fe9-64b522759873"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a64b0224-591a-4b2e-bd19-6b66829ac722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "6f5dcb34-0f8b-46a7-9172-f443ee1af727"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d90cf47-ad53-4eec-9957-dd9a30a4779c",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cd7fe48-f6d3-41ad-b29f-79245a87fce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e047feab-5094-4359-859a-d12603f9449e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fa2c311-2d35-4480-89a6-7c1e3a149833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c2a81d06-3189-4cd7-923f-ed9f2a9dcc71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fe1df64-e5b4-48d1-9713-d24cf2f0ac2b",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24ecc6b2-5c67-4261-9171-5b0c2691e827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80d6bcd3-a2a3-4532-96c1-873fd9dd56e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d653d817-e93b-4778-b39a-b3b6a8fe26ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9402fda7-5f3c-46ad-8314-b293dd284493"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59672890-f671-4f22-8f9f-516dcaa43082",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a841370c-50ec-466e-a06e-c85772eff1fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06ba3101-6271-46ef-8f3c-3a2ffeb9044e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f07e4d2-9c23-49d2-af2d-6573e403013f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8f27776-6448-4f5c-ad5c-5e13d85d7014"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91112126-d31b-4732-adf7-816d627d1fca",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "934367e7-a33e-4929-9ea2-042af14c5ce0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf3a21f3-fc4d-41a0-9bb2-b66213e4a3d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1735bafb-92d9-49fd-ae80-930b09b9dd5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "57a3b7c3-3d6e-4489-be81-8a766880568e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d0f70c1-6bd8-4782-9b01-b83fbaaa6a6a",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00ed2bc7-138f-4e0b-b408-654eafe7ddf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba4213d0-5d8a-4b3e-8e4a-b2be4b583b10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "227f1009-c285-484b-a5bd-b72907525ead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "3220edbc-bfa8-4731-9e7f-6c1203c61e36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "985bf6d1-a727-4b5b-bd68-b5331874d430",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9db20dec-a97d-4af3-8ed9-380a7f873d16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05feca07-e8b9-48c0-92e3-15d11507da4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8e4222e-4894-4e0c-9d17-0c64e64e7178",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "3fe12f84-e685-4026-bac8-4f146cfd10b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5894720d-d816-4c86-816f-056943f0822a",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4b261eb-10f1-4668-9c3f-15843b3cac1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46d0d179-52bb-450c-acc1-080d8c4b9ec2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a3fa000-23be-48e1-9175-46ef5533aec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0807ad63-a042-43a9-9372-f710b695fea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "111d98bf-e2d3-48ba-97cd-e8dc3357fc43",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5d247cb-23ca-4cf1-85e2-09e1e32e3221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "518381db-9b5a-43b7-b490-b91dc3fbe3b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71a5c6a5-07f9-4035-94d1-ff695af68ef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "528cf062-8ce5-4afe-b64a-5872fdc1fad5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96fa411f-f047-4a56-b8ff-1358a8f869bd",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a93687f-e3e6-4704-b4f1-175402121d50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe7b957d-e2b3-4fe4-80df-996d8d8f7c64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1ef672a-fbca-42e2-bc78-dde421b58735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a348f99-88b9-4561-9dd2-3d1e216be2d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "708553f3-ec7e-4649-bebf-5baa0fbdfdc5",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35d343a6-c77c-4b92-9894-3f5fd7d54b97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5891fb3b-e8d1-4bf1-8837-bbb12cf53c67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "921cacac-d0b8-471b-8ef8-9286f1984e64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c007fcf2-a196-4ad2-9d79-cf5ebd0ff92d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe6fd683-2994-4fa1-bc8e-3aefeb52a168",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38aab627-d2a7-4ecc-baf6-7d45ca4db5ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c07ecaf-f972-45ce-9d56-165b8bd5e5ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51627d2c-98d9-4739-9f99-930b52ad3d03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5e726ec-00b2-464d-9a4b-322562a75b56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dca90d3d-40cf-4675-8abe-a93057ffda4b",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6866bed-2930-420b-af44-0f8f4f99d24e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10bac830-7e4f-4a88-88c8-fc9f95343809"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c6b0d6c-ad5d-40cf-b3e6-1b83882d917f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2086b70d-f6de-403a-b791-8c8b88c6e6e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91f084f4-3695-4622-b0ae-14e516a50f08",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9624572-20bf-4889-bfa5-286cac3779a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5252508d-5911-4944-9bed-7250be3bbdea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97549eb4-1018-4679-a20c-a0b8df2c6ad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1bcc317b-e09b-4cec-8a2c-eec9d3f41e37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a04e2f7f-7a9e-46b3-9951-fc667d393b45",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e25ea6ee-9b57-47fa-aa39-8b0f2658dc81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "393f3e42-da77-4d4b-9fc3-8e13c2a9c402"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76631195-d1b9-4873-ac5b-70a19ada0ea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f39eb072-0a88-47bf-b4c0-928b8bd1a460"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bee5197b-2c5f-407c-a522-f7d85e175e87",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b237ed9c-efcd-47c5-8e35-fe7f99054c49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68d615b6-c7d7-40e0-b74a-e27014522a14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f96d166-2298-4f87-9abe-9c6b6d8f7ebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d212760d-7ef4-42dd-b636-eb20b78968aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c5d8ace-ac1c-4c25-a3b7-b4abdaa7aefc",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34411e91-7cbe-4eb8-9881-fb36f28fca6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b80819ad-c5e3-44a9-b6cc-6be80a1b4195"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65896e68-2c8e-4eeb-beed-02ba000f6e70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce4d812e-f79f-43cd-b209-9a42093f9d39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80c01e72-daf9-48d3-89d5-fc353aefdf50",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5151499-16f8-46c1-8bac-43fd0a014feb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "208f47d2-73e7-4763-9b69-9359ee47f2a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d53df0db-1e8b-4474-acfa-86f1643b734c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5018165d-e102-4301-a1ee-3d99c0a2de55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6de649a-d8db-456d-843c-479e891c1c9d",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b087b433-a5f1-4271-bca0-0d379b1cf9f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b019e49c-f851-4cca-8960-bde9c471d5d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af155ff9-8c44-4f72-8490-c7ff36325514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d6c158d-a82c-4d5a-8b2d-bc68a9f92f9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fd84c38-4311-4d37-8755-b30dc0e0a42e",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99945781-3247-40c7-b645-9a163c0f4625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51e37380-da38-4f15-b1d5-bdea5f8782b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09e73659-5c6c-45ff-9fd4-41c2b752fffa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "66ed039d-b9bc-4775-9233-8ca66b9b8eff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c780fdab-5390-45f5-bc0f-bea2946cf00a",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a9c9e8f-73a3-4842-a578-8e46fdf34251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d825ec0-c540-407a-b299-3255102428fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ab201b5-3035-444d-80cd-884af2f20766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "88950f18-b94c-4a3f-adf1-0e0f5375e07d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10d9c9c7-8dd2-44a5-94b1-da4b6329d78f",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d53a61a2-c2a7-41a9-8792-721b8bff81e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27db31f2-d5ca-418a-9e36-efe4b802a26a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c34d7fa8-56c6-438b-8b90-0017d276b62d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "241080da-e6e3-4535-adda-00253a7b052f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b14ea9c8-16a2-4d86-9a51-09d24d536171",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f994b149-8816-40bd-bd5c-1b52c5e2a8aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6666ae59-1bcc-4903-ba60-758710a23140"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64f530f8-1a9e-45da-85bc-470a3f4e6c93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca7611f1-f57b-4677-979b-ef43f97686b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f5d6048-12d7-4e3b-8187-b6e4ca0486ac",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdd8ea65-59ad-4c2d-9f7f-83d5beea9c63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bfac868-8ac0-4925-88e5-2e82bfcd3c47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8d6b537-94f8-4b6a-a6b0-ae281468acdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0aae42b-2e47-405c-b422-dd8aa716bc16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7a1d8f8-b7d3-4f55-892e-ea58153c0e20",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a467c9b-5fda-4bdd-9820-6e8a68339e13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00433d74-dc3f-430f-a612-558eb3453e20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b970313-fd90-4404-a4aa-f2c1185b0c1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb9f09b4-3ab9-46b2-8c55-4dad9ff44320"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b1e466d-35ae-4b15-9c8a-07f318de31f1",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82ab7a31-3284-47f0-9e39-5f9a6b0e5dd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe72004e-908e-49ff-bb0a-66c476e9c311"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5d23cce-82b7-479d-b9c4-58dbfb26a15a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "41ffadb7-90e4-4201-92dc-b77b2cd57924"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a7921bb-51e9-43f2-8707-591a3a958205",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c866263c-ea26-4ebf-a5b6-45a5a6c0e5f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b6a2671-ebbb-46e7-99fb-a9dac32d44dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0c621d6-b174-4876-ae4e-5d2b3f8d1e54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1b1312c-732e-4465-8239-7de6204f9391"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c1273583-0601-47ea-ae36-b7bc8e4c9be9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "87fd4e0e-1b93-4780-9435-27d8910a21f1",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48557daf-4f1c-48a1-9776-754931821977",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "75d58c2d-84a0-4098-a1f7-4a8fd7220343"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49f834b9-9115-4332-a1e6-7351154a73be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "59eb0a6a-11bb-439c-8ec5-19102d3bed07"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "113875b6-28a5-49bf-8232-b72b18fd1ae2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "66712df4-160b-4d44-9e8b-c52bf9b53a83"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f9590aae-f9c6-4e0c-a08c-d1485041c266",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6c7adf6f-09b4-4924-91df-84c3a67b9606"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "172ac3ce-9906-440a-9266-5d49b1a6b88e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b288fad5-b1ff-4480-9dcc-4bad772d4c0b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aedb1b50-5815-46e4-94a2-0e4bdc5c6621",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bb8ced19-2846-46d7-9ab0-9b2a9aea9997"
            }
          }
        ]
      },
      {
        "id": "b6bce290-598e-46de-adcf-1ee59a7553ca",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "ed625fab-1eb5-4c5b-a81d-9e496461cb72",
            "name": "Negative Testing",
            "item": [
              {
                "id": "23b8d15e-88d6-4f06-bae5-513c950b8ca8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4e24012c-187e-42aa-9d7f-46c8134da53b",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e579bf0-daf4-47d4-9a4b-c9a8dd093f63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36f9f71e-46a8-404c-af21-bc1b6888c828"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd4ed141-513c-4cc8-a8c7-59fea9c7aded",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0f0ebed-8d6e-4b8e-9267-e0d2334ab3da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b22f1de-3cb4-445f-9d67-551dcb14eadc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f21ce81c-51ae-40ca-9de2-6558c50b9e08",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe0f6c36-dbaa-4f35-a0ff-00400b426f3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37a6afbb-e841-4f25-8c8d-f3642288279d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd622415-1d2c-409e-aab9-e1623d38d097",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "809c6861-f158-4299-9b2e-e62e3568c54d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d3dd4fd-32b5-42f4-a3a4-3aedfd25b8d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1b1a313-73b7-4514-8599-39939e60676b",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d9bbc1b-9235-4948-b354-38e5edcb5b05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8304aca0-043f-4b6e-81b5-171a66e25643"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ae0dbfc-1f00-4791-b040-b26d647a1208",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d868bdaf-28b0-495e-9503-8d00cf0d045a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99423381-73d5-4102-b3a2-7896153718dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d8fc794-5078-49b6-b770-b1877aafd29e",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bf99165-f1d8-46fa-a75b-26eeac752fe7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59f8ea19-3940-47bd-8ccf-cf984db587bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9d56edc-050a-4d82-a054-a799d39a4a74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7867bdb5-eeb8-4a8d-90a3-4b4fe51ff2c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "371a481a-1c81-4ef7-a75c-8ab420518d34",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6597322f-633c-4d4e-ba94-e82e4c184477",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37ef2f47-eb23-4dfb-8740-c9c14238add1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a03c57fb-6af8-4025-8a40-9e49b59bf911",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e98e1a4f-150b-4286-8af9-ed884179c9b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24f7396d-0ac1-4c8f-a3bb-23960a5e471c",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fc58b8c-b99a-4341-a559-94dc3800300a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "509d3c38-b5ea-491f-a372-4818513c5e02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d3386e0-9291-4f56-9ee7-ceb28bb33a1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19c058a2-aefb-4cc9-a52f-cc6cbaab54eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc25c462-59c3-481d-9813-7178868b7f89",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22c03143-8189-4710-a075-a368686411e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "499e462d-f6b5-401b-9926-9776c0833932"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "818d74b6-c0a2-485d-99d6-0c111726e958",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c569f9f6-53a5-4c9b-940c-7907f96af053"
                        }
                      }
                    ]
                  },
                  {
                    "id": "114d42eb-0869-4442-811a-a2da7e6b9d00",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b02eecd8-cd3c-4578-bd57-50c922e26955",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29603069-d967-4249-b72a-574411ea8f93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d80658d0-ffd5-4ef4-b65d-1ae7707eec36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76cbd6e0-00f6-4edf-9154-02c0577038bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84ca974e-77fa-4ccd-91b9-b2b77a64867a",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91cd93b2-40ca-4d7b-b9b0-0062c6465b49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbf6fdfb-28b7-49f9-9810-b5dbe1cdf757"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abaee64a-d427-447d-ac14-19b096404a8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88b74878-11cb-481a-9ec5-00f19be2b07a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf4b5b4b-5fb4-460f-bd97-3f6b9110bc54",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "451697e5-066c-4a38-b6c9-ff91d3e24295",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b6d7edd-1f99-4c1c-917f-2df5d9fca981"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f2c75d4-2124-4c31-95ee-9a0989b19790",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cee7bca-cb11-4d9f-ac94-e43010e58bbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "369b87c0-65a2-4a99-b513-456b357cac88",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f0419db-3725-403a-baee-2db1ac959fff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "549f4bad-b883-45eb-b6a4-87d1ae19742d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a321e09-f84d-4d83-9196-3dbef46225f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc91b7f2-f5e2-4728-9dca-e02210b2ff49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b2e5e9d-9431-4f33-8e5d-4b1bcdb0290d",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbb79ded-fb2d-44f9-884d-a6d6cda56398",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5f270ec-f03e-41cd-ba70-f9c385feb756"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f531051a-4d9e-4b38-b879-e88c57bf7805",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d217747e-208e-469c-ac30-0688a83f5bcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd503607-6f21-4e3b-aa5c-20a33bd03f9c",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d50ae08f-0e3a-41fe-8247-eb756be5cae8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fe619cf-ca02-4302-8fa8-70109dae6e2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99f55c56-6d74-4290-8d24-bd25c79a8b2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87657948-4700-4b39-a49d-6e0208c18d2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92b21e5c-f2b5-411d-80b4-361525413cbd",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca645536-eabb-40ab-91f2-f71b5a15be9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b71f3370-20d3-4bd7-951f-369d674cc78c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da4b2889-964e-4eb3-a1cf-b5ca21e075a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c20b848-2824-42f9-8fea-8e30e94823fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87c53bb3-c0e9-486b-8520-a873687b6aab",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcadfd95-9710-4f2c-9d69-3beb717c6025",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3aba49d7-875e-454f-a235-b41399a2aebb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1fc3b35-7d5d-4ef1-9c6d-9b9165de966f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "694aeeef-9708-4107-a06e-0110a0632d4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49088458-8300-49f9-8ef1-127d706fc98e",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4908729f-f7e9-4188-a0c8-ab01be6259fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8077801-456c-4ad9-9c6a-e09ae74c6ce8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a9cf06c-5fca-4947-83ed-b0e62379d928",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e8fd46d-330b-464e-baae-f4494eda0a9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73a426d0-72a9-490b-9842-f8bafb87f25d",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c42e8f4-936c-49f5-8b3f-2527d7720ecd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71544804-c1af-42be-b237-5046f68d8b7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95fb68ae-24ae-4573-bbf3-7e942582e7f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02da916f-45b8-4f58-b9b3-c1fe2d4e8924"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb98eac2-f5c1-4a1b-bec8-4dde6b846162",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b12bcf30-eac4-44e1-a569-b24dc7dd2e5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ade767bd-bd24-4aa1-ad9c-bf3317af9512"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d8c80d5-2439-481a-acd0-8e6e93a177ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "741ee63f-e036-4741-9c22-a4fbd3fdb5a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80cf5e21-8a03-4f0f-af77-b8c982eaa4f2",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6862e6b-5a67-436e-b8c1-e2d8727d492f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad62b7f1-1da4-4080-8616-866dcd1f4f70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e69eac04-93b2-4e5a-99dd-79a8532847d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7364c74c-f51c-422b-b258-4f05f733fa73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff0989c7-4dd8-41da-99e7-8500e03a595e",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a28bb047-2dae-40e0-9445-875e7cbb6698",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e069e318-e25b-45e5-a1b8-31bc79a40244"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67132a3e-ba54-4d35-ba9b-9b7887c417f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a591f7f-b271-4d44-a5dd-bbf7c23b123f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfa1cb78-6a1a-417a-b2aa-72c22be1c7a1",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "619e6a97-09cf-4e19-84f0-52fb851a44cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da364f1b-02f4-4660-9bdc-637d7bd2ec65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85b05852-aca1-4487-8c4c-5cd8e89eaa76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06d3cfc9-8b10-423e-8304-772ed1920d72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce8476ea-0ee2-4c30-a578-261fe1aa930f",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e6e0526-d233-4d33-bd9c-a6ba7bc2383c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8fdb9e7-3fbb-4b1e-97a4-6fc907c74254"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66c60627-db8b-4f49-8034-80be255a59fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaf7a54d-0451-4f07-8670-1fad88dd2829"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a152d34-eca3-46de-90b1-123aac909c76",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f78537c6-3f08-4064-81c1-195a5525605d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb096125-54d6-4f1f-a216-e2fa90886bb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5df239a-8570-4c4b-90a0-7797ae4cf4ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f6bd8f5-9efd-43af-abbb-9a3ea657d0a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd772da1-4808-4cb3-8064-8b36eb54c92c",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "581ee931-6e88-4c78-91b6-21487e2eff55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40125f40-5541-4f2f-ba0f-2e82f617e99a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df94b173-96ac-429f-bce2-6d925bd5ee32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a0670ba-1e74-4277-8ebf-d8f5562c0d34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc5db387-14e5-4411-99ac-9e7671cf0cf0",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c77329b-9f47-4981-8ce5-6a9c3eeddb98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85114856-7d7c-4d24-b8b5-2ab4c97f6bf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "746d8816-0426-4a7e-9626-b0f682d1b76e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34dfee04-1796-4e69-acf1-2be98a2be13b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a89a4d31-048c-4360-ad73-71c52abedfc7",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e89f82c9-708c-4b47-b5a5-dadccb1c2ff5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4bf9a566-5e97-4109-99cb-a36c9db2dbc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6431bc1-8279-4cf8-8e73-809184e98387",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b609095-00a5-4dcf-b3f9-f626888131ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2caad5f-106f-42b0-8185-a440a3e40d1d",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "381f7ea3-2d02-4447-a1b3-a39ef5f5658b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "143c07aa-f2ae-448d-89b3-965c3d1787b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a4ef969-bda7-4328-819c-3834883dc72f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "763dd518-fa88-4161-959b-77bae7b61ace"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f30b008a-da25-4ae1-a287-e527167c60a6",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "626b1aba-aab0-4201-9e1a-5e9173df0c99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a38c5c9-a2dc-44eb-aec1-1bf0d2182c64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cc6fc69-1c7f-48f4-9f6a-f2706463f6fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dada1350-730a-42de-b505-91d2818c9f10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2675a60-b2f0-45dc-bcc9-064a53a771b2",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c6340e3-af89-422c-a0b4-360d7b8bd39e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "734ac277-865a-45ba-9043-21bc4bc439be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "714b8584-74b7-47bf-b488-b33e5592c489",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e34f62c0-21a1-45a7-93ac-a9248e965bd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66693d52-9a0d-4e18-ada4-cf1ed1221dcd",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9287d16-1e1f-4250-8602-694cbb0de5b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d2aa063-0e29-48bf-b21a-efbe0aa87f8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51511366-895f-4409-8a61-eda67fc82f85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7315f4b9-2e7d-4b8e-8964-315358f0c2f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25616dbf-c5b6-48a4-8794-1129eaac1f27",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27614990-3301-416c-b985-199ee54c9711",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1ca416e-3bca-4c5f-8701-3fcdb13277f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0960125b-612d-4653-9527-ed391d1198bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d6001fd-3cad-4e1c-888e-57d91304ed69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dbd923b-f65f-413f-9074-a95de99e1946",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2dd4726-d074-41b3-8f90-ce53e5f64fd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02f9e831-69a2-4b01-a60d-c32438b26390"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3b548b2-465b-4160-96e7-74edb6f3c1e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f87aa20-793a-42b2-be5d-062ca4b52f49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0438300-f88c-4999-b9c4-7a9a60e74538",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8ba65e0-c8f4-49a0-ad43-df02099f5155",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5f60384-5f43-4e78-ae77-28468b920862"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62c885a8-3ff8-41e8-b3fd-95d84eb29107",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ab7a327-f997-4ba7-93be-82b56ccc30b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8535954-156a-4d1d-ac79-79010ed14f3c",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed56e06c-7e28-41ea-9d79-e0242b91cda0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "445a58f7-2f02-42ea-99a2-cc0168c2a0f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7abbae7c-735d-427d-b2bd-6bb83593c29f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92498fc9-0f5d-4d98-bd3c-9b439bd6e6b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c7ed14d-56ed-4e6f-8f48-436844916890",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7e3fbfd-406b-4a34-aa05-238206d05334",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b2638b6-4615-4f8b-85f4-1367dc4800a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b68b0e6e-4a6f-47ea-8e4e-cf1cec031ea6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "299f33e6-eb4c-49cb-99dd-92a5b9edde90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "655ff322-72e8-4b90-b14b-e9b425a4fd70",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fc7b9b1-9266-4b87-953f-7530bb5c3767",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9430ba5-dbc8-46b0-ba16-56bf2e14a5e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c32aeb7d-595b-4d62-a7d0-9dd2668cdf18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59e81fbe-b579-40f1-9845-49ff4484ce37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28ed8707-5dd9-446b-b086-03b3160a6872",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d9b8436-20b9-43cc-872a-62794624b7fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "569b9dc6-080f-4173-a9f7-df367179fc09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ef729ee-c3c6-4634-b8eb-943d7497ba40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07f00931-a7d4-4f39-aff9-c07ac7c0f163"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f49acd75-d230-4c6a-a3cc-2b56595952ba",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef75a05a-f0ff-4e1e-94a7-58c560d6489b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33d030f8-d23d-41c7-9f42-ceb53a91837b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea883172-cea9-41fc-a36f-16523ff04e5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0b27153-599a-499d-8356-c19db9a92331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "707cbfba-8c24-4487-ab12-84345d251ce1",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e64f4cd1-1835-4e07-9ccc-5bf0bb31f78e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58927885-4560-4f6a-9792-fceb6b8b63d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c21e7af4-3768-4109-9939-7dc9513b8eca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e1b310a-90f2-4cc5-8bbc-dc404c3f7dae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d3b535f-4382-4c46-aa81-3ce22a125aa0",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d197fed-bff3-49d2-81e4-a1e3f12ce93f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c519e06-8ede-46b2-a462-c8252bafee09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f832d70-458e-4c76-80a1-f2e6db5971a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9f1f0f2-98b5-4585-bbe6-5feda32ea426"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cd1ba33-5516-44f4-a657-618d4c9f058c",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36113d28-5e56-4bdd-9268-6b7a21cf91a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6ccb08f-b235-4339-9044-737072e888b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "651866c7-3ed8-43f7-8594-034cf1e6c093",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10c7e14b-c3e1-4b25-bdf9-bca271743ced"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47ad1ee2-4818-468b-b736-b10c2b3da271",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6692c2d-3f2d-4623-a902-416759beeaff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d4e8390-0ad7-4337-858c-7367e3ecfc59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9b9d8a4-5d28-41ee-b02e-90fef3ed3d3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d2e7973-bdc8-4b2a-984e-21d35946aa0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83c87056-5bde-4e70-8faa-e4596dd7f9d6",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c52d09be-d8f8-4b55-9d57-a4d829c3b1be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1ef7033-865e-4312-96a5-e306ade1c459"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e06c02d1-af34-4151-9a13-28751fbc6a9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a43ff77-d198-4e0e-bde8-2eb6fe1a5156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2d67400-1912-4e9f-9d70-8c67350327fb",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d60a4f8-b38e-4aab-97ce-9698a0cb9781",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4277861d-3d42-4b2a-b996-5e78c36a41a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da6af7d0-e99b-4c06-b1da-84e54f877ca6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48ce9f5d-37cc-4e08-afa1-653cad431214"
                        }
                      }
                    ]
                  },
                  {
                    "id": "332fdff4-a1dd-40c0-8fd0-8d8b79796e3e",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdfb22fd-92a2-460b-9b8f-1be59a336258",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e476bf1a-91e3-4118-93d3-597e7a2ca045"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9808ab99-1f21-4503-87cc-0eda9eb041e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6f04f36-2e22-417c-81af-ddb21230c005"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d45d6a42-a3ef-48cb-afcc-f3b79623fd9e",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8901af1a-4254-4cf5-b3f7-18b8ea564860",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7369dbc-e71b-414a-a151-6ae70b54c16a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0f60e0a-77e5-4705-8b8d-26407385940e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fe5772f-50bc-46cc-9255-970f9d46bc34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d3957d2-4a84-4a4a-aa4b-87f0bbd3d251",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd31a80b-8af6-463c-9787-138a8a2b28eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14363ff6-5ec9-4817-ba07-726b46f96e01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2481637a-4fae-4790-8ad2-a79d058203e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24572ad2-b2f4-4dce-8b6c-10add6d030b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5c196e9-c821-44bb-9483-89792dfd714f",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83b2d5e7-74f7-4991-aa08-c152e7b88c7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54a4e417-1d98-41a5-b292-445c4ffa4742"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "534fba23-74f7-4c5c-90e2-05bdc108483a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5597b52d-7ce5-4e2f-bb3a-761ae53b3b8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66dd3a5b-65ac-428e-a7b7-af108a19b632",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "183cf2c3-60ff-4dd8-82cd-f1859f8036fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85dcdc23-6d54-44ef-9a6c-ddf379edbd1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "377e1135-3649-46de-a9b6-2248e35b1a62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29917ddd-9ab9-4907-95b0-1ae2146c931f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "751b05b8-ec2a-4a3c-9434-91c66711fd24",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb0431fb-420b-430d-b02a-759eaac848c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a93b565-054b-4ca2-80fd-7b8c0cb7e460"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "092eaf39-bccb-4826-837e-d2d594b8690b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc19536c-3970-4182-888d-89984857210c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "888ed198-c200-495a-bc36-5e5ef92e9f86",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "337fc532-aa81-4d1c-a71d-4fa82972b623",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b3944c0-7db5-49cd-9628-9b05525d174c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e871f945-34e1-43e4-ba25-817342bf2c8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fa6f651-24f5-4bae-9d9b-692f8e54e905"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f4f9409-9e36-4985-8252-2b440f7f5d60",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84883caa-6aff-4f55-a195-05bcef9a684d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9cc8c21-e383-42b7-a9f0-46b762cf6620"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b5b840f-49e6-4908-a99c-68079af795a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5771f51c-26ec-45ec-8325-52dd79591e45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb3cab6a-7434-47c6-8aa8-cea17b83c0da",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c92afc21-ec98-4073-8ea7-2a4569a70460",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f800e22-5e5e-4152-b5c8-c1f380689dbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce87fd69-cff9-4ed3-96c7-840459f9c8b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cf4f88a-420a-4df0-a8c8-43aafe60b693"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a426400-b076-4610-bf1c-dfb18b83a78a",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "275c2961-891e-432f-b84d-d00c1fbf0b7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d99c3a1-bdbb-4d07-b785-a50997295bf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec950fb4-9791-487a-bf26-652a52431eb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edc2d9b5-dac8-4aa2-b602-cb3acb057110"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f8e8949-b492-43ca-b741-996a4ad12f19",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff92559f-c6c3-4817-abda-c2193d1e3d82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "748e0c43-d36b-4477-a9e7-cf6ff7e67e71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a2307c2-d68d-4606-bbb2-fa53b7b7d4fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1aad67a4-d353-4b64-bb63-2f15636a47a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bf00b03-25bc-4d79-8738-bf7ea5b46d58",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37701044-2a46-4f46-b952-6357b24c419f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f71f4012-d914-4d4d-9717-16440d770739"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3caa570f-02d2-43a1-becf-e7b5a2fbbdfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e14bfd7-acc4-4836-9115-b360fa1deed1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0394dbbb-8ee8-472a-b779-6e7c0a74c589",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1dcc79d-5fdf-4a98-901d-2b85b7739f08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38475512-2bf5-4dc4-aeef-fd00e5b6f3e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8a48938-a0a8-4833-89cb-e4af21998779",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7029123-87ce-4954-b43a-185a0e17e943"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06032712-4a07-4abb-9310-2333a49f9210",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fe44753-a90c-46ea-9b99-7b0e266a19d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d77adb9-5d8d-4e6c-831a-0d446ffbb392"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36d728ea-4e41-4390-8642-ea168c4315a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "949d4b90-7084-4986-92ad-23355beb7384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17309717-6fa3-4b30-9838-1f1185d21c85",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0749d46-eca3-4ca9-b62e-d0986642310b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29215dc0-12d8-4c79-b90e-2d033630ec36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65dc026f-bb66-4021-977c-d70d18aaba13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16e9b901-b1c9-4da2-a5f2-217f9c6bac1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba0fdb8f-26fa-4919-8c8f-9ce19bff0f72",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83404e30-0ce1-41c7-bcfc-135177c47c40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56bd019d-f7ec-4228-9075-eb857143b1e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a720c619-f8bd-4411-b4bc-f5a58f926d91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a222fbe2-62bc-45c5-a84b-03685e302647"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85f4b972-9bd7-486b-b759-396178ceda78",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53d59dc1-1f10-4bc3-aa2f-3b06bfefb147",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03274044-d5cc-469e-849c-9e6f9ea7f105"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9da5f32-9351-437d-92f4-ead48f4b851a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1b28ab1-3c10-4cad-95ea-6b87f07c6dc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e483873b-1197-483b-ad97-fbe0a22657fe",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46e7b4cd-103e-4847-81b3-68580af37f9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3757f90a-88af-4177-a079-da6554e508a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b814b51-b91f-4540-8401-36c2355bca05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56b222f0-8249-4a22-9809-16d2efe59044"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88431cae-32f6-4ec0-893c-9e4e960ff510",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccbe376a-40d1-4f59-973b-ffe9bbb1614b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d196b21-dfee-4b57-aa7c-479c8de101e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d2ebee5-1d74-4c9d-b671-c0032866ec62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17802cd3-656f-4238-9343-447839b193e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "976ca374-9a15-4a8e-8de2-c4637a0bc127",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5b96f66-2656-4904-b82a-7d172fbfd0cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1a7ed63-2c39-46f5-bf09-3a5b6d3dc951"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d62b602-9230-4ce6-bae1-02c83aa37524",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9833eaa5-6375-414c-a1ac-18cabedf0189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8efc265-7523-41b6-8e96-c992719c283a",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0bb9b08-e780-4d12-b910-e0d61cce0908",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cba58659-b845-4357-84be-55f474da5c5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2513d45-6c6b-4fdb-a5b6-8a866797d030",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e44c5a60-0350-4a29-bc38-4af54ef8ab42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbdf4535-d7ef-4ce4-96fb-a814a004d0a2",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb5f100f-3b7b-4897-8c48-9ae8fcea4134",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f172bec6-41eb-4fe8-899b-59bd86854a85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8215e1f2-67b1-48ad-846c-6e430599d8e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99822db2-4c65-46f1-9fe5-66639ec88863"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e96dd6cb-59da-4518-8b55-16dec7588642",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbf45c8a-7cd2-497b-bf44-58f5a8031014",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63d344d3-f5b1-47f1-940b-081ca285c918"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40bd6239-9f42-42d9-b3d2-17c20f3586f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb785f11-565a-4028-af02-1074cd1aaa70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c5fb2ef-481b-4194-b85f-c3850c7d38d2",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74b61617-064b-4889-abc1-b062ac559f91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce4ea7bd-2acb-448e-9fc4-e17da60cefcb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8f3f716-61c0-4789-8ac0-bc0e05a0a2de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ccbe52b-c334-498f-8478-352101c539d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e3dacd8-3c20-4787-9ae7-0242de2f2851",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90407162-9f04-43b3-b5c1-f70ede85cca9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "924f0888-76a4-4dba-8784-1be5483a8966"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f48e8898-2bd3-4829-b77d-ddd0bd7794c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95fcb577-1f78-47e9-bc57-3dfa11cc8fa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fc72343-925e-4e7d-986e-8ac722cf2802",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3902df34-61e0-44a1-8f88-4ac0373a0a93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a44ca8c6-43f3-4540-9369-4b6e31b43e55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e966d8a-d32d-4080-b742-32a37f2be939",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe8ff0d9-3b0f-4c73-8592-656977d985f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d6caf90-c72c-4e0f-9f72-0b3e837059e5",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac33dec2-b40f-46fc-8bba-a451e9d7a26a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4854c45c-42dd-49ed-bc4d-da040c472f6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbd3a37c-bcb4-48f8-a60c-da4a4227e33f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "581ace3a-b6da-428d-8190-5a767e98ddb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "940fa75b-cb36-4528-9a05-23a0e70d1dff",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60bbb76d-1571-4142-b080-a06bae8c461b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76223d7c-d406-4cf8-a78f-b09d64000b01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02c439ea-2490-4f84-83ec-27ff248b02de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b136f58-54ee-4c6a-a2b7-88eb1daee2ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71d8b4f4-f817-43c0-94d6-1d69ceccd8b6",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec5952c5-8291-41e9-b3d0-c2f61dd36e56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89f5afae-a04d-4a0c-b94f-a59719673e31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20bed66a-f24e-4b2a-b5de-a8bc2aa9e7f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38a790b3-ebe3-47e5-8515-9f6378d1bf70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ca3f455-547d-4f0c-b71d-25e8d654a151",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a63111e7-46ce-42ba-860f-4e12a286a1b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9240e7e7-c8c4-437e-917b-9332f6436c82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "847d0961-3239-4a3d-827e-041ec15810be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11048772-8aad-4fef-94e0-c0db12f7a7b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ea3c329-e031-4239-a86e-ed332c5a7de5",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57ffe909-4252-40fe-a4a2-717ee227a6fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c33155c-c5fd-453a-b518-02047661c530"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3560e153-4601-4294-86cf-bba1059c6f30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac7466d3-da20-4133-a8f0-364eddd5ab9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1eb6a23-45ef-46b7-b922-1d1cbc310cb3",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "365afe23-e8e0-4749-98b2-8019af33806c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4c5e685-151e-416e-bc2f-30070caf85b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b1d99b6-c7b2-427e-97ab-d76d8f4698f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12d2e5f0-b7be-4947-bd63-7b678ef6b2c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac090463-d098-47c2-8113-393acf05eb05",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f43c7135-1459-400c-9785-69a414902aee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3485b923-aa21-43d2-8a36-bea64ff1cf6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff55c20f-bd87-4d9c-a810-c6e5ceedee73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32e963ca-665a-4eb1-b9f4-cdd0c878958f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0064ab4d-9bb6-4e48-aef5-270cfe92f702",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4e9407b-3618-4a18-a6d0-e537c878f481",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d03d990d-9c4a-4769-aad6-2dc68472b9df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d93d853-d6c8-403d-99c1-26764cbff2ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de69fbfb-d3b7-4527-9455-eb043bbc8995"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69a797d2-7f4c-4803-83c8-c72fe0a79d78",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31263cae-bb23-41db-ace7-41d6fdbef24b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c1cabc5-da0f-419c-b659-996d0b22939a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fea95d5-a381-4461-ae09-41998b9e060f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "befeef2d-82e8-4e84-b4f4-ff1039039436"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee9e96f1-8c84-4e73-8e32-b6fb0a0c694d",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce603ffb-8816-44a8-a0e1-dc783fffb85c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36221dc1-8e98-46ad-8d90-8b884aaf4971"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73eb3181-5a0e-45c2-aa9d-988b349626e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "836d6429-4c49-4b0a-a4eb-e9a7cfff0de2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd08329b-4c6a-4ed5-8cdd-5485b7d95f5b",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4735d072-6681-4fd1-b9f7-0ae05a4abfec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b3d0bf1-1a57-4443-a72e-f63486ba55d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aec6fb5-e9bd-4690-b2f3-5406032f9e51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48755a3b-804c-444d-8238-bb568b2254d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c970db10-0c46-42a1-bf45-7bafbf91e962",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb5ad566-91f7-4474-bd40-a4486ff0c7e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b90aabca-1cc0-4855-8f62-c8dd90e25a4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d649179f-da69-4b56-9021-c65298631cd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fac5dd3-0510-4a26-a06e-70a59b7e8c70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10bcb7a5-9b34-4e87-b888-1a7de81e7e71",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6922db6d-b95b-4640-81af-7ffcb68c5a75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3e1d5c0-bfee-4b7d-b7a5-42ae0c87096d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27250d9e-1174-4a91-8bd3-d338c635a471",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5264d20e-d292-4eb2-b882-e7c07f474b13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91b4fb8a-db93-4931-b317-debc8fcbb64a",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "addeef2a-bc44-492a-81db-b27804c862f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "faf6914a-e740-4c4e-9582-5f251591119e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df354db1-2b87-4936-adcd-3d9376b4f70c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e2ed4b4-82ed-4c40-82b4-284cb0e1ec09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fa4b9e5-3403-42d3-8018-0f3a71ace201",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1f2dfc5-4102-44c9-ac2e-2d55d1d184f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33b2d49f-6883-487c-a4b3-15bfca89c14d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ac0231d-13d0-490f-a2fe-64bf0c3aa0cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43be8536-26bd-4d03-b429-3ab71f26cdd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "704c3b0b-b398-4d36-9ef6-c2bd28ffd92f",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b29ab462-1d1b-46dd-b771-17efa973564a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3dfe4ed1-2dce-4c64-9998-9ea107a844c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa5c3ee5-2ecc-46f7-9131-8103939e8647",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e413aeda-5fd6-46fa-9a8d-1bfab076b5d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bea277f-b1d1-442a-89d5-5bfe5dcb2b10",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41111400-730f-4d75-b3f5-e88c29b8c9a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30c31641-ca9c-4cb0-8129-8b4f5e4a7990"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cf1ec48-44af-4a25-8aa1-541bc8c1c20c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "954ea009-f755-4199-85e1-d5ef20c97693"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91c37256-c864-4946-a617-208ca6d1afa4",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73dbf755-4c5d-479b-b427-fac252e973b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "673f6c2e-b88e-489c-9f2f-e563a30d762c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92ed5930-4e39-4eae-80a4-a0385c6a27d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f39d32bf-dd9a-4473-8c9f-124bd4270e45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ce0a137-e3a6-479a-94ab-83f17a46279a",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95a50da3-708b-4360-91c4-d31871c92d96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17bc1b80-1094-413a-8ed1-2416a04c2b93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fb7e8ea-da31-4938-9ae4-26c1a74b3ddf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2e8ae49-89af-41ad-a94c-bf9353412acd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bc89293-b6c7-4e8c-b057-9373d87b803f",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08675334-3463-40ce-b609-7c95f1f4d1cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8af36e9d-b091-4970-a247-0b7284c908c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ce9196c-616b-4892-99a7-aac0ae1b4d6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "182f34f1-3c06-4dc7-86f0-c2fbdab7f798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be483217-8e5a-4a69-8a01-ad4580b73384",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b0dfc6b-b71a-458d-8566-bc38e56356c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2d4fb0a-4728-4f96-a0de-4c6191a80269"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e33b8609-fa4c-4af9-876a-68ca43b67aa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6ff3ceb-7903-4b32-b16a-6c7966f20a60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e5d6334-a205-4801-bd96-3af816bb20f5",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "800ebb97-af4f-45ab-ba9b-ccf1ac97f217",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90c8f115-a708-4946-9ca7-64b73424271b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1da51ada-bd17-4cf1-abba-0c0476616d4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32f12305-cc7c-4f35-805b-6f120e382b15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88437741-d4b4-473e-9b67-c314f44022d0",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80bfaf67-a7bb-46ed-8c4b-a19f985c0c71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e623f95a-edae-49d7-bf0e-2771aa3557f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5edbda60-88b2-4684-a3d3-e60974e28c88",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77259dd9-39e5-4ec6-b643-a2d51b5223e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3553e23e-8a4c-401c-970f-4e9135b10482",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ada8b67c-5c8f-4113-b662-ec3fc5019928",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86f13e39-3095-435f-9db8-e3b9df9a6f40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d14ebf9f-9c1f-4b16-8139-9d83faa9da5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61acfa2b-aedf-46b4-b0a9-60b55543045c"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3624e4d3-bdde-4b6a-9d81-62f45445092c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5c9c4171-290f-4f9b-a735-4818ade46e2e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bbe8d136-b827-4b8d-bc12-ee15ab925b0e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8c232297-b6fe-4632-97f4-02470b193f37"
                    }
                  }
                ]
              },
              {
                "id": "5f70e167-1f4c-4938-a67d-1b1de2c5fb8b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "300cd56a-3aab-4a52-ab3c-755c8f7dbc48",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e62eaad-ce5f-48cb-95fd-ec4f50f74503",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "247af034-d525-4c86-93ca-3b60dfd1e771"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e973db5a-6724-4fd1-988e-c775b24ee302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4bad28e6-3a7b-4cfb-af70-b0280e2c7a85"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0c8385b0-b932-48b4-bcac-0344c2fad8da",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3cd7e8fd-c96c-498e-9f39-024056cc6436"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "02110fd7-2f59-4709-a092-73b462fc1007",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "483c673b-fa26-4401-8841-5ee67c5875cd"
                    }
                  }
                ]
              },
              {
                "id": "02c71218-8055-4e05-bec2-6987fe0c1d9d",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "17f998cf-7084-41a5-a664-2649c043471f",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1257feb-7755-479b-af35-ee75a2d804dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "cf1861f8-f063-44f3-af72-60d3bcb95f16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fe3e531-e2eb-49c9-a9e0-14bbe20079a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9695ba9a-ac64-4353-b288-f73df829c6c4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0627f63b-1d0e-4d8e-ace1-37d9b56b2579",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f7e9bb8e-0d48-475f-9ae1-57e156f12aee",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6b4dea49-4684-40c5-8a25-cd5971f00145",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "60ccedf5-d609-4cf6-8279-328035d6ff8d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2cf3b94c-b52a-47a0-9162-41060aed6f46",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "527b2b1c-2c22-4f46-8848-86914d9b38d8"
                    }
                  }
                ]
              },
              {
                "id": "0b234ceb-5aa9-4000-82d0-7134da6e8291",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "78212ea1-6e3e-4b97-98b2-862c94ef9031",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c6b75f94-87b8-4ba5-849a-92963238e24d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "760bbc52-b5f8-4ae8-9ae4-19fd03bf72c5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "852bd791-778d-4b11-a27e-a359ef2775a3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1f251f08-b950-49ce-9ab9-e3753aa14724",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "501bb3e3-8959-4194-b63e-e7370162a1f9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b533a741-d3dd-43bb-aba3-55d3d60ec219",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e2f0511f-2f7b-41ab-8205-e07e19908dcb"
            }
          }
        ]
      },
      {
        "id": "1e948970-220e-4852-9cdb-c25f64bdbb2b",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "37e5c32b-5ab8-4c19-bc29-f1064e541c21",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f8457010-9ebd-461b-bd32-4e47edbf9075",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ffa337b6-8c5b-4f3b-aee1-d4f89e9ba0e2",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1a44219-e39c-497c-b604-c9af1e2beb89",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b0ada379-f336-43fc-b63a-03c21230b120"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a3dda8b-f3bd-4d82-b5f7-aeb6c71cb709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d367d7e9-892d-4364-8ae6-7672b367a9d4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0a54b5d6-8bef-43ad-a54b-079d53c335e6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f0eea619-db27-49b5-bd9d-80fdc4ced032"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bb1ecc80-67cb-4b64-857f-b9a0a16e8033",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5224d848-8549-474b-9c1c-da205ec585cf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "067f11a6-aee7-41c8-a9ba-9de92fdb6387",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "23435ba2-0920-44fa-aaf1-5e7d0f63ddcc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4fe07cc9-844b-4614-bdb7-7543ca5dd3ec",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6b1c0c6c-d184-49df-b648-c73736a22641"
            }
          }
        ]
      },
      {
        "id": "b83070af-7008-4de2-a8ce-811fa79823a4",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "23eb1f5c-03a8-4fdf-a91b-aeaa8ef61fb4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f8187992-bdac-44bc-8c42-2d3e7099dadd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "13641847-cef5-474a-97e6-e54df463570e",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0796f853-5ec0-46be-841b-fe2eb3239f20",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "38bab654-691e-4c5c-b195-dcc7c2e47049"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "002bc79b-61ad-45f4-839e-7701a9b4aa11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a2e519d2-6c84-4746-b7eb-ad3c1d17fd25"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1b15e593-78f7-47ea-ab96-520bbb4f03da",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "53c5e9cc-8c8a-45c8-a7fe-59e7e1e7e58f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b71158f0-1e78-4682-9413-ba2ea2d35fda",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "11e3db7e-39eb-4e83-8ca3-1ee5f88d3379"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "421be943-547d-4978-b44c-e1ee347ffc4d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7f824d22-a03e-4639-ae86-cda69ad49840"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dc1a4546-035d-4fa5-b1fe-91cccd2f3d20",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4b3bdc99-fb22-4239-afed-6b9c9fb77ece"
            }
          }
        ]
      },
      {
        "id": "5a5ef2d2-7b42-40cd-bf26-fc0cad8d08ee",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "481b2d70-6450-4043-aedd-a37450989b22",
            "name": "Negative Testing",
            "item": [
              {
                "id": "269eb217-0a4f-4bed-9e9a-5a4c9ce4d046",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9e6113d3-5bea-4217-9fcb-27dbe5a66b87",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abc5b5a6-3d56-4dbb-83e9-9636fcb2df67",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8e973f56-f818-41b4-bb4b-cd9f91ae1030"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7edb6055-4033-4574-ab2a-ae6d086aaa24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1b01a629-bb9d-4aa9-9646-bb5b92fe5a89"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c69b822d-6ff0-4acb-8c72-76df36b938dd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "337d66ec-4cbd-4181-b358-ed5ddb8822ea"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bfa9dfde-1645-4676-bea2-a63d75578cf4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e2156589-58bf-48f9-b5ea-65a5fc542c48"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "011f9704-8601-479d-924c-732ba61af970",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a38597ea-4dab-4aec-b7a6-13983d1f33f8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0290503c-17fe-452a-9a8f-db5508f623f4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bc43bf2e-cdde-40f8-a53a-89634950c019"
            }
          }
        ]
      },
      {
        "id": "6eddabcc-a94a-443a-9d0e-46fa8cbddb40",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2e8ba52b-d9a4-4b13-b891-170b442c90d1",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "57879b31-c563-4aad-b2c5-49364adb1cc7",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "d8c884e5-71fc-4a99-89e6-4fd5d1741e4a",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6d856a2b-a388-4eca-95cf-d2350402e92e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f87e6328-5609-4fd0-a97c-dacb61598fcf",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 117.22456140350872,
      "responseMin": 5,
      "responseMax": 778,
      "responseSd": 75.89798388719525,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1702255014063,
      "completed": 1702255056687
    },
    "executions": [
      {
        "id": "891be78d-83f0-42fb-b73a-0a0dd20ce3f4",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b6603d68-076b-4a84-83de-5019a110bf14",
          "httpRequestId": "994c7b9b-dba7-460b-bdda-1efb57cda2b8"
        },
        "item": {
          "id": "891be78d-83f0-42fb-b73a-0a0dd20ce3f4",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "beb66d74-1a9d-4b18-8ff1-12845ff5b996",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 0
        }
      },
      {
        "id": "ed01be63-965b-4530-96b0-f886a4af6319",
        "cursor": {
          "ref": "02be2791-1f10-4687-8652-a99938d9d4ed",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0e20dc2c-5bd6-4a62-8bb5-35b0967cad00"
        },
        "item": {
          "id": "ed01be63-965b-4530-96b0-f886a4af6319",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "6160a70d-223f-4680-a6ef-918433362964",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "d56ef0fb-206d-4ff7-a6e3-32fa73d2ccb0",
        "cursor": {
          "ref": "9908c9c5-0020-4a58-8a10-e4698b6cfa24",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a272d75e-b3fe-4dec-9b3a-eaed63e6e771"
        },
        "item": {
          "id": "d56ef0fb-206d-4ff7-a6e3-32fa73d2ccb0",
          "name": "did_json"
        },
        "response": {
          "id": "6eb19918-723e-4340-8788-cc8fb7b7922a",
          "status": "OK",
          "code": 200,
          "responseTime": 778,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ddac234-c10a-4862-a8cb-4301aa9da721",
        "cursor": {
          "ref": "a45f0817-a2e3-44a2-ae74-4410aee54ef0",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ae50c81b-5ca6-4a06-8ba8-400376004858"
        },
        "item": {
          "id": "3ddac234-c10a-4862-a8cb-4301aa9da721",
          "name": "did:invalid"
        },
        "response": {
          "id": "01ed33f0-f1e4-4bad-98a1-6b411d4ca8a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ddac234-c10a-4862-a8cb-4301aa9da721",
        "cursor": {
          "ref": "a45f0817-a2e3-44a2-ae74-4410aee54ef0",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ae50c81b-5ca6-4a06-8ba8-400376004858"
        },
        "item": {
          "id": "3ddac234-c10a-4862-a8cb-4301aa9da721",
          "name": "did:invalid"
        },
        "response": {
          "id": "01ed33f0-f1e4-4bad-98a1-6b411d4ca8a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f979a4e0-7c98-440f-9280-f6858708042c",
        "cursor": {
          "ref": "e7d32407-e02d-43ba-b93c-f1e56897f188",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "4a29ebbc-33b1-4df2-9d6c-b2f9960c307c"
        },
        "item": {
          "id": "f979a4e0-7c98-440f-9280-f6858708042c",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "2dc4065d-3891-489e-b216-85a0d9a8b54f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 148,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "065a6341-7b63-41d7-af2c-fec412680229",
        "cursor": {
          "ref": "b58d0701-0095-47bd-b39f-387ffe22f38e",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "3287eec5-a952-4b47-aa15-c23fe504d562"
        },
        "item": {
          "id": "065a6341-7b63-41d7-af2c-fec412680229",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "ea5d9de0-0c67-40eb-be2a-0fc7ebba6290",
          "status": "Not Found",
          "code": 404,
          "responseTime": 94,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05f9a349-f9fd-4cf3-8613-e75dbadcce87",
        "cursor": {
          "ref": "fb2bb484-4f83-4d28-8cb1-53b9d5eea829",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "d3c80e92-ff34-433b-aec6-4ba4a38163d4"
        },
        "item": {
          "id": "05f9a349-f9fd-4cf3-8613-e75dbadcce87",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "3f9820f6-9a31-4797-bb44-3216ea5d2533",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b847a24-51fa-441f-85bb-9ada1b97e916",
        "cursor": {
          "ref": "fee0408c-7cbd-49db-b50d-8c5319b0d620",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ed5e14b4-9c42-47b3-9f20-58994028b18b"
        },
        "item": {
          "id": "7b847a24-51fa-441f-85bb-9ada1b97e916",
          "name": "identifiers"
        },
        "response": {
          "id": "ac50ab31-b83a-45c5-a6ce-3dec0d1b7d11",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e428c88-d9ee-451b-8dca-ffe1a52247d9",
        "cursor": {
          "ref": "971946fa-dd3b-483f-abb0-22c568f420ae",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b96281e9-57be-4734-a889-4d1e123186c9"
        },
        "item": {
          "id": "6e428c88-d9ee-451b-8dca-ffe1a52247d9",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "732f7ec7-4499-4e1c-b4fb-d98e21aa078a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a35c1d50-e58c-47a2-8f27-a8c2d71f5852",
        "cursor": {
          "ref": "5de9087d-d0e7-4948-ac80-e3eb74c55736",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b70d10d1-dc60-40d9-91d4-8f97b64406b2"
        },
        "item": {
          "id": "a35c1d50-e58c-47a2-8f27-a8c2d71f5852",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "ae5099d0-cdfd-4636-bac1-bcb91d9053de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d18658c-22e9-4250-9e9e-a5891be5d22e",
        "cursor": {
          "ref": "dc176424-252a-4c05-abd8-a12bc57f6669",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "a4481cc5-e7ee-4fdd-ad60-1e606942f0bd"
        },
        "item": {
          "id": "4d18658c-22e9-4250-9e9e-a5891be5d22e",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "9ba85fcb-b21a-4a92-a644-c7565f32443a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87a5998a-1f16-484b-a3ae-8c768e33ae0e",
        "cursor": {
          "ref": "ec097ad6-7b98-44f4-84e1-0ced5281aca1",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "08cfc17d-7ba9-4c58-b319-dc21341e1ffd"
        },
        "item": {
          "id": "87a5998a-1f16-484b-a3ae-8c768e33ae0e",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "60f6b802-dd0a-40f6-82e5-4d4bc6b29629",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6f8f147-99ec-4712-8e1c-b6537e445f7b",
        "cursor": {
          "ref": "d5f17d8e-47de-4b47-8160-2f391b92222e",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "93ec2764-dc60-44e8-8c6a-6ca61acb8885"
        },
        "item": {
          "id": "a6f8f147-99ec-4712-8e1c-b6537e445f7b",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "433b4097-8047-48ce-859d-543de1cd29c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92110da8-1ac4-4e1d-b523-747301017428",
        "cursor": {
          "ref": "5f35944b-3df2-4e84-82d4-11510ed4e33a",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "e57a50b4-2909-4a07-a9f2-908babf113a6"
        },
        "item": {
          "id": "92110da8-1ac4-4e1d-b523-747301017428",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "21d849c9-f53c-4454-8738-f3493669da0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95b7ac30-bd29-41ae-9bd1-7395bd67d055",
        "cursor": {
          "ref": "aadc0b91-6f66-4690-8925-0c93f7700d66",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "c642652e-a15f-487d-9715-4b7bc40d1de0"
        },
        "item": {
          "id": "95b7ac30-bd29-41ae-9bd1-7395bd67d055",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "b49cd99b-051d-4a6f-9543-7e8c7f878911",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aefb3996-0599-4801-91ce-ee0f08d920de",
        "cursor": {
          "ref": "29bfcde4-4113-47f8-a6e6-532881fc3a13",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "06c5483b-7be1-47ef-af86-21d97daed7fd"
        },
        "item": {
          "id": "aefb3996-0599-4801-91ce-ee0f08d920de",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "97a96e88-f19b-4fc6-affa-437c0069ba21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4f562e3-15e2-4169-9867-95459bd4df42",
        "cursor": {
          "ref": "be8e5f40-3e20-495c-b71b-3d1ecad327e0",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "67bb203f-bb9c-4eb6-9e47-e3064ce4fa4c"
        },
        "item": {
          "id": "d4f562e3-15e2-4169-9867-95459bd4df42",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "b7cf8477-a30a-4416-9b98-172475b9bd1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "759d8cab-319b-4864-9fb4-b31cdcc3247e",
        "cursor": {
          "ref": "0b40dadc-f6c7-44f3-a0a6-fdd494133a7a",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "d95ccf6d-b79b-4197-a6dc-4b7261c2814d"
        },
        "item": {
          "id": "759d8cab-319b-4864-9fb4-b31cdcc3247e",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "701d78e5-adb3-49b7-bc82-8c290fba50e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a594927e-2593-4d61-9802-f84871e93d57",
        "cursor": {
          "ref": "3263d22e-938f-4c03-a6a3-fbb4c004e37d",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "f6e6fe0f-74dc-4d13-960f-13b29f131bb2"
        },
        "item": {
          "id": "a594927e-2593-4d61-9802-f84871e93d57",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "ff77dad4-bbb4-47b7-bf50-aeb75c19bfbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ecf6688-35fa-45b3-8e89-7ebe4ddb7871",
        "cursor": {
          "ref": "77762303-967f-40e4-82d5-b61a883d77c3",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "9324ca91-f71f-449c-a896-3c99776d8b2a"
        },
        "item": {
          "id": "3ecf6688-35fa-45b3-8e89-7ebe4ddb7871",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "bedef3e4-7038-40a5-9d6f-76bd57821926",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5104b21c-cd43-4a41-9d87-df828ec339dc",
        "cursor": {
          "ref": "68978e27-755b-4325-a69b-ba0746b6b77c",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "b159432d-fa3f-406c-b9fd-e2339b9fb5e8"
        },
        "item": {
          "id": "5104b21c-cd43-4a41-9d87-df828ec339dc",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "762faaee-e29f-4cf0-8d40-896e2621d0eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b00bc3d-6b81-4f46-bab2-b304ea9afb18",
        "cursor": {
          "ref": "d709154a-79e7-4bc5-96eb-4d91301ba34b",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "4a605877-931e-496c-a87d-d05f15337c44"
        },
        "item": {
          "id": "0b00bc3d-6b81-4f46-bab2-b304ea9afb18",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "9bcfccfb-c1a8-4a32-b544-d84abcf315b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caa842b2-4a84-486d-8bc8-23bef5f9798e",
        "cursor": {
          "ref": "3d8d79af-8cbd-427e-89ce-0a68283067a2",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "22ab78b7-bc92-4c6c-b157-3688bf10d2be"
        },
        "item": {
          "id": "caa842b2-4a84-486d-8bc8-23bef5f9798e",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "b09e082f-3944-4f0a-a8ed-ff12d5a05781",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebf9b1aa-c33d-4d1e-ac97-a5cee8dbd9a6",
        "cursor": {
          "ref": "c0ff9888-f013-4259-8dfb-767f52aa0bf5",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "01e61b36-c042-43d4-98a0-1aaf69b471ed"
        },
        "item": {
          "id": "ebf9b1aa-c33d-4d1e-ac97-a5cee8dbd9a6",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "f30e5888-9b73-4e56-8466-b436f45990ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09245878-3956-40e3-b316-6e3dece13a57",
        "cursor": {
          "ref": "d6812345-8328-41a7-8eb6-8f00a7804461",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "e88420a9-6442-477b-a3e5-cbb158efd368"
        },
        "item": {
          "id": "09245878-3956-40e3-b316-6e3dece13a57",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "f584f5bd-515d-439d-8a9b-ecbd6711999e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ed8c5c2-d56d-48af-869c-898494500634",
        "cursor": {
          "ref": "27359bae-7e22-49aa-8b56-36c0cecd0352",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f2e48718-1990-4eaa-bcc3-f1bb9ea7d8e6"
        },
        "item": {
          "id": "6ed8c5c2-d56d-48af-869c-898494500634",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "0ecdd160-4b50-4347-bc74-865668b44ea3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3147d661-1989-4846-a783-b9151ce0a147",
        "cursor": {
          "ref": "94b6cce3-328c-45d9-b0d3-b69adefb691f",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "27f15f0f-665d-44d0-8cb7-ffe83eb16775"
        },
        "item": {
          "id": "3147d661-1989-4846-a783-b9151ce0a147",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "765d99e0-2550-4675-80d0-8d371dbac4b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2148df5d-ef6c-4d7e-b6a4-7adf27932244",
        "cursor": {
          "ref": "10b34bc1-b459-4b1e-8faa-955368a13a0e",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "ec90ed7d-7bb1-43d8-bc50-9cc90e8e1cf4"
        },
        "item": {
          "id": "2148df5d-ef6c-4d7e-b6a4-7adf27932244",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "e0dfe2c1-465a-4139-b9d1-bc9b5070f1ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b785bf5a-3cc7-4ec6-9baa-44f940852bcb",
        "cursor": {
          "ref": "be736787-dc19-41fa-8893-19c8fba2fb3d",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "ea345a14-0eff-4f29-af34-fcaad554bec7"
        },
        "item": {
          "id": "b785bf5a-3cc7-4ec6-9baa-44f940852bcb",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "6985afe9-ea66-4477-ba37-fa350d431fb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8f971c7-93f9-402d-bc86-907654e684c6",
        "cursor": {
          "ref": "3aaeea6d-a0be-4799-be7e-2b98467a0231",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "d37b91b5-d824-42f9-af86-17c7543f36a0"
        },
        "item": {
          "id": "d8f971c7-93f9-402d-bc86-907654e684c6",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "3c78c668-a837-4511-b829-ae135445406b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efc3888a-2eef-47d2-b6d9-514649c2bbbc",
        "cursor": {
          "ref": "7b49ce82-6d05-40d4-9c10-1ee493e07ee0",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "52d329f5-bcf1-4463-a912-54fc82f1c660"
        },
        "item": {
          "id": "efc3888a-2eef-47d2-b6d9-514649c2bbbc",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "9f7caca5-2664-4f88-928d-5dd96c3ded1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "343943c2-96b7-45d7-8de7-7793e38c7ba1",
        "cursor": {
          "ref": "dd2c4920-a3db-4b76-be30-f685df5f5820",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "2baa374a-0bd9-4149-847a-7ea8a3e43f28"
        },
        "item": {
          "id": "343943c2-96b7-45d7-8de7-7793e38c7ba1",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "e2bd2c55-d5ef-4ce9-80f6-ab5444dc63ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6e9fb2c-d548-4a28-be08-7a95216ded24",
        "cursor": {
          "ref": "8655f3d6-5363-4135-b90c-31ba8702f54d",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "ce9cc5cd-8431-4c59-8062-6cac8900864f"
        },
        "item": {
          "id": "e6e9fb2c-d548-4a28-be08-7a95216ded24",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "c4c2c78e-f1c8-4891-907a-08c5232bbfcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f53a7421-e817-4a61-bd1e-b6fa137f5373",
        "cursor": {
          "ref": "38f47c0b-1f82-47f9-b49f-6a26c9ca5fda",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "6cf1396b-0080-4dc9-a586-6335a4d0d997"
        },
        "item": {
          "id": "f53a7421-e817-4a61-bd1e-b6fa137f5373",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "0a0e67cd-1448-434b-a66e-975350eca46d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "497a6719-6e67-4b71-976e-26b0908bffe7",
        "cursor": {
          "ref": "014bde46-41fd-40ba-845e-73e127cde448",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "58917f19-046e-48f5-a8c6-e58e25e12474"
        },
        "item": {
          "id": "497a6719-6e67-4b71-976e-26b0908bffe7",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "433be4c7-c699-4014-bcfc-7d749185f224",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2207301-4fe9-4851-909e-58d826bb994f",
        "cursor": {
          "ref": "1298e2a2-abde-4c46-8a36-d23870c93870",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "3298c022-5aaa-4633-b9e2-6a514f05f9ca"
        },
        "item": {
          "id": "b2207301-4fe9-4851-909e-58d826bb994f",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "c3dacd54-08e3-4533-8f6a-148f84a6e1e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5002561e-5e7a-49bf-8c91-204fa762e34f",
        "cursor": {
          "ref": "f80abfc0-03f6-462e-91cd-bc3a5bd61f5e",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "5bfe55eb-08d8-448c-9ace-dc083323e22d"
        },
        "item": {
          "id": "5002561e-5e7a-49bf-8c91-204fa762e34f",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "f7062e76-983e-4c6e-9fd8-a2847edc3a76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63e8b94e-a890-4aca-8a0b-b80cf9dcc120",
        "cursor": {
          "ref": "90617284-7386-4acc-8943-475d034a7986",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "40e017f8-7c8a-4c7d-8b91-92dee89945f1"
        },
        "item": {
          "id": "63e8b94e-a890-4aca-8a0b-b80cf9dcc120",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "24ef1546-ff9c-48c5-a9d1-4e7feea3c58d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e162285b-bad2-436f-8215-01d481a1a60f",
        "cursor": {
          "ref": "8a667014-5f93-42f0-8e07-0af846678d22",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "c5fc300e-a215-4723-b0e0-c7740b19b6b5"
        },
        "item": {
          "id": "e162285b-bad2-436f-8215-01d481a1a60f",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "21b3ea3d-64ba-4c88-9bbe-4003d9d3bec4",
          "status": "Created",
          "code": 201,
          "responseTime": 647,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "bd0b71a0-9162-4c5d-8b66-e3b734e62c1a",
        "cursor": {
          "ref": "1d96382a-6b01-4150-b21b-18566c70f346",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b259a5fb-e126-4c84-9d5f-6c2ed1ba8d52"
        },
        "item": {
          "id": "bd0b71a0-9162-4c5d-8b66-e3b734e62c1a",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "6f3a18a9-6259-4b24-aaef-1a1e66824211",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "7c5d5a05-be17-443d-b073-82c9b2f8c72c",
        "cursor": {
          "ref": "27aa3f2f-20fd-4cca-abc7-c97e44c4f699",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "1fe8afa4-37ed-4ab8-b235-2b328c759d1f"
        },
        "item": {
          "id": "7c5d5a05-be17-443d-b073-82c9b2f8c72c",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "42898342-3f1d-4e6f-bd42-bc2c3c74b145",
          "status": "Created",
          "code": 201,
          "responseTime": 304,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "56610bdf-8e3f-4084-acfa-e23f73656047",
        "cursor": {
          "ref": "5d884418-c5b3-4758-8045-82b7ad5d07b2",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "a7b28f45-93b5-4c1c-87e0-ba3fc7328be3"
        },
        "item": {
          "id": "56610bdf-8e3f-4084-acfa-e23f73656047",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "1abbc397-cfe2-4f1e-9c91-e4826ff61e0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cb55eef-5716-4145-8d52-91b428041e4e",
        "cursor": {
          "ref": "dc9914b5-3f81-4fcb-8cdf-a1244114f13b",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "3de71129-7cc4-42b5-bc4a-8b9a2b83f835"
        },
        "item": {
          "id": "7cb55eef-5716-4145-8d52-91b428041e4e",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "f58494db-bbed-4925-be63-4567e7c6f036",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "435685d9-a944-4a1e-b1b7-09a448ff4ae1",
        "cursor": {
          "ref": "e00f644f-fc5c-43f8-b8b7-2b69cd5d48a3",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "4b4544d2-a435-49c1-9930-37966a729723"
        },
        "item": {
          "id": "435685d9-a944-4a1e-b1b7-09a448ff4ae1",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "43554383-0d56-4c4e-96c3-cc99f36e34e3",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "39c4bef8-4bd8-4d53-bc8e-7b91f7f0ddf2",
        "cursor": {
          "ref": "3c55d591-c960-4685-89df-2cc4268112cf",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "7eb270d3-4b14-459a-be04-41c9442b3659"
        },
        "item": {
          "id": "39c4bef8-4bd8-4d53-bc8e-7b91f7f0ddf2",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "ba2e205a-0eb5-4b48-b2d1-c04f14a2da42",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "b5d28de1-6c99-48d1-aa4e-b1995300c6fc",
        "cursor": {
          "ref": "535d8274-7cc1-41b7-b915-21d7bd099964",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "b953ca27-9093-4f0c-bf42-51b73a1453e7"
        },
        "item": {
          "id": "b5d28de1-6c99-48d1-aa4e-b1995300c6fc",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "d5ad3520-36dc-439e-990c-b0cd5de75716",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "16864b50-10c5-4cd7-9049-5c2d9e904d1c",
        "cursor": {
          "ref": "cf4fb485-96c5-4745-8279-69d56a07466b",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "73b4ffaf-f6ae-4a86-bc91-8b7ec09fce20"
        },
        "item": {
          "id": "16864b50-10c5-4cd7-9049-5c2d9e904d1c",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "7a46f1c7-6dfd-4e75-b12f-9858429f2214",
          "status": "Created",
          "code": 201,
          "responseTime": 276,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "e517dfc4-8243-4cbc-8001-37dcc9a45ae0",
        "cursor": {
          "ref": "2b3be7db-9a60-4719-8fb4-cf465d4dbee0",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "f5dd25cc-be16-475c-984b-96eda222d8d6"
        },
        "item": {
          "id": "e517dfc4-8243-4cbc-8001-37dcc9a45ae0",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "1531976e-8bb1-4a86-ad10-55f50ce22510",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "b1dc9ce8-e4a2-463d-bfe5-1300b726f97b",
        "cursor": {
          "ref": "5a260441-bf54-4f7c-9301-b993fcb6a9f8",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "4f7edbf9-1374-42c7-a701-c61238ec4009"
        },
        "item": {
          "id": "b1dc9ce8-e4a2-463d-bfe5-1300b726f97b",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "56ad4c2e-018e-45bf-a724-9a25977b98b4",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "2fc7d097-ea65-4272-ae23-e5121a180639",
        "cursor": {
          "ref": "75a168cd-23ef-4539-81e9-28f479a451c3",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "d766d90d-4280-4c68-b51f-296d646faff2"
        },
        "item": {
          "id": "2fc7d097-ea65-4272-ae23-e5121a180639",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "aa20de77-5647-43e2-986e-7003357007e0",
          "status": "Created",
          "code": 201,
          "responseTime": 286,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "606bb180-229a-4e4e-a953-e756f7e5e2b0",
        "cursor": {
          "ref": "6698e88a-948b-4e7d-88a8-7c45559ac45a",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "8b726f5b-145c-4337-9071-8278fae8e342"
        },
        "item": {
          "id": "606bb180-229a-4e4e-a953-e756f7e5e2b0",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "3d576d63-67ba-4775-adc8-ea1f8b5245b1",
          "status": "Created",
          "code": 201,
          "responseTime": 330,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "1398e77e-9344-4656-a044-603b052cd8e9",
        "cursor": {
          "ref": "c76dad2f-5c1b-479b-bd4b-6e59bff6597b",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "4eca8337-b2a0-4b9e-bb4f-e63d77a92a80"
        },
        "item": {
          "id": "1398e77e-9344-4656-a044-603b052cd8e9",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "d3b5e5d2-bfeb-40eb-9b21-0eecbbbd8a4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "892555dd-ad28-49cb-9e3f-ba042e658601",
        "cursor": {
          "ref": "7143d6ea-405e-4a99-a345-33d35dcf4696",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "18da6714-f134-4364-81fd-8592cf12f40c"
        },
        "item": {
          "id": "892555dd-ad28-49cb-9e3f-ba042e658601",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "4fe82f97-836b-460e-b679-f1149a6e3257",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6e4dc24-f368-4234-ae52-f6f40709f81d",
        "cursor": {
          "ref": "0602a443-feb3-4177-a043-57691251f88b",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "22af79a8-8576-4834-8a05-bd5be10ed4ac"
        },
        "item": {
          "id": "c6e4dc24-f368-4234-ae52-f6f40709f81d",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "379729f5-ead8-48cd-89a4-d047aeba4581",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf0cbf34-c279-452f-9271-179d46964984",
        "cursor": {
          "ref": "bc670cbf-3ee6-4c3f-b258-075edc8863f0",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "2daff588-f440-44c6-b229-9f3bb82b6140"
        },
        "item": {
          "id": "cf0cbf34-c279-452f-9271-179d46964984",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "ee65175c-3e0f-48c0-88b5-d5e09d2d2c40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8aea9e8-88fd-46aa-98d7-4b485585b299",
        "cursor": {
          "ref": "1e057413-111d-462c-a02f-975c5183e8f0",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "62c4c56a-8d38-43c8-b36d-595633ea5e99"
        },
        "item": {
          "id": "f8aea9e8-88fd-46aa-98d7-4b485585b299",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "72a68b7d-b12e-4ba3-91d3-f4e19a5f8c1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f50994a7-29b0-4c7f-b21d-70a1716997e1",
        "cursor": {
          "ref": "a06166a2-230c-4fc2-914e-2a3de4d4ff45",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "351777c2-2272-4b84-a74d-a83f9f343ca4"
        },
        "item": {
          "id": "f50994a7-29b0-4c7f-b21d-70a1716997e1",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "ec1447b8-75fc-46f7-9e54-071b21b1acf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf12d4b1-6471-44af-8eff-b0ee3f449123",
        "cursor": {
          "ref": "60bb37b9-59a7-4d21-9f69-269bbddb040b",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "85b0188f-0391-4740-8699-e73bf8422c22"
        },
        "item": {
          "id": "cf12d4b1-6471-44af-8eff-b0ee3f449123",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "2cd5ff05-da6d-4f38-bc12-74f5005239ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "804e94be-a6c6-4eec-badd-90c3cd7d9c0b",
        "cursor": {
          "ref": "be46eec9-83d8-4769-b3d1-41a6c1f748b4",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "c1c177d0-6fc6-4976-a59d-2d9406f45ed4"
        },
        "item": {
          "id": "804e94be-a6c6-4eec-badd-90c3cd7d9c0b",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "23fba5f2-c111-40a9-99fe-e2886387beb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0547a81c-141c-4a2b-94fb-9d5ad88f393f",
        "cursor": {
          "ref": "c27cda3c-78c5-4581-9bdf-787b21207d13",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "be78da61-fc87-4a27-869f-d39650538f56"
        },
        "item": {
          "id": "0547a81c-141c-4a2b-94fb-9d5ad88f393f",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "1062cca5-dc8b-4760-bc22-7ddbf3d07e2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "883aa0b5-57c4-4e28-a771-21c8cbd26b9b",
        "cursor": {
          "ref": "6471908d-6ca8-4e69-9987-a3b009966cd6",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "07f40a93-90be-4d00-9222-45d15f1b6011"
        },
        "item": {
          "id": "883aa0b5-57c4-4e28-a771-21c8cbd26b9b",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "cdb082df-9fad-4a66-a34d-1bbeeed4439c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 199,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "439204c2-db92-4162-b60e-e01e1885eb51",
        "cursor": {
          "ref": "b0d6ce84-8142-429f-8411-8294f430b9b0",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "52ece317-0799-45a0-bb09-35d1ea29ef7a"
        },
        "item": {
          "id": "439204c2-db92-4162-b60e-e01e1885eb51",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "2e465853-1423-49cc-8b80-d384da56b73a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d64e2909-0fcd-4c22-823e-41d658204fb0",
        "cursor": {
          "ref": "190deb89-eb9d-414a-8929-3f05ce443277",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "21699ae5-9a4b-4bb5-a076-c62482354563"
        },
        "item": {
          "id": "d64e2909-0fcd-4c22-823e-41d658204fb0",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "3e882363-f8f8-42c8-8b9c-c2f33bf5189d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7785fcaa-46d4-40cd-94e0-56859dda7242",
        "cursor": {
          "ref": "1e81c28e-c782-4a89-9ccc-765c9111f711",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "62c3ccc6-cf24-4d96-a3f1-a56e957d8e0f"
        },
        "item": {
          "id": "7785fcaa-46d4-40cd-94e0-56859dda7242",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "339b072e-1862-4408-87c4-4025e611667e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a57804cb-5219-4aa4-959c-9e2c08488f5e",
        "cursor": {
          "ref": "a2ff104a-2d33-40d2-a28c-94e0e9cbf6e3",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "06d5edfb-ef50-4f89-a433-7bed4962ba0c"
        },
        "item": {
          "id": "a57804cb-5219-4aa4-959c-9e2c08488f5e",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "02aca051-fdd0-417b-8248-fda3dcd9bad3",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "fd6fd8ad-664c-454f-8d2d-3a84257cd9f6",
        "cursor": {
          "ref": "8e96c5f0-73c1-4cdf-a942-5333d28a7200",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "e954592d-db15-4a78-b24a-60e3308e04c9"
        },
        "item": {
          "id": "fd6fd8ad-664c-454f-8d2d-3a84257cd9f6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "f8977fd4-fc2f-4e5e-bdb2-ba26a6a1ab8d",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "7f3496dc-57b0-4c2f-9c77-0b660caa422d",
        "cursor": {
          "ref": "fb2dffc5-824a-48ea-b881-f4ac94455e1f",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "f74fe0e8-2196-40d5-a80f-a297c57a51d2"
        },
        "item": {
          "id": "7f3496dc-57b0-4c2f-9c77-0b660caa422d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "63df578f-86ce-4782-9dcd-8853006b939d",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "2608d5a1-0e5f-4f1d-a375-7a62843bbe7c",
        "cursor": {
          "ref": "1510a3c4-6016-469a-a321-14295fe2db1c",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "9f172011-0ba1-4c83-9432-5a4cf214f0ad"
        },
        "item": {
          "id": "2608d5a1-0e5f-4f1d-a375-7a62843bbe7c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "04ede088-041a-49d3-95e7-1c6dbb9bb459",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "f5ac309c-ebe9-4454-895b-283aa58ab6b6",
        "cursor": {
          "ref": "a075f615-e0eb-429d-9de3-0872f5cb26c2",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "893ec393-7578-4d9c-8f55-3aa0abdc8352"
        },
        "item": {
          "id": "f5ac309c-ebe9-4454-895b-283aa58ab6b6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "1e1c9263-28a2-4086-8008-81296dd37314",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "dd7fb029-6534-4325-bc5d-26eee2133728",
        "cursor": {
          "ref": "ed0836a6-da73-4fde-9149-da81b82fd0a6",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "6b77c9f3-7fd2-49af-9746-8d335beb0e43"
        },
        "item": {
          "id": "dd7fb029-6534-4325-bc5d-26eee2133728",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "faf0582e-bb37-4eb5-9bf9-fb35d9ca4d3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5cca1dd-e89d-47c5-9162-cab6a86baaeb",
        "cursor": {
          "ref": "2542b01a-3746-4574-95c9-b96a1c61de57",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "c1171db0-e691-4743-b48d-c5d9f8d38ffc"
        },
        "item": {
          "id": "a5cca1dd-e89d-47c5-9162-cab6a86baaeb",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "39336ac5-ea47-4c68-b4d4-b7c8527c2803",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bbe4e6c-24a1-4e0c-a4c7-8c37eec6e652",
        "cursor": {
          "ref": "35ad981a-b324-4074-9127-a9240e6e931f",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "09603e85-1486-46b0-a1e3-d456525f9e63"
        },
        "item": {
          "id": "2bbe4e6c-24a1-4e0c-a4c7-8c37eec6e652",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "cf274ac4-e0ef-4995-bc1f-d6353f32b0f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34df6613-e808-4432-a2e7-b2a22f1e75c7",
        "cursor": {
          "ref": "dc0f1c48-b8ce-4d61-ba16-9b4307c6620c",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "ee7a1fde-adfc-4776-8c0c-f16bb6a3c705"
        },
        "item": {
          "id": "34df6613-e808-4432-a2e7-b2a22f1e75c7",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "bfda6e03-85f2-4ec6-8715-071bb8d07cd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de098e62-ad40-44a3-bd85-0c2b4409163b",
        "cursor": {
          "ref": "6df26a21-602b-4db6-93a0-16ef6d1159fc",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "9d49ae35-107a-4b9d-814e-93ea6ca5c401"
        },
        "item": {
          "id": "de098e62-ad40-44a3-bd85-0c2b4409163b",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "cc6487c8-492f-4f1a-aa18-afb0236d3bde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0de7c0a8-5d0e-475b-90c9-c41a5ed07ae7",
        "cursor": {
          "ref": "d9a8120d-a516-4e38-b6cd-aed9c0892eda",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "5d06c827-ff14-4905-95fa-1189783da00b"
        },
        "item": {
          "id": "0de7c0a8-5d0e-475b-90c9-c41a5ed07ae7",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "6b3ecf59-053a-4d63-b9a5-e44d1d5b8562",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1918599-23a7-4c35-90a8-02b02133e573",
        "cursor": {
          "ref": "6c64c992-bae5-4ce9-aa98-6741c9ad75aa",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "29315175-864b-4bf1-81a9-816bb29abcc8"
        },
        "item": {
          "id": "c1918599-23a7-4c35-90a8-02b02133e573",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "f81bd5a1-dd4e-41cc-b3dc-19d6474fcf73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4c0aab3-5817-4a97-9a9f-c3d1b3feadfc",
        "cursor": {
          "ref": "c3f60dc8-d21b-4a48-8932-7f3ab6be3fa8",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "7786e0ab-9376-43d9-8dd9-a5f517dea208"
        },
        "item": {
          "id": "e4c0aab3-5817-4a97-9a9f-c3d1b3feadfc",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "b5d1cd10-9ab3-4672-b8be-f7105b814e6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d77e7c4-6dc4-458b-a04c-187bc7f71227",
        "cursor": {
          "ref": "4c387676-410e-4adc-b983-42d29cfd55d1",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "9265e4e8-2874-4e06-8b62-4ced6ea23370"
        },
        "item": {
          "id": "9d77e7c4-6dc4-458b-a04c-187bc7f71227",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "f30c6363-495f-4076-ba06-4bad06663de1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da3d3b52-dc76-4b70-bf35-92a51293c5ee",
        "cursor": {
          "ref": "c895454e-efd3-4fbe-b0f7-f0fec59564a3",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "d5be9c29-22bb-4199-8176-18ddb54eb490"
        },
        "item": {
          "id": "da3d3b52-dc76-4b70-bf35-92a51293c5ee",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "213bdcff-1933-4fbd-9a3e-bc3ca8707da0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "593a0d11-2b7c-4fe2-a716-67b3fd0aebdd",
        "cursor": {
          "ref": "58d79a48-11c0-46c0-8f36-a1e85b28e4a7",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "fd3a7daa-8f87-4c1e-bbd1-60c223c48347"
        },
        "item": {
          "id": "593a0d11-2b7c-4fe2-a716-67b3fd0aebdd",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "278df3a8-35bc-4fce-b5b3-f69469c7696b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51fa104b-97f4-468a-83bb-42fb5eb1f937",
        "cursor": {
          "ref": "1d0d9aba-ff44-494c-80b0-4cd014360b38",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "3686ee65-07d8-40e0-a480-64e7da1717d6"
        },
        "item": {
          "id": "51fa104b-97f4-468a-83bb-42fb5eb1f937",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "dbcfd9fc-ff1f-4493-8978-38924d23cad8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba2966f5-08f4-4701-9f92-83b000d48942",
        "cursor": {
          "ref": "fb285a58-4397-4f1c-9221-15933b94c1cf",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "6af25210-d24d-4c01-89ac-8e740b34231d"
        },
        "item": {
          "id": "ba2966f5-08f4-4701-9f92-83b000d48942",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "413b68f5-f72e-4ca2-b9e3-bcce25917356",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25fc9152-26e5-4f5b-a316-80030c4e5a68",
        "cursor": {
          "ref": "00ed60af-7be1-4ab6-aa2e-70b1c3628fd2",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "0ede6a91-92cd-482a-8f2b-2741244451f9"
        },
        "item": {
          "id": "25fc9152-26e5-4f5b-a316-80030c4e5a68",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "81eddf6d-714f-472c-9c89-fb4e86dba00c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f90534a4-985b-4a5b-9b4e-c336fba62f25",
        "cursor": {
          "ref": "4105f605-5d16-488b-a2a9-657f756a424d",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "813310cb-1b10-4253-ab0f-e3a83a6c1170"
        },
        "item": {
          "id": "f90534a4-985b-4a5b-9b4e-c336fba62f25",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "e3199cc4-c9fd-4a37-8d1d-21e604d9e5ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8dc3ba6-6127-4007-8892-913e7b1c8cd6",
        "cursor": {
          "ref": "c7552d3a-0244-47d3-aea1-78a6ecc3d2de",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "ce27bfb2-d1d3-4896-b32f-bce568348ae8"
        },
        "item": {
          "id": "d8dc3ba6-6127-4007-8892-913e7b1c8cd6",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "e19e05cc-0675-4c0e-a1a9-ec8beedcd991",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4716bcc6-8bdd-461d-834e-61955dab27b4",
        "cursor": {
          "ref": "a45baba4-e547-4cff-9ce4-f14377bcc1f5",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "b7af170e-5f16-49f8-ab8a-2498168c79f0"
        },
        "item": {
          "id": "4716bcc6-8bdd-461d-834e-61955dab27b4",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "6e4dcfdd-cf49-43aa-9567-32b03eedef40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c6adfea-1a52-416f-9b7d-030e5106eb68",
        "cursor": {
          "ref": "e5b6804f-5ec0-4967-9c3c-b2f28b2343b1",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "c0cfcac3-b3af-4991-95de-47caf6617864"
        },
        "item": {
          "id": "9c6adfea-1a52-416f-9b7d-030e5106eb68",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "67d2c945-7bf6-457d-8e36-b0b8c82180a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5a7c7c7-8244-4000-bb08-19df0c8305d8",
        "cursor": {
          "ref": "9cb59159-8d0a-44e8-9e54-ac73d3256318",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "56ea4e16-5e18-4e0e-82be-72cedea9dc02"
        },
        "item": {
          "id": "f5a7c7c7-8244-4000-bb08-19df0c8305d8",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "6511c10a-1b5a-4215-b1d9-3a1f0380658f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1842334-b766-47c9-a089-f9da19c2b7d3",
        "cursor": {
          "ref": "2e5ae630-8959-4d9a-8f93-7922df187de8",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "f500e5b3-0866-405d-9da0-9900323ff0e2"
        },
        "item": {
          "id": "f1842334-b766-47c9-a089-f9da19c2b7d3",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "66947a46-a69c-4fe2-aa88-53113929eb3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "214926c1-9957-4f7b-803a-152589701927",
        "cursor": {
          "ref": "612125e3-1151-4ebe-94b5-571dd88a231f",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "4804e41f-5f32-4106-b51b-c3e1516a66f9"
        },
        "item": {
          "id": "214926c1-9957-4f7b-803a-152589701927",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "3127334f-61b4-45ad-ab94-ab2b00a854fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b84b3523-7f22-48e5-9b79-f519d1d4068c",
        "cursor": {
          "ref": "a10a0580-699a-43f4-80bb-76d842d2413f",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "99d850eb-4aad-46e6-8ef7-c6cb1ae1b316"
        },
        "item": {
          "id": "b84b3523-7f22-48e5-9b79-f519d1d4068c",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "7fb23884-e8a4-4aa8-9e28-267de7696007",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77e68dc9-d000-4976-9045-8ca2244d5e38",
        "cursor": {
          "ref": "34354a79-f44a-470a-ba45-7791c06c8f2e",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "42366dba-3742-4d86-9140-3b108d1ef609"
        },
        "item": {
          "id": "77e68dc9-d000-4976-9045-8ca2244d5e38",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "7de3a195-435c-478f-ae7a-6a7a36090950",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 130,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e2a7a84-e93d-40c6-a275-20ee7388ebb0",
        "cursor": {
          "ref": "781106d0-7eb5-450f-90fa-abc0058391a3",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "40e2faa2-e356-4498-a5de-69aa4a248f72"
        },
        "item": {
          "id": "2e2a7a84-e93d-40c6-a275-20ee7388ebb0",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "21c1875b-f03b-42d4-9abc-95a862065c12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08158f08-e658-4ca2-bcf3-330761ca5ff1",
        "cursor": {
          "ref": "d41acbb2-7872-41a8-a03e-b45d88b1f8d9",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "4f6c771f-7e12-4cfa-a692-78ad18d80877"
        },
        "item": {
          "id": "08158f08-e658-4ca2-bcf3-330761ca5ff1",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "379f3c56-6ae9-4354-b266-1d3e042df279",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8602469d-c086-4904-a4d7-1ae62cf28733",
        "cursor": {
          "ref": "c327aa42-75ab-4b7b-b77f-90d616313011",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "c7b08847-95d9-4798-86dc-36813dc0b363"
        },
        "item": {
          "id": "8602469d-c086-4904-a4d7-1ae62cf28733",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "27d34ac0-7f50-4946-a40d-240c96c4a467",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10d2d9cd-6734-46e4-bd25-04014053cfd2",
        "cursor": {
          "ref": "cc47727b-e118-4d7a-b915-2216e5c75487",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "0cabe5be-774d-4287-909f-f99b2682ba43"
        },
        "item": {
          "id": "10d2d9cd-6734-46e4-bd25-04014053cfd2",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "bc1014e0-83d1-4779-9d1f-ab3e062f261b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77c7f2bb-193a-4cec-bde4-54e47b826548",
        "cursor": {
          "ref": "a15cdfcf-a913-44e2-b729-a3b74ab457b3",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "1f076604-64d4-4a2a-b052-9425870262b3"
        },
        "item": {
          "id": "77c7f2bb-193a-4cec-bde4-54e47b826548",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "502532e0-094f-479c-8fa9-3694c50ea8db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7498e901-a560-4830-85d9-c8b5152d89a9",
        "cursor": {
          "ref": "1b14004b-4b89-4308-8a2f-5f6e86503002",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "68a0acfc-aa0f-4cf6-bf2d-89aa3993af6f"
        },
        "item": {
          "id": "7498e901-a560-4830-85d9-c8b5152d89a9",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "2cbdd74c-fc78-4be3-be14-fba0a950a6f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35b70430-ebb7-4fa4-8d25-460c5e295a3a",
        "cursor": {
          "ref": "ecb3a384-049b-48d4-8f66-86232bc7e37d",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "c7b489ec-d947-41cf-b181-1063115ade75"
        },
        "item": {
          "id": "35b70430-ebb7-4fa4-8d25-460c5e295a3a",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "80f22550-a5d9-4c06-a523-ef2f7fb7a03e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a09b4246-d696-41d8-befd-ba22754fc7f8",
        "cursor": {
          "ref": "4ddaebab-af49-4794-93b7-f1c400b1160e",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "88203cf3-aaa5-4f08-a2b6-0b0a6a772fc8"
        },
        "item": {
          "id": "a09b4246-d696-41d8-befd-ba22754fc7f8",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "b5876881-4d6b-4489-8633-e8c51812e8ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c407ecad-88f4-4933-a8ec-3e10faa36ce3",
        "cursor": {
          "ref": "9a68fcb3-6fd7-469c-86ff-3f0589a73930",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "1646dfec-3a88-42a5-97dc-6865d9210cb7"
        },
        "item": {
          "id": "c407ecad-88f4-4933-a8ec-3e10faa36ce3",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "da25f108-2d6b-4cd8-9183-952b647f49c2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72510176-0d73-439c-a909-e528f3493cc2",
        "cursor": {
          "ref": "110edf0a-6f96-4e62-afec-fd3fe79bfc08",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "7ba23a13-43ea-45aa-b088-fad54c05b6d1"
        },
        "item": {
          "id": "72510176-0d73-439c-a909-e528f3493cc2",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "8c4a6d53-d0f9-49a4-8a2e-5b9a69b45cfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "b9603587-e09c-419c-8df5-00a450925b0a",
        "cursor": {
          "ref": "e81e1cc4-46c0-4d39-b217-46040070c3af",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "c7af8ad1-c4df-4d27-ab52-71f6b3cb4304"
        },
        "item": {
          "id": "b9603587-e09c-419c-8df5-00a450925b0a",
          "name": "credentials_issue"
        },
        "response": {
          "id": "8a8625f8-ac5d-40dc-a04b-e8a145304b07",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a72bfdd-e378-4956-bace-3f83a41931c2",
        "cursor": {
          "ref": "5369ff30-c9e1-4831-a6ff-c704daf587fc",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "4602b03e-9ab3-43b5-b077-55d7f31df5e2"
        },
        "item": {
          "id": "5a72bfdd-e378-4956-bace-3f83a41931c2",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "343ea4f3-b2e2-4517-8f66-33d6bdeea18f",
          "status": "Created",
          "code": 201,
          "responseTime": 286,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b2cb06b-1ea1-40e1-9d41-f0f193924a4d",
        "cursor": {
          "ref": "67bdcad1-5692-4ca7-8183-38001ee9479e",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "d110c62b-8ac7-4ad4-b86a-7f02e98bbb52"
        },
        "item": {
          "id": "9b2cb06b-1ea1-40e1-9d41-f0f193924a4d",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "9c252985-d30f-41e1-a82a-cdca182a44c3",
          "status": "Created",
          "code": 201,
          "responseTime": 403,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "76eea73a-4c2c-4d63-a4a9-f264737da83e",
        "cursor": {
          "ref": "5d536d25-7813-495d-997f-580efa886793",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "926b736f-1ca5-458c-b216-016a4a5ae41b"
        },
        "item": {
          "id": "76eea73a-4c2c-4d63-a4a9-f264737da83e",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "8df9bed8-dac9-40ea-b6bf-530c282e8d96",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "418803cd-e7a1-46d7-b806-18c4e7ac06b7",
        "cursor": {
          "ref": "7022a197-2f89-477d-9879-f3653eca82b5",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "3611ba7d-5210-429b-9969-a0b6684e9199"
        },
        "item": {
          "id": "418803cd-e7a1-46d7-b806-18c4e7ac06b7",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "fda506d2-56e5-4809-9cc5-c57faabdf08e",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-12-11T00:37:13.362Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-12-11T00:37:13.362Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "4379d5e9-4b91-4693-8d6c-0da17f62fbfa",
        "cursor": {
          "ref": "b842d901-ee47-4094-b435-804b34d5f8dc",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "ab64bfa7-9b04-4bb7-88b8-f6c3f0ab7ecc"
        },
        "item": {
          "id": "4379d5e9-4b91-4693-8d6c-0da17f62fbfa",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "ba34bfc5-1fa5-43c2-bf1e-5d45712add1b",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb96c619-5c10-4454-b6b5-a422edeefc58",
        "cursor": {
          "ref": "f096cf8c-5747-4587-af7c-d179eb2b4298",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "c9432d79-95e4-4a55-80ec-bf4925dc63ca"
        },
        "item": {
          "id": "eb96c619-5c10-4454-b6b5-a422edeefc58",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "001d4d6c-ee6e-437b-b9b7-9a94265a7423",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c218b2b9-d764-4288-8224-8362e5769f91",
        "cursor": {
          "ref": "f3915376-df4d-45d5-a09b-f7f80c6ae459",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "f3b2fd43-0233-478c-9459-fd8e87494591"
        },
        "item": {
          "id": "c218b2b9-d764-4288-8224-8362e5769f91",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "29c73c5b-7a1e-4ee0-9202-f22a08470134",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed3c01a5-0595-4de7-8760-9650765b2c9c",
        "cursor": {
          "ref": "3501ed31-710f-42de-b981-0f599ef0d892",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "7deb5475-caab-4bc1-9682-11c8151dc91a"
        },
        "item": {
          "id": "ed3c01a5-0595-4de7-8760-9650765b2c9c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "4b414537-0f5a-4f18-aa48-e88fd8982265",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c7d9f62-d881-4c33-bec4-fae20ac588ba",
        "cursor": {
          "ref": "52dfd623-4357-4385-9e79-1a863d5f3f54",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "ae3bc9ec-d442-48fd-a40e-7f104206564a"
        },
        "item": {
          "id": "9c7d9f62-d881-4c33-bec4-fae20ac588ba",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "1da7366f-2859-497f-86cd-6df18811f37b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7daa9d03-0077-4b3e-88ed-a2713ab770ec",
        "cursor": {
          "ref": "032546b6-2c72-4979-aa49-6b191dbe57c5",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "075250ba-7880-418a-96fc-7c10ae9b7338"
        },
        "item": {
          "id": "7daa9d03-0077-4b3e-88ed-a2713ab770ec",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "c274ac0d-adcf-46af-bd50-612f08d175a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "975fda44-2889-4a6b-84b7-b2c2f025ba9c",
        "cursor": {
          "ref": "5d16f2b0-bea4-41e7-80f0-7dcb427981c2",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "0847b13d-64f6-4dc2-b9ea-63c60325d96b"
        },
        "item": {
          "id": "975fda44-2889-4a6b-84b7-b2c2f025ba9c",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "c753b911-93e4-464e-82c3-dabc134ab7fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84f2b538-d727-45b5-ba33-e279f468a8f0",
        "cursor": {
          "ref": "5fbeb96c-f071-422f-82ac-950e9c330001",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "5a26341d-5140-4548-9beb-ed1a7bd2dd51"
        },
        "item": {
          "id": "84f2b538-d727-45b5-ba33-e279f468a8f0",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "968cc4c2-047d-47aa-b32d-ec23b982f694",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "989bbc62-4f06-489f-81e5-45c1eefc7e3a",
        "cursor": {
          "ref": "f0a08f5d-248f-4790-8091-019d51d75d3e",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "a06a5df9-3046-4373-9ee6-5001d4513c70"
        },
        "item": {
          "id": "989bbc62-4f06-489f-81e5-45c1eefc7e3a",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "ec8942ce-1c9c-4177-a5a9-8515f3cd6ad7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82fdd930-229a-4d0d-a5bb-8ac264601e69",
        "cursor": {
          "ref": "817f93a2-8e8e-4930-aa43-5ce5063155c7",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "41a20f73-dc16-43ea-add0-11a47e8b9970"
        },
        "item": {
          "id": "82fdd930-229a-4d0d-a5bb-8ac264601e69",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "4662a616-6ec3-4597-a4bc-3e746306519a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e228c171-c8e0-4ef9-8be4-8755b158dc56",
        "cursor": {
          "ref": "47539b1b-5dea-44cb-9164-b10976e282f1",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "2457d622-ac24-4ecf-8ef2-51852c27f509"
        },
        "item": {
          "id": "e228c171-c8e0-4ef9-8be4-8755b158dc56",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "d22b665e-dec3-4d02-a151-c4b9fddad2ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4efb116-3864-46d2-8ff9-6bbe82e07208",
        "cursor": {
          "ref": "0ebb11b2-70e0-453b-94c0-a2cc89af28ba",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "13d49db2-807b-4b12-8ab2-8b0b1d91b144"
        },
        "item": {
          "id": "a4efb116-3864-46d2-8ff9-6bbe82e07208",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "fbb622b5-a7fd-4bc5-bb58-4e835e3fc0a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e862aaa-fcf1-443a-b82c-7b0deab901b3",
        "cursor": {
          "ref": "7a4e49d3-453e-41d4-b957-39d6f7de10da",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "41e930ab-bd19-4894-951a-6b2a24da048e"
        },
        "item": {
          "id": "4e862aaa-fcf1-443a-b82c-7b0deab901b3",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "3972384c-2124-4333-82c2-3d14e59ab870",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1d9625f-af81-427e-a34e-23a0f7830afb",
        "cursor": {
          "ref": "5c55c2a8-7432-4942-aeb7-44d2843e0f58",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "996b1096-88a9-4737-b1bb-444671f5f27d"
        },
        "item": {
          "id": "d1d9625f-af81-427e-a34e-23a0f7830afb",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "e3d7b601-f32e-4dfd-a4d9-b58755bb195a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e77e8ed-a851-45fd-ac30-e9f8a47eec7a",
        "cursor": {
          "ref": "5c4a43c5-c9ec-45f0-9790-5e37a69d71d9",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "f9c31006-f4f9-4706-8f1d-69728b4e683e"
        },
        "item": {
          "id": "9e77e8ed-a851-45fd-ac30-e9f8a47eec7a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "697d5abd-f872-4075-98b8-4e4784b36ccb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b62e716-e9f7-47e4-ae59-35ccbd7cc24c",
        "cursor": {
          "ref": "86d246a0-1fec-4840-b443-57a94b82fc3c",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "72a6741d-6378-4134-a797-aa370c6d133f"
        },
        "item": {
          "id": "3b62e716-e9f7-47e4-ae59-35ccbd7cc24c",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "fe952281-a079-4b2a-a92a-f671d5d083fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12b1278c-3ee2-454d-96af-efbeeba1ea76",
        "cursor": {
          "ref": "b2d5959a-9ae6-4926-b70c-25e8bcc1ff34",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "7b2ad739-6e2d-48cd-b7ba-0da5d407c60e"
        },
        "item": {
          "id": "12b1278c-3ee2-454d-96af-efbeeba1ea76",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "15048b82-2df7-459f-9a54-2f8992088803",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6968534-1208-42fa-a75c-37ecd3e25068",
        "cursor": {
          "ref": "6fd629d2-90f8-424a-b2fb-d49abbfc9eb9",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "3262fd84-c305-4508-907c-d9288ed2ecd2"
        },
        "item": {
          "id": "e6968534-1208-42fa-a75c-37ecd3e25068",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "8bb285b7-2bc4-468b-83df-25c031219da9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11ba3cc4-99e3-4997-bfd9-57052995d52d",
        "cursor": {
          "ref": "8229172c-7890-4125-afc7-3ebad7d8f5e8",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "301c215e-3491-45a3-914a-13bc41233a08"
        },
        "item": {
          "id": "11ba3cc4-99e3-4997-bfd9-57052995d52d",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "ea3d10d8-5f5a-4108-95ac-c4299fff586e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6b862ab-93fe-4f8f-8620-8e7516b50708",
        "cursor": {
          "ref": "bdaea13d-7056-408b-b91f-26aa1585a2f9",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "11ec7c8e-7365-4dfe-97a3-d7fdb16cc397"
        },
        "item": {
          "id": "a6b862ab-93fe-4f8f-8620-8e7516b50708",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "f0adee6f-1622-4f1a-a6b1-36008175450d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a14beb5e-0d85-4f00-98d2-48a7a1ab3649",
        "cursor": {
          "ref": "0a2699aa-0b96-46cd-b6ea-9c25a9907a80",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "b57a546e-7719-4985-99a6-26bc5ee37372"
        },
        "item": {
          "id": "a14beb5e-0d85-4f00-98d2-48a7a1ab3649",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "4f20a4d4-0746-417c-9f70-7a5eed68ce06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87e95b82-bf5f-4316-8e3a-7a7d4a2ffed2",
        "cursor": {
          "ref": "6e06ef5f-9fd3-4315-bdae-1ba1af47038d",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "ff0d3e8c-69d4-4b89-a137-a78589c1de35"
        },
        "item": {
          "id": "87e95b82-bf5f-4316-8e3a-7a7d4a2ffed2",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "8644f0cc-3f22-45c0-a679-3f683b3319fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a595079-3fa6-4943-b51a-fe4730d6b9b6",
        "cursor": {
          "ref": "aaa1c7c8-9397-4bd3-9abc-4f219a481e4b",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "126ee758-ddfc-4bf4-b93c-8af2a2169fef"
        },
        "item": {
          "id": "2a595079-3fa6-4943-b51a-fe4730d6b9b6",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c031b25a-fc4f-4397-b646-bfe8448d25a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0234054d-56cd-4c56-a465-9f535e2cc36b",
        "cursor": {
          "ref": "a7abb07d-6faa-4327-b1c3-1bbb1d22cad4",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "ab533337-2e2b-42a5-ac03-2bb54df32701"
        },
        "item": {
          "id": "0234054d-56cd-4c56-a465-9f535e2cc36b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "00f994f4-a309-4f8e-8cde-1a9b8fe3bd59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf678702-dd6f-4349-b690-25fcb1df53cf",
        "cursor": {
          "ref": "c395e7d8-6c09-413a-8673-a771a715a7d1",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "6a6c1c89-d925-45d7-91c6-b1a9bf02b8b9"
        },
        "item": {
          "id": "bf678702-dd6f-4349-b690-25fcb1df53cf",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b85511a2-843a-48c7-9f59-413cd46b3e69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e45b2447-43c8-4aac-8d99-376c0767468b",
        "cursor": {
          "ref": "ae834328-6f9f-4951-940a-ae2b5cf703b9",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "64907a0c-c29c-431e-8244-28a5f4bb1bb2"
        },
        "item": {
          "id": "e45b2447-43c8-4aac-8d99-376c0767468b",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "2d1de9db-bb09-4a74-a07b-535dd694dde9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abc807b2-4398-4736-a131-63f40d0e01a9",
        "cursor": {
          "ref": "08bae375-edd7-44cf-8bcf-e0413c1763fe",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "a75d2acd-9bc9-495d-afe7-d0fc8265a810"
        },
        "item": {
          "id": "abc807b2-4398-4736-a131-63f40d0e01a9",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "60e94904-ee97-4dde-9b80-2200f0f85bed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a842e85-79dc-4fc6-aa9f-cddac14426f7",
        "cursor": {
          "ref": "f60e7646-f8c1-4e39-999a-672c0d6e1109",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "ca3ba3f7-cc72-4671-81cc-87825bb1011e"
        },
        "item": {
          "id": "8a842e85-79dc-4fc6-aa9f-cddac14426f7",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "b6aba0a9-64ae-4958-83de-3e55cc185876",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "339dbdfe-913b-4e9b-9982-7d16cafe9d75",
        "cursor": {
          "ref": "75c41834-397c-4c11-8b04-060c5f10ce76",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "af27d5b4-65b2-405b-9f38-53d141286bcb"
        },
        "item": {
          "id": "339dbdfe-913b-4e9b-9982-7d16cafe9d75",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "b04e9e09-a87c-4ab1-92e0-a7a866e20811",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5c015fc-c3da-499e-820b-9de664890494",
        "cursor": {
          "ref": "edde9391-0f0e-42f2-b2ff-f65e26ad9cd4",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "cd382838-b6bc-4058-b167-ae4250abd044"
        },
        "item": {
          "id": "f5c015fc-c3da-499e-820b-9de664890494",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "0bec1419-5c71-4663-8687-3f26cffbbe82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f8590fa-6cfc-492c-9cfc-7e93dc68689c",
        "cursor": {
          "ref": "90c6bbd7-526a-4c7f-84e3-7d5d02f96f2e",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "c7346fde-387d-4e4a-8eb4-a880a5545832"
        },
        "item": {
          "id": "1f8590fa-6cfc-492c-9cfc-7e93dc68689c",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "19185c5b-0830-4974-915c-2a2442b2c270",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4757a303-80fa-4a4d-9771-58a67c4a18de",
        "cursor": {
          "ref": "95e51d5d-18e7-4ae6-a33b-397154d20ba5",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "1f284256-cbeb-4cf6-bd70-a55cd8c9fbb2"
        },
        "item": {
          "id": "4757a303-80fa-4a4d-9771-58a67c4a18de",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "5ee61611-5b9e-4e6e-80c3-e34e61613e48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "404f3767-1138-4292-bf75-3bd2d5c023cf",
        "cursor": {
          "ref": "2b9182c8-5706-4d43-ad51-d21a6895bd29",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "bf4dc30c-3733-4919-863e-05e2bee283a6"
        },
        "item": {
          "id": "404f3767-1138-4292-bf75-3bd2d5c023cf",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "d284113e-d264-43d3-beaf-9f79c5f3bca0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "521779dd-31a8-486f-8ba9-c283edc5bd4a",
        "cursor": {
          "ref": "a37c1595-677e-4b3c-9222-4cf9a8f9f757",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "5903e692-5c1e-475f-97bb-9102b5baa05a"
        },
        "item": {
          "id": "521779dd-31a8-486f-8ba9-c283edc5bd4a",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "668ed04f-cb72-42a0-9db8-46e9e984268c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "096bef79-4df0-429b-ac51-d11805b56487",
        "cursor": {
          "ref": "d6473948-4c82-48ad-86a8-a87927b3d6d5",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "dd062931-c8ac-42f8-8b74-addac48d5c11"
        },
        "item": {
          "id": "096bef79-4df0-429b-ac51-d11805b56487",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7799cdeb-7f5d-4476-8547-bfd491efd893",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b86590f-1320-4143-a56e-eb93714b7239",
        "cursor": {
          "ref": "86a8642f-f9f1-46ed-909f-ae4957fba8fa",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "c22b0483-91d0-4814-b645-82d02a408490"
        },
        "item": {
          "id": "2b86590f-1320-4143-a56e-eb93714b7239",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "2c9086fe-5b62-46f7-8866-5a32f1e99967",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "306aaa8d-af52-44d0-9cd6-f53810820682",
        "cursor": {
          "ref": "2a1c67c2-2413-4f5a-91ea-35b24bd8cf16",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "0e14ecb0-a991-4c4a-9eb2-0f88d2d518b9"
        },
        "item": {
          "id": "306aaa8d-af52-44d0-9cd6-f53810820682",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "7173bccc-c01d-4129-80c8-62e8ded1c67c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b564417b-637a-44b4-ab9e-d296dd5f77a9",
        "cursor": {
          "ref": "c96ed3d5-8c51-4b03-ab4e-928c5223cbf2",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "61796e8e-1fc5-47c6-af32-f657c5050167"
        },
        "item": {
          "id": "b564417b-637a-44b4-ab9e-d296dd5f77a9",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "c46dc015-ad05-45e7-af2b-ed5c8c3a7746",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17e0f19a-329e-491a-a367-3d33c80ce8ad",
        "cursor": {
          "ref": "4c33c3ae-d43e-4582-a6fc-908e8f1bb306",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "8500c405-2440-43b8-97a0-9576a1406d04"
        },
        "item": {
          "id": "17e0f19a-329e-491a-a367-3d33c80ce8ad",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "eb5387c8-e900-41ee-bffb-3e09246d32ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "375b9414-c770-4195-8914-e4db51e1b9a4",
        "cursor": {
          "ref": "f7d40393-6d2a-4ec5-8972-ad77896cb2c5",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "85a6d027-dd39-4815-8f74-c179ba022a91"
        },
        "item": {
          "id": "375b9414-c770-4195-8914-e4db51e1b9a4",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "bb234318-0854-4217-967f-7adf854874d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fea88cd-5020-41c9-8887-07edc1a7f573",
        "cursor": {
          "ref": "011ddf51-e3d5-48db-9c05-2d5dc6a8952d",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "11a5ef01-280c-47b7-a416-1af3a278338e"
        },
        "item": {
          "id": "2fea88cd-5020-41c9-8887-07edc1a7f573",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "6d1c11de-a5c7-4c58-80d5-afbe9786f129",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1632d325-1e8e-4af8-99d1-006d9c2809f3",
        "cursor": {
          "ref": "eab082ac-69b5-4c02-bb3c-8914dd2d8978",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "5d3d78bb-db30-49fc-bc1c-0847077aff18"
        },
        "item": {
          "id": "1632d325-1e8e-4af8-99d1-006d9c2809f3",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "3d8b664d-9a34-4e07-8ae1-aebe1219add8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d2191d3-9d0e-4d57-9012-065432901b22",
        "cursor": {
          "ref": "04f033c8-3fb3-42ae-be09-1cded507cd16",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "ce7c45b4-8057-4a1b-b7df-bc3ec30bcd31"
        },
        "item": {
          "id": "4d2191d3-9d0e-4d57-9012-065432901b22",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "656e2f0a-0c60-4b44-8800-7b3d3fd613a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0db6478b-d8ef-443a-b5a5-8e881edc92d2",
        "cursor": {
          "ref": "870cfa7e-a7c3-4fbb-b837-0d7102e1483b",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "c199026b-8427-433c-a0cc-da1777a57f0d"
        },
        "item": {
          "id": "0db6478b-d8ef-443a-b5a5-8e881edc92d2",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "5ad5c29e-7ff0-4f16-89ec-e9f654f200c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "398d3364-8b31-491a-8e49-6e27eb67e6db",
        "cursor": {
          "ref": "a1e01839-4ede-421b-acc8-d1aade33f16e",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "92fbbf9d-f00c-41ea-87be-8f2925e6c008"
        },
        "item": {
          "id": "398d3364-8b31-491a-8e49-6e27eb67e6db",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "8c957a3d-5fe3-4b7d-aa59-4113387d6df7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d90cf47-ad53-4eec-9957-dd9a30a4779c",
        "cursor": {
          "ref": "2e7f9c67-2641-497a-b9d9-c652407c2963",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "bc67d28f-7971-4f8e-9790-481d5d25bdee"
        },
        "item": {
          "id": "9d90cf47-ad53-4eec-9957-dd9a30a4779c",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "21eebb68-5166-42a1-adc5-235b42f79af7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fe1df64-e5b4-48d1-9713-d24cf2f0ac2b",
        "cursor": {
          "ref": "80e69374-8906-48f0-ae83-d37c1abf90db",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "e3116a51-48f4-41b0-888f-7c6ad1c96a66"
        },
        "item": {
          "id": "8fe1df64-e5b4-48d1-9713-d24cf2f0ac2b",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "33274eb9-ce5e-4933-8334-e10d0f0e6d47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59672890-f671-4f22-8f9f-516dcaa43082",
        "cursor": {
          "ref": "c9108e8c-5764-4419-b494-8e1161da6092",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "6465824d-31bc-4a7d-bac9-6845b19b752c"
        },
        "item": {
          "id": "59672890-f671-4f22-8f9f-516dcaa43082",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "2401133a-75a4-4486-9173-2bdc66371fa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91112126-d31b-4732-adf7-816d627d1fca",
        "cursor": {
          "ref": "1d94b4df-d53e-4df6-9f74-cd6c1ca0fc69",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "bb8b25a7-1b87-4083-ba16-1b26c424c688"
        },
        "item": {
          "id": "91112126-d31b-4732-adf7-816d627d1fca",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "a89f7273-8454-49e1-8f5f-d3c4c2629656",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d0f70c1-6bd8-4782-9b01-b83fbaaa6a6a",
        "cursor": {
          "ref": "443ff13c-83f3-4077-b31d-36206082f191",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "5c77e1ad-836b-4e9b-96c6-67a5e27f82ea"
        },
        "item": {
          "id": "3d0f70c1-6bd8-4782-9b01-b83fbaaa6a6a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "7e39c434-f9ae-4a2a-8b05-59265649fda6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "985bf6d1-a727-4b5b-bd68-b5331874d430",
        "cursor": {
          "ref": "1226f51a-cdb7-4b98-91a7-92825373202b",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "47678632-8590-4293-a9a6-9aa5a441d287"
        },
        "item": {
          "id": "985bf6d1-a727-4b5b-bd68-b5331874d430",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "14ac622c-a690-4044-912d-f413f5a22e25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5894720d-d816-4c86-816f-056943f0822a",
        "cursor": {
          "ref": "bb5c4c6c-48e1-4bdf-884f-42c87a5ca54e",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "2df2a338-dec0-47a0-b000-c2a0a2005d0f"
        },
        "item": {
          "id": "5894720d-d816-4c86-816f-056943f0822a",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "f5e42e01-4de8-45d0-87ac-1584903694ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "111d98bf-e2d3-48ba-97cd-e8dc3357fc43",
        "cursor": {
          "ref": "00154e16-c67f-4d7a-a86e-cc04d866f316",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "ef9d0577-ae5b-449b-a980-2e3c139beae5"
        },
        "item": {
          "id": "111d98bf-e2d3-48ba-97cd-e8dc3357fc43",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "7882e1ad-2158-468f-ba26-3cc7fcd82ff5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96fa411f-f047-4a56-b8ff-1358a8f869bd",
        "cursor": {
          "ref": "27b19f46-bf17-4a04-89ae-17e1cd7c2493",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "8e992bfe-75e1-4732-bcb0-65f9d998567d"
        },
        "item": {
          "id": "96fa411f-f047-4a56-b8ff-1358a8f869bd",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "5444595a-4602-45c9-87df-7719ce671983",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "708553f3-ec7e-4649-bebf-5baa0fbdfdc5",
        "cursor": {
          "ref": "5be9a2bf-d857-4d05-8a96-a047d8d56b72",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "c0021e13-1d46-42cc-9b3c-e218918baecd"
        },
        "item": {
          "id": "708553f3-ec7e-4649-bebf-5baa0fbdfdc5",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "c6eb08b9-c98a-450c-9564-33ebb62458f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe6fd683-2994-4fa1-bc8e-3aefeb52a168",
        "cursor": {
          "ref": "694ae49b-10f8-4587-8270-22940838ab4b",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "ce0123a5-d7f3-4ec1-bd12-37919ecda00d"
        },
        "item": {
          "id": "fe6fd683-2994-4fa1-bc8e-3aefeb52a168",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "89eb2a95-3145-44d7-86e9-12dc6e2c8634",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dca90d3d-40cf-4675-8abe-a93057ffda4b",
        "cursor": {
          "ref": "c3b7d668-5079-47ae-bebb-f273a503a0bc",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "90eaf8d4-b34d-4fa5-95a4-b1ec09122073"
        },
        "item": {
          "id": "dca90d3d-40cf-4675-8abe-a93057ffda4b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "f51fe21c-5418-4302-b9f5-70e6d2f8f3bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91f084f4-3695-4622-b0ae-14e516a50f08",
        "cursor": {
          "ref": "88cdbfe0-b934-47cd-8b46-56e573c17e24",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "36e6a41e-98bf-4a50-bf64-6d1c02b34959"
        },
        "item": {
          "id": "91f084f4-3695-4622-b0ae-14e516a50f08",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "65e1be5c-f409-48ba-bdc7-8f8a0d1f195c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a04e2f7f-7a9e-46b3-9951-fc667d393b45",
        "cursor": {
          "ref": "32ab46b8-e268-43c8-99fd-bb50a1264ae9",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "7d098ac1-6746-4e1e-acbb-73302549f0c1"
        },
        "item": {
          "id": "a04e2f7f-7a9e-46b3-9951-fc667d393b45",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "461904f7-cddf-454d-97e3-3d610240d6dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bee5197b-2c5f-407c-a522-f7d85e175e87",
        "cursor": {
          "ref": "812aa043-279d-48cf-bdc1-d60dc0006c65",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "cdae164c-23d4-4ec7-9ae5-7dcdee980c8d"
        },
        "item": {
          "id": "bee5197b-2c5f-407c-a522-f7d85e175e87",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b5c644e3-ab86-4d73-a05a-933c9dda3f3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c5d8ace-ac1c-4c25-a3b7-b4abdaa7aefc",
        "cursor": {
          "ref": "e2295d00-6efc-4fe5-89c6-41d8ef073e3e",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "3c90c76d-5644-405b-a0ff-95d817680add"
        },
        "item": {
          "id": "3c5d8ace-ac1c-4c25-a3b7-b4abdaa7aefc",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "2d666175-adbb-4ca0-aa32-cfc85d78cbda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80c01e72-daf9-48d3-89d5-fc353aefdf50",
        "cursor": {
          "ref": "6891566d-7b66-42e2-9664-ef0f7b3cc6d8",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "87c81520-622d-4baf-a360-ac6230f0b229"
        },
        "item": {
          "id": "80c01e72-daf9-48d3-89d5-fc353aefdf50",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "d6d8b70c-d007-4bda-a8b7-c471fe1d45e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6de649a-d8db-456d-843c-479e891c1c9d",
        "cursor": {
          "ref": "2417a4ea-bf53-4707-9bd2-deaf454a14c8",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "abe47b64-6840-45ba-bc1c-ed60124f054d"
        },
        "item": {
          "id": "b6de649a-d8db-456d-843c-479e891c1c9d",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ea9cd3f7-3d5b-42ec-b7ac-d9134178e1a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fd84c38-4311-4d37-8755-b30dc0e0a42e",
        "cursor": {
          "ref": "9547534c-301c-4874-b19b-67c23e64ba1d",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "9adedbcb-7831-47e6-9e0f-0a6eef6e9b9a"
        },
        "item": {
          "id": "1fd84c38-4311-4d37-8755-b30dc0e0a42e",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "0a285544-cc93-4f5b-a826-c292b65f4282",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c780fdab-5390-45f5-bc0f-bea2946cf00a",
        "cursor": {
          "ref": "b9a39d91-0e3b-4e51-9d13-005d4e568d57",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "1a331772-b828-4301-9d0d-d4cfd5d1a406"
        },
        "item": {
          "id": "c780fdab-5390-45f5-bc0f-bea2946cf00a",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "1eed29b7-1c1c-4feb-a596-3ea2c10563e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10d9c9c7-8dd2-44a5-94b1-da4b6329d78f",
        "cursor": {
          "ref": "35204b78-d404-427d-83ba-c63fa9552647",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "abfb73c3-d355-4b1e-a5c3-b759ca240491"
        },
        "item": {
          "id": "10d9c9c7-8dd2-44a5-94b1-da4b6329d78f",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "568f885c-b60b-4a96-a8e4-3dcd69ceaa39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b14ea9c8-16a2-4d86-9a51-09d24d536171",
        "cursor": {
          "ref": "e1798bdc-519e-4492-b513-dd0c069b4ac8",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "5b087a82-907c-4dfb-b4ad-67d66ca9b4e1"
        },
        "item": {
          "id": "b14ea9c8-16a2-4d86-9a51-09d24d536171",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "e5e347e8-6c9a-4505-a5aa-b6b9701a63ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f5d6048-12d7-4e3b-8187-b6e4ca0486ac",
        "cursor": {
          "ref": "57d263ce-cc9a-459a-92a6-2e1c89e789f9",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "134ba0b0-a82c-4d98-9578-213963faf593"
        },
        "item": {
          "id": "7f5d6048-12d7-4e3b-8187-b6e4ca0486ac",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "c1182bee-d093-4e1c-9e2d-76a007a7ebe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7a1d8f8-b7d3-4f55-892e-ea58153c0e20",
        "cursor": {
          "ref": "0c346f25-22ea-4c8c-b8db-06483e0c3006",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "80dd1fe0-9023-4661-a974-a12e2140cf56"
        },
        "item": {
          "id": "e7a1d8f8-b7d3-4f55-892e-ea58153c0e20",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "648b6d6a-5924-4c7f-82a6-c1778b4f4209",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b1e466d-35ae-4b15-9c8a-07f318de31f1",
        "cursor": {
          "ref": "8e9196be-73c9-4341-b633-e688d7cff7c5",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "0e81c501-90cc-4344-938c-4a0ed3b8f0ed"
        },
        "item": {
          "id": "9b1e466d-35ae-4b15-9c8a-07f318de31f1",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "20a794a2-2b4e-4ce8-aa7d-fd682deffd60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a7921bb-51e9-43f2-8707-591a3a958205",
        "cursor": {
          "ref": "e9db1c4d-c2e6-4766-9511-eae451f08e0b",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "7eb44b9c-4c02-4098-a369-32d21ce754ed"
        },
        "item": {
          "id": "8a7921bb-51e9-43f2-8707-591a3a958205",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "f72db8cb-fd3f-4e87-a05c-f3f2302fda70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87fd4e0e-1b93-4780-9435-27d8910a21f1",
        "cursor": {
          "ref": "4bd3d87b-24a7-4ab9-a9e6-2c132c3fd04b",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "4305a466-58e0-4061-b18f-e9f70940a56a"
        },
        "item": {
          "id": "87fd4e0e-1b93-4780-9435-27d8910a21f1",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "6c819014-801c-4f52-8938-d20979329b66",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e24012c-187e-42aa-9d7f-46c8134da53b",
        "cursor": {
          "ref": "0cf1050b-27fc-4ec7-9b67-9dfc9de6ba85",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "700ce4ae-103a-4632-bf2c-9a770d95134b"
        },
        "item": {
          "id": "4e24012c-187e-42aa-9d7f-46c8134da53b",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ccac5c68-ed80-423e-86b9-dd8a18b7a590",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd4ed141-513c-4cc8-a8c7-59fea9c7aded",
        "cursor": {
          "ref": "c0245304-ba32-44d6-baea-a720166a63ec",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "cf467465-59f3-4964-b2f0-eb6a81f446b4"
        },
        "item": {
          "id": "cd4ed141-513c-4cc8-a8c7-59fea9c7aded",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "0e69c382-18e3-4bcf-8510-71ba9523cac3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f21ce81c-51ae-40ca-9de2-6558c50b9e08",
        "cursor": {
          "ref": "08390317-02cc-4ce9-8e3c-86b7a100db92",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "2dfedd2a-f4e5-4913-af7d-0f5424fd2706"
        },
        "item": {
          "id": "f21ce81c-51ae-40ca-9de2-6558c50b9e08",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "360f01c2-71e8-4621-8a5f-98e2dc84747a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd622415-1d2c-409e-aab9-e1623d38d097",
        "cursor": {
          "ref": "132d9a81-d4d5-4d60-9bf9-811587643b86",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "714c3304-cdf4-46f3-a3dc-58fc45b13278"
        },
        "item": {
          "id": "fd622415-1d2c-409e-aab9-e1623d38d097",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "6bc886bc-655e-4c55-9fb1-0853267a7d54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1b1a313-73b7-4514-8599-39939e60676b",
        "cursor": {
          "ref": "44bb7043-fac6-4f1b-a77f-a5f576915e96",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "7c40fdd4-c952-47c8-983a-a999516dda64"
        },
        "item": {
          "id": "f1b1a313-73b7-4514-8599-39939e60676b",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "c379cd88-cb02-47f4-b68d-e2f90e0fbcf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ae0dbfc-1f00-4791-b040-b26d647a1208",
        "cursor": {
          "ref": "f3a5a521-7739-4e62-a501-b55765811995",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "a9813667-e32b-443d-9a01-2810f07b810d"
        },
        "item": {
          "id": "1ae0dbfc-1f00-4791-b040-b26d647a1208",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "99a726a7-c817-4fc5-bae3-54930d0c3b9e",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "1d8fc794-5078-49b6-b770-b1877aafd29e",
        "cursor": {
          "ref": "ca2b8031-1e70-45e4-9b45-b4feecb8a768",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "aabf8ea6-8f5a-4565-bb77-d88bb9d4b17e"
        },
        "item": {
          "id": "1d8fc794-5078-49b6-b770-b1877aafd29e",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "c933667c-f2a8-4e1e-bf4f-c701301e8b37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "371a481a-1c81-4ef7-a75c-8ab420518d34",
        "cursor": {
          "ref": "64fbcdb7-2993-4c4f-aa3a-4c61f2988be9",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "7a1d5521-237d-4e6a-9c23-4bfb71334209"
        },
        "item": {
          "id": "371a481a-1c81-4ef7-a75c-8ab420518d34",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "39686543-9abd-450e-b23e-db5fdbfe00f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24f7396d-0ac1-4c8f-a3bb-23960a5e471c",
        "cursor": {
          "ref": "3e5828a6-dca5-4459-a339-17193cd299c2",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "14353e0f-d741-444f-abd7-f2650a332cae"
        },
        "item": {
          "id": "24f7396d-0ac1-4c8f-a3bb-23960a5e471c",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "1c0bfedd-a22c-4b30-881b-530a024e1ab2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc25c462-59c3-481d-9813-7178868b7f89",
        "cursor": {
          "ref": "0c97a8d1-1981-4965-be04-f7353d20f0cd",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "35584be8-a3f6-4ef0-a5c6-dcdf88adde3a"
        },
        "item": {
          "id": "fc25c462-59c3-481d-9813-7178868b7f89",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "403b80ab-8e6c-4843-9b2a-8572cfb7faae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "114d42eb-0869-4442-811a-a2da7e6b9d00",
        "cursor": {
          "ref": "4d5b5bf0-3282-4378-884a-0fa90a2b8f6d",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "b3ba05fd-6ea7-4297-9b60-59c6449bbffe"
        },
        "item": {
          "id": "114d42eb-0869-4442-811a-a2da7e6b9d00",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "e28aaddd-d9ce-412f-90a8-507b5187b1e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84ca974e-77fa-4ccd-91b9-b2b77a64867a",
        "cursor": {
          "ref": "98ac1ffb-2999-4266-b3af-0e5e9d88bcd9",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "d3f6167a-f1a3-4d24-818a-deb04ed1c4ed"
        },
        "item": {
          "id": "84ca974e-77fa-4ccd-91b9-b2b77a64867a",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "f635eff9-1f76-4e76-95a6-3e956e20395f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf4b5b4b-5fb4-460f-bd97-3f6b9110bc54",
        "cursor": {
          "ref": "9596f501-8967-4468-af9d-0b8fc24c034b",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "4a79d936-415f-47f4-ae67-84bfc7e256ca"
        },
        "item": {
          "id": "bf4b5b4b-5fb4-460f-bd97-3f6b9110bc54",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "1521bded-64f1-495a-8c7b-a777ce526504",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "369b87c0-65a2-4a99-b513-456b357cac88",
        "cursor": {
          "ref": "c0822e41-fd1e-4147-80d7-64f3b49b6109",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "6375fd25-7535-41ea-b836-d674dc31b6c3"
        },
        "item": {
          "id": "369b87c0-65a2-4a99-b513-456b357cac88",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "861c279e-335e-4f07-9e0c-0e052086baf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b2e5e9d-9431-4f33-8e5d-4b1bcdb0290d",
        "cursor": {
          "ref": "6b40c08a-cee5-4a22-88e8-e131abc24f1f",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "2b16e87f-92ec-407d-98b1-4e29d9e44a22"
        },
        "item": {
          "id": "3b2e5e9d-9431-4f33-8e5d-4b1bcdb0290d",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "33808878-9111-42a9-bc5b-dba90ce81bb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd503607-6f21-4e3b-aa5c-20a33bd03f9c",
        "cursor": {
          "ref": "29541f03-222f-43f0-9654-76a5a320d4f4",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "7f80f9f8-78ec-44e6-8397-c610bac0187a"
        },
        "item": {
          "id": "fd503607-6f21-4e3b-aa5c-20a33bd03f9c",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "958844ea-89da-4b93-89b7-87d809f89160",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92b21e5c-f2b5-411d-80b4-361525413cbd",
        "cursor": {
          "ref": "637c02e7-529d-42ae-8a39-9cbd2a7101e9",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "62f7529d-1a0c-4fb8-b5fe-1c9552877179"
        },
        "item": {
          "id": "92b21e5c-f2b5-411d-80b4-361525413cbd",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "e979b5a1-be6f-4670-af3e-cdb2b67b71c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87c53bb3-c0e9-486b-8520-a873687b6aab",
        "cursor": {
          "ref": "e0f9e839-5732-48da-8a48-4e5eccd75d72",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "072521cd-8f5d-425b-9865-0a08702694f0"
        },
        "item": {
          "id": "87c53bb3-c0e9-486b-8520-a873687b6aab",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "f86aea39-db0a-42a9-a7d1-9fb74e0c82a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49088458-8300-49f9-8ef1-127d706fc98e",
        "cursor": {
          "ref": "a4fd94ac-6cdf-4563-a760-96c443628558",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "c31205ce-0a2e-4f95-9a9d-b4f1fb5db392"
        },
        "item": {
          "id": "49088458-8300-49f9-8ef1-127d706fc98e",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "bc93aa52-9be9-48ae-82ce-7653e27e27a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73a426d0-72a9-490b-9842-f8bafb87f25d",
        "cursor": {
          "ref": "676e532c-a84e-47fb-a033-47a03393f381",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "637d80b1-d761-4750-935d-76eb3f2c7d93"
        },
        "item": {
          "id": "73a426d0-72a9-490b-9842-f8bafb87f25d",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "1e8e2154-5a2c-4384-afe9-80b7e823983e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb98eac2-f5c1-4a1b-bec8-4dde6b846162",
        "cursor": {
          "ref": "cf003bbe-2a2d-4721-bf4d-cd36ad591a5f",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "084e8fb1-6894-41f6-95d7-3c648f9adbda"
        },
        "item": {
          "id": "eb98eac2-f5c1-4a1b-bec8-4dde6b846162",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "22324869-31c6-4373-831a-d5cdc629e7a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80cf5e21-8a03-4f0f-af77-b8c982eaa4f2",
        "cursor": {
          "ref": "db44f05d-a8c6-48e2-ae32-c717b740a021",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "24ed9e27-86df-4c2a-a52c-ffad485e0895"
        },
        "item": {
          "id": "80cf5e21-8a03-4f0f-af77-b8c982eaa4f2",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "d5c48b25-4332-41fa-9764-b0821dc76272",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff0989c7-4dd8-41da-99e7-8500e03a595e",
        "cursor": {
          "ref": "a57f56c2-7b64-4d9b-95e6-45d6be5ecc8a",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "6d364dfe-1285-40da-aa82-f6dfbc0a7388"
        },
        "item": {
          "id": "ff0989c7-4dd8-41da-99e7-8500e03a595e",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "96bd35d4-4681-402f-943f-017f31201a97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfa1cb78-6a1a-417a-b2aa-72c22be1c7a1",
        "cursor": {
          "ref": "067fe292-6d6b-41d3-b83f-162bc7a23844",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "93797421-0a2e-483e-b45e-dccd022b652f"
        },
        "item": {
          "id": "bfa1cb78-6a1a-417a-b2aa-72c22be1c7a1",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "f34d1064-b3b5-494d-add5-e936c9387c48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 190,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce8476ea-0ee2-4c30-a578-261fe1aa930f",
        "cursor": {
          "ref": "7a7c2b34-bb3d-425f-9b05-1487c8b670eb",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "0387c766-240f-4333-916b-6d979ee9e2a0"
        },
        "item": {
          "id": "ce8476ea-0ee2-4c30-a578-261fe1aa930f",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "07db6f5e-d6d3-407c-b0d4-8bc09e8fa541",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a152d34-eca3-46de-90b1-123aac909c76",
        "cursor": {
          "ref": "31440c61-345c-4c87-a161-c3f75fd6ccfb",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "12b4a4d7-b502-496e-bd4a-14dbe4076811"
        },
        "item": {
          "id": "0a152d34-eca3-46de-90b1-123aac909c76",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "2ffb3b6c-2bc3-45d4-9b92-27af9e657771",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd772da1-4808-4cb3-8064-8b36eb54c92c",
        "cursor": {
          "ref": "06b184f2-5871-400e-a8e5-23552b90d361",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "f9deecbd-9248-4ed8-a700-a22bafcbddd3"
        },
        "item": {
          "id": "cd772da1-4808-4cb3-8064-8b36eb54c92c",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "ca040273-1c58-4513-9e05-0dd5688c98dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc5db387-14e5-4411-99ac-9e7671cf0cf0",
        "cursor": {
          "ref": "7c9cd98e-e6a2-4fa9-b7fa-4df9f08a1254",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "4a524c58-d4ba-4700-a39d-355197774996"
        },
        "item": {
          "id": "bc5db387-14e5-4411-99ac-9e7671cf0cf0",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "8523ca2b-07df-4ee8-ae43-c8c51a2226d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a89a4d31-048c-4360-ad73-71c52abedfc7",
        "cursor": {
          "ref": "841c6b6f-b2f7-4d54-8436-048c17854e11",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "9a0742e1-526c-4cb1-8479-366f71b87884"
        },
        "item": {
          "id": "a89a4d31-048c-4360-ad73-71c52abedfc7",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "c8b202a4-fa9b-4880-83a1-a5263753d9d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2caad5f-106f-42b0-8185-a440a3e40d1d",
        "cursor": {
          "ref": "83aebed7-2597-4168-bebd-24e8da313669",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "79167a88-98a0-445b-8304-c45499fee972"
        },
        "item": {
          "id": "e2caad5f-106f-42b0-8185-a440a3e40d1d",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "488bf933-d467-4c60-9f8e-41e2820bb0c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f30b008a-da25-4ae1-a287-e527167c60a6",
        "cursor": {
          "ref": "57e74448-4b7f-46c2-b7e8-49018f217aff",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "445e8eb1-8752-4387-a493-419a21d91c29"
        },
        "item": {
          "id": "f30b008a-da25-4ae1-a287-e527167c60a6",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "8c7e5b5f-a680-49ff-aa56-269ceb89779a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2675a60-b2f0-45dc-bcc9-064a53a771b2",
        "cursor": {
          "ref": "c66db158-33bc-4de4-bb7c-9bdd811cc77b",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "f9c8ebf4-deb6-487f-b707-f38abd2ef955"
        },
        "item": {
          "id": "b2675a60-b2f0-45dc-bcc9-064a53a771b2",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "2866bb0d-9b9e-4fa7-a8dc-78dbf146dacb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66693d52-9a0d-4e18-ada4-cf1ed1221dcd",
        "cursor": {
          "ref": "091d8fa5-2fbd-4f8e-b161-1d47ac9d508c",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "6d615996-9cca-436e-a869-9e0a12dc1a25"
        },
        "item": {
          "id": "66693d52-9a0d-4e18-ada4-cf1ed1221dcd",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "f2e3fd8c-8f31-433b-923a-786f5b5ff198",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25616dbf-c5b6-48a4-8794-1129eaac1f27",
        "cursor": {
          "ref": "0a02739a-2b39-42b7-abcd-922d6f2fb027",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "54b21a5b-2197-4a27-a187-ee89c0b23a9e"
        },
        "item": {
          "id": "25616dbf-c5b6-48a4-8794-1129eaac1f27",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "071ac383-8c7d-4bcb-8b6b-7dda96da1681",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dbd923b-f65f-413f-9074-a95de99e1946",
        "cursor": {
          "ref": "e1186ee9-9866-42a0-b133-46da3abaf384",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "e165f70d-af15-4018-b2a9-72a59b46ab59"
        },
        "item": {
          "id": "1dbd923b-f65f-413f-9074-a95de99e1946",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "4bf9ae2b-ee66-49f5-970b-1e2d670fec52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0438300-f88c-4999-b9c4-7a9a60e74538",
        "cursor": {
          "ref": "695937f3-730d-40a5-98cc-7675e6040a1f",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "c38e6efe-59b0-44b4-a21c-910f7b0981e9"
        },
        "item": {
          "id": "a0438300-f88c-4999-b9c4-7a9a60e74538",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "dd1f0640-237e-4b8b-a03d-f4c3d2e4a909",
          "status": "OK",
          "code": 200,
          "responseTime": 152,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "d8535954-156a-4d1d-ac79-79010ed14f3c",
        "cursor": {
          "ref": "a05d00cd-07ab-42af-96cb-e795dea231a3",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "593e96f6-68d4-404a-9ad1-89a7fed364aa"
        },
        "item": {
          "id": "d8535954-156a-4d1d-ac79-79010ed14f3c",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "61ccdcc8-fe10-4be6-a7c4-01ccfa8180b2",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "8c7ed14d-56ed-4e6f-8f48-436844916890",
        "cursor": {
          "ref": "65329543-a1b7-4863-a8e3-5f0cab2eb9ce",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "5ebc8561-8f0e-4254-b126-a12f9b9c7d70"
        },
        "item": {
          "id": "8c7ed14d-56ed-4e6f-8f48-436844916890",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "f9eb19b4-35ca-433b-a555-5d5d29d34b9b",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "655ff322-72e8-4b90-b14b-e9b425a4fd70",
        "cursor": {
          "ref": "c8d172ee-d255-4800-bb3f-49a2d2094a34",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "0246374a-1698-4357-a54f-7e1b07b92295"
        },
        "item": {
          "id": "655ff322-72e8-4b90-b14b-e9b425a4fd70",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "9c2a6bd5-ca4c-42b1-ad80-5d7744aca415",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28ed8707-5dd9-446b-b086-03b3160a6872",
        "cursor": {
          "ref": "f857382e-38e9-4c34-8dac-07e483e5ea7d",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "a9adf9a1-9870-4a13-8850-8fc71b878925"
        },
        "item": {
          "id": "28ed8707-5dd9-446b-b086-03b3160a6872",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "7c740658-aeca-41c2-8b7f-ba24eb666dab",
          "status": "OK",
          "code": 200,
          "responseTime": 164,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "f49acd75-d230-4c6a-a3cc-2b56595952ba",
        "cursor": {
          "ref": "365fcc7c-bb67-4f9c-be67-fb0f48f8ed91",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "79995f28-a1f3-430d-a222-ef3f35b171e0"
        },
        "item": {
          "id": "f49acd75-d230-4c6a-a3cc-2b56595952ba",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "eafdebfd-959f-4c38-b63a-7cc4ee13e12f",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "707cbfba-8c24-4487-ab12-84345d251ce1",
        "cursor": {
          "ref": "ae089c96-8314-45d5-916c-08590429f2dc",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "5e4ff10d-8a02-43df-aae0-e4ab5402afe7"
        },
        "item": {
          "id": "707cbfba-8c24-4487-ab12-84345d251ce1",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "95d64eda-a8f8-4bae-9d4a-7f5324ea48d4",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "6d3b535f-4382-4c46-aa81-3ce22a125aa0",
        "cursor": {
          "ref": "d6ceb676-19f0-47a7-b8a9-fde94fa6fee5",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "1a385350-c50d-4761-ada4-943a07edb286"
        },
        "item": {
          "id": "6d3b535f-4382-4c46-aa81-3ce22a125aa0",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "cc088bce-1c5d-44cd-b0c7-3a91c345b1ef",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "8cd1ba33-5516-44f4-a657-618d4c9f058c",
        "cursor": {
          "ref": "98ba1456-ed64-4191-8e19-897c9becee84",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "62316a2f-c0e2-4ac6-84d2-33986f9d56db"
        },
        "item": {
          "id": "8cd1ba33-5516-44f4-a657-618d4c9f058c",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "21ad79aa-0ec2-4f18-bd32-476b8aecb0a0",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "47ad1ee2-4818-468b-b736-b10c2b3da271",
        "cursor": {
          "ref": "a25f8fa1-e7e1-4bf2-bbb5-81af4d181e5d",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "a240479b-fb40-4182-b149-d6a60e216aaa"
        },
        "item": {
          "id": "47ad1ee2-4818-468b-b736-b10c2b3da271",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "3c91624b-e392-4129-b122-ee80c6c3d55e",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "83c87056-5bde-4e70-8faa-e4596dd7f9d6",
        "cursor": {
          "ref": "0cc74289-6f64-4ece-b138-be725abf8e55",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "97c65ea0-5ea8-4417-9524-f895151ed8f8"
        },
        "item": {
          "id": "83c87056-5bde-4e70-8faa-e4596dd7f9d6",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "701a9f72-516d-4f42-8d95-159f0a1584b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2d67400-1912-4e9f-9d70-8c67350327fb",
        "cursor": {
          "ref": "f4b88e26-3dfb-4293-add5-6aaebf141390",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "76c8cf1f-19af-4539-9df1-82e743274aa3"
        },
        "item": {
          "id": "e2d67400-1912-4e9f-9d70-8c67350327fb",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "680ee993-4004-42bc-8263-6b228434094c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "332fdff4-a1dd-40c0-8fd0-8d8b79796e3e",
        "cursor": {
          "ref": "0642bd49-fdf8-4185-84cf-641b55aaf628",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "bc95a7f1-8035-40bd-a4a2-2bedae565c62"
        },
        "item": {
          "id": "332fdff4-a1dd-40c0-8fd0-8d8b79796e3e",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "bbcb1d30-bce9-44bf-aa73-6da85af11173",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d45d6a42-a3ef-48cb-afcc-f3b79623fd9e",
        "cursor": {
          "ref": "f4f79dd6-a375-4b5e-9c2e-7f372d94d7ee",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "1e496636-b678-4b49-8d9f-06ece9ac15b0"
        },
        "item": {
          "id": "d45d6a42-a3ef-48cb-afcc-f3b79623fd9e",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "41a30b19-a77e-45c5-bb7f-422b44065355",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d3957d2-4a84-4a4a-aa4b-87f0bbd3d251",
        "cursor": {
          "ref": "ce6b6ce5-2dda-44db-b4b8-443bf05ec81c",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "24ba96c9-21a2-4007-bbf1-3ab7b6d744c6"
        },
        "item": {
          "id": "2d3957d2-4a84-4a4a-aa4b-87f0bbd3d251",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "d5e11e52-6414-47f2-b0a1-f2bb9ef5b69e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5c196e9-c821-44bb-9483-89792dfd714f",
        "cursor": {
          "ref": "ffcdc6bf-f31f-4601-bd29-1e515067b599",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "8d32b7d7-e7d4-4142-9757-39f5de5528b5"
        },
        "item": {
          "id": "e5c196e9-c821-44bb-9483-89792dfd714f",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "93707b1e-9979-452b-877c-7e037ccd79e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66dd3a5b-65ac-428e-a7b7-af108a19b632",
        "cursor": {
          "ref": "5c41dc52-2793-48e1-91a7-8f7af5a70e09",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "e82737dd-d94b-4455-8548-f119a75e024e"
        },
        "item": {
          "id": "66dd3a5b-65ac-428e-a7b7-af108a19b632",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "977930c2-0bc9-4785-a959-b55e2f1a9723",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "751b05b8-ec2a-4a3c-9434-91c66711fd24",
        "cursor": {
          "ref": "75b8abf1-42b3-4854-a21d-9ca0c52dfb8c",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "fd4415e5-9ee8-46e0-a8a0-d34633a9d535"
        },
        "item": {
          "id": "751b05b8-ec2a-4a3c-9434-91c66711fd24",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "5cca072e-6ef0-4719-9fca-b271539b05f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "888ed198-c200-495a-bc36-5e5ef92e9f86",
        "cursor": {
          "ref": "36c92a0c-ba66-453a-ad84-54a88e83e41d",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "aed47934-e568-4359-9737-21b7119741e9"
        },
        "item": {
          "id": "888ed198-c200-495a-bc36-5e5ef92e9f86",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "4fb949b0-5801-4c29-b999-798dee654733",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f4f9409-9e36-4985-8252-2b440f7f5d60",
        "cursor": {
          "ref": "73359969-e41e-4584-a443-b5d4e7e22f59",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "4cd5238f-e444-40c8-92f5-8f41d5cb0daa"
        },
        "item": {
          "id": "3f4f9409-9e36-4985-8252-2b440f7f5d60",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "4120b793-dd0d-4d01-9f03-4bcd1ee6cc03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb3cab6a-7434-47c6-8aa8-cea17b83c0da",
        "cursor": {
          "ref": "94b1cd0c-d86b-4a0a-bed0-db1363c99629",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "4da3cc29-7ca8-45f5-9338-11cdfffe7e83"
        },
        "item": {
          "id": "cb3cab6a-7434-47c6-8aa8-cea17b83c0da",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "2edb9543-9876-4840-b75b-4b5f0af7125e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a426400-b076-4610-bf1c-dfb18b83a78a",
        "cursor": {
          "ref": "4dce3410-dbb1-4483-b5df-8b4580a4f912",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "b01fadfa-074a-477e-985b-726e2db60d61"
        },
        "item": {
          "id": "9a426400-b076-4610-bf1c-dfb18b83a78a",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "93efaab0-278a-4571-bc9c-b74457f17a64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f8e8949-b492-43ca-b741-996a4ad12f19",
        "cursor": {
          "ref": "c3b3698a-9bbf-41f2-bc8d-86e3648e553f",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "8c3c1760-8f48-4517-a186-3e54e09dfae7"
        },
        "item": {
          "id": "3f8e8949-b492-43ca-b741-996a4ad12f19",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "a5b67b4a-6062-4071-a053-170f9abe4ce6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bf00b03-25bc-4d79-8738-bf7ea5b46d58",
        "cursor": {
          "ref": "df4a9432-106e-4a76-981e-0567e3eb0d14",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "ac0c02bb-477d-4d90-9892-d624b5277071"
        },
        "item": {
          "id": "9bf00b03-25bc-4d79-8738-bf7ea5b46d58",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "cc69c388-b47e-4201-8b2e-67b45ab9737f",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "0394dbbb-8ee8-472a-b779-6e7c0a74c589",
        "cursor": {
          "ref": "5d1c4623-ec76-4c0e-b120-a2bf3c2e3e02",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "5282ec29-e331-412e-9023-482212fe4ed3"
        },
        "item": {
          "id": "0394dbbb-8ee8-472a-b779-6e7c0a74c589",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "8f62bf11-1872-413c-9c26-76046e07e66a",
          "status": "OK",
          "code": 200,
          "responseTime": 147,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "06032712-4a07-4abb-9310-2333a49f9210",
        "cursor": {
          "ref": "54e8dc95-3144-4643-bd34-9606339d5432",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "79895d8f-df65-41b9-bb44-c769333ed649"
        },
        "item": {
          "id": "06032712-4a07-4abb-9310-2333a49f9210",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "89421cd7-9ab7-41c4-8106-7b9c374ac953",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "17309717-6fa3-4b30-9838-1f1185d21c85",
        "cursor": {
          "ref": "9a18103d-dcf4-4908-b13a-5df032c5d2a4",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "6960eb26-f869-4b1a-a2c4-0d4dbaa4ac85"
        },
        "item": {
          "id": "17309717-6fa3-4b30-9838-1f1185d21c85",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "3ab0fdeb-376e-4898-a380-3389d8d1601c",
          "status": "OK",
          "code": 200,
          "responseTime": 329,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "ba0fdb8f-26fa-4919-8c8f-9ce19bff0f72",
        "cursor": {
          "ref": "c0ed0be6-beb5-44a1-9430-ab64f56a7333",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "a2a5720a-eeeb-4fed-a731-1e62ea55bea1"
        },
        "item": {
          "id": "ba0fdb8f-26fa-4919-8c8f-9ce19bff0f72",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "f2424bc1-b914-4312-8d22-4f0e7f46f5cb",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "85f4b972-9bd7-486b-b759-396178ceda78",
        "cursor": {
          "ref": "abfe0d86-5652-404a-8f96-a72d79eeb4d2",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "5ef399dc-19a2-4925-b84e-d2f4a297bbc2"
        },
        "item": {
          "id": "85f4b972-9bd7-486b-b759-396178ceda78",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "fb8274a4-8fa8-4595-97ca-7cdc88d44fc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e483873b-1197-483b-ad97-fbe0a22657fe",
        "cursor": {
          "ref": "48a0310a-c5c7-4a4f-8e34-df86135e5d61",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "4a347a0c-cc5d-4b92-8002-14f9a81b6487"
        },
        "item": {
          "id": "e483873b-1197-483b-ad97-fbe0a22657fe",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "4515e29c-0c09-467f-9016-e158bd3b1f19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88431cae-32f6-4ec0-893c-9e4e960ff510",
        "cursor": {
          "ref": "6e8f1b7b-2e23-492a-bded-2fdca0a7bee3",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "2c008fe3-cb57-4262-85be-030491b003be"
        },
        "item": {
          "id": "88431cae-32f6-4ec0-893c-9e4e960ff510",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "28ab87f6-ec97-4bbb-a82a-d62f39aee516",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "976ca374-9a15-4a8e-8de2-c4637a0bc127",
        "cursor": {
          "ref": "bbb70b9f-7ed5-4a2e-b0db-4334fcff1982",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "baf5f11c-c9d9-457b-a8e6-a49aaea6424b"
        },
        "item": {
          "id": "976ca374-9a15-4a8e-8de2-c4637a0bc127",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "cff3423e-5c3d-4032-868a-211c057cf1bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8efc265-7523-41b6-8e96-c992719c283a",
        "cursor": {
          "ref": "577a3678-888a-43ae-a7b6-cceba9100d72",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "0197f4f8-50fd-4acd-9891-099189d19945"
        },
        "item": {
          "id": "b8efc265-7523-41b6-8e96-c992719c283a",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "45159019-818d-4b67-a9c2-6cabbfbc0982",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbdf4535-d7ef-4ce4-96fb-a814a004d0a2",
        "cursor": {
          "ref": "c341b6ea-3a22-49d3-af76-797b6a132fc2",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "8cc3c707-c552-4ba6-a20e-c43b6ec2d6c9"
        },
        "item": {
          "id": "bbdf4535-d7ef-4ce4-96fb-a814a004d0a2",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "8d6c98d9-05d4-49f3-b40d-7e89485edf12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e96dd6cb-59da-4518-8b55-16dec7588642",
        "cursor": {
          "ref": "e6913ce7-8679-4057-a71d-a02800fa78ff",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "edc3ed32-1c49-4d2d-ad8a-17096f2bc5d4"
        },
        "item": {
          "id": "e96dd6cb-59da-4518-8b55-16dec7588642",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "1a1fa2a1-1d03-4e41-b704-4d94565f69c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c5fb2ef-481b-4194-b85f-c3850c7d38d2",
        "cursor": {
          "ref": "cbaa6cdf-c3a7-4a21-b99d-334fc8fbd5c6",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "8aac89e4-1465-4db5-8ec4-c8df54dc7ebd"
        },
        "item": {
          "id": "8c5fb2ef-481b-4194-b85f-c3850c7d38d2",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "592ae0f0-f0d7-4638-ba4e-ca499857d350",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e3dacd8-3c20-4787-9ae7-0242de2f2851",
        "cursor": {
          "ref": "38ff103d-6e24-4273-9c56-16ef12648102",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "b3d5e1d2-2bff-48c1-827b-b2db1d85c805"
        },
        "item": {
          "id": "6e3dacd8-3c20-4787-9ae7-0242de2f2851",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "ea3b511b-fbbc-44bd-8ad9-57ed211cadaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fc72343-925e-4e7d-986e-8ac722cf2802",
        "cursor": {
          "ref": "0a38b9d7-802e-4198-be93-6411f3ad1e84",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "df94073f-0b0a-491f-9810-50f939508bf6"
        },
        "item": {
          "id": "7fc72343-925e-4e7d-986e-8ac722cf2802",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "24f0f9d8-fbb0-4e82-a42b-77584cd6f71c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d6caf90-c72c-4e0f-9f72-0b3e837059e5",
        "cursor": {
          "ref": "ba680f58-d5bc-4cb4-b91f-51c419af3d73",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "a13a7744-1452-44f0-8030-b32a5a25bb57"
        },
        "item": {
          "id": "3d6caf90-c72c-4e0f-9f72-0b3e837059e5",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "10859562-addb-453b-a964-c8c05dcd3d35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "940fa75b-cb36-4528-9a05-23a0e70d1dff",
        "cursor": {
          "ref": "71fbf4d8-88f1-48e7-9d3a-c0ea02278884",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "60a7ae35-58e6-4da3-9705-e2bbb75cbe43"
        },
        "item": {
          "id": "940fa75b-cb36-4528-9a05-23a0e70d1dff",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "45403973-0065-4db6-bfc0-a7f5e17a34f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71d8b4f4-f817-43c0-94d6-1d69ceccd8b6",
        "cursor": {
          "ref": "1d2fd2bb-d128-412a-8394-8595543d8128",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "40c299d8-b675-4b00-a5cf-a0f88d1fbe2f"
        },
        "item": {
          "id": "71d8b4f4-f817-43c0-94d6-1d69ceccd8b6",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "1ca9789e-1788-4430-9e02-e56e87b1d20a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ca3f455-547d-4f0c-b71d-25e8d654a151",
        "cursor": {
          "ref": "54faf9e5-70e7-419f-bfe2-6f496acfec14",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "8068ba0b-be3d-4c07-b086-bd23534c7a50"
        },
        "item": {
          "id": "4ca3f455-547d-4f0c-b71d-25e8d654a151",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "a6e51e00-7675-4e34-a5fd-e30638dbcc44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ea3c329-e031-4239-a86e-ed332c5a7de5",
        "cursor": {
          "ref": "cca8d209-1b54-43e6-bcfd-a0e35a2a004a",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "09dc4e07-ead4-4770-bef4-711d49818f3e"
        },
        "item": {
          "id": "4ea3c329-e031-4239-a86e-ed332c5a7de5",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "c8783908-cca6-4c88-a0af-c34e60c5ce06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1eb6a23-45ef-46b7-b922-1d1cbc310cb3",
        "cursor": {
          "ref": "d15f0fe6-a9bf-40e5-9377-95249834d6cd",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "bc1aa10e-9c9b-4124-b151-661d7635bfc6"
        },
        "item": {
          "id": "c1eb6a23-45ef-46b7-b922-1d1cbc310cb3",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "02f69eae-960a-43b4-94bd-7781f26cfdbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac090463-d098-47c2-8113-393acf05eb05",
        "cursor": {
          "ref": "6c900df4-3e30-4fe1-8422-692ee396dac8",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "cae904cc-8ef7-4529-80a8-d7e1b82f35fd"
        },
        "item": {
          "id": "ac090463-d098-47c2-8113-393acf05eb05",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "a7c9441c-cdf7-48ee-9c6e-0f4489e29e8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0064ab4d-9bb6-4e48-aef5-270cfe92f702",
        "cursor": {
          "ref": "98a20c71-87d9-4e55-a763-f3e432ce804c",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "b77f4b71-28a6-46b5-a325-54107074bd41"
        },
        "item": {
          "id": "0064ab4d-9bb6-4e48-aef5-270cfe92f702",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "c597b678-1f2c-45a5-8b88-067f9ccb9bac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69a797d2-7f4c-4803-83c8-c72fe0a79d78",
        "cursor": {
          "ref": "69e19868-284d-4a10-b14f-273ccaed2b13",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "11f48d98-fa6c-4261-afef-53a31c40e18e"
        },
        "item": {
          "id": "69a797d2-7f4c-4803-83c8-c72fe0a79d78",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "a14e667e-13ed-4205-95c7-8bb2e9479235",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee9e96f1-8c84-4e73-8e32-b6fb0a0c694d",
        "cursor": {
          "ref": "a49563d1-09d1-47d6-ba30-5e3f5b295c01",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "b6eeef16-9b0f-4384-b20a-0834e4ef0e24"
        },
        "item": {
          "id": "ee9e96f1-8c84-4e73-8e32-b6fb0a0c694d",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "0d000b5e-09f2-4984-a9ac-307125ccb995",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd08329b-4c6a-4ed5-8cdd-5485b7d95f5b",
        "cursor": {
          "ref": "90958c95-d125-428c-bcf4-4e412776e9bb",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "5b2ad916-6ff4-4c13-90d2-a30ca4ae84e5"
        },
        "item": {
          "id": "bd08329b-4c6a-4ed5-8cdd-5485b7d95f5b",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "d94c9585-9d97-458e-af6d-b772169e7fde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c970db10-0c46-42a1-bf45-7bafbf91e962",
        "cursor": {
          "ref": "32378d0c-abe8-4d20-a2d1-bb872153417e",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "5664a25f-7e20-4f9f-b701-acca5ad1c948"
        },
        "item": {
          "id": "c970db10-0c46-42a1-bf45-7bafbf91e962",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "4a526ddd-d4a6-4054-ac89-60ad4e432d74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10bcb7a5-9b34-4e87-b888-1a7de81e7e71",
        "cursor": {
          "ref": "24bb47fd-8a3a-445c-864a-4822dcacbc94",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "dc647d90-ac5c-410f-b430-b7d4b58cf6bd"
        },
        "item": {
          "id": "10bcb7a5-9b34-4e87-b888-1a7de81e7e71",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "45f1daa9-f10e-4503-8ac1-77a3797e0f7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91b4fb8a-db93-4931-b317-debc8fcbb64a",
        "cursor": {
          "ref": "f0f78fa5-9187-4e46-9dbf-f7288ec92e3e",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "30006ce2-3449-4e60-ad5c-274a0acbdfe6"
        },
        "item": {
          "id": "91b4fb8a-db93-4931-b317-debc8fcbb64a",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "0e639db6-7912-4ef1-8803-f193e2dff3e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fa4b9e5-3403-42d3-8018-0f3a71ace201",
        "cursor": {
          "ref": "a0c79275-ce88-4add-ab1e-204feb2d2774",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "2528709d-406a-431a-9ca0-397dc07a3a9f"
        },
        "item": {
          "id": "9fa4b9e5-3403-42d3-8018-0f3a71ace201",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "a3409dd3-4e63-41ce-bc9a-54c4dc7c437b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "704c3b0b-b398-4d36-9ef6-c2bd28ffd92f",
        "cursor": {
          "ref": "401d80e4-a6c3-48a9-bfa4-1adffaad472c",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "7db810be-4a64-409d-9c01-033325c4395d"
        },
        "item": {
          "id": "704c3b0b-b398-4d36-9ef6-c2bd28ffd92f",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "c390de47-a012-489c-9d80-1f20b64ae6d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bea277f-b1d1-442a-89d5-5bfe5dcb2b10",
        "cursor": {
          "ref": "d74e6711-d343-4ba7-a8ab-09e76f00b032",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "e8777a08-a421-47c5-9600-583249497184"
        },
        "item": {
          "id": "0bea277f-b1d1-442a-89d5-5bfe5dcb2b10",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "fc67b1b7-cf87-43f1-9ab4-99a3d9fd7a5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91c37256-c864-4946-a617-208ca6d1afa4",
        "cursor": {
          "ref": "1df7dd9e-7c2f-4b59-b45f-4a2a8a2be96b",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "b0c558b0-2e1f-42fe-b268-a31fdfae6222"
        },
        "item": {
          "id": "91c37256-c864-4946-a617-208ca6d1afa4",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "9a3d46ab-0591-4ede-9473-5201aebf46ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ce0a137-e3a6-479a-94ab-83f17a46279a",
        "cursor": {
          "ref": "4176712f-e529-4e09-8efa-267264ef8e73",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "51735196-55e9-4778-9dfa-bc07a09e8972"
        },
        "item": {
          "id": "5ce0a137-e3a6-479a-94ab-83f17a46279a",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "a1b83e5e-5d79-41a4-b903-14633d32d141",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bc89293-b6c7-4e8c-b057-9373d87b803f",
        "cursor": {
          "ref": "fdfc445a-6a6e-40aa-8e44-606ec776362c",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "306e7b9e-d285-4575-b5cd-2f401d82ef20"
        },
        "item": {
          "id": "2bc89293-b6c7-4e8c-b057-9373d87b803f",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "65f0b104-1f91-49b4-bb33-e39f9da15572",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be483217-8e5a-4a69-8a01-ad4580b73384",
        "cursor": {
          "ref": "068c8391-67ce-4fb2-999f-883f4a11aae0",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "811e1916-9715-48a6-abef-981dab7c95de"
        },
        "item": {
          "id": "be483217-8e5a-4a69-8a01-ad4580b73384",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "173b2b91-229a-42b2-a196-e0c57a71aeee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e5d6334-a205-4801-bd96-3af816bb20f5",
        "cursor": {
          "ref": "aad402f3-2589-4711-91cc-ca7c5fbfbc72",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "7ce581b1-c659-4560-b086-461c51370509"
        },
        "item": {
          "id": "0e5d6334-a205-4801-bd96-3af816bb20f5",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "500ad469-f3fe-4275-928a-9c75ece2bec4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88437741-d4b4-473e-9b67-c314f44022d0",
        "cursor": {
          "ref": "c42876fb-54d2-45a6-972e-3c31363ff624",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "551f4c24-1b37-41bd-b6d7-d884989bb57f"
        },
        "item": {
          "id": "88437741-d4b4-473e-9b67-c314f44022d0",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "8e9f79f0-7062-4541-b20a-bfb2922caed5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3553e23e-8a4c-401c-970f-4e9135b10482",
        "cursor": {
          "ref": "fba68236-6b8b-4417-9def-f64d0e8f716d",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "1818ec14-913e-4927-a3aa-27ac5726d3bb"
        },
        "item": {
          "id": "3553e23e-8a4c-401c-970f-4e9135b10482",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "81fba01c-b6a0-493a-9e86-320c5da510b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "300cd56a-3aab-4a52-ab3c-755c8f7dbc48",
        "cursor": {
          "ref": "738e9caa-9bf0-4fd8-9cbf-ad44cebe54aa",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "8216bd64-aa60-4dfb-879b-03c5d06ca758"
        },
        "item": {
          "id": "300cd56a-3aab-4a52-ab3c-755c8f7dbc48",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "2c7edd2a-1a05-4966-ac46-b7384b023a2c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17f998cf-7084-41a5-a664-2649c043471f",
        "cursor": {
          "ref": "26baf9b5-f42f-4109-a3c0-8a928abc5d6b",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "244c8e8e-bc07-44a3-846f-95052b233125"
        },
        "item": {
          "id": "17f998cf-7084-41a5-a664-2649c043471f",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "110ed1da-6190-4609-a6dd-b0be037ffa79",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "f7e9bb8e-0d48-475f-9ae1-57e156f12aee",
        "cursor": {
          "ref": "0673cf7e-2199-48a4-921a-d52d96e92cba",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "ce56e589-903e-4606-a0d4-5f0d311d8c8a"
        },
        "item": {
          "id": "f7e9bb8e-0d48-475f-9ae1-57e156f12aee",
          "name": "credentials_verify"
        },
        "response": {
          "id": "a205a2d0-f2ce-4eae-b2e6-833fa608276b",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b234ceb-5aa9-4000-82d0-7134da6e8291",
        "cursor": {
          "ref": "d90124b5-d49f-4985-823e-191c23c025c3",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "2850b869-2d0a-47f0-9703-7a89b68d5646"
        },
        "item": {
          "id": "0b234ceb-5aa9-4000-82d0-7134da6e8291",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "22583191-579b-42b0-a484-4e649555f98b",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffa337b6-8c5b-4f3b-aee1-d4f89e9ba0e2",
        "cursor": {
          "ref": "597d5452-6d66-4184-b5cd-8d8c37d9b72e",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "724d503f-fe71-42ea-a644-9116e68116d7"
        },
        "item": {
          "id": "ffa337b6-8c5b-4f3b-aee1-d4f89e9ba0e2",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d0403121-24cf-47eb-9e6f-e19a3d0c2335",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffa337b6-8c5b-4f3b-aee1-d4f89e9ba0e2",
        "cursor": {
          "ref": "597d5452-6d66-4184-b5cd-8d8c37d9b72e",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "724d503f-fe71-42ea-a644-9116e68116d7"
        },
        "item": {
          "id": "ffa337b6-8c5b-4f3b-aee1-d4f89e9ba0e2",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d0403121-24cf-47eb-9e6f-e19a3d0c2335",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13641847-cef5-474a-97e6-e54df463570e",
        "cursor": {
          "ref": "938cdb70-ee0c-4336-b246-83a71fb4e829",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "b9e88ca2-2ef1-4403-8182-2939db296f0d"
        },
        "item": {
          "id": "13641847-cef5-474a-97e6-e54df463570e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "ec005492-58c4-4183-9599-f742906f3d3c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e6113d3-5bea-4217-9fcb-27dbe5a66b87",
        "cursor": {
          "ref": "d3566b27-bf51-482e-8082-3fd00f4a06c8",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "6c87cee3-1657-4cdd-9082-bdabfce13251"
        },
        "item": {
          "id": "9e6113d3-5bea-4217-9fcb-27dbe5a66b87",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "46fad1e1-810a-4070-8b2b-26770d11f575",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}