{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "d2317b0c-a71a-40a3-baca-8c6007e32861",
        "name": "Clear Cache",
        "item": [
          {
            "id": "3c11ed1c-1db4-4b51-b156-a6e98f94e03d",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f7bc6bc1-1497-46d9-aab0-fcb1125bcba9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a7e9ea21-0602-4217-8530-296bc63b9257"
                }
              }
            ]
          },
          {
            "id": "56bd3136-4038-4130-b0a2-b118800fb93c",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7643bcc4-b238-4384-a890-b3e614505ddc",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "450ede6b-5b48-4f02-991b-867e88a87f2c"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "8e39d3d4-b6d1-4be0-b6f3-7034f626473e",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "26ec0826-639a-4147-b381-69d78e0cf9f7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b5967e77-ecdd-4721-bbdd-0a4a2f1d5b16",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "418c6c17-7f9a-4bf4-b0c0-3c00a222a960",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1e8f0ef8-3e0d-4e2c-917b-a0ea16620c03"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "14bf937a-4ebe-4605-8e50-53f8f4459be8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "62832ff7-dd5f-41f5-83e9-c58949b9f18f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8319d6ad-83bd-4ebc-a643-c575540440fd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "90291829-b420-4f9d-9293-6abf84da1bee"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "609e0c37-de31-40cd-9f76-e42de2a83f80",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "63313fe7-a2d7-4f4f-8a27-f7df87c08cdb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0a314520-ec1a-4809-aa58-cd3ea234ab5c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "578d4bad-9d81-4b84-8bd1-f506e4597d32"
            }
          }
        ]
      },
      {
        "id": "9736e8a5-b2b6-484d-bdb4-0232fc3743aa",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "443f688c-a418-4d12-806f-843de0135a57",
            "name": "Negative Testing",
            "item": [
              {
                "id": "51bc3175-72c0-4d02-9979-499f84597342",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2fa42905-c8e1-433d-9fff-21c10073f475",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c19d5e4e-3190-4360-aff3-f13d8491cbb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "64e022dd-3f13-489a-9386-84010cfb0364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d13f69e-6070-4414-99cd-0d78ffb99388",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c08b0ec7-7aa8-4234-ac06-45af469ae730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6fd4c223-fccc-486a-a28f-9ae035243881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71cbf357-f9c9-4715-9aa4-aeaf7623ff56",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de421e32-47d7-47d1-ac7d-d118c2922c93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4eee2a34-81b3-49a1-8713-6dfc8fe1ff22"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "15aac933-0ec7-4b4c-8888-3a949b744bd0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bf0b43fd-7d26-4c66-887c-ad6478e059ce",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffc3ddcc-d5e9-4cde-99c0-4c0015a82925",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a7eaf709-5fce-49be-854f-f482771e33f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66218cc9-8e10-4903-bdd5-8019adbd4976",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e207b3b5-cc8c-4b7c-959c-04011b9e1163"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "1bacdb33-e01c-449f-b090-d4d8d0585854",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0ae4096b-650e-4c41-a066-e7d86228d519",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9756e1ea-118d-4336-b730-9c4a0f5774fe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "9f7470fd-c529-479b-b6dc-4b1a5c55582b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d35d5cf7-8afc-4d02-b6ca-656c4e073b55",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "bdfa8366-965f-4500-9fdf-42895de33f40"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "32592a8c-abc7-40cf-9eb1-1c76e42fdd10",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b18fadb7-eb5a-4eaa-abdf-2716c48ce76a"
            }
          }
        ]
      },
      {
        "id": "4404c833-fdba-4ff9-9f7e-d2ed356782fd",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "eac9d436-0acc-4fd6-a6b1-98481ae431b2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4b0fe994-3693-47bf-8dea-0414614503b3",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "8d91d34d-7214-4984-8ab0-62d2c9d24866",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8369240c-a05f-450b-8635-fce164c68f52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56038a5c-d366-43b2-bcb9-9276090ff73c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5bcd939-fe38-439e-a716-5115309a7804",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c897e940-19ac-4c30-8531-16102c1ae375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afcaa66b-3daf-4ee8-b4f7-e9d6b3decc5f",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "625a5f37-c44e-4005-a6b9-287406cb677a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f953c103-8705-4b27-8756-5c945600cc56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d4e0b22-62e0-4236-a588-a9202800971b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b7327baf-cc8e-4ceb-a602-bd3635e14293"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb6defc4-1852-49f2-b0b2-232f794348fe",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf8c5b58-f203-499a-b636-ea5f33e96683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74ab539f-034e-46ad-866e-2398c800a238"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fe5a78f-fff1-42ab-aeed-7c3fc9f94907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a051bc1f-9a92-4cdc-a812-2bfc2605ebd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4399e53-c98d-4e5d-b6cb-ca2b3535e057",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84f7e06a-133c-4713-b39a-c68af1db7daa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8633e5aa-7a2d-4255-ac86-4bef062069f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "739452bb-3823-4df2-b68c-1f8a62e9f192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "70a8671d-964b-4522-b555-e604d5dd4a7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "460216a9-3095-4fe7-984a-0ac2644f426e",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60f4b0fa-a7a6-4bb8-93c1-c2b54058cdae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0aed8126-3ae4-4a15-9b5c-eb919bd235d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0462971-c6f0-49b8-a247-6a847ffd710c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f451080c-4d81-4d90-8538-3b50f225a212"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6ad98c4-6584-4a40-89d5-805f44cbbcdb",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b965df4-a911-49e4-8338-bcf93e836111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cec0ec7b-677b-4d61-b74a-820924d473ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdf5b413-88ed-4a0a-9193-3a7e766649cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e8008d78-4a31-4336-ab49-6c147c380bda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "185b3c5d-05b7-4e35-aaff-6e8ca9bd98f3",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f79a444b-e8fa-4e6d-9574-e16b26414c73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83a295e0-8a83-47c7-ae9b-5900862d5c56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82335ab3-d4f1-478f-b136-ff5e71cd13f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bd868215-8c4a-4d51-849e-072f5dd2bbee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff3b233c-31bc-4734-a07a-f76b889efb4b",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0ed9b5c-0310-4d4f-86f2-42f807740265",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f10d92fb-59ec-4647-8513-b3959681b033"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "424d803b-fb2b-4dc7-a5f7-3247682a9a02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "12480c6f-e506-4a5b-8c96-f174157db652"
                        }
                      }
                    ]
                  },
                  {
                    "id": "287c55d0-8e43-4a45-a697-bfef03aca3eb",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42fc1af5-4fe9-41c9-a3ee-fc60a057ddbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed52aa15-dc07-48d6-a6e3-01ee212f03d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e34bd04-1fda-4a75-8fa2-9fdc1854d4f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cc46bca8-1764-48fd-9870-cb352491b4b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8409f17d-f8c4-4967-9232-b1c7cf7851ed",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34912a40-51f2-41fe-9e20-abb7e1931e82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5aea77a0-3a9c-474c-a68e-0e9a15abb552"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "942bf35d-8f6f-4d89-a634-395d5d1b41d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6b86db6d-2f80-425f-ba46-10933dba2429"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69909600-9a16-446d-abcd-caddde7c4272",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef31f08b-41f8-43e6-ad10-19a064f14ba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3299ffe5-c3b9-4c0d-888b-152aac72da6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4effe16c-1eb9-4e5a-a594-4b4c7d8e9b8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8da40fe0-5ce7-4051-9a8c-d03b1650e180"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de38d06c-2b46-46a9-aade-b9a6abad870b",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7a00925-dcf9-4499-805e-4e990f0c8b34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6f453cb-0916-47a7-8071-dcf006fa06b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cb5894d-5632-4d54-8fb6-92b1d513eb38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bdeb43c6-8d46-4275-a8b1-129f157becf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c0248c1-e1b0-4cdb-9340-895260a97284",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4586b7ff-f86f-4ccb-9652-ce6766579bb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0792b2a-7c81-4529-8a91-7156580e8483"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe31100b-3088-4171-96a8-2282334486cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8f22b74d-8ae6-4168-b4aa-d2b082383e7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f34eb57-7a5e-43a4-a03c-955418182f82",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "708635a7-d3b7-4df3-abff-2f1055221c60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b533032e-322d-4bc5-a982-6439842546aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc5e73e0-7bef-470c-90d9-33320088f130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "601d2b57-8a5c-4d83-b010-987c2eacc590"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e84ae38-0a2c-4264-898d-f8f76d0a2b5b",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ef65571-f80d-493f-98d1-8f140a593aa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f78dba1b-3029-40fb-b767-b3a68542faa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eca85ff0-115c-412e-ae39-8f882b8a65e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "935492b4-91d7-47db-9d59-1bc8e9783bbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7944679-9dbe-456d-8db1-2f38f34f09cf",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfa73948-ca97-41c8-a196-cf77faf409fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca77b2ba-c6eb-4e3c-9233-b2e7ed2b4d48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56d9546c-008e-48bd-af2c-e355ffd45a70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f150b798-7299-4363-9411-2212da31dd85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65853e81-e582-4ecf-b7f6-75722fbdf060",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e0bf439-6d51-4d15-97f1-3d2b7eef6d80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "566a5aa7-a7c4-4ee1-ab58-a951aa43f190"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d76eea1-e08c-443a-9b12-070fed6f59b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5738a37a-e650-4944-beb4-ce0053bd5213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30fe9904-866e-455d-bb46-5e1445a4c85e",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee277d29-ee56-427b-a888-b2ad8527af39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39f1b492-27db-48fd-8ae8-5db0d7df4fd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd4818df-c834-481d-8f8c-1e0b84eaee08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a12d3399-c5c1-441e-b469-d30a0024ebfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec106642-a078-4722-b26f-0e0390b75899",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a638a03-f0b8-405f-a9ad-6fba3b219432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33179bc4-6566-4c3d-b094-5f58574d5528"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d53b69fc-b27d-42c5-a23a-88b6b6219415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd942fc2-057a-4e1a-af0c-48ec132edbea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b675fc7-c42f-4292-a069-458bf7f6d168",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98e93b22-cf3d-4fb9-81e0-bc5bd9df0cca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74b58f24-33d8-48b5-b574-4f3f86b21f57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f21e2f72-d4c5-41d7-9d04-c1391d595fa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "414ea020-94b7-4be6-b038-0daf5a345ee9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2361a645-f0ef-41a6-9377-05cc6c18701f",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0218c6b-67ce-4864-9caa-d93f3a1a1449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad95e8ab-e5f3-439f-b983-d617c174aae0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5cb89f6-ad38-4e6d-9418-325b75325ef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f395c59-6556-4fd1-b663-ab259371271d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be6de9f3-98e1-4d1e-b862-cf40a7fa231f",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9307523b-6a55-4544-9f7a-58e95cc8fb2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bd216cd-18a0-4fb6-bb14-b429ccbfa3ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcee7cb3-eab4-46cb-a3eb-821633ff65d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "26ae7214-a3e3-4a57-9983-cc2cda21fa8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1eb80f8-32a5-4088-a9cf-c6f8d4cbc0be",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc7439c6-9558-422b-b626-7e8536074d8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15f1c1b3-ffd7-4e29-a548-cab23fcd7fa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a081fba8-14d0-4eaf-9f3c-76e88d43d0c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d8b89a7f-b557-4648-9031-60f2a61a6d73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7416c07a-255b-443b-81d6-271a1d38ab3c",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0495ee20-f286-4ec6-b57e-313d7b8f2635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9a573db-de88-44b7-97ea-645e84a249f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c04f3420-bdd4-4273-a184-2c4c88ba867a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec264a5e-3fd6-4051-85be-cd57b5171a85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff05881a-ec73-4bd2-a03b-efb9da12c305",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7401d8e6-9478-4b73-bc4b-68a8c515e8ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a71ccb6-fded-4a14-acd0-4e0938f65390"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8920089f-9c88-4a76-a744-18a8eee610b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "68efe240-d506-4174-9ff9-2f2b1ca7e0fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fd17584-8bfe-4371-b36c-76d1d12ac141",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ca41c18-9c32-48d2-b129-a54693a27e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9941e688-e670-4eed-8f89-f61ff6c17e65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee1e6064-fce7-477c-8ed2-d3de88c39933",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "77a1d490-393c-468e-8c5a-eb4a54556b55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2948cade-fdba-499e-b2c7-922608959f2d",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b4cbf91-1f38-4ae8-a34d-f59c2ef1e2fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1380037c-2d48-441c-947d-4a7e31c26b35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e805b239-0538-4464-884f-c035b2e990e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "36e5e7f2-4d77-4014-b90a-389e317e7a77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e012ba9-29e3-4bb2-8498-91dfada109ae",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1e54ad3-3d74-4254-9e8b-aaa9789d373c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53919116-a859-4cd6-ae68-ad3339618ff6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d9427b2-5aa2-4020-ab28-6be520242ecd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac22e54d-fd8d-4d45-bcff-92295e75bfa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ec0a56d-d735-4c85-bdd0-69da3323424a",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c38262b-1336-457b-b2a1-481c0b413fec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81f9f0a8-a675-4594-af43-da6065faf4d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecce983d-8e6c-4b8a-a20c-393c71bdd8e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ba05746-1645-45ee-a915-a96728d899b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec1bdbf9-8db2-4f25-92d1-47da24976dc7",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c39af2a-dcc8-4018-8d34-9e9abe62434a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbb9b374-6b95-443d-bd96-729d7b3ff288"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce723f8e-fe18-4b2f-b30a-a8506e9096ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd1e1196-84dd-419b-8fd9-43c57d3a392e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ca3ab92-eb3e-4e4d-b319-04024a003601",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df9fd715-8f62-4636-ad59-197129db0963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85f3d207-a323-47da-84d9-8e4d06b7d012"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "238bf36d-8131-487d-a94b-e02181e504be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2fcda58f-7af6-40f7-a9cc-e0e5582adb00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb02b4e1-2b76-4022-a980-aadd0effe448",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd9e9df4-ad60-460c-b14d-5be8c8274a30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9e57c7d-69b0-48d6-b736-698e103365f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df58fdd9-88f2-49e3-9567-84f67bf0a3f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e812e501-9a8f-486c-9016-06103aa0c75b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fa41eb1-fa03-4ae8-9dae-6ec40824a0c6",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67e9026c-5ea0-4b20-bf69-a53bc71cccf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcb700da-0625-47e8-a52f-ca2326ce408f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "474722f9-84ab-4a49-9ffe-900d4775bb8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "71b45cfd-3f67-491a-9fae-e5e3e485da64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e9ce545-df21-42b9-ac86-4428c530d864",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9ebd468-09ac-403d-9f65-abcc8342b8bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67e822f5-b16f-48d7-9bb5-bbc649892353"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4305835f-f813-4b32-9c07-2e93e935975e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2729d3b2-c6fb-4813-8564-93d35e8cc55a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d5301a3-d204-4dd0-923f-2c0176549424",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "174d9df1-c4a8-4004-82be-b1624d4e5bfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd575b46-2288-455f-aed7-5afb65c1b572"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd69ee99-5f9c-4306-9063-f320e3f65bc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "fb2ec661-0528-4c80-a303-d6119e19de69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c0f2f10-b86a-481e-a6da-ad8aceff9e8d",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afe297fd-0c8e-4365-b89e-4893e3aa7b13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e13ebce6-c5e6-4c1e-8b99-12604dee9153"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50428d8e-6a0a-4c65-8e1b-7ba26f007b46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dfb08019-87b4-4a85-adfe-e4bacc34e80b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c314c7b-a4ae-4e2c-8ffd-cd5901f9fb7e",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe1fe395-2fc2-4d84-bf85-f3d6918052f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62827d83-4b7e-445e-b06f-ff26bd90d9e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "022fb0a5-b056-45bd-9199-2fbc3aa88caa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "751421c6-fc84-408f-b3d0-b924d8921021"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9bc3cb7-c58d-4c27-ae81-5be0dd64b5b0",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcc162b7-c2ed-4217-a0d2-fa0829e75000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18cb7e1c-0111-4be2-a8e5-f1b84d430792"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "178b7797-ce39-465b-9616-37727f95241a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "de2d39a1-ec9e-41fb-8344-13ab5b1ce6ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f7db0ec-69ca-444e-badf-5d98f55af482",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d71365de-6f13-40c2-b374-0fae4790b15f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6bc5468-f310-45ea-886d-254c56d89727"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e874586-9675-4b1b-bceb-0e5962449eaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d819ef1a-d7df-401e-86db-ebd9679dde98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad7dfd2d-44b8-4393-b4dc-e9749ff6fafe",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4403f1d1-eeea-4b76-a3c8-5fdf9abf3fb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddf2a384-8c9c-43ae-8f65-b2fdfe6fd14a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64c10c40-8a33-4287-a187-b1138318e619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b36594c7-35a5-4062-975d-002fe8313041"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24a55765-49a7-47d7-ab23-feddf797b7d7",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b95f4fc7-e2af-49a7-aa5a-fbd31e2d7874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b686725c-fa79-4da7-883b-3180c9c25738"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0468f3f2-bdf5-49ba-bc16-3541cc51a615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5c0b769a-1834-48d5-b1c7-205bdacf6798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e11cc80a-2fda-4197-8e1f-0af966d67c3c",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a340bbb5-85dd-495c-8d97-a5ad0986d89b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c912617c-cfe0-4e1c-9410-e3713bd93e55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48a7e09e-546f-448a-9ef3-3f5cf96e70ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "d37a262d-9b80-454a-af8f-d2b2f0134e99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3c33e3c-4538-4bea-92a9-45d0f5382ae7",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7777702-969a-4262-96f0-4a89c6edd265",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d19fef5-e99f-4258-b23c-8a761b3e1b40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "423d2d8e-06d1-4bb9-9810-da814b429edf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7d23b36f-c8d1-4836-98eb-759e4319ef80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ca1a0ef-c9bb-4f29-9bd1-d977d527cdeb",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85468f78-c23d-4b00-9154-2c61385c6444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1c71fd7-6d37-42f3-87e8-95d9f91fbe0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "157acd09-8187-4114-ac82-a402128ab75a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "47e123e4-b4a3-4f05-ab35-dd61377d5c16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f63a159-945e-4a3b-b43a-324ba169aae4",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06626c91-6c1c-4590-ad90-aa887cc106d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ed79832-bdbc-43e0-a5a7-0392ae7f649a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3c895c8-85a7-4f85-88f7-e2a9b13789a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad254605-3f5f-4e92-a5be-49b61029e2e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad9cd376-d853-45d3-b1a4-4df0a86dcf98",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ac867e3-c389-4852-889f-38fcc4d2d9a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dc5d098-99ff-46c1-915d-916d79bc924c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b74f5362-03c0-4adf-ba33-d293db4a6991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "16ba4228-5818-4596-b097-3ef7d263b3f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90559214-8257-44cf-bfd9-743cceb44a49",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b16c3ba2-c53c-45d5-8205-054cc0daeb7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c445f9e-549f-4883-80e7-1ca67d7ce3b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "844f3a60-3899-4d5f-8e47-f915ec0ebf8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "164cb9dc-072b-4356-b5ab-71376d7dc291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f80a133-9a37-4e45-acb2-1ca105bd90c3",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9f82868-4046-49dd-8bc5-05e84dd1d487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fba0e314-6295-49d6-9893-07b8592bce89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36c3b33c-b334-4afd-86b0-95b96d63e2f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fce815e8-b5ed-44da-8411-9ca8d56c17f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80fd3cb2-cff0-4bed-b50c-e6220ff5e2cb",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4112b9b7-a0b4-436c-86f4-0b5ed55edd60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b4a0766-fd3d-4302-87d3-3cdd2736af25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1248751-45d2-4fab-8028-2f964e976157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fa0a0353-640c-4db7-aae0-4db842f90505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caaf5673-26bf-4175-b5f0-03e3cfce6fa5",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a424fb5-e2cd-4da1-bafb-c679c2817a3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90b45bd1-b821-4bae-b5d2-949046a4ebd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d63707f-9987-4329-bef2-59d492fdb278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "20642d44-9e0a-4a04-81ff-24ac34b4d5b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a431f26-f0e9-4e80-9d34-ed893435a403",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c39458d3-b421-4fbe-ac08-939e36573662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca0e8b06-d695-439c-994e-7960723379e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00208230-fede-4a0e-a004-6824fcd60df4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "122db7aa-1d22-4e47-8120-1f8fb720d19d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25cc981a-110f-4d1c-9e19-18d20dd1ebba",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be9999f9-6c67-4d77-ac8f-b34ffc4611f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "851f866d-1e28-4f67-9133-2a13ba528097"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04f89d23-c410-4886-935f-0c8b763591ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "182ee3a6-c760-4ae9-93e7-288c4d188a5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef82ef69-3414-47bb-b9ef-d0c1059e3d2e",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba63aba9-5642-4019-b25e-160e0f6f0261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f271e97-23e3-4511-89bc-c655c4b518be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0262094-5a1a-4662-b6de-6fd21ccd3fc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "322feb9d-de33-4537-84aa-f14c479d71e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a96230f2-3040-44f8-b042-3c7fe64ca0c6",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d34e568f-8ab8-4147-bb67-5425eae2df9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26ae7f6a-c53a-4a46-ba2c-ccc1ca92d1f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44aa0f64-4fa4-4541-a3f5-c4c621df26f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6b33403-764b-453e-8047-19c23571073a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65f5ed23-b9f1-4c4a-abca-7f44d3e92513",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa58e6b4-fac3-4e81-b57e-e04561799d78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd165deb-369c-4340-a76d-fd4a0b66e5d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed788a9a-0d11-4dca-8b10-7862c9775472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e83c5a06-4103-431c-93aa-2c464dda2963"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0bfd0cc-7a44-48ee-b5b6-714d3a696994",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6af80f16-84c0-462d-a0a5-19a21eac6405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40f33041-0e3a-4104-a7e5-b327f8bae4f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9275bff5-1e2d-484f-89da-49435cf69fea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "d7034e47-dc0b-40b9-9567-95df5e69060e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e4b789e-1e5e-46a9-9daf-51f511173088",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "644108ff-89d7-4001-8a9c-6e24db702160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e350e54-95bc-484f-8db9-562d1e6a686f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8074f846-a9c1-4b31-9665-a8616fdf0694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d3257bb6-9090-4722-adea-7addbb766ca2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6a80e87-223a-45d5-9468-fd2374f1304a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc7b663b-4dcf-42ca-97b2-9a982e670a65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fe08982-245a-424b-b2b8-5623bbef9b73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbf464af-b6ab-4e7a-b8d0-1ca481d40111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e24cd7c4-7819-4bc2-a9a3-d65b5f21a8cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4c1761a-a229-486a-9347-0f2aba556caa",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08777ef4-2956-43a2-bac6-a49a51968616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fae09da-c16a-4068-b78c-c9de0a7f88a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d14c86ce-3217-4c37-8f19-c667633b12bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b582332a-649a-4ee3-8f21-5e0e7984cd11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1998cf0d-16df-4e83-b29b-b41633429198",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27274b97-d92d-415e-920b-ac8ac6f18602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acb24442-ea50-4f7b-92f7-3ca69508f572"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4080962-fc68-4738-87cd-438e2c5e6fa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "58e7b39a-b3d3-4198-aa12-cc8c90c8b066"
                        }
                      }
                    ]
                  },
                  {
                    "id": "813291e6-7a01-4d25-95b8-63cdabe37526",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80b50986-9b82-4ad3-b9c8-e726bb9196c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9bdcb4d-e904-45e3-846a-d05eb20a33eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f7d9171-9c10-4fb0-8205-dc475cd5a130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "9c238174-2182-4ad1-9cdb-78b33fabd168"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64294a44-5313-4915-83d5-964e70676d32",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1babe1c4-0faf-4344-b57b-5984c662793f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70c0ffc4-51a4-4ff3-892b-b6fa4c1fb64c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "089779e0-2f86-4c0b-afb1-92a70fca6108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d253d7a-e687-4e2c-85a4-ea0b0ce00cbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81d7a277-4ca4-4859-abb3-269493f789a9",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ba7985c-f53a-47fb-ace4-71687a8cae69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09a4cd14-9907-439a-b080-ab288f4a0a10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "640fb96a-5891-4496-891f-a7b295fccff1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "87a750e2-d5c0-4cbc-bdc7-f6e7b6df0c4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b60b40b6-40d2-4576-8d45-9336a426f34a",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b10d0678-7abf-4a25-8870-818658d7bb47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d6716ef-0f2f-417e-a85e-5929e162719a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aba9fbb-9917-4962-bc1f-bb5e19a66eac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c899090-73f7-4600-8d0a-33d515cdcfa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beedbf35-dcd6-4926-a980-49704cf92744",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3455e4ca-45ec-4067-ae2e-cfdb5190420e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae9566b4-a619-40d9-a104-6beaf6a7a96e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af0ecbe3-c7ab-48a1-ae0d-a98272d3152e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4fdf6e9c-a896-46ff-9ae8-db25fa6c7300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b1f5113-e13a-451d-9a76-9a95df9adcd3",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1250396-41f3-4432-9804-87f0de6e629d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcb89643-4686-4723-a5dd-4626ec04112d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4978d552-796b-4f90-9b1b-2ece4e98b5fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "831a1844-0409-4eec-b5f6-d2e6340ebd70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51a5ad05-9b18-4b68-b992-ac7bcab1f0b0",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "739ee74a-2fdd-4460-8f9a-7988b84cd625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9ad080c-59ae-48e1-9fa4-ed2acf9193ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c042e2e-313a-4257-a78e-b4baabc6c9c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cae81847-5be1-465a-b769-65b116227b64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de579bda-e32d-4170-ae29-28316018f68f",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97208527-adc4-426a-b4be-70be8210270b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9db4433-9f05-4064-b70f-c9ce7a303537"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcde1e0e-b2b2-4db9-bd3b-1b11ce0f7044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "61008400-5289-4d8f-ba16-3836a1edb774"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47ea1528-cf9b-4691-8446-3140efe7f499",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d0dcb16-e23c-4cb0-b57a-2bb652ed8468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76efdf59-c690-416a-9649-d116eb2ac6ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "412f9a30-b1ac-4f98-a69a-1120027553fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c112e4a-2daf-494b-a990-8098c4748eb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9867d480-ee57-42b3-b362-f9b698d411d5",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb34baff-4da1-4bc9-8dc0-4db7ae412172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7325921a-8060-4de9-a56b-171dee162626"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84cd7b7f-f6f0-483b-a81c-c530b8927838",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "27587308-236b-41de-910f-d254f10ad0be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce6d3c1e-601d-4913-8f6f-b773d3d1f12d",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff40895e-ca7d-4232-a1f5-e352f291f61c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9c8c9f9-d5ea-4ea7-9574-9488accc2cd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "743fd186-857c-4162-81f0-e938071f5a85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e472d899-eae2-45b5-b7ff-0b2d729d91c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "149f92d0-b1aa-4687-a7c9-f83a1edcd690",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87a0f7ec-3cf2-434d-9c5f-8b859e4f0af6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d59b8a8-be5c-40ab-9d28-a65bea813420"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4297a908-4de3-422b-8f08-eecce024f21f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "edf37e20-5d16-4274-80df-1baeae7d0283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "998ca3b9-0fad-4b76-a13e-bade2da7e08b",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b55ec03-c737-4101-aff8-f8ae0cd2030e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a110b07d-e1dd-408d-9e05-9b2fbdf8bb18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cdbd12e-d350-41ed-9e20-f9ad8cd391d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5d818570-fdb4-477d-8082-42795bbac2a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e277645-5c1f-46c0-911a-8cec33ef4d87",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa89c591-9328-4bb5-82d4-bf96e7469bbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "feb46552-ef24-42ab-9889-529492bd0ae1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3507d094-8ccd-48aa-81a3-c14b18eb0bb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "53a6a5bb-9751-4179-863d-dd995d44f069"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc50811c-e22f-41de-9034-5a9a8223faea",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb381053-478f-4681-8071-9438b0604741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5096e29c-7ed1-4060-967e-1187111d0f7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1004f2da-c382-40c4-b029-fa1e45738e92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc515636-635b-43be-8e01-549bead73bd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81fd44b0-0dce-4bb2-a99f-6faefb124230",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eecb581-ae90-422e-9fcf-ea78e36ca703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82993bd0-676e-44e6-bbf7-5daa06a72f68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8205537a-b486-4b63-a020-654ea85d0ef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "42e2ab49-3667-4fec-90dd-aeab73b906a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a98cd152-63de-42d4-88b9-f279d6debcd1",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78faf5bd-0498-4c55-b247-702c2f8ebcdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f16c927-952d-45d9-9fea-360ca9ccf513"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "934578ab-ae46-45c5-ab80-769b0547427e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "11a69a1b-275a-4efe-bc5e-65cf33e8664c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42c1aa00-4392-442f-acc6-55da691dd88c",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "612c07ae-4c6a-4a31-a9aa-7b1b7803696e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a3882ce-a5e0-435c-bd93-af03e08a088d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8d12d47-45d6-4a0b-ac30-a7c4792cb830",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee24d07d-dee0-4f58-a366-57d50f7cdebf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09eab7a0-195d-418a-94b9-b2289bfdb5cd",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a3d4567-48c5-4871-b7ba-8e89ec04ff44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63b5cf20-3bf8-4971-99f4-87405339bf75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd92a25f-f1ec-41b3-93a9-34b186ae0e57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "de753ed0-d96f-40e2-b076-74c86b21832c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8531a9bb-3408-44c7-85d4-4158962db0ca",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80990c3d-a7a3-4e29-aa09-e7d0e90d0202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "802df9fa-d152-4b5d-a3d9-cbe001ff8b2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "078fca20-14b1-4826-8f02-ebb2b5e9418d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3ea4a42f-2e43-4e74-bc3b-0e389155c128"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e303d234-35dd-407e-96a8-cddc819ceb53",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17adc74d-3a84-473e-b359-1ca2b7ee6edc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8009d26e-8cc4-4ecf-8ea0-3679f9d97f51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3561171-8f78-43ab-8566-972882383d76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7bff4b8-556c-4d2f-9021-565510277495"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e7ed1e5-497d-4c8e-a8dd-fa6f8a1601bc",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24ed34e6-877f-44d3-b5d2-d47f43aaba17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75ff1b5a-7a64-4e96-82db-f5eaf33a1135"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bce7e501-c961-49c2-81b7-4f94637eb793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8f73eab-0f51-4ab8-a02a-7494724dab74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bb843af-860d-4220-8a92-7861eb04a29d",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "feb50584-c824-4fb0-9301-e492c90e11bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3674220-8c41-481d-814f-8542414d9490"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c3fa53c-6901-4a36-abd7-e45f3be97081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea33dfb2-bbaa-478e-93b0-f5f28b93ae68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67a9e0f7-2607-40b0-a8dc-20caf3da7b6e",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecc6c089-5c5b-4613-a54e-6bbf32ed1a46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c19cbda1-6067-482f-b6c8-a5aebb2cc6fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e3d6614-5fd4-48e7-9ada-f5d2d37924a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "89dd42c8-8f01-432c-8196-88c46239f84e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2687de0-1a1d-482e-8b0e-d027c0f66f0e",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4528a608-fedf-4312-99b2-87a293e51ac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c324e01-5880-466d-b572-bbf42c527606"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a99efcc-71c5-4a7c-a70e-74d78c4a9187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1e0c2330-ef98-44d1-b460-2618e45f15d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5edc2912-2ff6-41ab-923a-f11a15e97114",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4f3a57a-732b-4460-bfb4-97450f1f92c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0af5efd4-e3d3-446f-a445-2f10742e56f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "005a69e2-c9f0-457b-a35a-dd745985fba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d853afde-d910-409d-b06f-1a4cef075483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "836dae14-a0e0-47ee-aa1a-b33620442536",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "274b1326-a15a-4c05-adb8-55dffa825fee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "110a6315-e33a-4331-83e2-fd0c61203079"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5fff69b-70cc-4ca7-9763-4fe66a9b6657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "29a3429d-16ba-4e8c-af5d-245e51ae8035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e27f82f-c7aa-4939-bcab-4276701e72aa",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "327c6926-c956-427e-bc48-b7e437b4a183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "616b70e2-8030-4fca-a6d6-bfae3f45ed15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65b2b67c-0c88-4cab-9fb6-d6a4c414428f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b570e62f-e03a-4866-a9bd-37795f2b7287"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a31abb31-1f2c-4db9-94db-72327297f9bb",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30c73f5e-70a1-4b2c-a4e6-816df58fd03c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95182cc0-bca2-4a79-b76c-78cc673e5d18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a586d3ef-9b06-4323-aba0-0f2e13a580ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "902127ee-851a-4e3f-854b-ccbe8a916893"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c2ca931-d6d2-4dfb-9cce-bb99ad1916f8",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1be2cf0a-9de1-4be6-840c-9abf0c8ddba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3541a7ac-f284-40f2-a7ac-1b0c0f8bfa3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cdf62f9-f2b6-4130-bbff-51af0994e827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "dbd2b292-70d0-4748-b541-1e28c35d6481"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b96b9d1-1d5d-4d6f-87a0-8cb6b8564c08",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83c8b3a6-4980-4dd0-99ec-2c5b4b6c6a99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "289d89b1-a1a3-49e8-a0f3-925f20a7e66f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fadae9d2-cff7-4514-8c0f-031c86a27748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "29fccc9e-c796-42e8-9872-8b97781eabfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddeb7743-1be1-4624-a5e2-63fbebb49eed",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a9135ba-b82d-4a65-bfd2-9934b98ae93a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "5c2a970c-2e30-4704-b692-7b2ddec085fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1401cbc-399a-4735-b00f-c12aecbef06a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "6698430f-bac5-4754-9ff4-b6e9016937c9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d9f3719e-1ba9-42fb-96aa-67c644624179",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "79887379-c928-4064-bbda-a2bb95bb4c56",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74b6110b-3438-40af-ad5d-a6f5656355ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2d96f77e-fffd-4aaf-85d7-b22a9a545b6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aec78119-f986-4cff-a54a-edb4d1d447e0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4eec2545-58a1-48c1-a266-e42e29c9f439"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "748690e8-1ddf-427f-9bc3-a7d28968cf58",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d9c606c3-b390-4e30-bfb4-f23d95f27198"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2869ba1f-d95d-4ff6-998e-e166c8b6cb67",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "65674bff-ba4b-4c2e-afcf-909814bb6433"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fa1f10d3-16aa-4470-a7ce-7f1696b4a134",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a28ce239-ba53-46ce-8f9c-1fb48a52601b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "dbbb1b6d-05ca-489d-8625-1e0c1f95986a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "87313a80-b541-4655-b6cb-7ce43faa8517"
                }
              }
            ]
          },
          {
            "id": "b084f7c5-3b2a-49c2-8cbc-cc20141c2583",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e4a18a8f-fdae-4ef8-ad93-c21660e09b35",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "de74396f-6ce3-4c2b-ac14-613729942740",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "690555dc-f76d-4342-922d-af90f0755919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "96e60cff-cfd9-41d7-8607-4d1f144a30b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f72e7dc7-a58c-4f45-9367-32cbdd7702fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f07a32aa-4658-4ec5-81ba-897dba7f9297"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e6110309-7466-4ef3-b688-d494d1c3a096",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "896b8220-cd8b-4be8-b17e-acc5cb32a96e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4908e48a-3b37-4625-8826-4ab96ad6e2b8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "26b6dd86-3a3c-4f9d-a932-1f044f50d2e1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0a3f62be-f357-4447-9404-037b080d5c37"
                    }
                  }
                ]
              },
              {
                "id": "d447c573-3675-4ad2-8a08-5a23ad92d551",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ce5ccdec-ccef-4f22-9bba-4a2e4920ae5f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ac6a0361-0a12-4c51-bf48-2f9fc43d1918"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "475b7cef-76fb-445f-b4ad-95fdca302662",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e78282fa-9f46-4f6c-ab73-bf484dbefd2b"
                    }
                  }
                ]
              },
              {
                "id": "0a969022-6db2-4767-b88b-0c925f3caa1f",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f45bfb72-2efb-4b92-b6f1-46607bffcdc7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "80362951-a8bc-4b40-a74c-a64dbda7a73d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a9d51ec2-03db-4937-8cae-28fd0450807f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "eafb5454-3f24-4433-9116-294d37404c3e"
                    }
                  }
                ]
              },
              {
                "id": "e8b3f699-cb44-4ba5-aa19-38ab525a4470",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2fa1ec15-3453-44e9-8836-65efe8140e71",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5b957c30-da0b-49e8-8e51-e5c8da83bfa2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bab67b5a-f881-4a15-b233-ac239d54c28e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "e3087647-9801-4101-8433-9246068dc583"
                    }
                  }
                ]
              },
              {
                "id": "08e8da29-bdaf-4fa2-b482-4c68bd446b18",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "02f08f4b-1dc9-4d3a-a07b-eb399e642377",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a9b9096a-b3eb-4159-b084-be912cd5bc7e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5c81cac5-aea9-4c33-a7e5-465069b31298",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "c50fbb36-1ba0-4012-891d-50988a9ab7ff"
                    }
                  }
                ]
              },
              {
                "id": "1261eafb-4f21-4067-a99e-77321b8d8e93",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bb17b7af-7df1-4118-9bb5-c2099361adee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b63271b6-4bda-436f-bbb9-dd220636e8d0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ab760188-ab02-4b6c-a1a6-1cf7c9ed2e0a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f7cc97f5-bb68-4dc1-8582-3b96628047a9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "495fd664-a53e-48ea-a1f7-4d15074507e0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "62e1b082-4023-4293-bb3f-ef99249d27e2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a515172d-a871-4780-955c-18fc988779df",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8414be9c-0380-4f74-8edd-f667fcd0eaf2"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "47629d8c-7040-44f8-8e08-9dedb8f7a012",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "c2ae00f5-7248-43fc-a943-2d182ed207eb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "20457263-d5fb-4dad-a464-6a179abfcf18",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fe17f156-b5f5-4221-bd9d-6cda387cafaa"
            }
          }
        ]
      },
      {
        "id": "bafb641d-d898-4613-980b-70bdbc1a08bb",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "0766b10f-e7ff-4b56-a6b5-950c86d2b88c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "edd4e406-9b57-46fd-b477-64bdec49153f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "cd0b0015-e2b0-493b-8a1b-8a012d2a6ab6",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f4fe565-a607-478c-a7a2-0a3942c68773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c935d38f-2ebf-48b3-bb9b-38756a08abb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5d1e9cf-e5ed-4ab3-ac5b-3f525c96291b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "394e1521-f316-439c-a6cc-ffd9daf1a94e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2126ff7f-6f74-41e0-a57a-2384ef0232bf",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "389bd08d-2683-4c2e-8779-d92312934b01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c5f0c40-ec6e-4f71-8871-bc1eec718bb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f8ecca7-aea6-4ef1-9662-2dfee5719d33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b659468d-22ff-47ce-8ac4-0e3f28da22a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19a508fe-1cda-42a8-964e-16dda8dea1c5",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ba7cb3e-a4be-49aa-a5e3-dfc36314b794",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "714d21f1-7212-460b-8add-396d6953ee01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69dcd097-d27b-498c-8d24-eb745608e16a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ca3ce50-3723-4a90-9929-7771896a5a98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a10f72ab-0676-48bc-b8dc-191a097d2a6f",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4cc86d2-ac0a-496c-8873-fd691b527544",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15673e12-fe3c-4766-9262-540be68a0ea6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a63ed94-203f-4bc8-8fe0-4cacf9a28331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "be8dfbb3-59b6-40f4-a346-d1810f0fafae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80f10b55-eb8f-493d-9fe9-8dd6a9ab9d86",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1630218-95c8-49f3-b1ee-420f39e3b025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddd0cf7c-bdb3-4c93-bc7b-794b473d7bb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "034f965e-e3ff-4a83-8b4b-666039e98f06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "285cb6c9-780f-4eb5-8b31-acd3f85d86cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47ea7498-8c25-43d6-aac5-5131df6f5f5d",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30831631-ae6d-4788-923d-1e2f9381ed2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1727060-e988-45af-80eb-6f2d4a18b5fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e627aaf-d719-423b-91da-4afbd1ed228f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f2cdea51-5d26-4ad6-ac94-2958709d35ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3488fca6-3056-4ccb-9d5b-2256b5e05b60",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdfa1882-36f9-4a54-b4dd-8e9a988c5166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffdc7084-5c4d-4dca-85e9-49ece61ad1d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1c0d350-2a22-4757-95e7-c6623834b6ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "678bcd8d-01ff-4693-b4af-b3c9b4f3fdab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc01487c-1b0e-42a0-85b6-14d13f36e4c8",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77ccb6ce-fdda-449b-ae13-0cf673981321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e37e67e-dd9c-4093-a089-dfad0d9c6e16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1171b982-8034-4388-926b-304f4615055b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc168b9b-14cf-4a97-8e21-b3725ee04fa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16520c1f-0b41-4e62-8e77-2cf614a1477d",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8057dc7-ff7f-4032-91f3-ee8c123e28c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "416ab914-e1c5-43fb-802c-27bba77de58d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0b9ce61-3df2-4515-a0e9-22b1c1670661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c07ef67c-8a18-4a62-9db5-61fa7b10975f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6775b6c0-5041-457e-94e1-54e4ecde8124",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1616be6-b761-4abd-addd-3fd0a6a447b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dde24789-b519-44c4-9622-7ab0c6ea546c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bd60af2-0a69-4883-932d-ae00224b9108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "490b05c8-ce4b-4f8a-88d4-44900147eba3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29903a8b-6b3c-44ea-8599-76642e300be5",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3f0e12f-8a9f-4748-a436-65ef05c9187d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69132e68-f6f8-46c5-97e1-1fed4a2ccc13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac5c7e46-6f87-4cdd-87f5-689997bf9fac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "51ce3db8-df7f-4d63-b9bd-f4e25a7ab269"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60d99526-665c-48f7-934d-21444410feb0",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73b54eed-14a7-4c54-9b81-0067cb066d48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b68b206-1f0f-4361-9ce0-cbfab6b06d1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a392ce7-611c-4225-b533-fcc2a40d25f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "22f5ceee-0693-4427-9cc5-17323e808f9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1903cd45-855d-4997-b94b-e55c95190bb6",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0eb578e-b0d5-4846-b75c-0f66bfcdeaba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3caa02fc-3afb-4030-a853-0c3ad4eca0eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62ce378a-8b84-4bde-a308-ff48bd53f2c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b932c0c5-8618-402d-82b9-0d8064f683fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47da2a44-b847-4cae-9dd4-d438d5bddcca",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd1bc320-7383-4f07-8cb3-e4068a1ff7bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea045c2f-cfe2-4a8f-bbd9-2f1d35c41ece"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbc673bc-6176-4c20-8ebc-ff38eda748cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "c69e7882-5938-4527-b987-9b474b418c2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "811546a7-0f09-4cd1-a050-75313993d2f7",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "545abfc4-5749-49f7-9477-0cfcd2dbab8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cba816a-001d-4dd0-9eb5-56a812d9c732"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98cac5cb-1781-4f4c-a5c0-febbb86ea147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb6bab37-eabf-41f9-aeba-a40aec554101"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c423f06-29ba-4c30-afeb-755170e821f8",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70204d8d-61f5-4d43-b11f-b500e1b30cad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d80e9c85-bfd3-4be8-8a88-d0a60b54f141"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11293fe2-fdfb-4d9e-9f90-ca11d370aeaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "199f54aa-eaa2-4c5a-b386-7134401a1b2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f034e5b-45a5-4959-a7e5-57844665ff1b",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "819aea57-528c-44c6-9c65-1a2dbc2e5d2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42a2e9fd-4084-44fe-b5e3-ef396c348f35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b5ce2dd-4b86-4579-9772-6379efdd50d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "935cf541-5c16-4263-b084-da0232d27a5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ced2db6-59fe-4f53-8d5b-a5625ffc967f",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96471060-4a00-4827-b2f7-3a17cd2808f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd473962-f771-4428-ab6d-c22117fa50d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c53174d8-ad05-4a39-819e-a350a6625573",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e52291a-a23f-4bda-9cc6-3fe549f89f1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a93698d1-0920-4c89-808d-d2020f0b17d7",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a57a1f49-c170-43b2-a1e3-e2b5c279a101",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "733a38fe-bdbf-4804-9b13-06a997c21cc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11ff6229-b940-44f1-a017-9e43399fd18e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d97373a2-f435-4881-a227-4589f7e84c30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "869ee76a-2eec-4939-b73e-2b5b476e801c",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f1dd345-78ff-4e3b-9ca9-0aa65f27775d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a6a382b-b525-42e4-a0db-51c7b4df75e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b55d603-f4cb-45f8-bda4-211ba1f93cc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "99ec1fbb-1d04-49cb-bf8f-1c88f8bc7abd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebb4c22d-cf69-4038-9b38-b201c3acf714",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0ab4589-b805-4e9e-a2e7-59dba3c9a496",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e378e28e-566a-4ba2-bca9-a0219d4ffcdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "974168a6-5c62-4b16-baee-a8f5e57c44be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "611f5d92-b1fa-4235-8b42-b03fce92399f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "795adda1-94a6-4212-8c94-35f485d98ebc",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d93e0d61-c503-4bde-9410-87e50ff212ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12aa7928-20a3-4b6f-a0d0-0877fa5271d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "317bbe7d-8f2f-409c-80f7-fcf57777871c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f112577-0070-40e0-8564-0ff57140fd02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "064f9fe3-fc2c-4bdc-8e34-1a174e4c5656",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85aa17a3-6e38-428b-96d7-5873e745a879",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c3132bc-85c4-42fd-9d43-fb6577f3f4b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "532be99e-7646-4302-8d96-13b89cf24fbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "32cfbed0-d4e7-43eb-a225-602fc5ef71e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d644e5ea-de8b-4f6a-98aa-3b90a99bcc51",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd21cd5a-de1b-4602-bb41-64d781d63439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86590daa-f0cc-48cd-8a7a-e257a048bcaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0170a48-dec7-4011-ac23-0a1184bebda8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3d39f44-ae2f-4d6a-a75e-3fd1bbaa48f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aafd0d9d-af72-44f2-9ead-24be43d8bc15",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d40138fe-4100-4653-992a-d1027f9a06fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77bf1b25-8447-4869-9c0c-247002d72785"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2db049c-401d-4796-b047-6cbe13156645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0975da0-bd3f-473b-bf3e-5ce2660332fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7023a17-0a2d-4d85-b78f-41757bd67ba1",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86f5964b-b5ca-41f3-b2de-1e00ccca4e3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da6e5fb9-260b-415d-aeed-ea5457550f9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7442e819-d439-41eb-a6c1-b66b5e672e5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "84cdd368-bbd4-4f21-ae0a-10e9bb6069b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3438be46-4862-4300-9053-1ca87e36f2b4",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06176107-9f72-4938-be45-6949c2fd2076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ecd6f27-776c-450d-9259-2fc59bd337b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fc1425d-9100-4de2-a5cf-b3513a82b6d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d48d40a5-096f-4c53-adc4-67965dca4c4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc130d11-2651-48d0-a28c-70decf861dc2",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "921b93e6-3d80-452d-a899-9c918af5b154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccc07b11-f8e3-4d23-8be1-2b1df093bbc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "791da158-0971-496f-becf-657bc9b7476a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ad5f4d7-27f8-4af3-be0c-1ec496280589"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a9e2ef6-91b0-4ced-a75a-faf17d818627",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02c0327d-faad-478e-ab55-e95a1a4b55e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67c9672c-04cb-437a-9869-bb098af829f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b9cbdf0-5812-4cb8-b3b6-4c1b958f65c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2b0879b-b873-412c-ae3c-ffb4e1c36d31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36759f25-6db4-4128-b3ed-bd382455108b",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d00ca65a-f58c-4623-8dc7-52346d3a964d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30d4d6bc-04c1-46f9-87e2-8b83d9bea3dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50d01514-be0a-4506-9d8d-3a0e89a3d92c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc4d605e-13a6-4384-8073-57b807adee3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e66208d-5334-48e7-8748-dad188e650e1",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1a7aa74-2b91-4db0-a922-60914bb760da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b1fc1fd-41fc-4541-a697-645872293a16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "745e54e6-0d2e-4c51-9ec7-97584d56c780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b819f05-52e2-4fa6-a163-6ca3c29da219"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d4a46ae-b64f-4b70-b9ca-2c2a6f35ea89",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8dced16-0963-4681-a166-4a21b5697011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62625c57-8d35-4e1c-a3fb-c4b44efa071c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "547bc388-42da-4ee6-ae95-ad8ee8a2c861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f48f01d2-e939-4f6f-bcf3-5491d74cb458"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32e4c360-74dd-41e0-ba60-c4e16d6eb9ad",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "114d5ed6-c9b3-489b-9670-f059a45dd130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94d77a26-7038-415e-afde-476bdad5f405"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9482751f-7f34-4e0a-b922-d3b3946610d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "db2fc12d-a8bf-4c1b-a895-e87b95b5dcf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aa4bcdb-99e6-4ad0-bb46-1f2a1d7b5791",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d5913b0-a492-4190-bffe-5592fa9baf3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4689d6db-d22a-406f-afd8-97711ed5f027"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fac666cb-5ab7-4985-b975-b644ec0ebc37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5eb7356-36f8-491f-83e6-f9de32f64fa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "487c549a-219e-423b-afdb-2c7f6e6c6e3d",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d0afc37-5e04-4c2c-a64e-25731f036bb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67fbacfb-c041-42d4-9ce0-3d9cbc5634f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d7a7cea-926e-4bed-a326-7b4c15150a43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "31fb93d7-2370-4273-b29b-cbe51adf8e27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aab8d53-a2bc-4fcd-b3f4-5444b9461139",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d97dbbd0-ef17-4358-a622-d4a09c746702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13e4906a-f757-45fe-bf14-0475aab5c85f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d0a8588-5dad-4820-8756-7d9cbea14ec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "44525250-0776-4763-940a-d22eb5172676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12f5e777-62af-4faf-904d-55ee113a6182",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8704a967-f862-4e36-8447-499d1fbfe0fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a407c5f-054f-431d-ac33-9fa3289eea6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36d1bdd2-b48e-42f6-a610-d0e6a375addc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ef2bded-564f-4554-af3b-511d8363ea7f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5bcb2b20-cc02-4cb9-8f81-8025a2e55aa8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "953c86f0-7808-49a3-9ab9-86dd0586a952",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2e90d27-9f12-4e04-af65-1bd2b4f90673",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "7a6dd026-7b95-4ac7-88d4-e4bdaa035ee1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91800430-218f-4b78-9585-e294cd9f7f00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d5516b5d-ab28-40f1-b58a-818d3d142464"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "020fc2d4-576a-4b85-85cb-cb6f80c4126d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2b4799e5-5fec-4f16-b588-b92b928e64d8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ba374758-3fd2-4092-8e2f-d69dc46b13d5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7cab41d7-7083-4ca3-94c7-209bc44424a6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d2d823ce-d190-47b8-9cb6-2cce2982208e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "30526945-0322-4feb-a3b7-719e4e601a0c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0c01c5d1-7831-4d3d-a590-a6c0451fb53f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5f73faff-559f-4902-9d63-6d33517e37e4"
            }
          }
        ]
      },
      {
        "id": "57c20e98-24f9-4aac-92fa-c1b336a0172d",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "ed75a0fa-cbb2-40ae-ac7b-adcd7a8c7a42",
            "name": "Negative Testing",
            "item": [
              {
                "id": "07d27a42-8a69-4556-a3cf-69bccd867e34",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2a83864a-f97c-4df2-ad07-1c5f3b5ee47e",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "035c5763-26bb-444f-8c56-b4c580800cd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7854306-0663-4256-85bc-93441d6c7e1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "356a12cb-7a24-436b-8919-9f90a29fc98a",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1af66913-12f6-4ae2-a31e-d985760e5244",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa50d0c4-0f2f-4bf8-bf86-0d26b0c344a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7a872c7-85b4-4aad-8066-940c11fca00a",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d6a46a1-fa70-487f-8dcf-927f167e7bd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87cb9604-b8c2-41d9-8120-1254f8502732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f7e1489-9658-4dbf-933d-dc04da030b49",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a407a32-8754-4d90-ab66-b69bd8901806",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a71c220a-29d9-41b6-93ff-2a5147f39cf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7acccd59-316b-479e-8f35-97e3a7e21363",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc1934db-2fb9-4cd9-9188-63ff6e4ccbf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a83ae4eb-1740-4b58-b30a-2d2bed4e0f3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a32cf6f9-b482-4325-800a-d521b504de24",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da99871a-077b-4df4-926c-bcf6deb3adfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad252d60-cbd1-4d04-a0ad-f811e1d7c2f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "957fbd11-6a71-4950-82eb-a2e0db210ff0",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b0216ec-d946-4a5b-870d-ddb85877ae4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bf7a4dd-6f09-4dee-aea4-594312f2ecf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33d77b06-0e23-422f-854e-8555fb897098",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf848788-cfb4-4065-bee2-2a08f676dfdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d70d1e5-c7ec-4b4f-b165-bb090abf5ddf",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0ef7623-bd8d-4669-ab7a-8165159604c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e1b5274-c88e-4860-8056-61f6dbab50bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ec1d13d-23e0-49d7-bef4-28b5bc2444ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0908af8-8940-4420-af41-34db1b696082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98ecea92-9090-4772-9386-21708d91bc25",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aeb528a-6b32-4353-98e0-70d90dee1334",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9fd567d8-d709-4305-b1cc-292e769b7b79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "377c9869-60ac-41c4-be00-e8ad0433a602",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43e98e32-2f2a-43e6-aa94-1cd5dfaca1c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b818b6d-377c-469e-9697-0f80812f4bd8",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a92c52a0-6e0a-4e5d-a1a7-a6ed11c37852",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9026a6c8-83fb-4ee6-9378-3db30b1d4a02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6672f7dc-7246-4212-b954-0d6d45468fbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79baa831-c915-4e3d-99a3-574a03bbaf70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b4d0184-1414-45b8-8608-cd8bb2dcb3a1",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f6a52b1-c606-4fa6-aa59-574b2192d3f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5900ba31-0022-41c5-9d68-3958b4f9811a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "331409ab-ced9-4dde-86ca-6913c8d0cbbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76a56710-d289-4e67-86d1-e389b96b1002"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34ef6a83-7885-4d31-a22c-9aa3bc93d961",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03bfb9dd-07b1-4115-9d76-fc4449f8d247",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4200b321-cd5c-485f-88f2-4d2096a8bb3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c8f750f-91ae-4af3-951e-2f1f651f0f8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f291af9-9b28-4ffe-870a-3594d18447fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5754d29c-ffbe-467d-b8ec-09553db26d00",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc49dc58-3f29-4aa9-b1ba-f8923c05885e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a71c2960-989e-4a7a-beed-e131e5f17e33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8715d6d2-7973-4ab0-a338-b835bc89d903",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d458fbf-c4f5-47ee-ac37-4eaac7f6e932"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23e572e6-510c-4776-93a6-d3e0273fdde9",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66b14ab8-a275-46e0-9af3-7f29cfa08dd4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "005db270-4d8e-4400-afe3-ca676cfe10ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9c8d6f6-346a-45a8-a6bb-a3efd2ab47a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88117d0b-451a-48d9-8057-d3b710fbd44f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d450ebc9-0ad7-4e81-8a8c-837091c2015f",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e09e0d1-8771-46f5-bd71-5bd025f4144f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1fd29ec-ed61-489c-8030-2f383f0979da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0ba4eeb-755b-4692-9874-14f4b23b45d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8daf5999-c9e6-43e4-be0d-28d73e51875b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1a2d8b5-cec8-4c3b-9f79-e0b1175a3bd3",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b53ca32-dabf-4244-a505-1e5bd158dcd4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7cc4b61c-0be1-498f-8f3b-69e144bc5116"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf61abac-b852-4e12-adcf-b3e76e031416",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e449e8ce-6d88-43bf-b5d9-2a00542bc960"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af5c2ace-8bd8-4833-9028-fb9bc7b5edda",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e597c9f-a81c-4668-b02b-a1d810f607b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bbaebfc-68b7-48b5-8fe1-243231d5b1a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e49b5264-5679-4e5e-9655-c348d853e7d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47db68ea-2a29-410e-8fb7-4e1f04f19783"
                        }
                      }
                    ]
                  },
                  {
                    "id": "596ff176-bc09-42a7-8990-d7ac186269b1",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "212bce4c-eafe-4805-8395-6bf55b83af03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b26e2a59-7a01-49bf-ae87-61eae9aa0f05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dea1664-d5a5-49a0-bc97-f59eb3a07046",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1ca6b8d-b22a-4dda-a7f6-4e95ed548a79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e3c90ad-eb95-4af1-98c3-36b234352a35",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cd4bb43-00f6-4708-bb5c-0b80fb0ac31e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b90b1029-9b5a-4daa-92bf-2e9e3fed6b69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8e6f1e3-9c8b-4f18-b251-262b37ed4dc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67ad68ea-5175-440e-bf0d-56a094fbf338"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a338c1c7-97a5-42d0-908f-369ae39bc950",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb8687da-1629-4a9c-ae70-58af5dfcee7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b51a0ba4-a144-4be7-99bb-ecc0d4f33e47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84fe0d05-3baa-44c2-a0ed-c44697689dda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f96c1b4-2e1b-4820-b7a8-34dda87d5911"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82b63da1-7e97-4d12-9d06-42bb93fcdca7",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a018874-485b-473a-81de-d0c8c880b322",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7038d684-4f17-47b4-864b-b49983752f20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e28f6dd3-fed6-4b64-b403-e4f6a262eac1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b604115b-4438-4da5-b616-a54f02e0eb4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6139c3ab-e98f-4041-972c-c1e22cde5fe3",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93829443-26a4-4793-9653-b3f505968ee9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c3c3bc7-8bb6-48d4-8fb8-87bdd9713e3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d178bd4-43a0-4e87-9832-780b890da473",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1264477-85ad-4e05-8837-9ac14d97e37d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1b510a9-b3eb-4056-87d1-835e08009acc",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7b6c9c4-7746-44d6-9ac0-39f7ab6e03dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "955c088c-962b-4b74-87a0-c05cfc1f0668"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7a15b0b-023f-4b26-b019-3bdddc4ea01d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3251bede-f87b-4f8f-b3c2-e62b271cde21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2b6c0df-deea-441c-b9e4-373b0086d368",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "596f7f63-7217-4855-bd48-57a2b0a42d07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c16d6b5-bdbe-4270-b834-d9510dd1fa29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "056f6b36-51f2-452c-8730-b23961121fd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "090f8ecd-f025-4c30-99bb-40d993480615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "794c6111-0203-4fc9-98a0-016c3763dd85",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b08a0102-9e06-41be-ad92-b2d0f436c0de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8c13513-1e7b-4b6b-8435-b33e1f84b7a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b38f926-1c70-4eb4-acc1-69195e7a810c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9fab74a-c05c-4890-a3ee-af01b20b9d67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d3446a8-32b7-45d2-be41-34ca491f36d0",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ec6f938-00ea-4fc8-a4bb-559b290fe548",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f55b4a03-0114-4357-91e6-80097ca398ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a4be9d1-4695-432b-ba07-1b289ebbf455",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4654eca-509c-4e02-a9ae-428bbc1e3834"
                        }
                      }
                    ]
                  },
                  {
                    "id": "022f7879-d6b2-4d02-9da3-86dc16653fd4",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fe13254-45ce-4213-a3bf-390aab930175",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fe176fb-6815-4007-9505-d9e3103ba24c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4057a019-4f8e-4f44-8948-ac287b1b684f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e81fe2b4-6df3-4db7-b81f-d3471fbf2dca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02c5df0c-5fbb-4d49-888e-23317ac2006b",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45f5ebc2-279f-48cc-bab3-5ac72d07e49a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80d117e0-7089-4aea-9816-9fd6192ce3f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f093269c-a558-4802-9375-ecf611fd28af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43296e24-cd10-4725-a269-b701f1071c83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83a34c53-bef3-47a5-b550-bad175d0f56b",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8660359c-4e9f-4b6e-9a49-a0ebabdbaae9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e75aaf74-1d1c-4729-bf90-b250fdaabb90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c66dad17-8807-4e6b-8545-3020056999a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d252083-6010-46cf-9699-074b483f0535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c61c07c0-0f2b-4ba3-8109-d84c05ceb394",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fbfc096-e353-4288-9c7b-2132b666370b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56d3026f-468d-4a82-b74c-2c3b811a80a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0d271dc-55da-497d-910c-92ea68b72cdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d22b3629-509b-4f13-b48d-34a74c77eee9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0529cb75-9786-4529-9b86-14cfec91e462",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa64858a-9481-4140-b5ab-408ca3dede3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c2808bf-dfb3-4a2c-bbcf-c6781e121d0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7506563-ee5b-454e-b92b-f2fe97db3baa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5fe9115-871a-4ea0-a03a-8adb40e6cd14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e0c28a0-5452-41ac-95f1-f9a2d3f3662a",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eb66121-64a3-4833-94ea-d4de400cb13d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f2040ac-3605-40de-9faa-8d764ae78af7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c3eb7e0-d15f-4f94-88b9-a91765a5dd6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e81db410-d437-43cc-b7b3-64611d5c1020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1febb61-a039-402b-9254-a70cfb80ec2c",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceff3506-e9d9-4202-8095-96c596288790",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e7867fc-7b37-4739-9777-f5b97d3e0c3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3cde42b-e3e7-4ea5-a2b7-c280f616833f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea0e70c2-c4cf-49ba-9b50-c494b39287e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc1f62f7-ef1f-4a10-a4c1-a3f91e569db6",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb6e7c13-4136-4b8a-bfc8-b625bc7b3874",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c5f1cf0-30f3-4f00-bdc8-a0d519331e28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cbe85ae-ce47-4750-a024-4d6d93b1e76d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37c03686-11b6-44cf-afef-9de8cf147898"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14e4f451-fdf7-4031-b137-1d781bad3787",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa049506-c57a-4ebe-a237-5b64de20fb72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22b983ca-dc9b-4df7-94f0-c2b112ccfc4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4f2c69e-4571-486a-a559-5af773e77bb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6226ca98-8f26-4c0e-8c1e-efa58dc5afee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9481236f-e2d7-40b5-b554-86ba5a59479b",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b90964ad-e418-4130-9c4f-8b06d3f6d47a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56230a64-c0b6-42d8-bb05-1c321f97af94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11682ca9-4ca1-4006-8dc6-cfc25b0424b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59e5df28-7a07-41b6-b0a8-c603d8f91d83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "656402cc-3f9d-4896-b6b8-1ffe3056ad40",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b2af3c1-39c9-4b96-b7a5-9e0a200aaffc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c63cd4d6-ea3f-4399-b4c2-a910b4c06da5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eeb4d4f-020a-43e0-bbed-e300588866a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "679d324a-255b-403c-8baa-b7c71e86113b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cf98038-3a0c-4a1e-a0dd-386ea8c9b736",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b03a0b1-90ec-48d1-a22a-4c246d858045",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0166fbf6-d731-44b9-bfe7-4d76197c9093"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85e629f1-7e6f-4171-ab35-43307a8d0c72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4586700f-2bd5-49f9-9a0c-b7d156921be5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cb54140-8d0a-4f69-bae5-1bdf8746e3fd",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdebf75c-6e03-4147-986b-5ce6bee7cd83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6929f6ad-9580-4ac8-950c-04dcf39afb3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab582b44-4f28-4aad-b84e-b6fc9a1adeba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b46d3e7-70db-4ea1-a8d8-ab99a83e268e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b53cacf-8327-492f-935b-f092685dc68f",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d74e5540-2bd3-4e5c-86bb-744a6f06d5b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90d1905a-eb5e-4e03-b54e-484bd4646ec4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fef8977-6e26-4075-b3b4-a5130ad3effd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ca811a3-6797-4b9c-84cd-12a319314e5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0618c5d3-0516-4aaf-95b0-d82e945b7873",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26220a5c-4022-46d5-8bac-4d7a1c7f25a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97bfb58d-ce4c-40cb-a41b-624168aea8fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad345e52-3765-48b1-b1f3-beeec15d6c7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3f09e06-0f27-423e-b1cb-73f9db6a180d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "869c8d84-4534-4f19-8c87-54888805661f",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39b72583-386a-4414-be6f-5c4ffd4f6260",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4ece657-2345-4b5e-8c93-8ee54801c0d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "feb23fe0-a72f-4019-9459-15870b94788d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcd640a9-af36-46bf-910a-57ce820fd677"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebac1e94-cca2-4d58-a8d0-5af4daa532e4",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c23fbe49-b1b1-4a8a-a4f1-9a5530b39d6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc63ed88-838c-456d-b71c-187b9823be23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "249a0a91-8b18-4199-860d-63c3acc7dad6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26b7364e-8e1f-49ff-a209-a43256c058ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "455b0d82-d7b8-4672-af05-402107bc438b",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d12b330-8f0d-4a7c-962f-05011d2bf3ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c59a675c-aee0-4da0-bc1a-da42c49092ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cbff72e-6e72-47cd-b1fa-2203d3c20f26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7999daf7-6edf-46e8-b151-76c97202e527"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a0c70ff-d018-435a-98e6-feaf1cc94999",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3026f971-031a-47bb-b1e9-3a2dac4321e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4f32eae-ab79-4af6-8843-c6baffa1dff2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be34a14c-0143-4e6f-8e3c-455307f9e342",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ea7708d-433a-41f7-a961-fd2059ef6921"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7168796-1c97-495a-a517-4a38ded1e051",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa624d40-8694-44cd-a3c7-82baec291ec6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "387f6178-4f8e-4b30-832a-d37f7b68dca7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a6d8e23-ca52-4780-83ac-10bc82a00589",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aea33956-3f85-4546-90ed-83c93b7aaa44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c384ebed-48f9-4f1b-a07b-dad15d3ee526",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87f29948-95b0-4f4c-8cf9-2b6afd1e5a03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcb778e4-db22-4bb3-9aa9-ece343f8c276"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ae70bc3-00ac-4b15-89f4-54ff0cce8c42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d1f399b-a20b-4ddd-b887-495e72913740"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba10a877-fdf2-4a34-8041-07069ff91f67",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20b8f7fe-15d0-4082-9f6d-5d0e7438b753",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4f033cc-035a-4443-ab5f-1f9aa9d8a50c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e329b097-fff0-4f95-98f6-c75ee07d0285",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3797237b-a7b1-4fca-973e-bed7deb5c85e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e4f7124-9af7-4132-b245-07219caa2564",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f9ae7f1-7eca-41b7-9fac-9c975eb7e517",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ee1e86e-66ba-4548-86d0-680c2b7b9e44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64721021-d1e1-4a13-95d5-c095f474f01e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "921306b5-3564-4e4c-aaf7-4309b0a48979"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82c124f0-49cb-4890-90ee-fd2074457012",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c08d41ca-a2f4-4bb5-9f66-6ae379f5d054",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d76c750-3967-43d2-91e4-9005cd1de4dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b1679b5-e226-4a6a-a098-77f532d97967",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e32f9421-c94c-4f54-94aa-d64ac4013e65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e46efbf-9140-4580-aeb7-41e4586825bc",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d962c37f-6181-41cb-8bb2-42c2f5900a7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65ece749-ff1e-42a2-8bd6-6319a9bb95ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8538f85-7c1a-4aa1-812c-92583ef24c5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05830e2b-2ea6-4685-b77b-d0b456eb85d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0938535-29e6-43a2-9190-9e5ae355f115",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "982dda0e-9b54-48fe-b5a2-f2fae85f1895",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83136dec-775d-499b-b234-3a508e312c9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a0213f1-9f43-4e8e-b8cc-bc8c20f79d44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96d03873-3b7c-423d-8419-b0218846d255"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57073682-c899-409d-a0c9-a5608412d9f7",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "febd46f6-433a-4fb8-a694-19bbf3fddef2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b824cf1-363f-4a6c-9b1e-bc7f359b12d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1813fadd-2fb5-4b14-86ce-ebf1c85c2bdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a52f39c6-f0be-4d69-8817-5e93bd92365a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf935ae8-0695-4fb6-874b-1976cce7757c",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf79d050-ecd8-45bd-892c-9db76216a3d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65c44170-3d07-4277-b03e-45d1626ce763"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fe90f9a-b771-44fd-a5af-8bb4186794a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0cef1df-e656-49a9-8e8f-44918a7f2322"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6395956-83a1-4316-bc00-c564fbdfc072",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bce06451-07eb-4486-a77f-560f368a0b11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f7f3dbf-9137-480b-be0e-cefa17fe755a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2325ed1f-d95e-44d9-891b-8e215f5fe0b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "102d6c60-1a4e-4ced-aa74-a26c4035c855"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67d5d425-adac-4b1a-9ac1-be6d5d1f7d25",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "547fa38a-a3e7-4992-8d27-1210ba932001",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "956306e1-cb42-448a-a4dd-96f86617978e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ceab58d-7b9f-4c5a-b30e-c4c00898e1ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38237249-f101-4f55-8d99-68eb647b106d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a5ba563-9e9f-4f95-9e12-5ac6c3d8bd5b",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b03b5055-2bdf-42f3-b691-798679a1e04e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70060eab-3fcc-473d-a09e-f0f6c007cd16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "008adac8-0061-4670-bf5c-2acd00b5cc3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3abb43b5-09e6-45c0-8edb-2a5468eaa28f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91f462db-ef76-4d03-9a87-9f01758d1b36",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73c8849c-f576-4b7a-82e4-8d6e2eafd734",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6060d7d9-faa2-4af8-b3e2-8e777dda5758"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "baf3c812-c923-47cc-a6e6-7db3b209bdfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb175b4e-b951-4c6c-8270-f5c96ec7a551"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9f373ae-c635-4c43-a985-fcd35dbee0ab",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0048d8f5-91bf-446c-a38c-11c0fee91600",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a3e6fb7-e5ec-426e-99b5-6f9b8e61e00f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1274004c-8add-4a72-b674-a3a9af937f5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64c2a3f8-be6d-4d53-8c3c-8967def09610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1fb658c-fd75-483b-b0dd-f3fa43936ef1",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d47880ae-5c1f-4e97-a0b6-79a8c29c3157",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60cce26c-fe20-4e60-a20e-82c22997bc5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cab210e4-9667-4cfc-9352-c61327f49abd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "834e7629-60d1-41a2-bfbf-27047ea5b58d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fa3800c-a23c-4c02-a014-3fce86b85d74",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c74b320f-a3f8-432d-848d-15f12e27f0d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49a67c0f-5b46-4389-986c-ce397c14d518"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "306d3d19-8b2d-4dc5-b80e-96425cb2d0a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d29374f-01e1-4bfd-9c0c-821a04799c58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1fe2fdf-68d6-49ad-b84a-1034ce36564d",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cff50193-3f31-4aa7-b291-25363ca528db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "024a1685-ed24-4215-b2ec-c11f97e24bf0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "610d1fc7-ba3e-404b-8a96-246a88a3a147",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "434dd4dc-30cb-45c2-95c6-2abf2a473e2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d63814bb-1014-4ca8-9bb2-302c2d162254",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a13ec597-f589-482d-8525-601fe3e4e8e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc701ecc-1347-4fb9-916d-42b1c3867b4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1045bdbf-da6b-48e4-9ead-0d9a3d065033",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ea8f3de-87ae-4bfb-ad18-cc0a3d26857b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2164ba5-070f-4b71-9747-9555ca69db49",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e85ad63c-806c-470b-8399-e242bbae18b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ad370b7-c57b-4804-a75e-2819658f5d11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6c19c97-0259-4ff7-ba29-8bd79cffb096",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cb735a1-be49-4a7a-be24-b12c2d2828d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32cb985f-a471-4ef1-b107-9facd7ebfd1c",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41764977-4762-48b4-83fa-5fcba173a39d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "218109ca-2c7b-4468-9868-1bb2d7b038eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74b1495e-5c27-440c-ab73-e305a5082aec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6440aac8-52d2-47ee-8f36-909b624a284d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96a544cc-36c2-46d9-970e-e0965211a577",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cda2874-0883-412c-ad2c-568634633a6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08796d1a-bc23-4c97-a95a-f4ced0ddf21f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc5f1b83-1c34-43b8-a37b-3bf1547ae7e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f154921-2c96-4f7b-9b84-c62292a15e88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "206f1275-2672-4de9-adfa-c9376259c6cc",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75da29eb-f386-4b1e-a4c2-d8f1461a928f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f0524a1-81c4-4c8f-ad85-b29cec2bcfb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65560706-73d2-46c7-89e0-acb69b3f815f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05ab8042-73b6-4ad5-836b-d553e4d86227"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b402e50d-33a5-42f1-91e9-348100b5812c",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9f36e8f-9802-44af-a4b1-2cea0d21e42d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d71eb30-6700-45d6-9385-47e826e4443a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b7dee74-35e8-4167-a45a-1a4276d4a134",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d7fcfd9-495e-42b6-b114-8415e954fff1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2c6268f-5903-425c-8d66-7a7ed02e5fe6",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ddf9c7f-a255-4e47-987f-7eeb8795e969",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c2f1fcf-c7b5-4d75-a8cc-64bd55d8e328"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37b8eb1b-e0d5-4f8b-be78-94fd03068cde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5415fe3-a7f6-4126-8120-5a510d2670ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91dbf477-54df-4e8d-8c7e-e5b16b1a3404",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf911756-bdb5-4393-9a47-a8bafbd71979",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be2e05ee-20e0-493e-8914-9388e51c6e49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "878e3a49-99bd-445f-8c9b-3124d0e383f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07287b35-12f3-4c2a-8cab-1b38ed525b25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec522eac-e12c-491f-95d1-2a086d190071",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57c94e61-bfc1-4e08-a4fd-59a063722faf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a07208f-6ac2-415a-af64-5571fa218b46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be28329a-b26b-47ce-bdd2-d20341907fa4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32f74ef2-2fdf-4268-9d52-6b27b0a683be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59f387e7-3f5a-4a6c-9bf1-bd3874b13139",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d727c5f6-3089-4652-88b0-5192567addf7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ff11bad-23f5-4365-93f2-caf65df50bfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "731599cb-a3fb-4a86-acbc-53cae7ba31f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "487826df-f20b-44b7-9a91-22f5a7e71b72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0db077ab-04fe-4c02-b050-4675927b1a45",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1472bf22-3b48-4b9e-a5b5-ace810238a1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0808c767-3f91-4b0c-9675-e5ddbb3924fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b722cc9-b470-48e5-9f34-db8c10181bb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "706af761-9374-494f-82aa-64115770023c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69a08732-0e22-4854-b34d-94490014a3e6",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d13a21f-8057-4b50-a488-8d711775456a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3745e19c-bb35-4b14-bc18-00cb7b9270f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5229bd65-ce3f-4c6b-8fa0-b47880f3c2c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c494590-2a5c-476b-bb69-e05f9abd8ce6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cfb8428-a38b-41b0-95da-a647f903ae15",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec2f0760-e340-411a-a67c-4c9d8c054b05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "072df5d3-8495-476c-b7c0-bdea766afe06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08e6aff4-fe9b-447e-a10a-b4ffa4e0a12e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd3d352b-3ec1-4f81-9795-aedfbbac4270"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdd77e05-adb3-4a51-8178-a69a112000ee",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "393dff71-34c9-4926-838e-af25787abc22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b271be0d-50ad-44b4-8062-ba70609970c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01d4ced2-54f7-4416-b6db-409776dcf7f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ff5053e-7370-47db-846f-283eaaea16ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92c54340-bd8e-4d2f-8fe6-f8564953521d",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7558275a-232d-4c31-84e1-b9e85bc1c9cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5cc74005-6cc3-4b32-a054-158b99b42cfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69ef4214-156f-4e37-9d99-013cd8a701aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7249e717-357a-4058-88f7-b2947fa3b1d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f34c37e5-b37a-4c9b-b927-13fb514a7ba9",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b496812-74cb-4530-87a8-8df410c96c15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71c0340e-ef50-4671-96dd-64bd2454ca41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b3b442f-f3ea-4e53-b696-d9b2ff89bd90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a96d91f-f7db-4798-a333-3afb7e94f84d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34101048-647a-4715-b850-bcb6b0b02f0f",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be10f3e8-907a-4356-9d99-38a04d9558eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cfe9fc11-be83-4a17-94c8-a9f09afad261"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed2a3901-1dd9-4615-beb9-bbb48fb78b33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce81e113-36dd-4303-9ba8-c3b7ce6a773e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c681a93-d02e-4528-9d4a-4471c34c9925",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71a3eb96-ed54-4464-a20e-34127783b0fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a266c8f-67a8-4e87-97a7-ee181281d162"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "886f93f5-9520-488c-b876-68d0a8dd7a09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5ef4728-0cdc-4192-b8ec-3e38c37a835f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d83dec5-968d-4c98-8f61-1d409614020e",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "452ba85b-654d-4392-a389-89525379090f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "739f7db8-65a3-4962-9e32-959b0258fe6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe159b4b-16ee-4602-baee-8c23aa69b48f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b6adebc-4788-4a18-ac89-946edec0c2e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4a2666a-0581-4365-9c40-a7645a8661e9",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aa9476f-9a23-4675-8324-87cd54f2df13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8241dab4-137e-46a5-909a-f07581b6de78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fe6705c-6867-4d26-ad67-e92e0bdbdb41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e38a683-46b1-4d1c-bac9-c02374af3440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "525b49d7-d425-42a5-83da-cc7e1cff4b6d",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a1689d4-5d78-4123-ba0c-c9abb0834269",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c35ca06-8e8a-45b8-a806-84646be4994b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02f3ba2c-bd9d-40f3-a739-30c5c7a4759f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04719716-f7b7-445f-ab4f-a69613fc6a36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd74f18b-7c58-4772-ac91-7a92671aae2e",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54429b08-9269-41d7-a831-6805f561d3a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5dafccc-6944-4300-8043-fdcc2660442c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e5a7733-f8af-4421-9762-166002f37390",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f800d04-edb8-485c-91e0-34df583c2ffd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ab7159a-05b4-407f-bd3c-09b1be8ceb98",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aa2a35c-87ab-4d28-a46d-742a69909bcc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8707240b-1e12-4c8e-a78a-131f54622c6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bd56e35-4119-4bb5-a2ef-c05804ae0635",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ab00c8f-4ede-43d4-8212-372b80b6739a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad03f0e7-7fca-4633-ba50-8c36f1bed8a9",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb9fb27d-a51c-4b82-b4dd-cafbb7add0b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1b9c927-a566-40b2-ba4a-874f8f6cad0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d4cc5f8-8f3b-472b-8ec4-6720594e37e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "732ea5d0-c352-4e35-9741-52fd7d81dd0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5276e76-4413-4809-ac22-f6074eaf3b26",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b94563d-e179-4055-8534-000ec1297a39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae4893e2-6f03-4316-8711-261d65c5bc6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6816d29-458e-4cd3-aad1-ed4108bd4fe9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aab4528f-ba30-4198-a043-344b471d255a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e55ef07a-bfca-4905-a2e2-4c1243f7fc8c",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25d97a3c-6d03-44e5-8d99-0aecec743393",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f957c921-ec47-43a7-9f90-6c7104519928"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2758119e-2d79-4b5e-9f3d-d071a5ac5fb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce154576-a28d-427c-8e07-a47a5aaa05af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4717b71-f2ec-4360-8282-7253a9663925",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13008ceb-4d9c-4f1c-903e-d792428dfcd0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a7368a4-ce71-4659-9e4f-e3483630d994"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbe05a68-c082-4ab9-85ba-c86dbc6077a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a63c706-25cc-4a34-b309-3032b449b9d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab68a591-046c-4792-85e7-3b7d38fb8c59",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7457fde-d9ce-44c4-926b-a32d281fc39a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b58bd64e-1d99-422e-8c4e-604f10cbab23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01e6466c-13f7-4f1f-b8f5-5ae9250010d2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cc8adf0-4362-4f9b-9fb3-7d1580311cc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db9a4656-ed43-4c7c-b262-5768d0d74369",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d964171d-6ab2-4131-9bc6-a3a1dd296b79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32cb867f-1531-4b54-84f9-ea53f7e9d9d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13e8979f-e721-4cb1-891f-0265aff27408",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8eee15c3-cfce-4428-885f-adec474e44ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0cce53b-e7c2-4c6b-886b-d85f3ed295c8",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "731b0af1-569c-4261-a4b8-1c0c0efde053",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d1a1e6e-1b82-4e12-821a-4a42e136cfe5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9728790-91fc-48fe-8060-04473ec69ff5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8158ac33-dc0f-4d8c-9e78-ba3885ce1c3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d04c92ea-4420-4f27-b307-4ab37ed530a7",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aa91ebb-2208-4243-801b-062452780d37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75a98944-cd5c-49b4-9484-5b700283b326"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3b80ea1-9ca8-4ac1-a097-6ea8a9de2cf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a205ffe-2659-4b0b-9ccc-b3b59323c243"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a4303ae-0ba1-45f8-9077-8aef3d412e64",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a081ad00-3f6c-4d84-822b-ba624c35ba91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e309d59-cb9e-4e3f-b695-67a115e6a844"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dd1a49a-b210-4beb-a775-0a253856ac25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2621788-b5f6-4a34-b685-f7593cf2a499"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57e7c5ca-985f-4564-821e-b80d52fb2408",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eb6a937-6aa3-4c5f-8390-2f4e5e26e9e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c605e412-cab2-41bb-911f-eee8d6b87f4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2acf174f-cdb2-4f2a-827d-aa4bffe9f399",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "817d2188-7a95-40a2-a699-f9911c7b7b65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "876d602e-713f-4df1-ac46-11e3ac17088c",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d58e7aa-b3b8-4fa8-9556-dee41fa653bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c60f7d5-d983-4b81-a4c4-487246bb67ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00032f4f-e00d-4c4f-9a70-7b4e71b3feef",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66206003-f2aa-46ea-a87e-1bceabfc0e33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3578ae3-4d94-423d-94a5-b5c517daf392",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d59a609f-f64b-42fa-a9bf-db0576e222c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b7f26fe-7e0a-4f47-815d-c22ea2c8b19e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d014531-196a-406a-9156-3b73c8a59c04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "634e0297-0e35-43d8-8312-8d5f5e590d7e"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1c4dd83c-927d-4edc-9c3c-3aa1bde930c0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d1beab61-512a-4576-b353-6a66f2423746"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9eaddc0b-7195-4aad-ba74-abe049c6a34d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "78d10ae5-7a6b-4a11-9f67-7862d63716cc"
                    }
                  }
                ]
              },
              {
                "id": "292438bc-80f1-49ee-9a99-06cfd50329c5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6f6ef67b-f417-41dd-9d52-5ff08877d5fa",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d1605b5-4159-47e0-99f7-b72787c3f3b1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "17c302cd-8931-4439-b709-4021227cc92b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d8bcdd6-d5b6-4818-a0ea-20821ebbe2f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "adbc0f19-f27f-404e-b05c-e2394c596426"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e0fc6bf3-2ee2-4192-953d-d8b52c2befa9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f6b45aa0-6b2c-4865-ba4b-c8cfe43c5210"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8e9d80b7-383b-444c-9bac-7278912605ab",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "14e0bdf8-2192-4e5b-b542-2e80500cffc8"
                    }
                  }
                ]
              },
              {
                "id": "96d6bec4-c284-4917-ac79-b00bce538ba5",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "c837b7fd-7007-4161-8b1b-6d6ba648f0fb",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "684bfb76-efbb-4d32-bea5-cb21e062273b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "46fe858e-71e1-43d2-ae65-d07e76474cf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6243cb6-91e7-4f02-b72e-168a6bb89955",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0d8d87e-c976-4c37-ab51-b76f8492b859"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5f1ae77c-9ca6-41a3-b362-df27bd8e44ed",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b778a769-c35b-4b9a-a592-21355216be49",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d240d7d1-2d46-4f03-8f50-89df02c50571",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "1943a772-e452-4cd8-abbb-5e040fabbd41"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6f6456aa-1ca9-41b1-aef3-41a03a141cec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "37cf22b9-37d2-4975-b917-916ff0f9de97"
                    }
                  }
                ]
              },
              {
                "id": "cb7e6668-a99b-49df-9446-5bd94ab2c041",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "30ad1e02-d9b9-4dbf-8610-95a5331b7256",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "563a6c6b-26bc-4cba-8598-df5e5faf0325"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4f956d6e-7023-4b20-999e-492455e2365b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "45b27fc7-844c-401e-8ffe-8e38a36f697f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e827adec-f9fc-4df5-9bbe-c70bc4125b1a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "2a781e5e-fe8c-47e2-a8dc-abab61363ff7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4e9ac35a-fa82-4b51-9377-d34d60b43cbb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "de1dcd77-d3fb-4285-899d-fae52719cf7e"
            }
          }
        ]
      },
      {
        "id": "f8a1b86d-a024-4501-8e75-8d9a5c29280b",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "92892dbb-027c-4556-8d11-6b0a5594ed20",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b0c86e48-50a3-485c-b94f-9ffff9e8f0fd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "56679f24-39c8-4483-9cdd-a87e4e0c6452",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "669bf1b8-fcce-4b5c-89c4-b56b5db7680d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "dd63d3c5-65ea-4849-99ec-ee7def42f0e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eedef098-1f9d-45bf-82f7-41f9b253b5ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4aac39e5-4c20-45c0-a335-4dee3fce9f5a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "07a3e263-f6a2-4690-b1c9-8e6783026cc1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ca31e783-196f-4243-90a8-1e0e7ced75eb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ab961221-4f89-42a7-9eb3-337d4e068c64",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f9f3dae7-c36f-43bd-9ffc-a7cdf70f7902"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "78fa165b-64ba-4670-beb3-922621ed02ca",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "8e408f36-6e86-4efa-bb73-51e00c5337a6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "114c82bf-00b2-43a5-9f27-ab85efc2892b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "07730dc0-ade6-4d54-a1fe-3c369e93a8b0"
            }
          }
        ]
      },
      {
        "id": "d3d6c424-ce97-4edb-8123-b92b2b4c3f5b",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "2f96f899-681a-4387-94d2-20b843e177b6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2495f0b6-d51b-47db-9c7f-cf4fbc66d9b0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "06d0abc4-1e81-4b23-9c8e-330d75a6d7d4",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73e0d26e-29d8-438d-835c-12cf949709b1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "394aad76-dcdb-4dad-937e-7a725714a5ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2842542-27ce-4060-991f-b8bc83c769d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7242530e-0a03-4cf0-afc4-1678796e0007"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "39fb77ad-a64b-4682-8f81-7ea175ed11c7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "38cec3e4-2777-4be4-a0b9-928db21d424d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9b956fd6-85ec-4791-bbb9-56b7007d033d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e6acf40b-550a-4a4d-86eb-a3d5a9b914bc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c4a28880-87f3-42f0-a2fe-d1fb9c90d2aa",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "78658402-ab3c-42c1-a6bc-3690cca2b8fa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d6a09506-5c76-4dff-b1ac-15ed6cb56b50",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cc2ade4d-4594-497b-accd-d872c034f903"
            }
          }
        ]
      },
      {
        "id": "8e4cffc4-6831-4c18-a094-29b56b92b7f9",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "3d3083c4-f82c-4224-8759-947618337955",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3e3acb64-1014-4e43-99a4-517916c3b9cd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6b3be04f-795a-4263-8f70-04e7704af019",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12784c01-7c14-415d-beeb-2a27a681f5e9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2d12dacf-95b1-4695-831a-5a5f0b37c4e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "070822cf-0f1c-4ae4-8f88-584e0b3008a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f0b24060-390a-4ef4-9afe-dc9fd5a88e06"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "697f3273-9755-4341-b356-4405debefbab",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "176586fe-bf54-4a2a-9b29-4244799a2ac1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0807a630-8fe2-419a-aceb-134744dfded6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "234eb2ac-aa37-4559-a768-12247ddbff0d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "06ec652c-57c4-44a5-8cd8-30a3eec8b132",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "724acf56-03d5-486b-a86d-c97bb2248df3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b81c3515-7342-4c10-84aa-ab1c00614b7a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e6968342-343b-4de9-8f7d-8a2b6796cc65"
            }
          }
        ]
      },
      {
        "id": "4ffd42bf-24ed-49aa-82e0-a121f862b6f8",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dfecee1d-d780-4862-84ff-6b38be8383d7",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d58633d2-555e-4787-9145-5ba2ef80826e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "5aee5cde-e440-4647-8053-d6e5b88ef12f",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "69c80f5d-240f-422f-ab69-eaeefcc5487a",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "765af8a3-628e-4cdf-a662-91a72bfa673d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 111.57142857142857,
      "responseMin": 21,
      "responseMax": 830,
      "responseSd": 95.38817341850039,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1719103275689,
      "completed": 1719103312258
    },
    "executions": [
      {
        "id": "3c11ed1c-1db4-4b51-b156-a6e98f94e03d",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "8ccc3351-fe68-4453-944c-18df057f1f73",
          "httpRequestId": "3141ea6f-d0ba-4566-bcb7-d4ff4e4ac2c9"
        },
        "item": {
          "id": "3c11ed1c-1db4-4b51-b156-a6e98f94e03d",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "f711b527-0874-451d-903c-d2b66e83af4e",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 0
        }
      },
      {
        "id": "56bd3136-4038-4130-b0a2-b118800fb93c",
        "cursor": {
          "ref": "841cbf8c-49b3-408c-af72-d9eadb7d8ff1",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0a0fba45-b460-4c04-9184-59e2f92ad375"
        },
        "item": {
          "id": "56bd3136-4038-4130-b0a2-b118800fb93c",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "58c003c1-56a7-47a8-9118-5608affda241",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 0
        }
      },
      {
        "id": "b5967e77-ecdd-4721-bbdd-0a4a2f1d5b16",
        "cursor": {
          "ref": "e141d723-4269-4ba5-82cf-4d8ac3c4ac51",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "52fad445-245c-4168-b234-4ffbdbb68352"
        },
        "item": {
          "id": "b5967e77-ecdd-4721-bbdd-0a4a2f1d5b16",
          "name": "did_json"
        },
        "response": {
          "id": "3bdfbdf4-14ea-4b24-bb6c-a040fcf5617d",
          "status": "OK",
          "code": 200,
          "responseTime": 374,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fa42905-c8e1-433d-9fff-21c10073f475",
        "cursor": {
          "ref": "03f3f4c9-0a5e-42dc-b42a-2960e58d70c4",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e68a3529-89c1-4b2d-9eca-c63e19cdd884"
        },
        "item": {
          "id": "2fa42905-c8e1-433d-9fff-21c10073f475",
          "name": "did:invalid"
        },
        "response": {
          "id": "e150c9ff-7c35-4ce5-b4b0-349a505f4443",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fa42905-c8e1-433d-9fff-21c10073f475",
        "cursor": {
          "ref": "03f3f4c9-0a5e-42dc-b42a-2960e58d70c4",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e68a3529-89c1-4b2d-9eca-c63e19cdd884"
        },
        "item": {
          "id": "2fa42905-c8e1-433d-9fff-21c10073f475",
          "name": "did:invalid"
        },
        "response": {
          "id": "e150c9ff-7c35-4ce5-b4b0-349a505f4443",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d13f69e-6070-4414-99cd-0d78ffb99388",
        "cursor": {
          "ref": "2446e6da-6974-4caf-91e9-959d12ab3d56",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "6a986af1-e771-410e-a15d-52fc1ba5474a"
        },
        "item": {
          "id": "7d13f69e-6070-4414-99cd-0d78ffb99388",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "8974742f-dcaa-49b9-b2a7-1d7ff3dedee9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 166,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71cbf357-f9c9-4715-9aa4-aeaf7623ff56",
        "cursor": {
          "ref": "db98f133-35c4-4712-a843-f20408029431",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "dd6cc2ef-953a-477f-a53d-1ea644a86c95"
        },
        "item": {
          "id": "71cbf357-f9c9-4715-9aa4-aeaf7623ff56",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "9e8df3fd-ee34-4934-8c4f-199afecc4939",
          "status": "Not Found",
          "code": 404,
          "responseTime": 75,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf0b43fd-7d26-4c66-887c-ad6478e059ce",
        "cursor": {
          "ref": "cbedcb6a-22ef-4cfa-af60-7ef96e62fa0d",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "25f19ccc-55f4-4cb2-afaa-3631c7183611"
        },
        "item": {
          "id": "bf0b43fd-7d26-4c66-887c-ad6478e059ce",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "39b4ad1f-21a6-4cee-adb8-649f3d99e4f4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ae4096b-650e-4c41-a066-e7d86228d519",
        "cursor": {
          "ref": "9e8f8fd5-4475-4f74-b1aa-441bff7a89ea",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c17b7bb9-d821-4fd9-b0cb-3ed461cc8a12"
        },
        "item": {
          "id": "0ae4096b-650e-4c41-a066-e7d86228d519",
          "name": "identifiers"
        },
        "response": {
          "id": "e9f18baa-578a-4259-bc82-78060062e4d9",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d91d34d-7214-4984-8ab0-62d2c9d24866",
        "cursor": {
          "ref": "cc58d59c-3f55-4ff5-aa41-f7f08e2ec340",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "27089ca7-7fac-4f7a-90e7-b83d5bc84aed"
        },
        "item": {
          "id": "8d91d34d-7214-4984-8ab0-62d2c9d24866",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "4a37d1ed-f2f9-45cf-975e-3c4b62f57df0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afcaa66b-3daf-4ee8-b4f7-e9d6b3decc5f",
        "cursor": {
          "ref": "ca3f44f2-c293-48c9-85e1-1e8531786397",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "58b6cf5f-a1bf-49a2-895a-9f78dff451c5"
        },
        "item": {
          "id": "afcaa66b-3daf-4ee8-b4f7-e9d6b3decc5f",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "86b685d4-79b7-43b8-9d72-f8fc7d474414",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb6defc4-1852-49f2-b0b2-232f794348fe",
        "cursor": {
          "ref": "15cc0bd3-8604-4e71-a39e-2ba7e928ff48",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "be5c26f7-99fd-413f-9131-933c77507623"
        },
        "item": {
          "id": "cb6defc4-1852-49f2-b0b2-232f794348fe",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "9f12a4d9-14ff-47e6-adf9-80961e2cb0b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4399e53-c98d-4e5d-b6cb-ca2b3535e057",
        "cursor": {
          "ref": "e8e32bb6-2af1-4cef-8106-9307d4d26f62",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "9c69e64a-5169-445b-9804-a6728269eebb"
        },
        "item": {
          "id": "c4399e53-c98d-4e5d-b6cb-ca2b3535e057",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "d5e338c1-c530-4471-bab9-75de2130f5a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "460216a9-3095-4fe7-984a-0ac2644f426e",
        "cursor": {
          "ref": "b6c9d87e-3245-4fc0-9f54-74130b32eaf4",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "84b0d4be-af51-4cc3-8e8b-58ef9a3d6282"
        },
        "item": {
          "id": "460216a9-3095-4fe7-984a-0ac2644f426e",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "a6e33a67-432a-4e56-a05b-5b87cf7621f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6ad98c4-6584-4a40-89d5-805f44cbbcdb",
        "cursor": {
          "ref": "83ee79fd-8f96-4a7c-9f2d-e5fd47a4b935",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "f5a76f66-5af8-4621-80d4-5b2d52189e27"
        },
        "item": {
          "id": "c6ad98c4-6584-4a40-89d5-805f44cbbcdb",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "c2a08536-1692-4025-9994-db351f9f175c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "185b3c5d-05b7-4e35-aaff-6e8ca9bd98f3",
        "cursor": {
          "ref": "18e31d8d-66e4-4010-acb6-046fa7c077b2",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "7db0525e-67b3-458b-9eed-3415f472cfe9"
        },
        "item": {
          "id": "185b3c5d-05b7-4e35-aaff-6e8ca9bd98f3",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "f3c0be36-25b6-4793-a2f0-8bb42f38f90b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff3b233c-31bc-4734-a07a-f76b889efb4b",
        "cursor": {
          "ref": "86bdf197-e4bf-4fca-9620-95b6ec3c10df",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "7eb9e33e-3e17-4a7d-8c21-d66432b415a2"
        },
        "item": {
          "id": "ff3b233c-31bc-4734-a07a-f76b889efb4b",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "82ff7e7e-9498-40dd-9d80-58005da92095",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "287c55d0-8e43-4a45-a697-bfef03aca3eb",
        "cursor": {
          "ref": "e96cb5ed-3c45-4621-8a05-d876d9f0fd9d",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "6eaed285-7373-475e-8602-668cdcc653a6"
        },
        "item": {
          "id": "287c55d0-8e43-4a45-a697-bfef03aca3eb",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "ecf3df82-2b3e-4c2b-ac4a-529a0b8504ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8409f17d-f8c4-4967-9232-b1c7cf7851ed",
        "cursor": {
          "ref": "f129f7c8-6e04-4364-a57a-efbc302b014e",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "e41d5882-39b2-4bdd-9397-55ffecbae6d4"
        },
        "item": {
          "id": "8409f17d-f8c4-4967-9232-b1c7cf7851ed",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "f429e67d-bd96-4e12-946b-3c404c8da3dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69909600-9a16-446d-abcd-caddde7c4272",
        "cursor": {
          "ref": "9db06adb-302e-446c-b4df-f9646ca81f84",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "cc8989ec-7bbd-4c70-9bc8-1abbd77fe28f"
        },
        "item": {
          "id": "69909600-9a16-446d-abcd-caddde7c4272",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "14d13285-d478-4307-94d2-4bef89403052",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de38d06c-2b46-46a9-aade-b9a6abad870b",
        "cursor": {
          "ref": "88ba4160-ec69-49dc-826b-119b8f5a57b6",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "da12e508-e0d7-41be-bca5-e8e7231ddacb"
        },
        "item": {
          "id": "de38d06c-2b46-46a9-aade-b9a6abad870b",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "788a77ba-5679-4eaa-9377-b18d79be89c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c0248c1-e1b0-4cdb-9340-895260a97284",
        "cursor": {
          "ref": "6a0cb9ce-d89e-44fd-9c5b-24a22f2aceae",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "57563d87-1081-41db-89aa-c42b78051e82"
        },
        "item": {
          "id": "4c0248c1-e1b0-4cdb-9340-895260a97284",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "943185a9-b595-4da8-8661-2427ba2e76ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f34eb57-7a5e-43a4-a03c-955418182f82",
        "cursor": {
          "ref": "2ccd1147-c392-45c1-b3f1-4dfe47c927b2",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "da53ab41-935f-400f-bfa0-648ad9dc59da"
        },
        "item": {
          "id": "8f34eb57-7a5e-43a4-a03c-955418182f82",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "8f978807-166d-4304-bc98-a3e200d71b4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e84ae38-0a2c-4264-898d-f8f76d0a2b5b",
        "cursor": {
          "ref": "c2a52b4e-7002-4b17-94b6-7cd56edbe8ab",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "afb7c9bf-7a71-43df-9bfb-4f611f467b2b"
        },
        "item": {
          "id": "2e84ae38-0a2c-4264-898d-f8f76d0a2b5b",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "f72144df-002f-49d7-a792-f75c9c838e2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7944679-9dbe-456d-8db1-2f38f34f09cf",
        "cursor": {
          "ref": "13158876-8f37-45a8-8889-57c2db4e4dce",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "81b3c8de-39ea-4735-80b6-70f42e36fd71"
        },
        "item": {
          "id": "c7944679-9dbe-456d-8db1-2f38f34f09cf",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "d3d4d31a-cb4e-40f0-8489-cd2050745132",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65853e81-e582-4ecf-b7f6-75722fbdf060",
        "cursor": {
          "ref": "d1bc3c59-24fe-4bda-9abb-f4617875da3d",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "0f4b75a1-4cd1-4cd4-bebb-55802a2c1dc5"
        },
        "item": {
          "id": "65853e81-e582-4ecf-b7f6-75722fbdf060",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "41c944a6-d50a-409e-bebe-f7b5bde0243c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30fe9904-866e-455d-bb46-5e1445a4c85e",
        "cursor": {
          "ref": "065d60f4-58ee-41c2-8f22-3382838c0061",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "3b43da61-ec4e-42c2-bdbb-311517691b1b"
        },
        "item": {
          "id": "30fe9904-866e-455d-bb46-5e1445a4c85e",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "ebbf480e-080a-4866-a8fe-83a9bc60ec2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec106642-a078-4722-b26f-0e0390b75899",
        "cursor": {
          "ref": "7e183767-81a6-44e1-9471-d5f6fcb3f51e",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "724edf51-31f4-43b8-b14f-4e13b895f8dd"
        },
        "item": {
          "id": "ec106642-a078-4722-b26f-0e0390b75899",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "9d4d43b0-0382-44ac-8470-30c000345b20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b675fc7-c42f-4292-a069-458bf7f6d168",
        "cursor": {
          "ref": "237f49d0-c16d-4940-8867-e2fd8625f2c4",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "dcdb99e1-cded-40fe-93c8-9861fd49e627"
        },
        "item": {
          "id": "7b675fc7-c42f-4292-a069-458bf7f6d168",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "c5045bd0-c668-444b-8caa-b68cd4657778",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2361a645-f0ef-41a6-9377-05cc6c18701f",
        "cursor": {
          "ref": "7e265709-d9fa-442f-8b2a-543642ae0367",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "76763c99-aeb8-4c7a-bb6c-05f163acb530"
        },
        "item": {
          "id": "2361a645-f0ef-41a6-9377-05cc6c18701f",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "4ca50191-5d04-46fb-92b6-437e8d537eb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 122,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be6de9f3-98e1-4d1e-b862-cf40a7fa231f",
        "cursor": {
          "ref": "1f4da222-f273-442e-a260-ded56a9cb5fc",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "9e962a32-813e-45e2-a88a-261ac3164e57"
        },
        "item": {
          "id": "be6de9f3-98e1-4d1e-b862-cf40a7fa231f",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "74ff8616-eb9a-4598-ac44-19950c66c8a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 137,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1eb80f8-32a5-4088-a9cf-c6f8d4cbc0be",
        "cursor": {
          "ref": "51029c98-2e0a-4a88-b725-5d1e436d9237",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "6e2cf545-6bec-4a56-a2dc-38f1d9ea94ff"
        },
        "item": {
          "id": "f1eb80f8-32a5-4088-a9cf-c6f8d4cbc0be",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "9e1f2b50-fae0-4328-82f5-083e8816b62d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7416c07a-255b-443b-81d6-271a1d38ab3c",
        "cursor": {
          "ref": "eeb2ab28-fe23-4034-9096-38d2853bba6e",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "ece18b85-7cfd-4c0b-a8f8-c113f4851766"
        },
        "item": {
          "id": "7416c07a-255b-443b-81d6-271a1d38ab3c",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "9414b021-7d13-4ef5-8641-6e02d5d77082",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff05881a-ec73-4bd2-a03b-efb9da12c305",
        "cursor": {
          "ref": "035eb1e9-e8e1-4c29-98e7-27d2f4557de6",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "b708f317-2df8-4862-b2ff-cdec3e69dd4c"
        },
        "item": {
          "id": "ff05881a-ec73-4bd2-a03b-efb9da12c305",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "364e4969-68b6-4eee-8e82-1b593f9fd02e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fd17584-8bfe-4371-b36c-76d1d12ac141",
        "cursor": {
          "ref": "21dd69ba-0efd-4cfd-822f-705a63886642",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "d5810ccb-aac8-4b18-b5fa-474d6044568f"
        },
        "item": {
          "id": "5fd17584-8bfe-4371-b36c-76d1d12ac141",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "b3f0e570-fcc6-4dae-81a2-f71247ac049f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2948cade-fdba-499e-b2c7-922608959f2d",
        "cursor": {
          "ref": "9144ea89-76c4-4d97-b19e-7a1988967e11",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "3acefe22-0c5e-42fe-a6ed-50e640152d35"
        },
        "item": {
          "id": "2948cade-fdba-499e-b2c7-922608959f2d",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "b2136252-60ea-41ca-b67f-66f42a1f2683",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e012ba9-29e3-4bb2-8498-91dfada109ae",
        "cursor": {
          "ref": "ef32187d-6faf-4442-a3c4-b259ed3e5b6d",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "da2c0fae-0879-49f2-8304-68c51a114527"
        },
        "item": {
          "id": "1e012ba9-29e3-4bb2-8498-91dfada109ae",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "00c445e1-2835-4fbf-964e-69910c0427eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ec0a56d-d735-4c85-bdd0-69da3323424a",
        "cursor": {
          "ref": "52e30985-2c79-43e3-851b-a5737fdb3eb0",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "32951a88-1d3e-4d43-afa1-4710c0ba5514"
        },
        "item": {
          "id": "2ec0a56d-d735-4c85-bdd0-69da3323424a",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "da0ed5cc-82ea-4ce7-8c00-056c066876c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec1bdbf9-8db2-4f25-92d1-47da24976dc7",
        "cursor": {
          "ref": "30f06d10-cbc5-4411-ba48-7aef20cc0267",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "92a28dc3-f325-48d7-a566-8c58c33601bb"
        },
        "item": {
          "id": "ec1bdbf9-8db2-4f25-92d1-47da24976dc7",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "346d4f77-ebfd-45eb-bb01-ff132d0450db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ca3ab92-eb3e-4e4d-b319-04024a003601",
        "cursor": {
          "ref": "87e11085-ffe6-43a7-bd19-bacee6f46e6e",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "e5ab8c42-e446-4b84-aa75-2434d6678577"
        },
        "item": {
          "id": "6ca3ab92-eb3e-4e4d-b319-04024a003601",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "fee7c06a-4e1c-4905-a895-d3ac5124539d",
          "status": "Created",
          "code": 201,
          "responseTime": 830,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "fb02b4e1-2b76-4022-a980-aadd0effe448",
        "cursor": {
          "ref": "b23de0e7-18b8-4cdb-8bce-fc3823c8ab10",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "cdd1282e-a770-4f73-8edf-9e21053f1afc"
        },
        "item": {
          "id": "fb02b4e1-2b76-4022-a980-aadd0effe448",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "892f4637-4493-4086-a27e-bc5f3b20fad9",
          "status": "Created",
          "code": 201,
          "responseTime": 355,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "1fa41eb1-fa03-4ae8-9dae-6ec40824a0c6",
        "cursor": {
          "ref": "eaf1e6ff-6bdd-4c3d-ae96-7c421ac9ed4b",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "bf113cce-b741-4182-9272-43f2db5f0a96"
        },
        "item": {
          "id": "1fa41eb1-fa03-4ae8-9dae-6ec40824a0c6",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "8828a90b-fdd8-40a7-97e0-061fa488530d",
          "status": "Created",
          "code": 201,
          "responseTime": 342,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "8e9ce545-df21-42b9-ac86-4428c530d864",
        "cursor": {
          "ref": "e8fd0507-c21f-4470-b84c-bc86cca06d4e",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "abaf2466-da21-455a-ba8c-3d32b6740ff3"
        },
        "item": {
          "id": "8e9ce545-df21-42b9-ac86-4428c530d864",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "26c2c464-fe35-4155-8dbd-de8bc43ce249",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d5301a3-d204-4dd0-923f-2c0176549424",
        "cursor": {
          "ref": "21eb6959-4e30-4625-bd01-3d475abf0625",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "4256f3fa-94a9-449f-9542-8af725411d0f"
        },
        "item": {
          "id": "6d5301a3-d204-4dd0-923f-2c0176549424",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "2bced488-371b-4554-8037-05afe21ea3f6",
          "status": "Created",
          "code": 201,
          "responseTime": 333,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "5c0f2f10-b86a-481e-a6da-ad8aceff9e8d",
        "cursor": {
          "ref": "7ca7bfd0-c760-44f8-b23f-0c12b00b7a3e",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "8257374e-b4bc-4760-b0b7-beadbefd25d1"
        },
        "item": {
          "id": "5c0f2f10-b86a-481e-a6da-ad8aceff9e8d",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "cef85112-6bef-45b2-b93b-fd3fa1a174d1",
          "status": "Created",
          "code": 201,
          "responseTime": 347,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "6c314c7b-a4ae-4e2c-8ffd-cd5901f9fb7e",
        "cursor": {
          "ref": "dc85beeb-56d3-467e-b56b-c2373b4ffe3e",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "0c00f4b4-412f-47b1-96be-6eae7442e6bb"
        },
        "item": {
          "id": "6c314c7b-a4ae-4e2c-8ffd-cd5901f9fb7e",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "4748f865-b688-4926-ba93-ac7fbfb1fe1e",
          "status": "Created",
          "code": 201,
          "responseTime": 361,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "d9bc3cb7-c58d-4c27-ae81-5be0dd64b5b0",
        "cursor": {
          "ref": "f172eea8-ca89-4e88-bb27-010077ca7421",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "e694e49b-2164-4dbc-927c-fe44da5dddeb"
        },
        "item": {
          "id": "d9bc3cb7-c58d-4c27-ae81-5be0dd64b5b0",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "71647d16-c6cc-49ac-a60c-bbec079482ae",
          "status": "Created",
          "code": 201,
          "responseTime": 344,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "2f7db0ec-69ca-444e-badf-5d98f55af482",
        "cursor": {
          "ref": "6b5e3533-1f2e-4908-82bf-a4bc7e676117",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "8bb4a5f7-c589-4cda-b01b-83aa404de902"
        },
        "item": {
          "id": "2f7db0ec-69ca-444e-badf-5d98f55af482",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "90dcb95e-cb9f-4c8e-b4d1-ca5dc063f54a",
          "status": "Created",
          "code": 201,
          "responseTime": 353,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "ad7dfd2d-44b8-4393-b4dc-e9749ff6fafe",
        "cursor": {
          "ref": "f65487c0-5f93-4a46-9e01-3ecbc34742fc",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "4789d0d3-a117-435c-9062-38a91af7022a"
        },
        "item": {
          "id": "ad7dfd2d-44b8-4393-b4dc-e9749ff6fafe",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "b955ff7e-5bec-44ac-b883-2b5d309d3f51",
          "status": "Created",
          "code": 201,
          "responseTime": 342,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "24a55765-49a7-47d7-ab23-feddf797b7d7",
        "cursor": {
          "ref": "1259d668-c311-47f5-8164-0f82223e53f0",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "c13f79c6-0e7a-47de-af27-986843a1cc98"
        },
        "item": {
          "id": "24a55765-49a7-47d7-ab23-feddf797b7d7",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "c1f68661-cc4a-4321-bfae-2ca192d44d45",
          "status": "Created",
          "code": 201,
          "responseTime": 363,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "e11cc80a-2fda-4197-8e1f-0af966d67c3c",
        "cursor": {
          "ref": "1be741ab-66df-47b1-bf56-77b7030ce8fb",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "bf37f9b1-d22a-4cb8-9f04-4cae3d80ffa6"
        },
        "item": {
          "id": "e11cc80a-2fda-4197-8e1f-0af966d67c3c",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "9a103ddc-43d8-4fff-9fd3-562327765c09",
          "status": "Created",
          "code": 201,
          "responseTime": 328,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "f3c33e3c-4538-4bea-92a9-45d0f5382ae7",
        "cursor": {
          "ref": "9aab0826-6a44-467c-9256-4678e405e427",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "bd23f14a-b5ae-4b81-a29c-e3acd113a221"
        },
        "item": {
          "id": "f3c33e3c-4538-4bea-92a9-45d0f5382ae7",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "40ce250c-8186-44bc-87db-745ed48a958f",
          "status": "Created",
          "code": 201,
          "responseTime": 379,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "5ca1a0ef-c9bb-4f29-9bd1-d977d527cdeb",
        "cursor": {
          "ref": "1caf1240-47d6-4c26-8dd0-aeef99d24c06",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "bffacc72-0c38-43db-abf9-66eb16320644"
        },
        "item": {
          "id": "5ca1a0ef-c9bb-4f29-9bd1-d977d527cdeb",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "6717dc09-87cd-437c-ad22-4a35e03da543",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f63a159-945e-4a3b-b43a-324ba169aae4",
        "cursor": {
          "ref": "f97d5c2d-b792-429e-8881-44234316f11a",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "34d2cdd8-df03-465a-a66f-c69636ffc959"
        },
        "item": {
          "id": "3f63a159-945e-4a3b-b43a-324ba169aae4",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "0b059a03-00b5-4d66-b915-2dcfe01e7912",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad9cd376-d853-45d3-b1a4-4df0a86dcf98",
        "cursor": {
          "ref": "520ddee2-17be-4048-8727-03863d0ad2a0",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "de9392bd-6d75-4d6a-8ca1-347aea8c30f5"
        },
        "item": {
          "id": "ad9cd376-d853-45d3-b1a4-4df0a86dcf98",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "629a58e7-368e-45f8-b4f4-fdd6ebd17506",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90559214-8257-44cf-bfd9-743cceb44a49",
        "cursor": {
          "ref": "de3a5055-62f6-4e82-ac31-10de0459f459",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "ea592bd7-4a26-4a0a-8e2d-e90e91c57b5a"
        },
        "item": {
          "id": "90559214-8257-44cf-bfd9-743cceb44a49",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "02eae7f1-d446-4521-ac1e-15383a82a091",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f80a133-9a37-4e45-acb2-1ca105bd90c3",
        "cursor": {
          "ref": "df7e5c5d-f7be-46a6-bae0-5d2e65294400",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "14208f52-d11f-4eac-813d-08395231d90a"
        },
        "item": {
          "id": "4f80a133-9a37-4e45-acb2-1ca105bd90c3",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "14f9bb54-efb8-4e0e-949d-3d770884f97c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80fd3cb2-cff0-4bed-b50c-e6220ff5e2cb",
        "cursor": {
          "ref": "4c1a1e00-aa8d-45f7-a285-783006000973",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "e2f7a781-abed-4701-ad50-37a08e25b247"
        },
        "item": {
          "id": "80fd3cb2-cff0-4bed-b50c-e6220ff5e2cb",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "bbeac430-e877-440a-9ecd-d4668de8d4f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caaf5673-26bf-4175-b5f0-03e3cfce6fa5",
        "cursor": {
          "ref": "0577513c-7c9c-44a9-ac77-2b229bd05fa9",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "75252fff-5025-4668-9772-42d74a9c27c6"
        },
        "item": {
          "id": "caaf5673-26bf-4175-b5f0-03e3cfce6fa5",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "a4545426-9146-459c-8026-353931dec6e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a431f26-f0e9-4e80-9d34-ed893435a403",
        "cursor": {
          "ref": "dbc06473-a5a7-4b32-bb36-9791fcb8a764",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "5253d72b-5ba2-480c-922d-f6ed671e859a"
        },
        "item": {
          "id": "0a431f26-f0e9-4e80-9d34-ed893435a403",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "77b97627-461f-4c3d-9e79-bfc5a10b6641",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25cc981a-110f-4d1c-9e19-18d20dd1ebba",
        "cursor": {
          "ref": "db89565e-d9dd-4add-9211-b64dac243e94",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "d88ccb52-69a9-48ec-bd17-84b5d8fbe776"
        },
        "item": {
          "id": "25cc981a-110f-4d1c-9e19-18d20dd1ebba",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "382bb7ac-76cb-431b-a28b-2611314e4735",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef82ef69-3414-47bb-b9ef-d0c1059e3d2e",
        "cursor": {
          "ref": "a6322ce2-69c9-4987-ad44-11e59d776578",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "576801f1-ee2d-4aca-870a-d410b197c1c8"
        },
        "item": {
          "id": "ef82ef69-3414-47bb-b9ef-d0c1059e3d2e",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "41c5b3fc-8fd7-48f6-a470-601e1df6334a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a96230f2-3040-44f8-b042-3c7fe64ca0c6",
        "cursor": {
          "ref": "8f9debfa-e152-41bf-a137-1ecdc05d164c",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "57907639-76b4-44a2-aae0-853d221b6928"
        },
        "item": {
          "id": "a96230f2-3040-44f8-b042-3c7fe64ca0c6",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "9c5d4b62-6707-4622-b013-a51b18a2f092",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65f5ed23-b9f1-4c4a-abca-7f44d3e92513",
        "cursor": {
          "ref": "d24c67c9-22bb-44c3-b95f-938caa0a0997",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "1b2ac9fc-6bb3-4eae-9a80-4f93cba0d756"
        },
        "item": {
          "id": "65f5ed23-b9f1-4c4a-abca-7f44d3e92513",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "434b2a20-8858-41e0-acb9-5efadc119367",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0bfd0cc-7a44-48ee-b5b6-714d3a696994",
        "cursor": {
          "ref": "e0ec27dd-8835-43d4-a3e8-4e168f619c5d",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "6e083af1-5430-42cf-8905-a7d35a64a6fc"
        },
        "item": {
          "id": "c0bfd0cc-7a44-48ee-b5b6-714d3a696994",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "cfef11e9-c572-4056-b1df-a9c57416b0d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e4b789e-1e5e-46a9-9daf-51f511173088",
        "cursor": {
          "ref": "46888877-ec6b-4b9d-b4d4-88d6facc39f1",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "c88d08c4-075c-4c9c-bb88-5fb5ae80b6cf"
        },
        "item": {
          "id": "2e4b789e-1e5e-46a9-9daf-51f511173088",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "88fd071b-058b-4eab-9aef-67efc0c81ec6",
          "status": "Created",
          "code": 201,
          "responseTime": 362,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "e6a80e87-223a-45d5-9468-fd2374f1304a",
        "cursor": {
          "ref": "0903ec58-3b0c-4c27-84d5-0f1fe6e94dea",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "a5e6d9fa-6684-481b-8ab3-8af133200f08"
        },
        "item": {
          "id": "e6a80e87-223a-45d5-9468-fd2374f1304a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "cce419d8-ab3a-4f8b-9089-b39ea48c891e",
          "status": "Created",
          "code": 201,
          "responseTime": 384,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "f4c1761a-a229-486a-9347-0f2aba556caa",
        "cursor": {
          "ref": "ccdb409b-4ae4-4e72-adab-e4bb475e03bf",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "c1329e82-a0d0-47c3-950b-4fac0ee21b7c"
        },
        "item": {
          "id": "f4c1761a-a229-486a-9347-0f2aba556caa",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "223e228d-b574-4376-9e60-e4f3ed4191cf",
          "status": "Created",
          "code": 201,
          "responseTime": 360,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "1998cf0d-16df-4e83-b29b-b41633429198",
        "cursor": {
          "ref": "ed24acdd-3b25-466f-8e24-89faebdb8319",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "3f98b629-60e8-4cea-9df7-7c9050c74983"
        },
        "item": {
          "id": "1998cf0d-16df-4e83-b29b-b41633429198",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "8187fa3a-0c55-44e1-9e21-0ff19b6b26d9",
          "status": "Created",
          "code": 201,
          "responseTime": 380,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "813291e6-7a01-4d25-95b8-63cdabe37526",
        "cursor": {
          "ref": "bda0d8a4-3a15-49f7-98c4-6a37d1abcfaf",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "e3d957c6-a015-4113-9029-8ce4b09a0c8c"
        },
        "item": {
          "id": "813291e6-7a01-4d25-95b8-63cdabe37526",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "29bdc311-65f6-4555-8c95-c22841cf2904",
          "status": "Created",
          "code": 201,
          "responseTime": 384,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "64294a44-5313-4915-83d5-964e70676d32",
        "cursor": {
          "ref": "e7191f1f-469a-4728-aab5-d51c48cc9d72",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "607dcace-6c89-4263-a9b3-46c4cee5466e"
        },
        "item": {
          "id": "64294a44-5313-4915-83d5-964e70676d32",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "5c8ab93a-1685-4663-85a6-de01e8ea7574",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81d7a277-4ca4-4859-abb3-269493f789a9",
        "cursor": {
          "ref": "0077d118-c2f1-4b23-afcc-5d79560c51f1",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "105e9b8f-ef87-4cf8-9f2a-4bc948480a70"
        },
        "item": {
          "id": "81d7a277-4ca4-4859-abb3-269493f789a9",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "08bb7e09-99ae-487b-8050-164a9adce3b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b60b40b6-40d2-4576-8d45-9336a426f34a",
        "cursor": {
          "ref": "1a7ffe96-13d2-4578-94e9-6cc9feca08f4",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "f554b24b-8d96-405b-ab4f-82f224b6838f"
        },
        "item": {
          "id": "b60b40b6-40d2-4576-8d45-9336a426f34a",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "2710e3cb-26b8-4c64-85c8-9ee23557ee59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beedbf35-dcd6-4926-a980-49704cf92744",
        "cursor": {
          "ref": "6c3573a2-8a06-4bfb-8c64-3ddbc3d74eb4",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "0ad5267c-47b3-4b34-8ac3-9d376b1b41fe"
        },
        "item": {
          "id": "beedbf35-dcd6-4926-a980-49704cf92744",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "4f31a507-6e4b-4f09-b376-f391384c4729",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b1f5113-e13a-451d-9a76-9a95df9adcd3",
        "cursor": {
          "ref": "dc42e568-0e34-473e-b6e2-058e2708c7a0",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "f68c1499-ed79-4c7a-ba54-c8626821529a"
        },
        "item": {
          "id": "1b1f5113-e13a-451d-9a76-9a95df9adcd3",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "390a1980-f7f1-4a8e-88a6-e0fff63332cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51a5ad05-9b18-4b68-b992-ac7bcab1f0b0",
        "cursor": {
          "ref": "87470f74-9c07-4681-a672-c77f24d62e94",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "208c15d1-5624-48b9-b36a-8d8ee85d11f1"
        },
        "item": {
          "id": "51a5ad05-9b18-4b68-b992-ac7bcab1f0b0",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "f3ae57ee-7143-4c14-a6a5-87fc04b28f1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de579bda-e32d-4170-ae29-28316018f68f",
        "cursor": {
          "ref": "20d88928-c019-41b3-8c31-3a33e8bea5ad",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "1a7a539f-d760-4404-862e-bd20b73341e6"
        },
        "item": {
          "id": "de579bda-e32d-4170-ae29-28316018f68f",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "e642e802-7c3c-491f-8df8-366a389f0cf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47ea1528-cf9b-4691-8446-3140efe7f499",
        "cursor": {
          "ref": "5e0ed218-c22e-4a83-bcba-54eed717f894",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "8724975c-c017-4876-a1f0-f954b4b90697"
        },
        "item": {
          "id": "47ea1528-cf9b-4691-8446-3140efe7f499",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "832fc2f9-08a3-44b8-9623-dbf81a7deb68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9867d480-ee57-42b3-b362-f9b698d411d5",
        "cursor": {
          "ref": "489b321b-d3e4-4ffd-a116-ee67f5e3e4e1",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "40f5212b-e509-4b24-b08c-e03c237b90c1"
        },
        "item": {
          "id": "9867d480-ee57-42b3-b362-f9b698d411d5",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "12d4a33c-1787-43cb-92dd-6b61f373eada",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce6d3c1e-601d-4913-8f6f-b773d3d1f12d",
        "cursor": {
          "ref": "0177dc59-1b0a-458a-b833-c7f22cc0918d",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "3a015fa6-a330-45ee-a19f-ce9f7d95dd73"
        },
        "item": {
          "id": "ce6d3c1e-601d-4913-8f6f-b773d3d1f12d",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "74cf2a7c-969d-4a82-81ae-202e544edfbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "149f92d0-b1aa-4687-a7c9-f83a1edcd690",
        "cursor": {
          "ref": "00d99e85-efcc-457c-bc80-48fc8816a94f",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "1a3d8ff4-c449-4889-9a6a-d7d51d0ed238"
        },
        "item": {
          "id": "149f92d0-b1aa-4687-a7c9-f83a1edcd690",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "cfd81f3f-0f28-41f2-9f53-0be5f9354faf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "998ca3b9-0fad-4b76-a13e-bade2da7e08b",
        "cursor": {
          "ref": "48dd4e41-b7d0-42c9-bc01-9d986eaea41d",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "7d25b0a9-e590-4bd9-9843-1f8035a11d93"
        },
        "item": {
          "id": "998ca3b9-0fad-4b76-a13e-bade2da7e08b",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "a9941903-1f64-4d56-a0a5-2e8172a6e262",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e277645-5c1f-46c0-911a-8cec33ef4d87",
        "cursor": {
          "ref": "4796d84e-444b-4c49-abc7-8441b2f34b07",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "bc252847-7af1-4469-8cfa-539f796548a7"
        },
        "item": {
          "id": "3e277645-5c1f-46c0-911a-8cec33ef4d87",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "e41a865d-6c9c-4a2f-9508-0f43a1c73081",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc50811c-e22f-41de-9034-5a9a8223faea",
        "cursor": {
          "ref": "c7ac38b3-578d-4527-9caa-0ad6d7255285",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "444ddd76-bcd2-4847-98e6-fd5f3dc05597"
        },
        "item": {
          "id": "fc50811c-e22f-41de-9034-5a9a8223faea",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "035207a8-1324-4b1e-8eb5-a41277a40512",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81fd44b0-0dce-4bb2-a99f-6faefb124230",
        "cursor": {
          "ref": "d4d657d2-1fcd-4ff5-a3de-d06a91430d73",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "3d15b214-29da-493e-8c7c-9a69a7a249e8"
        },
        "item": {
          "id": "81fd44b0-0dce-4bb2-a99f-6faefb124230",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "50e95587-9f1c-476f-815b-21788e0e6d07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a98cd152-63de-42d4-88b9-f279d6debcd1",
        "cursor": {
          "ref": "40a9f9b7-83e7-4d4a-8980-8ff02118753c",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "d28085a9-5456-4869-a589-9a6c1605239a"
        },
        "item": {
          "id": "a98cd152-63de-42d4-88b9-f279d6debcd1",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "56d23072-df35-4e57-9dda-1512388ece2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42c1aa00-4392-442f-acc6-55da691dd88c",
        "cursor": {
          "ref": "d7fd414b-293b-4684-bdc8-e5ce7adce8cd",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "e39d60d2-1bfb-46d0-8db5-75ead7d53c1c"
        },
        "item": {
          "id": "42c1aa00-4392-442f-acc6-55da691dd88c",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "7d6ea81d-a784-4d83-8845-f014960e1879",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09eab7a0-195d-418a-94b9-b2289bfdb5cd",
        "cursor": {
          "ref": "f8feed6e-c246-4a36-b314-c8d6fd0e2bae",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "7a3c8080-3ab7-4296-a952-abcfc71d2bad"
        },
        "item": {
          "id": "09eab7a0-195d-418a-94b9-b2289bfdb5cd",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "d679902c-b9ea-4148-b686-a2062e731bb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8531a9bb-3408-44c7-85d4-4158962db0ca",
        "cursor": {
          "ref": "2732af78-ac01-4e58-91b3-a511af42c14c",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "6ee4f2a1-331d-4050-a667-df3adf3a65aa"
        },
        "item": {
          "id": "8531a9bb-3408-44c7-85d4-4158962db0ca",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "7f5d268c-0053-4d36-89b1-dc8a5eabce13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e303d234-35dd-407e-96a8-cddc819ceb53",
        "cursor": {
          "ref": "d6cdb7bf-aa31-4562-a5e2-093d35b422a4",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "37d1c388-2a23-41f5-a74a-d620c85bf29e"
        },
        "item": {
          "id": "e303d234-35dd-407e-96a8-cddc819ceb53",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "c741e02d-adb1-468f-b6f0-77e77b9e3ced",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e7ed1e5-497d-4c8e-a8dd-fa6f8a1601bc",
        "cursor": {
          "ref": "8994e6fe-f56c-432c-809f-8e5958e2a854",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "ba431c03-87a3-4409-af15-23ee743ceb56"
        },
        "item": {
          "id": "9e7ed1e5-497d-4c8e-a8dd-fa6f8a1601bc",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "7426d3bc-25b0-4dba-949f-b110d995cb01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bb843af-860d-4220-8a92-7861eb04a29d",
        "cursor": {
          "ref": "9a7b27f4-886c-461e-9c97-6ba8a4ee949d",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "7f80f2f3-249f-4ecb-9d3c-5b7d6ea0c227"
        },
        "item": {
          "id": "3bb843af-860d-4220-8a92-7861eb04a29d",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "7bc8e1ef-1a21-48ad-9c72-b213d6cb9c36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67a9e0f7-2607-40b0-a8dc-20caf3da7b6e",
        "cursor": {
          "ref": "eca1bd6f-96c6-45ef-b220-a5c0c8d7d47b",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "a6b1bc8d-5424-40a5-9cee-86e314d7b8ce"
        },
        "item": {
          "id": "67a9e0f7-2607-40b0-a8dc-20caf3da7b6e",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "6afb0daa-006c-4ed0-865f-5790ca3542ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2687de0-1a1d-482e-8b0e-d027c0f66f0e",
        "cursor": {
          "ref": "85d172c0-f5ee-412d-ab6c-ff25c9bede9e",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "cc3f97fc-2d88-4648-8806-859bd1ee132a"
        },
        "item": {
          "id": "f2687de0-1a1d-482e-8b0e-d027c0f66f0e",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "de9d948f-9663-4621-9e0f-7c91ea61a700",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5edc2912-2ff6-41ab-923a-f11a15e97114",
        "cursor": {
          "ref": "c4e29450-9ce4-4a99-8389-226d7dc660f3",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "474d33a0-060f-40f6-9b02-f91e577c488b"
        },
        "item": {
          "id": "5edc2912-2ff6-41ab-923a-f11a15e97114",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "f440bb81-9bd2-435f-911b-d6e8898d34a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "836dae14-a0e0-47ee-aa1a-b33620442536",
        "cursor": {
          "ref": "26f3e5c7-c757-41af-8242-78fabbe84108",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "3c3af32e-a3a0-464c-8860-0f7d54eba07a"
        },
        "item": {
          "id": "836dae14-a0e0-47ee-aa1a-b33620442536",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "1c2c103b-1cf3-4eae-8bfa-b71c653ee021",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e27f82f-c7aa-4939-bcab-4276701e72aa",
        "cursor": {
          "ref": "41b0d744-ce90-4aa3-b1f6-d3ba49a4c64f",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "6d8c3e99-0e10-437d-8c15-a106c7c30844"
        },
        "item": {
          "id": "6e27f82f-c7aa-4939-bcab-4276701e72aa",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "8529d17a-2912-4855-b5bb-3d9a78519ae3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a31abb31-1f2c-4db9-94db-72327297f9bb",
        "cursor": {
          "ref": "4784e234-68a0-4737-bce6-7d34d5da40b6",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "a10268ba-6c4e-4211-b9e4-719aae82aec7"
        },
        "item": {
          "id": "a31abb31-1f2c-4db9-94db-72327297f9bb",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "f055ec00-86b2-47f9-965f-0b09ca6142ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c2ca931-d6d2-4dfb-9cce-bb99ad1916f8",
        "cursor": {
          "ref": "3e4bf9e0-1219-4697-9a9d-d2b0822b0ccf",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "ae1f3e0b-69a7-4a0a-a81c-ba7dcfc888d3"
        },
        "item": {
          "id": "6c2ca931-d6d2-4dfb-9cce-bb99ad1916f8",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "dbedd5ef-f9f2-4caf-86ca-b727e864f2c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b96b9d1-1d5d-4d6f-87a0-8cb6b8564c08",
        "cursor": {
          "ref": "d0750c45-5cc9-4d51-abef-4fc07eab1bf6",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "6f2d7afa-0bea-4829-984b-911c9a6d4a82"
        },
        "item": {
          "id": "4b96b9d1-1d5d-4d6f-87a0-8cb6b8564c08",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "ea543f0e-9075-4e4c-bc39-6ba0a2ba2956",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddeb7743-1be1-4624-a5e2-63fbebb49eed",
        "cursor": {
          "ref": "96e5001e-05ee-45d4-9993-3faf43a785db",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "8e0bfb09-493d-4b45-95fd-2c64738877a7"
        },
        "item": {
          "id": "ddeb7743-1be1-4624-a5e2-63fbebb49eed",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "a8cab6d1-9f41-4e89-93ad-6e5c06e9d786",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79887379-c928-4064-bbda-a2bb95bb4c56",
        "cursor": {
          "ref": "0963dfa1-0d48-4396-99e9-2ba23d286fd2",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "609a0770-22d3-47be-9c8f-daee2cd03928"
        },
        "item": {
          "id": "79887379-c928-4064-bbda-a2bb95bb4c56",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "022a2579-846c-4f50-99e5-5dccf4592582",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de74396f-6ce3-4c2b-ac14-613729942740",
        "cursor": {
          "ref": "70be2e48-5648-45c9-9970-da907c445027",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "ad9fb7ea-4cbb-471d-89a0-f237e65a79d5"
        },
        "item": {
          "id": "de74396f-6ce3-4c2b-ac14-613729942740",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "f3c6293b-ca66-4676-bdac-a00718dfea4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "e6110309-7466-4ef3-b688-d494d1c3a096",
        "cursor": {
          "ref": "483e14de-dfa7-41a6-9352-889d9269143a",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "b85e8bea-68b7-4ef5-bcfb-9a74ea6e449c"
        },
        "item": {
          "id": "e6110309-7466-4ef3-b688-d494d1c3a096",
          "name": "credentials_issue"
        },
        "response": {
          "id": "e9e18e5a-07ec-4475-9ba5-942ff3043634",
          "status": "Created",
          "code": 201,
          "responseTime": 422,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "d447c573-3675-4ad2-8a08-5a23ad92d551",
        "cursor": {
          "ref": "8d4bd177-f31f-4e90-af1d-002d040bf539",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "dba24a66-96c2-4344-8f76-d13e845989af"
        },
        "item": {
          "id": "d447c573-3675-4ad2-8a08-5a23ad92d551",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "1d95b5a3-4a41-4f26-ad08-28c6f950e992",
          "status": "Created",
          "code": 201,
          "responseTime": 350,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a969022-6db2-4767-b88b-0c925f3caa1f",
        "cursor": {
          "ref": "1f09a57f-002b-45ae-b7b1-6d35c5a75e22",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "5761c88a-82f3-4223-b36f-5930b24a8777"
        },
        "item": {
          "id": "0a969022-6db2-4767-b88b-0c925f3caa1f",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "d8890a65-82c5-4658-b470-bdbc539a997f",
          "status": "Created",
          "code": 201,
          "responseTime": 375,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8b3f699-cb44-4ba5-aa19-38ab525a4470",
        "cursor": {
          "ref": "73949f20-b333-4daf-9d63-414a61883826",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "43afb847-62fb-49f6-a061-e60cf6a1bef6"
        },
        "item": {
          "id": "e8b3f699-cb44-4ba5-aa19-38ab525a4470",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "34120a8f-0eb8-4da9-8625-2a0b82eb7e16",
          "status": "Created",
          "code": 201,
          "responseTime": 361,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "08e8da29-bdaf-4fa2-b482-4c68bd446b18",
        "cursor": {
          "ref": "f8ed2b7e-7f7d-4ebe-9e1b-b542aa2f3b04",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "ebf5b5ed-e8f6-4638-a71e-efe4712e85c5"
        },
        "item": {
          "id": "08e8da29-bdaf-4fa2-b482-4c68bd446b18",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "06b71371-729f-418a-88f2-97662919641a",
          "status": "Created",
          "code": 201,
          "responseTime": 358,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-06-23T00:41:35.064Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-06-23T00:41:35.064Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "1261eafb-4f21-4067-a99e-77321b8d8e93",
        "cursor": {
          "ref": "b4ac3465-28bd-45a9-ae2f-872fbe0e633c",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "55d58f81-f327-4627-bc29-9530028e1b9e"
        },
        "item": {
          "id": "1261eafb-4f21-4067-a99e-77321b8d8e93",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "84ca0bf2-df7e-4667-b11a-b2040f0f4210",
          "status": "Created",
          "code": 201,
          "responseTime": 370,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd0b0015-e2b0-493b-8a1b-8a012d2a6ab6",
        "cursor": {
          "ref": "48e4ae19-7450-4ae5-b675-e68182eb3e53",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "7be59785-0e30-4c69-866c-9796ec2cd8ae"
        },
        "item": {
          "id": "cd0b0015-e2b0-493b-8a1b-8a012d2a6ab6",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "03f00580-a414-4e8b-abd3-6e49c10665c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2126ff7f-6f74-41e0-a57a-2384ef0232bf",
        "cursor": {
          "ref": "7389eb1d-87a6-4781-80d6-2ab0b348bfa2",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "42a5791d-c405-4182-a182-c9e650e25254"
        },
        "item": {
          "id": "2126ff7f-6f74-41e0-a57a-2384ef0232bf",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "e0a49303-efb7-4fce-8a84-77755090b862",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19a508fe-1cda-42a8-964e-16dda8dea1c5",
        "cursor": {
          "ref": "5e8eec40-a36c-4e35-8ca7-0b712caa090a",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "631dd57a-db6f-4a6d-83b1-7dfca124b951"
        },
        "item": {
          "id": "19a508fe-1cda-42a8-964e-16dda8dea1c5",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "e7d8685b-5d45-493f-8125-0c1f46c2f9c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a10f72ab-0676-48bc-b8dc-191a097d2a6f",
        "cursor": {
          "ref": "022ff63d-3571-423a-a999-83df07202f9e",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "e8ed1f68-afa1-4301-bf18-0b05fd13dfcd"
        },
        "item": {
          "id": "a10f72ab-0676-48bc-b8dc-191a097d2a6f",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "71e603ba-3a02-44b3-9a69-0728c139cd46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80f10b55-eb8f-493d-9fe9-8dd6a9ab9d86",
        "cursor": {
          "ref": "036fecab-27ce-4a0a-8830-93182b817e48",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "ef30e517-0728-4066-bf48-9176796c730f"
        },
        "item": {
          "id": "80f10b55-eb8f-493d-9fe9-8dd6a9ab9d86",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "d7443e49-6054-4261-b396-31b011b489e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47ea7498-8c25-43d6-aac5-5131df6f5f5d",
        "cursor": {
          "ref": "332f215c-33a5-41fe-9079-12cfba74bcf4",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "e3c32c3d-cb44-4aaa-be51-ae90e96310d7"
        },
        "item": {
          "id": "47ea7498-8c25-43d6-aac5-5131df6f5f5d",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "830acecc-59df-45d4-98a3-5210da107a57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3488fca6-3056-4ccb-9d5b-2256b5e05b60",
        "cursor": {
          "ref": "54a81b27-ebaf-4203-a77a-665430764ce6",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "a7c4e228-5026-42ec-86ac-ed6ae379c3e1"
        },
        "item": {
          "id": "3488fca6-3056-4ccb-9d5b-2256b5e05b60",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "e1a639a4-b455-4cd5-858e-10c55ce1fa92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc01487c-1b0e-42a0-85b6-14d13f36e4c8",
        "cursor": {
          "ref": "c73db713-8278-4ed5-a49f-f417b42bd205",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "c872e3ca-3254-4d36-a89c-ed177a581355"
        },
        "item": {
          "id": "fc01487c-1b0e-42a0-85b6-14d13f36e4c8",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "c4b648c5-10b8-4d8a-aa11-26a2795c7504",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16520c1f-0b41-4e62-8e77-2cf614a1477d",
        "cursor": {
          "ref": "32dafc44-2733-4ac8-a29b-833258367106",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "253bdb2c-1aa8-4e61-b53b-0f37b26d4251"
        },
        "item": {
          "id": "16520c1f-0b41-4e62-8e77-2cf614a1477d",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "503e18e9-e536-47af-ac1b-736d2614024b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6775b6c0-5041-457e-94e1-54e4ecde8124",
        "cursor": {
          "ref": "411cf7a2-ced0-44ca-9852-cbf9bb38788c",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "c28e99cd-0c15-4c71-a20b-fbb2703875d9"
        },
        "item": {
          "id": "6775b6c0-5041-457e-94e1-54e4ecde8124",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "69eddb95-8667-49cb-82a9-277133bec23e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29903a8b-6b3c-44ea-8599-76642e300be5",
        "cursor": {
          "ref": "2f81d2d1-a17d-4228-be78-4d7772d53d33",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "9a718a29-94f0-4df8-b3f3-12916bc75040"
        },
        "item": {
          "id": "29903a8b-6b3c-44ea-8599-76642e300be5",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "3a0c0dd0-a17e-49bc-a37f-213127beb30a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60d99526-665c-48f7-934d-21444410feb0",
        "cursor": {
          "ref": "00f1964d-6874-4237-ac14-a641c20919de",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "806c47f0-e179-4ec4-9d37-30144c045ed6"
        },
        "item": {
          "id": "60d99526-665c-48f7-934d-21444410feb0",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "c2e20497-f929-46f1-89a0-81f81a799bb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1903cd45-855d-4997-b94b-e55c95190bb6",
        "cursor": {
          "ref": "37331635-0158-482e-887e-b3bf213156ef",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "439d202a-c90b-4c21-8ae4-e835d8f2dac8"
        },
        "item": {
          "id": "1903cd45-855d-4997-b94b-e55c95190bb6",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "c2b6b2a0-c04f-4922-8e27-2af915c00ddb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47da2a44-b847-4cae-9dd4-d438d5bddcca",
        "cursor": {
          "ref": "7bcc42d8-10c5-46a3-bf37-f36efc334337",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "e922aea2-6c4c-425e-914c-1ab7ed22a680"
        },
        "item": {
          "id": "47da2a44-b847-4cae-9dd4-d438d5bddcca",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "413239cd-7078-4c2b-b186-0bb2e827536d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 109,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "811546a7-0f09-4cd1-a050-75313993d2f7",
        "cursor": {
          "ref": "74f4367e-aaa8-4b8c-8a0c-139ff9156b1c",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "36ff7716-4987-4552-b539-2a387a78b295"
        },
        "item": {
          "id": "811546a7-0f09-4cd1-a050-75313993d2f7",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "2d8bd3ed-d96b-44f5-90da-7008956a780e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c423f06-29ba-4c30-afeb-755170e821f8",
        "cursor": {
          "ref": "4591ddb4-8955-4492-81fa-7c30fb750c88",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "9c4720e3-8a84-4de5-90ff-3cebbc13a670"
        },
        "item": {
          "id": "4c423f06-29ba-4c30-afeb-755170e821f8",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "82efb06b-a883-430c-b5d9-1fdf0fa3c1ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f034e5b-45a5-4959-a7e5-57844665ff1b",
        "cursor": {
          "ref": "9cbd7612-a6dc-46cb-ac4b-368026f6e97d",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "40efdaee-6a8c-4d67-ba9c-3884b9558837"
        },
        "item": {
          "id": "2f034e5b-45a5-4959-a7e5-57844665ff1b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c6ce68bb-4de3-489b-bb3b-4a4dd82f6a38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ced2db6-59fe-4f53-8d5b-a5625ffc967f",
        "cursor": {
          "ref": "1706428d-0aea-42d9-99f8-84685b44d8dc",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "dd88e499-0c49-4eca-bf31-3b4ff89c3c6c"
        },
        "item": {
          "id": "1ced2db6-59fe-4f53-8d5b-a5625ffc967f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "c47b84bb-e462-4d87-bb96-6acf4f8ba9c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a93698d1-0920-4c89-808d-d2020f0b17d7",
        "cursor": {
          "ref": "7af57912-1a7b-4186-8f9b-25c7afe084eb",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "e3f9b216-765e-4e2d-90cf-c82ae6e530b8"
        },
        "item": {
          "id": "a93698d1-0920-4c89-808d-d2020f0b17d7",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "fba83005-6191-4b78-9ee2-2fbd58b7d180",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "869ee76a-2eec-4939-b73e-2b5b476e801c",
        "cursor": {
          "ref": "585e0a57-b4ba-46ed-ab44-de3d006fe4f7",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "2fb74405-cbcd-4aac-9e98-21e950ba7dd4"
        },
        "item": {
          "id": "869ee76a-2eec-4939-b73e-2b5b476e801c",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "c21f18d6-ccc4-4d0e-ac37-2dbf76f264ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebb4c22d-cf69-4038-9b38-b201c3acf714",
        "cursor": {
          "ref": "d7da49aa-138d-4b24-b5b0-75dd7c19551e",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "c7867d39-a0d2-4a39-b37c-7a42c228ca1f"
        },
        "item": {
          "id": "ebb4c22d-cf69-4038-9b38-b201c3acf714",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "c6dc31e4-538d-4a16-b733-a7e3dfe86885",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "795adda1-94a6-4212-8c94-35f485d98ebc",
        "cursor": {
          "ref": "ac27fa8d-6263-42bc-aacd-96b9c7dde6ca",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "588c5e1b-8321-48bd-8308-bd665f6fdca1"
        },
        "item": {
          "id": "795adda1-94a6-4212-8c94-35f485d98ebc",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "ca203a70-cb0f-4d57-94a9-cc76ad1d2563",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "064f9fe3-fc2c-4bdc-8e34-1a174e4c5656",
        "cursor": {
          "ref": "07a5a05e-bf3b-4981-8cde-a0cd66ce8fb2",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "4b4bfe53-c4e0-486a-ab62-ac6c5f8aff29"
        },
        "item": {
          "id": "064f9fe3-fc2c-4bdc-8e34-1a174e4c5656",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "fee4c7d6-0948-4818-ac2a-986b08f4cf68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d644e5ea-de8b-4f6a-98aa-3b90a99bcc51",
        "cursor": {
          "ref": "f099bc6e-90be-4fde-9fd5-ce8296ff2220",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "dde66194-9647-49bd-94ae-1bd8265db308"
        },
        "item": {
          "id": "d644e5ea-de8b-4f6a-98aa-3b90a99bcc51",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "079980a4-13b8-4f89-afb4-349c52d3b72d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aafd0d9d-af72-44f2-9ead-24be43d8bc15",
        "cursor": {
          "ref": "6c4d0c39-5a4e-4944-8104-b8b7b81958b1",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "1820b28e-7c13-4929-8044-24c50bff3bab"
        },
        "item": {
          "id": "aafd0d9d-af72-44f2-9ead-24be43d8bc15",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "4bd8870b-9f9a-4a12-a32e-ef0ad95f85e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7023a17-0a2d-4d85-b78f-41757bd67ba1",
        "cursor": {
          "ref": "0aa6f60a-84c6-40ee-981d-db21930cb77b",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "ac874183-9533-4f5a-9ebd-1a50ee074f5a"
        },
        "item": {
          "id": "b7023a17-0a2d-4d85-b78f-41757bd67ba1",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "03313605-1f1e-4f53-868b-d9cca1a44688",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3438be46-4862-4300-9053-1ca87e36f2b4",
        "cursor": {
          "ref": "8740c07c-7671-4e29-8908-529bd9a162b7",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "d1b32a87-4a6b-4d62-865e-5f38d8ea86df"
        },
        "item": {
          "id": "3438be46-4862-4300-9053-1ca87e36f2b4",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "d8b9c474-86ea-48a3-a9f5-13b0609c6568",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc130d11-2651-48d0-a28c-70decf861dc2",
        "cursor": {
          "ref": "337aa369-67dd-44f7-898b-e341de452d45",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "771a2cb2-980a-4767-9f0e-8a5b95e4bd28"
        },
        "item": {
          "id": "cc130d11-2651-48d0-a28c-70decf861dc2",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "4eb312b7-e579-4ec2-9e70-af52e6a58166",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a9e2ef6-91b0-4ced-a75a-faf17d818627",
        "cursor": {
          "ref": "387366c0-b786-4f60-9f2f-b0b194508952",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "03261ba7-5ba9-4f10-b84e-b342d6b354c8"
        },
        "item": {
          "id": "3a9e2ef6-91b0-4ced-a75a-faf17d818627",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "1193f5c8-530c-43e0-8db1-85a08d8e4a7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36759f25-6db4-4128-b3ed-bd382455108b",
        "cursor": {
          "ref": "4f2244d7-be3c-400a-bd4a-a4eb98aedb79",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "f0a35328-3fa2-4912-96d9-57673a11365d"
        },
        "item": {
          "id": "36759f25-6db4-4128-b3ed-bd382455108b",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "28ec76f6-44c6-476f-ba13-c2dd9d953218",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e66208d-5334-48e7-8748-dad188e650e1",
        "cursor": {
          "ref": "4b7bec73-2c28-4609-a667-542a665eb765",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "22b25592-602e-49dc-864f-b9de33e2b15d"
        },
        "item": {
          "id": "7e66208d-5334-48e7-8748-dad188e650e1",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "8da34dce-6fac-4c9e-ad41-845d8e220e61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d4a46ae-b64f-4b70-b9ca-2c2a6f35ea89",
        "cursor": {
          "ref": "f3b9b1e6-8a00-40bc-a1ce-cd30ec9281e0",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "4bc934d7-3e7e-42ab-9b8c-b8a02f0e8356"
        },
        "item": {
          "id": "7d4a46ae-b64f-4b70-b9ca-2c2a6f35ea89",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "f2ffd5e7-3088-4480-bc37-999ce66367e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32e4c360-74dd-41e0-ba60-c4e16d6eb9ad",
        "cursor": {
          "ref": "cdd3ea60-5d5c-48ef-9f99-a3945c3125b5",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "4449619b-8a67-4cd6-b75b-178ddf248dfa"
        },
        "item": {
          "id": "32e4c360-74dd-41e0-ba60-c4e16d6eb9ad",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "a4bfd90b-99d4-47b0-a8c4-ef5d9c6d0c9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aa4bcdb-99e6-4ad0-bb46-1f2a1d7b5791",
        "cursor": {
          "ref": "7fae0dd0-4256-4319-a8a7-edd6fc9555f5",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "4d0a8753-73c5-4be7-a5a9-d071bcfb8cfd"
        },
        "item": {
          "id": "6aa4bcdb-99e6-4ad0-bb46-1f2a1d7b5791",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "00f5714b-5f93-47fd-83fa-330287760726",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "487c549a-219e-423b-afdb-2c7f6e6c6e3d",
        "cursor": {
          "ref": "b5b91104-d075-4df1-ba6c-4e429118fdc5",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "0d4d0d5c-1e7a-4637-b4f5-c4f3e64487e1"
        },
        "item": {
          "id": "487c549a-219e-423b-afdb-2c7f6e6c6e3d",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "8c07dc79-10aa-4b3c-810b-f18ab17fe90f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aab8d53-a2bc-4fcd-b3f4-5444b9461139",
        "cursor": {
          "ref": "0f6d38a7-6181-487e-ac38-a2c9d3d9d664",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "cf2479a6-2026-4179-8398-e5c6cb735687"
        },
        "item": {
          "id": "7aab8d53-a2bc-4fcd-b3f4-5444b9461139",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "efcd675b-6e0a-41d1-a700-1841112b0668",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12f5e777-62af-4faf-904d-55ee113a6182",
        "cursor": {
          "ref": "0d2a0c32-dda0-4267-a5b8-6aa4a1641387",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "76ae4b88-380a-4d5f-b2ca-e9c7a903052a"
        },
        "item": {
          "id": "12f5e777-62af-4faf-904d-55ee113a6182",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "6080a5cb-6a38-48ff-a556-44dca4624829",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "953c86f0-7808-49a3-9ab9-86dd0586a952",
        "cursor": {
          "ref": "52e4a3e1-15d6-45f5-ba62-00bd5e339ddc",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "43b86cb0-7942-445b-a290-5dd847b3d9d5"
        },
        "item": {
          "id": "953c86f0-7808-49a3-9ab9-86dd0586a952",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "7097f9ae-ef5c-40b9-952d-39f426b78276",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a83864a-f97c-4df2-ad07-1c5f3b5ee47e",
        "cursor": {
          "ref": "ca9a669b-7c0d-494a-9bbb-60c0dbd91b26",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "184f1c44-7677-4bad-aa39-a93009beae18"
        },
        "item": {
          "id": "2a83864a-f97c-4df2-ad07-1c5f3b5ee47e",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "d00788cb-fb26-413a-a849-a348b87ae0a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "356a12cb-7a24-436b-8919-9f90a29fc98a",
        "cursor": {
          "ref": "b324ecc4-a35d-4684-b9ae-7f32018b2f21",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "9d529cda-550f-4a4f-9f7c-3ab7567a21c7"
        },
        "item": {
          "id": "356a12cb-7a24-436b-8919-9f90a29fc98a",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "34cf7874-54dd-4959-a4e4-beb34e454b20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7a872c7-85b4-4aad-8066-940c11fca00a",
        "cursor": {
          "ref": "6f251c30-2ed7-416d-9d6b-677ddb8be6c4",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "f0f6a2d3-abae-442c-881b-c89a2f447781"
        },
        "item": {
          "id": "f7a872c7-85b4-4aad-8066-940c11fca00a",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "729b2ba9-a1bd-49b3-89c6-849263c621da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f7e1489-9658-4dbf-933d-dc04da030b49",
        "cursor": {
          "ref": "01321ead-08e0-4016-bcae-a2fef994acce",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "530a28b0-a3f1-43cb-bc03-6d40652592e5"
        },
        "item": {
          "id": "0f7e1489-9658-4dbf-933d-dc04da030b49",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "5ede3481-c1f8-42b1-bf6f-841327fea82c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7acccd59-316b-479e-8f35-97e3a7e21363",
        "cursor": {
          "ref": "21cbec5f-8c81-4286-bcb5-92610e2bd2fa",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "88f073ed-9bdd-4851-a272-d1938bd2883b"
        },
        "item": {
          "id": "7acccd59-316b-479e-8f35-97e3a7e21363",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "7aefd34c-7375-4a28-b49f-e26e94f10f9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a32cf6f9-b482-4325-800a-d521b504de24",
        "cursor": {
          "ref": "47f9bba6-3988-444a-851d-8d496dedebeb",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "4773d5d8-175c-47c5-b2df-cc591c63d245"
        },
        "item": {
          "id": "a32cf6f9-b482-4325-800a-d521b504de24",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "b14e8667-fe39-4e95-aa4a-37baa9e200ea",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "957fbd11-6a71-4950-82eb-a2e0db210ff0",
        "cursor": {
          "ref": "ff7b4308-d676-47cb-8113-010900046cec",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "4de9c5cc-7a61-4b1e-a841-8a956ebbb1be"
        },
        "item": {
          "id": "957fbd11-6a71-4950-82eb-a2e0db210ff0",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "ab4d4dc5-51ec-43fb-8482-cf66b140e46e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d70d1e5-c7ec-4b4f-b165-bb090abf5ddf",
        "cursor": {
          "ref": "1af560c7-12a8-454e-8634-7a43eec1e4e0",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "adf5502c-3511-4d36-b5ed-e426c85896b2"
        },
        "item": {
          "id": "1d70d1e5-c7ec-4b4f-b165-bb090abf5ddf",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "8df9846e-0f62-41e8-97dc-9da72182bf66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98ecea92-9090-4772-9386-21708d91bc25",
        "cursor": {
          "ref": "a1a483ac-02b3-495c-a044-2faeb021e52b",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "2d6630b4-c35f-42e6-ad7b-41ae83ac17dc"
        },
        "item": {
          "id": "98ecea92-9090-4772-9386-21708d91bc25",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "bef0bd62-7c5d-49fc-9b29-e10fe5289151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b818b6d-377c-469e-9697-0f80812f4bd8",
        "cursor": {
          "ref": "983651d9-95b3-4156-a2ab-6f8ff7f536b1",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "b67aa260-7c65-4213-ab2a-a4b3c8999245"
        },
        "item": {
          "id": "8b818b6d-377c-469e-9697-0f80812f4bd8",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "e8710a2d-ef8c-4142-9c38-c6c92a3bad31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b4d0184-1414-45b8-8608-cd8bb2dcb3a1",
        "cursor": {
          "ref": "a90aeab2-5ba3-4d93-90ed-3264df9cd879",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "fdf1fbff-3225-439a-bb72-775a9acb8dfc"
        },
        "item": {
          "id": "6b4d0184-1414-45b8-8608-cd8bb2dcb3a1",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "6d07c528-82f8-4ea5-924a-3d3869818b36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34ef6a83-7885-4d31-a22c-9aa3bc93d961",
        "cursor": {
          "ref": "859bb042-419d-4e1f-a43c-cc664ef3a002",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "0171536a-5d29-497c-8cfe-0defe72578e8"
        },
        "item": {
          "id": "34ef6a83-7885-4d31-a22c-9aa3bc93d961",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "081df97f-210a-4021-84cd-a8952aa08f50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5754d29c-ffbe-467d-b8ec-09553db26d00",
        "cursor": {
          "ref": "34ad8f20-7f89-4be6-82b2-69f59a9e077c",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "4ec7cf9d-7743-4733-b3af-86fcb106edc4"
        },
        "item": {
          "id": "5754d29c-ffbe-467d-b8ec-09553db26d00",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "d613a73d-4664-46cf-9dd0-8dfa7dae1bdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23e572e6-510c-4776-93a6-d3e0273fdde9",
        "cursor": {
          "ref": "81b24950-687c-417a-9327-8d7c2a49209f",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "a19d1012-23b2-4d4e-a6cc-aea293eb2eb7"
        },
        "item": {
          "id": "23e572e6-510c-4776-93a6-d3e0273fdde9",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "8ac861a1-87a8-4771-90df-cf7f629d4a29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d450ebc9-0ad7-4e81-8a8c-837091c2015f",
        "cursor": {
          "ref": "f7a79118-f4a8-4624-aced-7eeb3d2e5330",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "ef548892-cb03-460b-9642-2accd654f5ef"
        },
        "item": {
          "id": "d450ebc9-0ad7-4e81-8a8c-837091c2015f",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "7630b34e-fd36-4872-96d4-8275cc07c060",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1a2d8b5-cec8-4c3b-9f79-e0b1175a3bd3",
        "cursor": {
          "ref": "ccc62367-f510-49b0-8390-28cf4ff5cb05",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "89a91499-8898-4c21-9150-b0ec55bd232c"
        },
        "item": {
          "id": "f1a2d8b5-cec8-4c3b-9f79-e0b1175a3bd3",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "828ad5b7-9085-4a50-a536-b5b36d7056da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af5c2ace-8bd8-4833-9028-fb9bc7b5edda",
        "cursor": {
          "ref": "b1d6eaaa-41ac-4a98-a106-135d365fceee",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "220521fa-e6cc-467d-a494-f340f6e88afe"
        },
        "item": {
          "id": "af5c2ace-8bd8-4833-9028-fb9bc7b5edda",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "e3143e07-bf95-4e1f-81a5-6d574eff7d8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "596ff176-bc09-42a7-8990-d7ac186269b1",
        "cursor": {
          "ref": "3e3246f0-f34f-48b4-a009-f19b4c549717",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "ce8bc0ec-6d72-4a92-84d7-7394730bb7dc"
        },
        "item": {
          "id": "596ff176-bc09-42a7-8990-d7ac186269b1",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "660cff82-f37b-4551-b28d-c2570c033f5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e3c90ad-eb95-4af1-98c3-36b234352a35",
        "cursor": {
          "ref": "1e9756b6-f008-4ec6-b399-f25dcf72b24d",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "a354d544-8b9b-4091-b618-21d693289931"
        },
        "item": {
          "id": "4e3c90ad-eb95-4af1-98c3-36b234352a35",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "e9b29368-cbeb-481b-aca9-310f54cb4330",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a338c1c7-97a5-42d0-908f-369ae39bc950",
        "cursor": {
          "ref": "640fb0a1-d6f8-4aa4-b404-eea93767f795",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "fb48113b-cd01-4956-838f-1e117eec22e1"
        },
        "item": {
          "id": "a338c1c7-97a5-42d0-908f-369ae39bc950",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "cd97e61c-363c-4ffb-82ba-8f21ff2b4f6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82b63da1-7e97-4d12-9d06-42bb93fcdca7",
        "cursor": {
          "ref": "5000d558-0b4e-47dc-b8f4-eb3c8964afc9",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "eed479a2-a7f8-4c53-a91f-373efe506bff"
        },
        "item": {
          "id": "82b63da1-7e97-4d12-9d06-42bb93fcdca7",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "47f89d74-992c-40f8-a671-1dd3477a5f9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6139c3ab-e98f-4041-972c-c1e22cde5fe3",
        "cursor": {
          "ref": "fd21e930-0a29-49b6-9c0f-be229bfac370",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "ec0cff4f-9327-4bc2-8b6c-e3e5f2b0af6c"
        },
        "item": {
          "id": "6139c3ab-e98f-4041-972c-c1e22cde5fe3",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "b420f20c-b49d-4e73-b89f-bf492e6ab938",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1b510a9-b3eb-4056-87d1-835e08009acc",
        "cursor": {
          "ref": "2c71e60a-7fb4-45fd-8f39-e498ec715910",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "7535be97-2ba2-42c6-bf36-de76b7621a67"
        },
        "item": {
          "id": "d1b510a9-b3eb-4056-87d1-835e08009acc",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "dd62fd7f-60de-4366-8b94-ee5d582fe0b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2b6c0df-deea-441c-b9e4-373b0086d368",
        "cursor": {
          "ref": "7cff61d8-f471-49af-8dd1-c02ff8eb0b94",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "3b85c546-3148-456b-a5d5-9b800444af65"
        },
        "item": {
          "id": "e2b6c0df-deea-441c-b9e4-373b0086d368",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "f5fdcb3f-f037-44a2-9e75-92904e114609",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "794c6111-0203-4fc9-98a0-016c3763dd85",
        "cursor": {
          "ref": "c3b6e6d1-99ca-405f-8691-0b256bc68a83",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "d031d329-0ed7-461e-be6d-bd3d74c96d90"
        },
        "item": {
          "id": "794c6111-0203-4fc9-98a0-016c3763dd85",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "0488daeb-334c-4e8d-a4a6-32137d961683",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d3446a8-32b7-45d2-be41-34ca491f36d0",
        "cursor": {
          "ref": "442677d5-de97-4423-b6ef-d65f7b95ff34",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "b7792532-4ffd-49c1-b9da-6748aa24b65b"
        },
        "item": {
          "id": "3d3446a8-32b7-45d2-be41-34ca491f36d0",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "56c2fc1a-3089-45ed-b16a-dc0edf5f67c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "022f7879-d6b2-4d02-9da3-86dc16653fd4",
        "cursor": {
          "ref": "25e46cd2-031c-4867-a3c3-d0707eb5feaa",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "d3da3c26-bb76-410a-87dd-84fd87244dc6"
        },
        "item": {
          "id": "022f7879-d6b2-4d02-9da3-86dc16653fd4",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "1138e752-0782-47dd-98bd-ff7bed5e75f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02c5df0c-5fbb-4d49-888e-23317ac2006b",
        "cursor": {
          "ref": "09d04e36-1ade-4561-b9be-5a17511619f4",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "990f8829-feb6-43bf-aa8e-8955372dd85f"
        },
        "item": {
          "id": "02c5df0c-5fbb-4d49-888e-23317ac2006b",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "f16efeae-9ae6-45a0-beeb-759a4fb5bdf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83a34c53-bef3-47a5-b550-bad175d0f56b",
        "cursor": {
          "ref": "84f874bf-0998-47c3-b0ad-a8ca03efc7aa",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "23a33dc2-84af-4764-9b66-806b7fac0570"
        },
        "item": {
          "id": "83a34c53-bef3-47a5-b550-bad175d0f56b",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "dce730cf-1c21-4853-af93-886968038fa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c61c07c0-0f2b-4ba3-8109-d84c05ceb394",
        "cursor": {
          "ref": "3653f2de-892e-46d2-ab29-87dd209caf59",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "7224ef10-122a-4845-b1bb-1a698098f9af"
        },
        "item": {
          "id": "c61c07c0-0f2b-4ba3-8109-d84c05ceb394",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "b9ea4207-f4e4-4fcd-8f67-67a50d9b2ae7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0529cb75-9786-4529-9b86-14cfec91e462",
        "cursor": {
          "ref": "547fb621-c667-49e5-ab7f-daeb0ca584ed",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "3dd29a80-1f8d-4d4b-9bc5-5dd771184a16"
        },
        "item": {
          "id": "0529cb75-9786-4529-9b86-14cfec91e462",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "9d7ddd7a-ee14-4b76-b824-03edd82d7bbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e0c28a0-5452-41ac-95f1-f9a2d3f3662a",
        "cursor": {
          "ref": "207c0fa1-4fd9-400a-8b16-683904d4871e",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "14ad9f05-8eec-49fa-b261-0b96ba08c130"
        },
        "item": {
          "id": "1e0c28a0-5452-41ac-95f1-f9a2d3f3662a",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "cc8a2012-084a-4e32-8b30-63106a60b536",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1febb61-a039-402b-9254-a70cfb80ec2c",
        "cursor": {
          "ref": "034aa838-2ec0-4523-840c-d115e7298ec3",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "c3132dc9-6e4c-43a0-af7f-e564b70d17b6"
        },
        "item": {
          "id": "f1febb61-a039-402b-9254-a70cfb80ec2c",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "1b1e2473-b13b-4394-9ae9-85c00b1d2286",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc1f62f7-ef1f-4a10-a4c1-a3f91e569db6",
        "cursor": {
          "ref": "115e3ebe-fe05-4ad2-a0c3-c08c2863c236",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "d0adb769-1973-4460-89f0-96ee92d0d1bc"
        },
        "item": {
          "id": "fc1f62f7-ef1f-4a10-a4c1-a3f91e569db6",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "af99f6ca-485e-4d67-8d8b-1b95f5b9915c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14e4f451-fdf7-4031-b137-1d781bad3787",
        "cursor": {
          "ref": "4ce502c3-3714-4a69-9a20-e3d68c5cabce",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "80f8e96c-3ff5-4601-bc08-c605d351d87f"
        },
        "item": {
          "id": "14e4f451-fdf7-4031-b137-1d781bad3787",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "6aa67b2b-7757-4a0c-b924-3dcaf9861d64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9481236f-e2d7-40b5-b554-86ba5a59479b",
        "cursor": {
          "ref": "5165766d-156e-4bfd-b088-749cfe8c9ee7",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "286d77eb-6bd5-4447-a73f-d7e7dce94c8e"
        },
        "item": {
          "id": "9481236f-e2d7-40b5-b554-86ba5a59479b",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "1b423908-739c-4428-b7b4-e5df993080fa",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "656402cc-3f9d-4896-b6b8-1ffe3056ad40",
        "cursor": {
          "ref": "69e46139-139c-4186-a3e4-0f8e75b29a0c",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "870389e6-55e0-4293-8ac0-e16638659d04"
        },
        "item": {
          "id": "656402cc-3f9d-4896-b6b8-1ffe3056ad40",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "441b9cb5-413b-422c-87ed-35e53386ca7c",
          "status": "OK",
          "code": 200,
          "responseTime": 190,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "0cf98038-3a0c-4a1e-a0dd-386ea8c9b736",
        "cursor": {
          "ref": "0892dcf1-c131-4b24-8cea-b6be53ce748d",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "c846c138-5323-4cf4-8550-f3e07ab2c04f"
        },
        "item": {
          "id": "0cf98038-3a0c-4a1e-a0dd-386ea8c9b736",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "2300fb04-5994-461f-8339-68293bd57c17",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "7cb54140-8d0a-4f69-bae5-1bdf8746e3fd",
        "cursor": {
          "ref": "7a64928f-dbb9-41bb-a3f9-e82a62989b0b",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "71eca633-d63b-458f-a4b7-a947b75d4ab6"
        },
        "item": {
          "id": "7cb54140-8d0a-4f69-bae5-1bdf8746e3fd",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "95334c9f-7b92-4156-9498-b74c00ca6c3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b53cacf-8327-492f-935b-f092685dc68f",
        "cursor": {
          "ref": "054c419b-7fe0-4202-b8f2-94dcec17da08",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "5a6c1e99-c393-4763-8dec-a18b91c5db58"
        },
        "item": {
          "id": "0b53cacf-8327-492f-935b-f092685dc68f",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "ebd19830-7f3c-45c9-8aef-9f55a3193dcb",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "0618c5d3-0516-4aaf-95b0-d82e945b7873",
        "cursor": {
          "ref": "397702e6-370d-40fd-bef1-6f11d3ca8656",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "a8718bac-d0a2-4caf-811a-84f442d8549f"
        },
        "item": {
          "id": "0618c5d3-0516-4aaf-95b0-d82e945b7873",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "ae36dffd-646d-4861-99d4-250b59a0e473",
          "status": "OK",
          "code": 200,
          "responseTime": 162,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "869c8d84-4534-4f19-8c87-54888805661f",
        "cursor": {
          "ref": "2f935036-c87a-429c-a815-3b4204d16e03",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "9fd78473-d0c5-4b89-98ef-52b7f3bd1d53"
        },
        "item": {
          "id": "869c8d84-4534-4f19-8c87-54888805661f",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "fad3c864-a82d-4d93-8700-138957b30f73",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "ebac1e94-cca2-4d58-a8d0-5af4daa532e4",
        "cursor": {
          "ref": "25e8fd19-30f4-4c62-a487-0b6fafa887b1",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "f61e1b88-baf4-49db-9415-30435f3e0c7a"
        },
        "item": {
          "id": "ebac1e94-cca2-4d58-a8d0-5af4daa532e4",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "4fcd7d0b-d17b-47e8-b416-c38d47281cb3",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "455b0d82-d7b8-4672-af05-402107bc438b",
        "cursor": {
          "ref": "830b1d4a-624f-4a03-863e-5a1117a9cb31",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "265bb406-46c6-4723-ae22-6b00c529d45f"
        },
        "item": {
          "id": "455b0d82-d7b8-4672-af05-402107bc438b",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "2db8a5a5-9648-45b4-8899-f205379c9e6f",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "3a0c70ff-d018-435a-98e6-feaf1cc94999",
        "cursor": {
          "ref": "9cdf44a8-8bc3-4188-b3e3-823ebf8031fd",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "3dfc1d77-6af3-486f-acda-8d0cf3ad06e9"
        },
        "item": {
          "id": "3a0c70ff-d018-435a-98e6-feaf1cc94999",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "55683cf8-0801-4947-a021-190ede1be9bf",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "a7168796-1c97-495a-a517-4a38ded1e051",
        "cursor": {
          "ref": "f4032166-673f-4181-8551-4a88f81665fe",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "ceef17fb-3de2-4dec-a0ad-6e5eb7fd6a32"
        },
        "item": {
          "id": "a7168796-1c97-495a-a517-4a38ded1e051",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "f44c945e-70b8-4f5b-bf77-7507d22f40c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c384ebed-48f9-4f1b-a07b-dad15d3ee526",
        "cursor": {
          "ref": "bdd0e55b-76e3-4f15-8562-8a69237532e1",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "f3d7406f-b6a2-4493-8738-c3aceeb90072"
        },
        "item": {
          "id": "c384ebed-48f9-4f1b-a07b-dad15d3ee526",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "01156a08-f9e7-4583-a56b-083936e67ebc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba10a877-fdf2-4a34-8041-07069ff91f67",
        "cursor": {
          "ref": "f231f9af-e2d3-4d2b-91fb-f28ae5664dd4",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "6ca76bfd-2492-409d-967f-c20fa07d751e"
        },
        "item": {
          "id": "ba10a877-fdf2-4a34-8041-07069ff91f67",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "9d3a4b5f-4f7b-41bc-a13a-2558fa8a44d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e4f7124-9af7-4132-b245-07219caa2564",
        "cursor": {
          "ref": "fd8b435b-efcb-4834-8af3-67fed49b8ff0",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "8cb2e61b-0d17-4c6d-825b-7e934b38ce42"
        },
        "item": {
          "id": "1e4f7124-9af7-4132-b245-07219caa2564",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "2f6040c9-01c7-4349-a79f-119f9a226dac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82c124f0-49cb-4890-90ee-fd2074457012",
        "cursor": {
          "ref": "52c02ea0-1211-4e28-a602-e7344e5de3e2",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "b7832452-e32b-4505-aedf-c9bd1c536199"
        },
        "item": {
          "id": "82c124f0-49cb-4890-90ee-fd2074457012",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "2ad34727-c090-487c-871a-ab22990caeb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e46efbf-9140-4580-aeb7-41e4586825bc",
        "cursor": {
          "ref": "f7879416-402f-4dd4-b8e2-443b42e03cd0",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "45551c7b-b0d0-4f4f-a53d-3cca76076936"
        },
        "item": {
          "id": "5e46efbf-9140-4580-aeb7-41e4586825bc",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "1cc57e8a-c772-4d25-93ba-33f423220c8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0938535-29e6-43a2-9190-9e5ae355f115",
        "cursor": {
          "ref": "9ca6cf80-33b6-4abd-a09a-c7e2c1e08696",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "218c6025-25df-45dc-9e1d-5cd20483de28"
        },
        "item": {
          "id": "e0938535-29e6-43a2-9190-9e5ae355f115",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "aa853667-f816-4b70-b1d9-eeebe3e2a647",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57073682-c899-409d-a0c9-a5608412d9f7",
        "cursor": {
          "ref": "0bbe274b-bee1-4690-bfc9-64e37e589493",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "6c557670-92c9-40f4-8551-13e39127548a"
        },
        "item": {
          "id": "57073682-c899-409d-a0c9-a5608412d9f7",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "8eeb9f6f-a6f2-4445-9e5a-ae4c164b09d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf935ae8-0695-4fb6-874b-1976cce7757c",
        "cursor": {
          "ref": "3de256d8-62c5-433e-bf45-ec7936c569b1",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "5ca637ae-2677-42a7-a141-6935dd8a987b"
        },
        "item": {
          "id": "bf935ae8-0695-4fb6-874b-1976cce7757c",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "c50ee41e-2568-4c30-961e-111c4e51542f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6395956-83a1-4316-bc00-c564fbdfc072",
        "cursor": {
          "ref": "14937763-ef17-4234-b4a2-f105f4c670bc",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "eb872aa4-7dc1-4f9d-8615-096a774ebb04"
        },
        "item": {
          "id": "a6395956-83a1-4316-bc00-c564fbdfc072",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "7c60d9aa-1379-4618-be0d-d0c07e1de575",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67d5d425-adac-4b1a-9ac1-be6d5d1f7d25",
        "cursor": {
          "ref": "0cb3975c-2843-40ed-8f4f-2911437846a1",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "927646d4-a8b3-4508-9e74-b9dbb4286b33"
        },
        "item": {
          "id": "67d5d425-adac-4b1a-9ac1-be6d5d1f7d25",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "75633b3a-9cfb-4f69-8c8b-9e4a7433f8f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a5ba563-9e9f-4f95-9e12-5ac6c3d8bd5b",
        "cursor": {
          "ref": "527d1bd4-172b-414a-83e1-a642475afe74",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "1f003cd8-ef75-45e8-9801-0e6ee0ef5102"
        },
        "item": {
          "id": "1a5ba563-9e9f-4f95-9e12-5ac6c3d8bd5b",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "7106b7fa-0505-4e53-a6b1-fd917b76ffb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91f462db-ef76-4d03-9a87-9f01758d1b36",
        "cursor": {
          "ref": "2754f193-5f53-4c35-8a51-c828025e5842",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "de8b9f79-4fb1-452c-8d56-45053f1e499b"
        },
        "item": {
          "id": "91f462db-ef76-4d03-9a87-9f01758d1b36",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "65e286bc-f9ce-4eac-bfa3-d21eb549ccab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9f373ae-c635-4c43-a985-fcd35dbee0ab",
        "cursor": {
          "ref": "8ad797aa-9b8e-48d8-a2f5-8013fb14788b",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "28f5bef5-a64a-42b6-853e-4cd352fe17aa"
        },
        "item": {
          "id": "f9f373ae-c635-4c43-a985-fcd35dbee0ab",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "8e31dcee-4e73-49ad-bd42-b7c4c3ea143f",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "b1fb658c-fd75-483b-b0dd-f3fa43936ef1",
        "cursor": {
          "ref": "01bfd85b-44ba-4379-bdc6-2942665e888f",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "f2837dd2-76b2-48fb-bb82-62b2d8321b05"
        },
        "item": {
          "id": "b1fb658c-fd75-483b-b0dd-f3fa43936ef1",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "91fe864a-5aba-4757-bc4b-f824fea188ed",
          "status": "OK",
          "code": 200,
          "responseTime": 147,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "8fa3800c-a23c-4c02-a014-3fce86b85d74",
        "cursor": {
          "ref": "37ceeb5a-3726-47ba-982d-567886d86216",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "68ad1f6e-0204-4a69-885f-4f73b9c81c3b"
        },
        "item": {
          "id": "8fa3800c-a23c-4c02-a014-3fce86b85d74",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "a2473020-68c8-49b2-ad21-9655bb97a69f",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "e1fe2fdf-68d6-49ad-b84a-1034ce36564d",
        "cursor": {
          "ref": "d2d643b3-8f9f-4d3d-8453-f2fb3eb96f9e",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "9106155b-c4da-4aa0-a599-14735e8a4b80"
        },
        "item": {
          "id": "e1fe2fdf-68d6-49ad-b84a-1034ce36564d",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "e2b356b8-4840-4a35-bae0-fd940cf31844",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "d63814bb-1014-4ca8-9bb2-302c2d162254",
        "cursor": {
          "ref": "fc33e422-d284-4a52-a083-9c67f9a0e3b0",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "4e587dfc-4370-4896-9d95-fe553c747f1f"
        },
        "item": {
          "id": "d63814bb-1014-4ca8-9bb2-302c2d162254",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "9cc3262a-2652-4a82-a9af-d6f737a76ca8",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "e2164ba5-070f-4b71-9747-9555ca69db49",
        "cursor": {
          "ref": "107bcf9f-2205-45c3-84a7-bedb97e38a64",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "392477b4-4f0e-4bf6-bc6e-3f5fd0db2e84"
        },
        "item": {
          "id": "e2164ba5-070f-4b71-9747-9555ca69db49",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "89fb26c8-55cd-4033-8784-76fb56bb47ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32cb985f-a471-4ef1-b107-9facd7ebfd1c",
        "cursor": {
          "ref": "9ee2e864-b927-4fce-9172-3bdc662822a8",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "7502eab3-cd9f-4fce-94bf-3cbd4b4b9640"
        },
        "item": {
          "id": "32cb985f-a471-4ef1-b107-9facd7ebfd1c",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "a4241759-2185-406e-8d61-ed56608c0922",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96a544cc-36c2-46d9-970e-e0965211a577",
        "cursor": {
          "ref": "88e546b0-a1f3-486a-bf53-7ee113bb2968",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "9aa4b397-66fc-451d-b445-eaeac72a8f0a"
        },
        "item": {
          "id": "96a544cc-36c2-46d9-970e-e0965211a577",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "467495b4-80f8-4f8d-9a36-eb233bf45cab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "206f1275-2672-4de9-adfa-c9376259c6cc",
        "cursor": {
          "ref": "cc0fcb14-d984-429b-b47c-023521d2b1bd",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "a0c8014a-99d6-4535-9110-2d517c2504cf"
        },
        "item": {
          "id": "206f1275-2672-4de9-adfa-c9376259c6cc",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "cf015f43-c702-4ee4-9cdc-20e54a43c71a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b402e50d-33a5-42f1-91e9-348100b5812c",
        "cursor": {
          "ref": "bfcfa840-ad11-45c2-ba2c-3055e2094c27",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "37b998dd-83de-44f3-951b-a52c986c9442"
        },
        "item": {
          "id": "b402e50d-33a5-42f1-91e9-348100b5812c",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "206737f3-8f22-4009-b668-260188c2d6da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2c6268f-5903-425c-8d66-7a7ed02e5fe6",
        "cursor": {
          "ref": "87d4c775-47cf-4167-a9a8-2c1b0d119693",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "927b942e-793e-4eec-a523-ebbb6c1f4322"
        },
        "item": {
          "id": "a2c6268f-5903-425c-8d66-7a7ed02e5fe6",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "2e68cb2b-f716-4ee5-a116-5a853e0a4775",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91dbf477-54df-4e8d-8c7e-e5b16b1a3404",
        "cursor": {
          "ref": "37dfe8ac-cdb9-49af-965b-e5deae10cb70",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "1cf2d0cf-dfc5-431b-b5a2-3adefd679df5"
        },
        "item": {
          "id": "91dbf477-54df-4e8d-8c7e-e5b16b1a3404",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "08cede8b-23a1-43fa-8cbd-fca1a20376c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec522eac-e12c-491f-95d1-2a086d190071",
        "cursor": {
          "ref": "54a4760f-2946-4782-aee5-64b1e06ac832",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "e5cdddb6-13ad-45f4-a952-ab43d0cc2ecd"
        },
        "item": {
          "id": "ec522eac-e12c-491f-95d1-2a086d190071",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "12df7c2c-be79-4223-ba64-44b768a83ac1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59f387e7-3f5a-4a6c-9bf1-bd3874b13139",
        "cursor": {
          "ref": "0d6df8a5-90f9-47ba-8d9a-46ac4187f7a4",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "52d43182-b0ec-4c46-bb9e-59c011297798"
        },
        "item": {
          "id": "59f387e7-3f5a-4a6c-9bf1-bd3874b13139",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "524574ef-a6c7-4f9f-8b76-f2839d174a7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0db077ab-04fe-4c02-b050-4675927b1a45",
        "cursor": {
          "ref": "31c48801-b3c7-4804-9609-207ce6e65d95",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "520a7be4-c4e8-47b1-b707-f3e20e47253e"
        },
        "item": {
          "id": "0db077ab-04fe-4c02-b050-4675927b1a45",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "6b905754-b8d8-4992-b6d6-7e91ad11f642",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69a08732-0e22-4854-b34d-94490014a3e6",
        "cursor": {
          "ref": "593513d1-851c-4e62-8411-c3cfe04919ff",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "6f2b6f6c-af0b-4502-a0c2-e72eda79a4c5"
        },
        "item": {
          "id": "69a08732-0e22-4854-b34d-94490014a3e6",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "f7ed54f3-c7bc-423b-9495-be325c17d146",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cfb8428-a38b-41b0-95da-a647f903ae15",
        "cursor": {
          "ref": "f9dc4d74-01de-496c-be0a-49178ff56857",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "fd57d2f2-4c75-4b35-b580-11d275dc65e6"
        },
        "item": {
          "id": "6cfb8428-a38b-41b0-95da-a647f903ae15",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "66b09e3f-62b6-419c-8bf3-bbdc2854a5b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdd77e05-adb3-4a51-8178-a69a112000ee",
        "cursor": {
          "ref": "4c8209c4-2db4-44db-a0d8-451e3d22209f",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "8d6cd0a3-6600-4d99-8c76-668526d32fd8"
        },
        "item": {
          "id": "bdd77e05-adb3-4a51-8178-a69a112000ee",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "f0242c7a-b36c-47aa-9d2a-7e58adfe1b99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92c54340-bd8e-4d2f-8fe6-f8564953521d",
        "cursor": {
          "ref": "351a1553-bf38-4132-90dd-b0d3d58f1690",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "58362eae-74c9-4ef0-9c45-241ef6436801"
        },
        "item": {
          "id": "92c54340-bd8e-4d2f-8fe6-f8564953521d",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "a68b4af6-34d3-4536-8326-89feac398b96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f34c37e5-b37a-4c9b-b927-13fb514a7ba9",
        "cursor": {
          "ref": "2d15fa1e-bb99-44ba-81b0-4f0ed4e1e369",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "5468cec5-e1fb-4983-801f-8e0e7de632f0"
        },
        "item": {
          "id": "f34c37e5-b37a-4c9b-b927-13fb514a7ba9",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "361bcb83-11f4-4039-bbb6-49e567b04534",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34101048-647a-4715-b850-bcb6b0b02f0f",
        "cursor": {
          "ref": "d301cc9d-80fd-47f1-bf4b-f79a2a026c5f",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "061f062c-fdb9-4bd4-8142-dc00644c69e6"
        },
        "item": {
          "id": "34101048-647a-4715-b850-bcb6b0b02f0f",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "6df08ff9-d48b-4c41-8bc0-b386c97d4cae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c681a93-d02e-4528-9d4a-4471c34c9925",
        "cursor": {
          "ref": "33d8fc32-b7a2-4a1f-9ec6-bbef3484deb6",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "61a5b990-fbb4-47ef-8d03-f20296b820d6"
        },
        "item": {
          "id": "8c681a93-d02e-4528-9d4a-4471c34c9925",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "7ef85ac5-60cd-4838-ae3f-e2fb1315ab38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d83dec5-968d-4c98-8f61-1d409614020e",
        "cursor": {
          "ref": "1eabaf9f-36f0-4817-91bc-7f7dd1d27bc7",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "b7195523-ac69-4b43-8d0b-f299bb4a6460"
        },
        "item": {
          "id": "4d83dec5-968d-4c98-8f61-1d409614020e",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "1993256a-6dee-4de5-bcab-44330deb9e5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4a2666a-0581-4365-9c40-a7645a8661e9",
        "cursor": {
          "ref": "77fa8a30-9ac8-491a-860a-948999d0a074",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "f855b1ab-5e7c-496c-9f86-343ad5c9389f"
        },
        "item": {
          "id": "e4a2666a-0581-4365-9c40-a7645a8661e9",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "913e7e09-d63d-44e9-a995-fc479dbc4870",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "525b49d7-d425-42a5-83da-cc7e1cff4b6d",
        "cursor": {
          "ref": "75a2cd8b-3142-4022-91e3-89f4eab96af1",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "b008f684-7c18-4bf9-9a76-bf15f0508df9"
        },
        "item": {
          "id": "525b49d7-d425-42a5-83da-cc7e1cff4b6d",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "d8ffcae1-3b09-481b-b83c-8cad3acb760c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd74f18b-7c58-4772-ac91-7a92671aae2e",
        "cursor": {
          "ref": "2f05c822-eb88-4243-a7ff-f1e225b4b1c2",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "14ce7bc0-db23-43e2-8b19-af2d97aad97c"
        },
        "item": {
          "id": "fd74f18b-7c58-4772-ac91-7a92671aae2e",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "ddf0b127-c6ad-4768-a66a-48f7f9e18621",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ab7159a-05b4-407f-bd3c-09b1be8ceb98",
        "cursor": {
          "ref": "44ab2a4f-707d-4a9f-ab1f-227f764d6804",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "709b44e3-d081-4ef5-9d49-058462f7fc37"
        },
        "item": {
          "id": "2ab7159a-05b4-407f-bd3c-09b1be8ceb98",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "a124e265-9a43-4945-a04f-5d582299d03f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad03f0e7-7fca-4633-ba50-8c36f1bed8a9",
        "cursor": {
          "ref": "52b54fa4-9554-42b1-aac7-b8cab38cdf4b",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "3aa58fff-c18b-4b93-9b25-aaa12f0305b1"
        },
        "item": {
          "id": "ad03f0e7-7fca-4633-ba50-8c36f1bed8a9",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "2792c4d1-7cc2-4f1a-8a0c-2195b2514d58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5276e76-4413-4809-ac22-f6074eaf3b26",
        "cursor": {
          "ref": "32d1459c-5906-46fb-bfd5-9d9edde08153",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "420f8694-b287-452f-8511-9e53191bc6b7"
        },
        "item": {
          "id": "d5276e76-4413-4809-ac22-f6074eaf3b26",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "6208ef26-2504-47af-9cd4-10c6e4a5c8aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e55ef07a-bfca-4905-a2e2-4c1243f7fc8c",
        "cursor": {
          "ref": "bef256b8-04e6-4450-baea-b52a51b0b953",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "50213185-dfe4-4eff-89f5-031f5ff90011"
        },
        "item": {
          "id": "e55ef07a-bfca-4905-a2e2-4c1243f7fc8c",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "e9f5098d-9d74-459f-bf6d-842643b39a92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4717b71-f2ec-4360-8282-7253a9663925",
        "cursor": {
          "ref": "45d4e5ed-0321-44f4-894b-ca99c11339af",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "6fc9b722-2a67-4382-905f-bcf99c800567"
        },
        "item": {
          "id": "a4717b71-f2ec-4360-8282-7253a9663925",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "d486175b-1c88-47fb-bb73-0dbed1489c42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab68a591-046c-4792-85e7-3b7d38fb8c59",
        "cursor": {
          "ref": "956029dc-600f-4835-9262-69e8a2ce7cb7",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "c233d0cd-954b-4f21-a49b-6f1fd6708bfa"
        },
        "item": {
          "id": "ab68a591-046c-4792-85e7-3b7d38fb8c59",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "aeed26e2-844d-4114-8b84-e96714772dca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db9a4656-ed43-4c7c-b262-5768d0d74369",
        "cursor": {
          "ref": "f0f0dcb4-747a-4dc1-9c11-14783529bc42",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "805fff93-1d5a-4e98-b410-5ce76fbd7d22"
        },
        "item": {
          "id": "db9a4656-ed43-4c7c-b262-5768d0d74369",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "1585e4af-2ef0-4005-b0f6-f70ff830f30b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0cce53b-e7c2-4c6b-886b-d85f3ed295c8",
        "cursor": {
          "ref": "df75cb66-090e-43a5-982f-591485883d33",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "bfbccb4f-b018-4823-9783-47117a7b0a12"
        },
        "item": {
          "id": "d0cce53b-e7c2-4c6b-886b-d85f3ed295c8",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "3af7fe6b-7a96-4af5-9f9a-e893c32f3253",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d04c92ea-4420-4f27-b307-4ab37ed530a7",
        "cursor": {
          "ref": "2d0b2b03-4d41-4c4d-ad41-9017413edbe4",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "7ff2460a-6e70-4e60-b3ce-a3703feb3795"
        },
        "item": {
          "id": "d04c92ea-4420-4f27-b307-4ab37ed530a7",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "a82ee1ed-e10b-40ba-a8eb-89ad839e0c68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a4303ae-0ba1-45f8-9077-8aef3d412e64",
        "cursor": {
          "ref": "75d7773c-b6d2-42e2-89a8-596dff2a5a1a",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "6d096a0e-6994-43d3-9b05-a21912385584"
        },
        "item": {
          "id": "8a4303ae-0ba1-45f8-9077-8aef3d412e64",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "361be103-4ad5-4272-86ab-16602d7aafcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57e7c5ca-985f-4564-821e-b80d52fb2408",
        "cursor": {
          "ref": "442d7c8c-3241-49f2-9aca-34e5bf1cff89",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "ecb424c8-3b8c-42e3-9ef8-ef5fad9bef79"
        },
        "item": {
          "id": "57e7c5ca-985f-4564-821e-b80d52fb2408",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "d1fa9ca1-b310-4f29-9667-c53f8e873ec0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "876d602e-713f-4df1-ac46-11e3ac17088c",
        "cursor": {
          "ref": "37764433-b436-4f04-9e40-866dbab7002b",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "18b03b51-de54-451c-86f6-b6274961527b"
        },
        "item": {
          "id": "876d602e-713f-4df1-ac46-11e3ac17088c",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "1ee099a0-62c7-4a78-aad7-d51275d259b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3578ae3-4d94-423d-94a5-b5c517daf392",
        "cursor": {
          "ref": "66c22856-da6a-4997-baa7-aa09eab8379b",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "cd15ce7e-30af-4cc8-9584-daf097f7f8f5"
        },
        "item": {
          "id": "c3578ae3-4d94-423d-94a5-b5c517daf392",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "ce523984-8836-44de-8d3d-965561249d3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f6ef67b-f417-41dd-9d52-5ff08877d5fa",
        "cursor": {
          "ref": "e91bf74c-b803-4768-a052-f158196cc2c0",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "1cf7c9f4-dc66-4fc3-98d5-f19a198a83da"
        },
        "item": {
          "id": "6f6ef67b-f417-41dd-9d52-5ff08877d5fa",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "0f2d25e4-a71f-4749-8ab4-ef4cce036abd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c837b7fd-7007-4161-8b1b-6d6ba648f0fb",
        "cursor": {
          "ref": "19e47984-cac2-4f78-beff-4ed4b9e03e88",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "4b3e6fa1-c4b2-47d5-a58d-a2d3e649bb68"
        },
        "item": {
          "id": "c837b7fd-7007-4161-8b1b-6d6ba648f0fb",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "d6828f7f-f353-4b90-a2d8-dbfee5b89a19",
          "status": "OK",
          "code": 200,
          "responseTime": 148,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "b778a769-c35b-4b9a-a592-21355216be49",
        "cursor": {
          "ref": "941c76e0-10fe-4c63-8b39-2e5f2c932fb0",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "121449a6-556f-43a0-a2ef-7a13f985fa5f"
        },
        "item": {
          "id": "b778a769-c35b-4b9a-a592-21355216be49",
          "name": "credentials_verify"
        },
        "response": {
          "id": "7e8f5fc7-d005-4773-9a0b-778c4f7aec84",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb7e6668-a99b-49df-9446-5bd94ab2c041",
        "cursor": {
          "ref": "3851a70b-d5c4-4289-a835-11a6b4edbcca",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "252b7c1d-e00a-4302-a2e4-2d1a71666453"
        },
        "item": {
          "id": "cb7e6668-a99b-49df-9446-5bd94ab2c041",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "584714a4-5d15-4549-b95e-13884398be68",
          "status": "OK",
          "code": 200,
          "responseTime": 152,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "56679f24-39c8-4483-9cdd-a87e4e0c6452",
        "cursor": {
          "ref": "afe373ea-bacf-43ff-a38b-01abedb8a77d",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "be8a6235-9500-4152-ade2-73e6d95620cd"
        },
        "item": {
          "id": "56679f24-39c8-4483-9cdd-a87e4e0c6452",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "985ec6b9-77cf-4804-9510-faa143eeef2b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56679f24-39c8-4483-9cdd-a87e4e0c6452",
        "cursor": {
          "ref": "afe373ea-bacf-43ff-a38b-01abedb8a77d",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "be8a6235-9500-4152-ade2-73e6d95620cd"
        },
        "item": {
          "id": "56679f24-39c8-4483-9cdd-a87e4e0c6452",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "985ec6b9-77cf-4804-9510-faa143eeef2b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06d0abc4-1e81-4b23-9c8e-330d75a6d7d4",
        "cursor": {
          "ref": "2c6d4792-930c-4e50-a697-2c955094c2b2",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "7236b45a-d0f3-4f08-9604-3047ed8041aa"
        },
        "item": {
          "id": "06d0abc4-1e81-4b23-9c8e-330d75a6d7d4",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "e777bfd7-fcb0-46ce-8ec0-5ad8447f6094",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 123,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b3be04f-795a-4263-8f70-04e7704af019",
        "cursor": {
          "ref": "5f28bc10-f9c7-4150-ad7c-8a2739b35c42",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "52275e47-bdcb-449b-8c68-387fbcc23cef"
        },
        "item": {
          "id": "6b3be04f-795a-4263-8f70-04e7704af019",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "44d53959-df2a-4a7d-95c2-df81a60fc3e4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 69,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}