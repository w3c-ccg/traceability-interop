{
  "collection": {
    "info": {
      "_postman_id": "4bd78d4a-8f35-432a-a4e9-9e5a47c7c93c",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "c9f46940-5ade-4aa6-8557-9b3fe7c9cf1d",
        "name": "Clear Cache",
        "item": [
          {
            "id": "2b1413dc-e8ac-49b2-b499-da1085785572",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "89c4d1ef-b70d-40ca-8c8c-cbfaae5d7f5a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "dcaa3ab1-3357-4746-8c4f-f80b32859eae"
                }
              }
            ]
          },
          {
            "id": "33e88a62-8ec2-4bbe-9567-c04758b600bb",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a910da03-bb35-49b7-a717-358cb571e900",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "83c28e49-59fe-458c-8ce1-6dede5c2e92f"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "51dcbf63-9602-4bf7-9a66-7b80ebb2859f",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "ff8b0ac2-7e11-4cd9-a2e8-de3c1a4ffcfc",
            "name": "Positive Testing",
            "item": [
              {
                "id": "02054991-a56b-4b83-9710-4d835fac20f3",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f7190482-3627-4b26-8116-e7c630507fdb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7ecafdc6-36f7-4a04-b148-902f7e90439f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f6d6bce6-1559-4ccc-bf89-337a8ef4bbe0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "25bd024f-5e0c-45be-baff-88a56b128ed1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "cc5b03e8-8bd5-4c31-a41d-c096b8acf08a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4c6b82f5-16d8-47d2-a95c-dc1015585412"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "10c3f6b6-d65f-4973-95aa-f275e6feb919",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "80a1b61a-7f48-4121-94a8-d21a967c1322"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "00bc2229-7de4-4783-a3ba-243f2fd36499",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "68005cad-de32-4277-90f0-26fac00c929c"
            }
          }
        ]
      },
      {
        "id": "720dd2af-0f4b-4a13-8a13-c328781e0d28",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "51433ba3-6c8b-4366-a82d-42eb7070b8eb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "64ec9d18-c90a-4689-8192-d3e71da895c3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4875a958-68d8-4499-be18-d066446997e6",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aae10d29-c5f3-47e6-9a66-43a4e13f879c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "528ef30e-9919-4777-9843-ea5d49ddebca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec320609-4bc6-466c-9608-45783fbe6caa",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d61d1321-0025-43c6-a5ed-101c9b1da493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "db2844c6-3d77-4cb5-a3ae-36ed99b38207"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca62e249-f40d-4413-be1b-6efb97a0468c",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac7fdc57-b0a8-4e55-b30e-1fbde6bef672",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "45ce731e-7a6b-419c-8202-f0e081aaec06"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2cd4fa6b-c797-4278-82c2-c222d7ced2ba",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cb390a1a-4a17-4c16-8d21-fdb74ea05218",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8768f689-0ad5-4e07-8731-3bfb60573424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0fcd7231-2612-44a5-b650-61ac0ffe2793"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bdda244-16de-43a0-86ae-14c0d892cdbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f980322-e578-4c82-9df0-e382874127db"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "d1bb4070-febd-4a70-a569-fec564abac25",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3499b7ed-17e9-4fae-98ce-55a2c1469956",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "21e38d5e-9fa3-47b0-a940-e94d06f8c75e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "f63f2f8a-a9a9-4c90-a827-82a46a1a8657"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "18a4a994-fb94-427d-9305-7ec1319fb496",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "19b264da-7eac-4301-907f-b6bbca9486e2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c27a52fe-ad4a-4ca2-a3a1-b49ceda9f4d2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "545efd76-709d-4ac0-8e7c-7aa57b38d70f"
            }
          }
        ]
      },
      {
        "id": "c3d37e3e-ad40-4240-a530-5266f3a6f558",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "61bf5e3b-94fb-49b3-b35c-b5348eeac33d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "88652ead-8de4-4161-92d0-e120ec202d59",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "0af4dfae-1ac1-45da-acb1-c4adf054c9e1",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c7ba46d-07d9-4733-8c9a-9a2e7c71750e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25b2face-f519-49b2-87eb-3fb5262a71ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fca55a1-53c6-4758-9351-2e51446b7522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cba633d0-91e3-4729-a1b9-25dd5b2f97a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d741ba0d-6f05-4586-9a79-2ff447362f64",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98c8226b-64cb-497a-aa00-1c014629cef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0edc92d2-d8cc-4337-8c9f-846023f54242"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7be866a4-116e-4bda-b9c8-fb07a61ec44e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f757c73f-a459-4b40-887a-cead84843fdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d31590a-a20a-426f-869f-e8f2c3e086ad",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70759eb3-0544-4e00-b3c5-a35333f486ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c337cfef-5099-4880-a375-ba99cabeaec3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4ca39f2-5963-4120-a258-304735f47156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a4412c41-85f8-401e-a30d-3d39396742d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7e88c6d-ee09-47f0-8d67-73a41513cf11",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c2b053d-1d6d-462d-9095-acc54168fad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd003cde-6e8b-43cf-b523-2473dd6a2505"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cca4e96-7b2e-442c-a6cf-63df710d06ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "21ebef09-c71c-40b7-bf60-90bb9c3874f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c5621e2-0947-4cad-8a67-829e3bda8234",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0c1e889-7eec-432c-a480-d90a4536fd99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "993fa498-9dd6-4ec4-98e1-be0d5272a0ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00360145-0348-4dcf-8624-d6ea2726f318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0c70ca14-657b-4d44-8cd8-27f36cec76e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b384c7f4-878a-409c-88ec-79b7e5751eaa",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c026ef1d-9d70-42fb-a61a-1e4e7ae62343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "053ea4ae-6517-4a29-b2ef-73865fe372b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "779602d4-5f0f-4a99-88b4-c473d9d090af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d2d02d64-f5d1-4e91-8527-36c9471c6f02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a43908a-fbc7-4508-b463-f1af35d84dbb",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86f437d0-3c53-4747-bd82-271c17a8ec7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a31c2e1-a88c-46ec-867a-cf86d68fedff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "544df412-8ee1-42fb-a1f8-4769e3fb21df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c6214c71-8c45-4544-b51a-0f5823a15894"
                        }
                      }
                    ]
                  },
                  {
                    "id": "826cd7b4-0fa5-4cad-a29f-556db92c2d39",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da73610e-f7d9-414c-bc22-029351191844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e315f348-8706-4f24-b3b6-056847b89b85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5ccc8bc-b5e8-4505-a827-9056e8d643c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "784dcb51-8aa6-4a98-89f8-f6688c46c20b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "580ffdc8-04dd-49d1-9e1f-20c74c832d96",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e63d0864-84c0-4516-92ef-3a0d5602539c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f76ac12-658f-467c-8b7d-4da8b9977cd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7a81c8a-fe2b-4dad-8dac-09ee3658a3e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "080af4e6-904e-441c-a175-a5bab0c7c5ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fce3f31-62b6-40af-878e-72f962fde577",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4415a4b4-5d8f-459c-be98-a84297d08d7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d048bc72-0a67-4f30-9367-809f00a2e389"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7908b6bb-fe51-4a3e-aad0-1624570b7095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f8d0144b-1800-4212-af86-a0e5f80f9fc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64f2137b-5345-4ea4-8d5f-bd2508f3686a",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd259e08-0eca-4e32-9ce2-f2d25997a568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12c012bb-63ea-4e79-898d-213ba06087b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "300f0270-a59f-4c7c-9f34-7a35aab1cc0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8d02a678-dcfc-45bf-bbff-ecda6a48679c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c1ef23e-a1de-4119-b3de-33af758be4ee",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "692bab70-247e-4a83-980f-66f8efa1417d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef6bc02c-ab39-434c-94d0-5986b2b6253f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30b2dbfa-e004-40bc-a8f4-fb7b66c51dae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "94a4d13e-9af3-4ec8-bfca-a63cdd286a60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9967f7bb-22de-4527-997e-a5087700a806",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0581b3a-e688-4865-94ed-83d794a30b16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "555b7a6a-f153-49fd-9701-ff8110c3b448"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e464d85b-6512-4815-8af4-a21acd4558ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b87cd8d5-a7bd-42a4-b973-988e33b16536"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7046a3d7-0c5f-43c3-801d-e814ee89dbca",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b5db8ad-47d9-4ffc-95d3-e5a5742c23a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d80a9fff-ee67-4470-8305-015015c13a1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b418459-ecbc-4b94-ba58-3d25fef76cdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "48981d15-aaf5-4dd4-950a-043ea99cc85f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdae3d6a-cfd9-46d4-9080-0328d0fc7587",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01487258-91f3-4409-b5cb-34036dc543bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bfd054a-ddf9-418b-926d-35391efc353f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9421325e-ad60-4d88-b490-af02d12b02c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e366f8eb-74ba-4fbb-a394-01b9dee62fad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "231935f8-ecf6-4fc2-8425-d20588ae5558",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7786919b-5bb7-4913-8618-c5c3f4981103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3928080a-14ef-47cd-9d0a-812aea43c49d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4db5c14-5ffc-462e-8589-0e4f0a4557f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6760d42c-2818-4fa0-bbcf-cbf4472b194c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b391c68-f6a1-4282-886f-e20e1623955e",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "156e75cb-c10a-4d29-9b44-c7b21de74ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92912839-958e-4ac9-b94f-a7d76c0feb14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6398aeb4-cc88-43c7-91c4-6ede130e58e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5bab7d9c-f5e9-4edf-b73a-15f4deedb560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ae4b386-f768-4dff-90bd-e1679d7f9b2e",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7246f5a-087d-4763-b0e7-5f03798ac1f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b500c1d-f786-405a-a459-fa99baab47d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a33d5a88-9043-4597-8606-6b0af0caa677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2e9666d-7dfe-47e5-beba-ec49b6ac6482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab8daf65-be39-450f-9082-551f9f34a56f",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a716ab73-54c6-4e56-b614-9331139bdbc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e861806-2d74-4a42-8ac1-d075e65c589e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72aed924-eec1-48ce-bac1-48eae092d1b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0e4a1cf-cb29-4b83-b9c2-a96dc3a72751"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2459c222-bfc5-48f6-bd29-462949dc443d",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "642fd9a1-7004-492c-afd5-945a3076e25d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a98a122e-7447-4827-b55a-dea680875894"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea1eaee4-a8f8-434c-b56d-baa6884017ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e839682b-9d1c-4e80-9f85-d9eb6bb8d0a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1516d000-3808-49bc-9721-22c4c1700686",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "467f8112-2af1-4b21-a7dd-f1ae445e970d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebcff5ba-1832-4706-b8b8-46e5b4c411cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "253573ae-bf6c-4565-83cb-cfade9afe659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba0ecc4a-9be6-4104-a880-c3d055d89d5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8e4a552-6676-412a-9870-41f79a810824",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4ea7f0d-b1f0-46f7-b6a6-ca5ed06aea15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa77b1bd-3586-40a0-b2e8-96db662c2f6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "177a68f9-329f-41cd-ac80-25f65f02d950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "939e15f9-d0b3-4aec-ab97-e0afa5478a69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f69be4e-7b74-4114-9b71-ea7121c68912",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e70f24cc-9cc9-4ab6-8822-280382138971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3e1754a-09b1-4e14-9a35-01fdc40ce307"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbd30872-50f6-453f-9a3f-22985e7c2e1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e4ecb615-324b-41ce-94c7-8ea3f781bc63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae496c46-4fdd-4733-acf5-85a07e39b031",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94d18d26-53e6-468e-8df5-a2a4edf41534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9848eb2c-517c-47f0-8874-e86ec56aba2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa4ad920-97b0-4ec5-86c6-5d13c1859b06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "16ed513f-861a-45e3-bbf1-187065acf13c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5381d03-a231-4319-a636-f9bf192639e3",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3a28690-be42-465b-a9b3-c1cb3942c274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84674a8a-0b03-46a1-87b6-1f58af47a9bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43d1af1d-33be-4490-97a7-ad9221c8ce66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c883d064-dc1a-46fe-b380-f95b88c35d28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66b9ac0f-5183-4d14-b5c7-4b69bf1f0138",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35482c77-a366-4688-8376-81a07c88346c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "376e66e5-a87c-4fa1-8e5d-db2421841961"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f057962-06e5-4bfc-a7ce-d7deef000147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9e41e58-2219-439d-98e3-aaebe6e103bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38305f66-4d17-431c-8fbb-403c5abe009b",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e72237fb-4a72-48d4-a732-4a7fb597d059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "617668b9-0014-4853-acde-f3ed4adb190a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "267e4ffa-a8fc-426e-ae3f-1f651215076f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "368d23ef-cdce-4d98-9651-5574e82e86d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c07a6750-ab46-4a05-ab6a-1ed7f5b37d25",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4749ca7-7078-488a-aaa5-1065b47c0cfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cc23332-0a91-4ec2-938b-6696237fc530"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daa96f7d-37cb-4583-b00a-c5129d4200dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bddb1ca7-821f-46d5-a22b-d84c5c42b383"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdd752cd-5c9f-4501-b8cd-45411dd11c17",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a96acf3-f08a-44fb-a5f9-7f64a6047f94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e03c55f5-cb43-41b4-80a1-76d506878619"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6588abc9-c56f-4a91-bc75-e95a834a161c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7af55354-bfbf-4f53-9f2f-79234bbe5895"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5708faec-f790-4ae2-9cfa-7f91025dd911",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af8222b0-f931-4925-99fe-dc5745e113c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8adb507-6157-479d-aefd-9d677cd9e5df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c7828e2-af55-48db-a44b-d39d3ce0bbc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c7c3bc9-7891-4634-a9bf-4730f068f851"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7f185e0-2f69-46b8-9b27-fe9aa6022c8b",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f5d6f9b-d87f-4f30-8261-d57e2c3ea633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e6079ba-90b7-4dbe-b33b-47bca0c649f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7381b264-c9c7-4e43-a305-4752769978fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "66ce2eaf-76de-4657-86db-cf8367f92c6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca6c9cff-304a-4c55-8705-6043a2ca844d",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef0eec9a-cba8-4346-9a50-24ad72adbcff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2980bb2-7d6f-43f7-a1dd-17ee897556dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2eec83b-6529-47b4-b691-eda0da6b5477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9fc56e43-2d05-49ac-b3f5-5c1c79058346"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de40390f-288a-40f5-94ea-ad4d89046998",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1784d4d7-55c8-4e32-9eab-89f6768321af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e164414c-cf8b-4550-9e13-fea038470708"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68304790-572a-4914-b901-51fcc1174a61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "296d8204-750f-4a72-b5fa-232b7997406e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbb51df9-69fb-4fa9-ae28-980d26ff288c",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbd5c7ef-00a5-43de-a405-d9d97b44ce30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61270008-c5d6-4aa4-926d-8e6dba4ec8b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98852144-a490-4a29-802c-166f21f10f44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b55d9ab3-d06f-4910-a912-277e2b6738a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80870332-fd67-4ccd-80c7-b9dda60eeac4",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "745760e6-1069-4d89-8cbb-29f033476cca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bdc100b-0405-4af6-a7e7-2c06e5466bd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7a88bfb-3c80-41a1-9e89-fbcccc9da553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "76b30175-5b51-406c-8f37-be9abe93eafc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11e35067-27c9-4775-bc24-c6f86fbcc166",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "029e3d23-dca8-4647-855f-62816291cb0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "16304b80-fe46-4ce5-a5a0-6635c8a7621e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80f68329-95d9-447e-a151-33b289701115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6a8e3938-71b1-46ba-8267-9fdf6da9a1c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39349dc0-9b7e-4fa1-872e-ec1c3ff90041",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7c18236-039d-4cc8-af98-cfee4997e3ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "265dee65-4082-4617-b2c0-f1eb17ad382d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d95d6d25-cf30-455e-8f04-2da9ea638268",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "62618a62-eb96-491b-bef1-fa99eb0967c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca00b767-95cc-47c4-9b6c-88f75bde39d0",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0358ad0-0dff-4b7b-8363-bb2490d88e88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d49a7b40-1a76-4d7e-8fa3-a5802f458bb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1397a86a-4003-4887-95a5-9b3e1cec2a6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1c9ea7c5-0bd9-4c02-b8d3-161a6d6a1e2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f705e5a7-8ac7-4055-a665-571487a19cad",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dd11eb1-ebec-4d9b-856c-b95eeb690284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6fa6c67-cd25-48df-a284-9adc8978d0ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e710cccd-bc83-4df8-b8ff-a19c8518cc69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "38df041b-13a9-474a-830c-643084769c6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e39a24aa-7b08-429d-b24a-ec8050703d8b",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca4805c1-cf9a-4ae1-bbeb-6748bc5f1d58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3da49515-188d-460c-a388-88f9fe83171f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49e26626-c775-4ceb-a492-6cc4bf657e93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "497366cc-cb6f-4f84-8e16-c9eb385fd88b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22b7bc08-f6b2-4289-9047-675dd8639012",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f95633f1-63db-4baa-a8dd-5858f65bb2fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9de06fcd-a48b-4641-bbbe-7dda1b739195"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48c0e2f0-f4d7-44dc-93f8-d28694208b88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6f35180e-b9e3-4653-ad60-c6ecf96df13e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fccb131c-86cb-48ac-a03e-e28e73400222",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dc6124a-9715-4f10-9fd4-550a4fd50f92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2aa364fe-e14f-4d62-9936-efc7a1719e73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "444115e5-0ce4-4ca2-9fcb-09c846b1ac29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "01263879-0af5-4cfc-bd14-03258c688d70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e21182bb-1b30-442b-a999-3aecc40f4a3c",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eae75d51-92ea-44fa-b288-2f5ddcbd4270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54d52797-3197-43ea-8fa7-2fec4b6bb512"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "947dba9d-4c09-48c9-8f4c-6983f8020350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b3dc43a6-f682-4ca7-9755-e6e600c75be9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "074a9ae7-7150-4552-8870-fa35093e748a",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd1e6479-5a56-423e-b0ba-cb3fa65689fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "159725fc-1ee5-4fc3-9e56-1f5e0c2eb8a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c84916bc-a802-4ad8-b2aa-ad10be396871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "c01c2739-b80a-456f-9168-5f5daa472fc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41d6dd83-ccb8-4905-b176-97b08924096b",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f72444f2-3358-4dcd-be5f-5d5f46e66927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e038ecaa-e793-4a29-b478-499d317d5c7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e068c68c-a092-4c37-84e3-bc42ed132bd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "783c82da-24f5-4ba8-bf77-2785290f2466"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d716ce9-b0cf-48ae-8aca-36012a7ce86a",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "538f35d4-c8d9-4f89-b762-42df0d627ebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e729ea9-033a-44b3-81d0-4a2deb4fa13a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91c640e8-536f-4d5f-b0a7-14e35bf754b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b8fde1e-ba31-4211-9135-aec761257daa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e82995d4-f84b-412e-822f-25be168b01b6",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c78dcb44-92a0-44ba-bc47-0c69f2b46d4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7b05af2-c15d-4a21-ae8d-f8c601cd3372"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b02f5cfd-5f31-4898-8f4d-29afac348730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "54295a0f-4f61-4cdb-85cc-93f1f349dbb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8ee4df9-ee11-45e6-a56d-1672d25d497a",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5fa5348-2471-4163-95d3-a44b6e12616e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afec2231-6548-4655-809e-954dc4a14bb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee8848df-474d-46e2-ad66-3a5f17ac3816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1d3c67f-7421-423b-884b-d345e24f5b76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2d39dda-4291-4897-9864-f11dad7c1185",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb8bbc69-3ab9-4c26-8ff4-71dee6764ded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b0d9be5-f9ad-4956-96f3-9a68c42b8673"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a23136e9-a6d9-4dca-ba6a-dd88de3f4199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "021fad66-d0c7-4c02-b4c4-e137aa9331a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a78978db-8098-4321-9e71-1a215eb8e545",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "874a1cb6-ca34-40da-b4dd-3848b68b24fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee5ceae2-75f7-47cc-bc82-71ac0747e00f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cd40fc4-09b1-441f-96e8-6dd23bdedfaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5fb153d3-f2da-4aa2-b457-4f8ce68d475b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e944e27a-cf6c-4d09-aea5-fc72b8435eb9",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0106f8c-c2e7-4be0-8bf0-96b89e444b86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec6e4a85-a832-4d09-a083-27de1b31ea5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad5a5cd3-d554-4823-aaef-915dda72b41e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "80f9d5d4-b195-4676-8b4c-4db74c638621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e7bf453-5787-40e6-8359-d94d6821b9b7",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bf771ec-15ab-443b-84fe-c3c78324f1d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc4ac2b0-5997-4ca2-8c95-a94f5e822533"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63a4dfec-5cf0-4582-a78b-f69de56bc264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a428f447-8fd6-4ace-8404-f0edb1fd3fb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53a15203-464c-4742-b056-da8659c3568c",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3569ba2e-e14a-4ceb-9516-5710a4f7cb5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c5da9c5-7035-4c00-b24a-a660c1ec1a23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3b85c45-9a6d-404f-8f44-6d4b482f0dc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7beb4ec1-ce83-495c-9f01-28a3cf6e5129"
                        }
                      }
                    ]
                  },
                  {
                    "id": "295390dc-b53f-409b-a838-d60d1bb65bf4",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21321e84-aca5-448f-8ea9-729eb98ccda9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18e242c9-a0b0-4a25-8f4c-21c1b4f05784"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83c2fb95-2b15-4305-9814-042cf6e8b3cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c032cdb-4900-47cd-89a7-37081432b4e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae4042c7-7421-4623-9b14-d7f395a4d0fa",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5718b3c4-bb6c-4265-a022-766b45f0b260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1039faab-be7d-4d19-82c3-d0e3e6e38a88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04fb88d1-bdf6-4c0d-9555-928da10918d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6536efcb-6f93-4b85-bdfc-21a174e0612a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "367816db-18bf-4ef1-8e79-bb1088d3ce47",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42358b52-530a-49c2-ad80-ddeca987ccd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f3361b0-2e2d-476f-a630-55bb79b46dbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d15285ef-3c85-47b4-b72f-5e8d620ae178",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "8552c9f3-9087-4413-aa56-71b808e13b2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc5bf60b-6489-43e2-a8a9-eb9b8f4746f0",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4be1db57-b7b0-4fda-962c-e8735a204c34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a188b227-b30c-4f48-b362-c7ff1f64ce39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "976ce76f-9298-4ed6-8dfc-60c9d258042b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4123cb52-db62-4f22-b13a-f030b3e5e420"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09952848-1225-495e-ba18-f0ab2a9417e5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e48f5f2-8bc1-433d-8298-c0a50936be48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "944802d6-2eb6-442e-a64b-894e56f21e13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48dd57eb-c9fb-4755-9d8d-c19e43313552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "99753c95-4188-45a8-84be-9529e436d3d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc022b88-0f45-4b59-9dc6-2e8a54837490",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6475a10e-e557-4836-900f-3dc146a8a0a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67e3a4e3-42f8-47fb-8af4-1233c6645736"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86b41c11-28d6-4db4-b641-cd2b9b087543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "02e8da4a-9a6d-4915-be61-8424c8b35a45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "867264a8-cc57-4f9b-b807-e4cc3d289ffc",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "950912ba-a8ea-4927-b609-34cb6e0fbd18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5746686c-53cc-40d9-954f-2c1a4ddf657f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24523f37-9470-4146-b79c-7462a6d52670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea192259-cc6d-4ea3-b92c-3215ce200bd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "532cfc28-5342-4756-b93a-1f8400a09b3c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20f89d6d-e677-469a-8286-91ce93280d4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13af45fb-0541-4959-89e3-3900feca4b04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e05b7a57-28c9-437d-b02d-f8577707df5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d39a7930-f725-4654-a515-e0c2205ac986"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c22108de-cd1e-438a-858c-b57a053f07c6",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67702f7e-def8-4605-97a9-66db9ae4c8a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ae459c2-fd35-49a2-94b6-08e2cfddc437"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1f75518-0c45-4cdd-b17f-ad1e2103d1c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "223eaad6-8808-47b7-bfab-bedc3f35e662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0007328-e0c5-427c-be39-64395d1b7a8a",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf7d2ddc-0450-43bf-9eef-9678205e441a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "020b3780-e6b5-4bf0-9c5b-45b63b56f181"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ac66636-b81b-43ee-b535-c4e6b313f982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1a9437a-d153-4007-86e8-7e167f6ff1e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8716e259-ad31-476c-9cfb-eac8c70f26c7",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed59d570-02d1-4535-971e-1ed562749bd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edc52cc6-b4ea-488a-9d96-cfeaa21b4429"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b38f8ec-47b3-4f37-b79a-5219788fda13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "758c8dd8-b797-4f4f-bf68-194c96881551"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7cda71c-9f79-4143-940d-0cb6b8411868",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50111afd-19b5-4813-882f-28d0124f3653",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddca9a2e-455b-42ba-bf8a-26d4106a4946"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4030d5f5-cf25-48b4-8ac3-0fbda8aca6ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2496d2a-e6c4-432d-8218-0bbdf85fc36d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78c9800d-4e9e-46c7-a137-60f2c8c6feb7",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c46c8fcb-121b-4e30-85a0-f989878c2ed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94fab377-0974-42e1-95c1-7a1861a77a4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e73d0ece-9575-4bbf-b3dc-12cd0e02771a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "12059899-be43-48b2-ab24-dd8bf180bed7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b4730b1-deb0-4604-b2c9-b1b4745c86f6",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f6a2563-cb61-4172-8fcf-01f6c3a9d7f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d0d6719-0c96-464a-a819-3a40d6c7a789"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90435b06-b04d-4341-b7e1-a2a185345f73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6392b15f-f44c-4f81-9d6d-a0b519c089fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cc3a951-9185-4efa-bd71-5b765fe290b3",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd643eda-1232-4e1c-8a4e-8a1a29c2da86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e260a397-9605-43f0-a77c-b4117f9829a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "261c7d19-d893-476c-bb96-6512d8af1395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b00342f-be0a-44ff-9141-e6f7d6d17c89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "515bfc16-661d-4bde-ba8a-b127d1387c2b",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bee63ed-6f69-42ed-90d6-c7c53e319c1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "254950a2-a3b5-4a0e-8eaf-34d090db6ca9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90a7243c-6cb9-40a0-8ca2-dbdc38dceb9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "feaf52bf-8bea-4014-b851-c388428a5bc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "995c17ea-d700-4cae-9826-b33cc4dca1cf",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dedc325-fb6c-46de-96cd-c09b3ad3502b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a3108a7-fd00-40c7-a458-911d3f7f6c4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f1719d5-06bb-44ff-aa8b-9145517450ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6680809-ec3e-41bf-8a4c-475ea975b917"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78e10784-2d41-457c-9ed4-4860eb19beb6",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3633822-3222-49e8-b729-c17ee3ff0ed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8353b3e1-8b6d-40cd-a6fd-60811fb062ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db7d561a-1f9d-4d24-94da-7862bc2b508a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7110501-fc29-492b-8835-d62e10af6182"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f154f6cb-9b1f-4d6f-affd-0e2da6de3d52",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8609e52-29ae-4c18-99f8-1e09fa264a6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f48682ca-f183-44a5-9e99-dc96fa1c4813"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6676d739-497d-4a55-be8e-8bbf4137544e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "965f4e58-27aa-47be-8df5-dc28f7a2c1a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5992df35-2cef-4363-ba48-6dfd7c17b5b7",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc590e66-4ae5-4f9f-ae16-0b893617e51a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23c2014d-adb7-42d1-9d4b-beee1c0bd47f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c64ad3ae-01d5-4527-ae87-bcb1871fe874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8cc231c0-4db9-4455-a69c-22f2031df031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bb6d350-bf12-4ae2-995b-1d15d14d8064",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7c64862-a23c-4c30-b610-b3502d716e14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96bcd3a9-8dc7-4ac7-b068-b1de119182d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad3e7009-39dd-4413-a7f8-e892a9a17d32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "311c9c00-a801-45c1-95a6-f29f21a94580"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28b65f85-0b63-43cb-9c90-fb0711a8a1e0",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23c8f2b2-19c1-4cae-ab7e-d211e679db8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d01ee9e-935a-485d-8886-00ae979ae9a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35cfe1d2-dd17-4b50-ab87-77e762cf2b80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "12b1516e-472c-464b-8674-dd027a7229e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19184686-ba73-4b83-92f1-1c6ec00dbf80",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "915b215e-6900-4825-a04c-e95b11acf914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79582b69-5b72-46ca-8b3c-a22e6adac271"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a843db00-2950-4eb1-ad6b-c6537375aea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f3653b9-60c7-4299-b70b-4e5653bd6e6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c76c953-7234-4dc6-a341-18af4d990708",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f01ac0a-50f6-4538-8f0d-d7d411c4d15d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88da003c-fb4d-41d2-bcd9-74791d0b442d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "391afa7f-1ba1-44b7-82e4-2d7cb9fdbb8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "78a7fdb3-1d50-492b-ab77-dfcd744f2bdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "204f4cbd-774a-4a98-9774-b73b90295725",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65d0bfb2-a822-4f7f-9bd9-ec88bf3db427",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6d27f72-2b1b-4772-a777-c82ac16abfcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cc0be66-e8e1-44c1-a8b4-96a5203bd0bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "af28f277-506b-4e57-a2fb-b282c671e1af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b974bda-d4b7-48e4-aa4d-66cb1644de05",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6352f883-8dd3-4f69-bd52-335b4ba0cfbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "337097bc-85e9-4fd5-ab5a-262259b3adc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9ba9c59-c9af-41c8-8eec-11a5e3abac79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "526fdbb9-7db6-4a24-b861-9cd4912a4cb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc357df9-5edd-40d0-bd73-8d6de4bd3c32",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d4488a0-e719-4681-a158-8266cecc054c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98c7ec58-0a61-4b4f-bbae-419de98aef69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70a00cab-a238-421a-bdad-d1a55095dcda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "07f8090d-088c-4ab8-a99e-dc98df4b7925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81df6e75-8a75-47ea-a0ee-9d2e4992bb9a",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f92c72a4-7a3c-43a9-8b78-d18df885919b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfe639c1-2d6c-4020-80ff-d99fadad06c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b66ae85d-d8e7-44e3-922a-d4c4f3e6ee78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d15ab281-8b4a-4ba3-94d4-8e9cb6457464"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79b752c2-b01e-409f-ad42-06c8255e87cf",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "723224ca-d31f-4bad-94dc-f730465fb8ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee50cd7b-ff57-4fab-a81c-798558b5344c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14e961ca-516f-4b4a-8cdd-3876cb0b9c63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e52c684-8967-46ef-aff8-aa5f4cfd5959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c03e37f8-9ecf-4f3f-8e51-590b0a9a0419",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7556117-5e51-4b55-8ca6-b9a29bce1296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5f05f15-44ca-489b-8765-51f9fb14935b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f46d084-5d3f-474c-b2d7-d6a1b8e52781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f2fcf3d-b39b-45f2-af65-5d40ffb84622"
                        }
                      }
                    ]
                  },
                  {
                    "id": "605366c3-4f3a-4f4f-9add-5d21dd1d9840",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bffb3865-3996-4f10-a11a-11b1067366f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7005b5e1-6290-4b9c-a81b-5a2e5c95e7e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2463c9ee-847c-47f6-99a8-0d9cd054fc9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "98e05f8c-8043-4d9f-8e40-a069c2079387"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9d575a9-07ae-42b7-9d3f-8d2f06c139f5",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2ef2a52-6cc4-4959-bc28-17b89e320a4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a32f1a8-c818-4a3c-a6ed-6bdcd2ed62f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7bc8ef2-83fa-4ed6-b403-725438036448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d5218926-1a1e-4a1f-870c-5b37cab9d72a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "864f08d2-771c-4e5a-9040-14f5e689bad9",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd50ae21-1e15-45cf-b4cc-25de6356da43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1464eb63-63af-437d-92d3-8b49ee6b6899"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d7c9a70-d23c-4e45-bfdf-34e1d7d2067c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c0a84b3b-d05e-4610-b6df-c4ac17291b8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cac430f7-ac9c-42c7-8247-b051392324d9",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8dcfabd-36e4-4d81-94b6-b906e698272e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50a10f5f-c043-43e8-83ab-65f2d1defa70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b46a87f7-f474-4180-a417-17977994f24e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1010c3f1-465b-4a7d-9372-096857f7a4d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "651cf8d4-f600-46e5-9249-2610b8babff3",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8651189-ed33-4717-a02f-3ef2f0d335d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "916bbb8a-5e23-4228-8c6c-18159ad9ae3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d8e94fc-b7e9-4bd4-990f-655513e37281",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5c9438f2-f8e2-42b9-a73a-9f7325660daa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b50b2b2f-d89e-4ce5-8a97-7eb705dca32d",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "158b9c6a-b892-4e71-ae8b-8289635b4b98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dabc6595-ee93-4902-ae7d-2e0d38974a32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da0ffaf5-998c-4626-9d4d-896560780fca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e946d73d-8fee-4078-af2a-979dca19a0b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f689c40-f768-4afb-9f43-8eee6453e18c",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13d249c2-a7b8-454f-a47c-35268f7bd648",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ff889ca-a7b4-41fa-92df-ee4501e7f3c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0309cc75-36fd-4e66-8c63-3e3a43b10fca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c9a0415e-6a8f-40c8-abbf-34e5972b8900"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ea211a6-cd39-4ad4-ac43-06fc7d65140f",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9e4e8c5-e19d-424c-8e8c-81c08a88b4b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cf73756-8b13-44a1-8a81-820840bb7395"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddcb3d13-7255-414f-bccf-48aa56b784d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "0ad025d0-292f-4e1a-a512-ec8e3e9ec71d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "363e711f-1289-4f63-985c-cefa4f6c7596",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b38f4df0-3a1a-4cc5-b69d-03ce5cca366d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "2aa37e4a-b667-4866-9ae7-cea152cc34c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c478b740-b3b1-4634-8d2f-bb478fb9b261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "e3daa4b7-f7d5-487e-8ff2-c62f7a06e5c6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "02ef016b-8f35-4656-9a6c-c633606851c4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "516b4ca1-7aa4-45e8-b59a-387da1580678",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a922654c-a55d-4f1b-8940-be696a100d07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1ef70685-d7ef-46d6-b3d3-8d36f0fc8cdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05996e2f-21ea-4642-be03-0a0ca3285328",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4f7d7bd0-30a4-4856-8791-5b6e7878fcaa"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "42a2a63a-28ad-435d-ae07-a98ce8768071",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1dfc0d1d-4615-457e-9725-d6565638187a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1fa399b0-1a5f-4c2e-98ac-f6a7e3799ac0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ddba4f8c-d7db-4c48-9a8a-9cb3d34b4e89"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "683736c9-8925-47f4-93c8-c43b277fd71f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6c3d3baf-6627-47de-bbd6-0995dd9876ee"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2cb3a0f0-3bb4-48b6-9054-7d1b5004e95b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "55ba37f2-084f-4f23-942a-3378c5d85604"
                }
              }
            ]
          },
          {
            "id": "ac42db51-e693-48aa-905e-94aa8d184782",
            "name": "Positive Testing",
            "item": [
              {
                "id": "15537113-ba7b-4fa7-aed1-81475bbaaeff",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ddeab613-c799-405b-8352-192211347983",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "82aeaa5d-d164-42dc-a1c3-b871387d28f5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ad318d9d-68df-486c-84bb-2f1559183c42",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d9049812-4de9-412d-89f5-26b56760daea"
                    }
                  }
                ]
              },
              {
                "id": "a7c37084-93db-45b4-bd8c-96bfed9eb22f",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c79cc959-22a2-45a1-948e-ae65f4284c0f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1db0766c-de10-4b8f-9ea3-ad889302eed2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cf35c275-6e1b-4831-bb85-a863afb8ea7c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d69d7639-872d-4778-ac11-890c747980f9"
                    }
                  }
                ]
              },
              {
                "id": "2fb15058-e742-4963-9844-397e36134cce",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "68fad445-7f04-49f0-aa2b-1040e2d72196",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "16dbcfa1-2ccb-4ee1-9496-04f00b6c6292"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0917615c-5ab6-4b57-80cb-0a23ba8af339",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6b19a3ed-1cd5-4f7a-9dd1-a23d5d5df16d"
                    }
                  }
                ]
              },
              {
                "id": "d031c44f-3834-4aeb-b869-0bf144902e29",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ae8bdb43-6562-4405-b6eb-84aa92e7f58b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "24d9bc06-8b8d-4666-8a2b-aebb94982dd9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4a1b5d86-a045-42b9-9dac-ab71e0cc4861",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "fe3a3b71-2745-4a44-b3f6-46bc2acb00cb"
                    }
                  }
                ]
              },
              {
                "id": "a4c5d929-94cb-40f0-9c64-ce409bbace93",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4ccdbdc1-1909-4b15-a945-79edb89f8416",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9af3b200-74b0-4098-9163-6e462624423f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "56adc302-f9c1-48c5-9720-d6afaa181e17",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "9eabd168-98a9-4997-9328-447105ca4c89"
                    }
                  }
                ]
              },
              {
                "id": "95bbb1f9-a162-4cfa-882c-a6139f808c94",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "31eed067-bdd5-4629-a209-29927dba7418",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9693cf77-a2c8-4b1b-b5d1-1095eaf7baf2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c49aedb8-d11e-4195-abb4-aacfb5c6f462",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "395dfc3f-fef3-4f56-a3b3-fdbc5a6eedf0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "75540374-0c93-414f-8a31-50c36f35bd9a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "44b9b9f9-4be2-4b00-9970-74d549d071bc"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "dbfdc25c-f747-44ba-bcc2-63a4917116d2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fd561e2c-1875-4a57-a18f-6437a258424f"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6ee0e781-4d4b-46d5-aabd-64679f0350ca",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "f3eef846-fe16-40c8-9781-080ef59ffd87"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a00f9873-94b1-417e-a2d5-1f8f3f7ffd91",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8e4097e6-af45-472e-8d4c-32c457c5eb7c"
            }
          }
        ]
      },
      {
        "id": "598e8e87-021e-4f6d-935e-191af0a4bfbe",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "a2253003-55d7-4a8d-8cb5-0a8c9518efba",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bf10da66-b6db-44c5-9164-e941f6ccbfc4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b1bcaa22-ff87-43e1-80ab-e8d1f2525c1e",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6b6f89a-53dc-4045-8883-5fa0f890076d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be3eb191-6b87-4f89-94fb-20fedafc0708"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efeb8cb2-c1c6-4b51-af26-cf3bd40c733f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d6e56b5-f1c9-4698-88c6-ed22a8b2d6b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ec3206a-183d-4855-ae60-62bed2d469d1",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7517a6af-b2dc-417b-ad83-71deed7d88d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d63a483-3433-4da4-a5ee-f97cf2b503fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "806cd4db-5158-41cd-8223-5e6ff9c27c18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e3b334f-a7e2-4f3f-8e15-e880314e9d46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef046984-e7ad-4b0d-a444-ece158e6ac68",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d26c8a67-b29f-4ca2-9a32-f1b0b83e6894",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c5b4036-8a6f-4c31-8d39-b02f79e5759d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "070eea7c-9b1d-4106-b285-e1a423db5442",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5dfb94dc-6e51-4086-8cc0-1fa32816f44b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9339bef3-3eed-4d54-9077-c6d02ff54d3c",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b373b9b-61f5-49cd-ad52-660204c9df51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "249a881c-0106-43be-966e-2c600dbe5f55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdc37587-cffe-41f4-879d-f6612c1bb7c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "24a267ff-3205-4593-8d61-225a2f4f8113"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b115117e-b43f-4448-b879-1fda4a68b82c",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8188709-6133-4cc4-a50f-5a161937c2d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c76d05b2-c613-450f-b0cb-25fe2a370d84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d0fefb8-977b-47fe-9ae0-7b2679f98c1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dbf01e71-fbaa-4ca6-81fd-d1990ea6d6b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42d99845-2e37-4abe-af06-b258d08be136",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98cdefba-841c-4fa8-8b3c-f8ffe334d821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7fa8283-3799-4551-9e0f-31513621f4b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74d9359e-1f47-421c-97fc-efe814311648",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d46e1b8e-c2f2-4d80-b9b3-0d9a875d75c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "312a6522-2666-4503-8892-e2a1a9407a2f",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f7faddf-e3d4-4ee5-bbdc-0e23d882f795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "651f55c7-5ae9-4b22-bf62-c2498b43ed23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d3f8027-297e-4d69-add9-1848af6092f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1f08b39-2130-4524-a07b-412577cf9d4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a77cd663-5808-41bb-9f28-e349dccbe8e4",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a256b32-47d3-44a8-bfb1-ef3dba4f7985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6273033b-eb37-4145-b395-3db872418a6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "260d7baf-8247-402f-8298-9c1112127d0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b848171-f7b3-4f83-8009-8ae9f257619e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a89b03f5-69b8-4364-8cd9-a633bb9bafe3",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c6b728e-e734-42f4-842f-87d5de6b972d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5909cb2e-6c6b-4bfd-bbd8-d805af37857c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a9c055d-6666-4f7d-823d-b422a58c91d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bda6fbca-8b5a-46c3-805b-6045429b29f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac17cba6-c1f2-47f3-a750-4011da9aa8f6",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db445981-9ff2-4410-8b6e-2f09ae5479f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c02386a2-758e-4d04-9265-c2bfd060ec5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aa68207-0ec5-452b-896f-292d6384144e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ddb7832a-56e0-4128-abf6-5d4285fa0a11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f50fce17-519f-4f5b-97f5-84d8b0dcffa7",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f294f5b4-620e-42a5-bc46-2101253da248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2fdf509-2f9a-481f-9ff3-04fceae2e357"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed0f2705-97cc-4764-9574-cd1b9d4bd1ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "74f3f896-d92e-4925-9dd0-9ded6b09e5a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d05f426-be02-4abf-bdb6-4f1b4d73de23",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f34fec3-0581-4c28-af94-20f9cded5e3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2769b93-ed83-46be-a53b-b830dd2c3111"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e73391be-5830-4d13-ac30-e51459d60a75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a1de05e0-cc6f-4256-981b-7dfa4712eca0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "139d2f28-fb82-4f57-a536-035ec9391b6b",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99e30839-442a-4f49-9e3c-029ec157f797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfb45d44-d201-44e0-b3c3-19ef36bf5da6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92460423-cdf1-4c2b-bf1a-13addf03e778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5fc77222-5e32-4b16-b956-02db1626b515"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dec22e3-1790-4d94-a512-4554e73f9398",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d93302c0-9778-4dcf-9193-ec53d546ea9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2c79b04-adb9-4231-ab0a-74e49bdb91c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4375b96-fe7d-4077-901e-8066a0643925",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "abaa6129-6deb-4d7f-b419-cb2d35c21d6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67d1d57b-a732-4636-a5bd-72c093371b54",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e29fa51-3421-4f9f-b7fb-e00345c9c6d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49a77bbd-074f-41bb-a090-ca1c6285ae4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3f90383-06c7-4e44-aaa8-d4a5a2a92163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "799b7af0-ef95-4de9-bcea-d280367def72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99d7bca1-befa-4407-88cd-f3485115eaca",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeacb583-a4d9-4e8f-82d9-966c07e50b0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa2486d4-d114-4feb-aa85-f1fa647533b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08b5b613-2679-42df-8dd0-98d5a15f0897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "f57a7471-f3df-4bb1-9e2f-d24f363b965a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "074a42c1-6779-4503-9817-235ade2b4047",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8032b804-760e-488f-a662-5394dfa17d91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e04ec0f-a134-4cc0-abfd-9819361273e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64842d9e-8823-4f8f-94d2-feb48c761cd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa0b8b6e-6058-43ae-8b95-62085be5b665"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c1da137-b805-45a6-bedc-a398b3be1fa2",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "910472d1-7f13-4969-b2d5-e8e19779f3af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ade2e234-4194-41c4-8980-f1e4de6d6f6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5118d4e-96ba-48cc-8a33-a212b101710f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "df194255-177d-49e2-9a18-e4a1571e9c19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34e217c4-460f-49c4-92ef-f988cfaa72c2",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6883f074-576a-4fad-bd76-dbd7fbb0b823",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69bad9cb-a5ba-4b27-921e-cb38f37537c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ec8c07f-08f7-44f8-bf86-25ed73118401",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a828be2-ba78-4bb3-a22d-38e1766da983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "661dd744-1d3a-43a7-bd8a-436581d2f1c8",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8e4ea50-fc85-49fe-b6ad-1a7b15451582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ceefffd5-579a-44a2-8768-6b3711924d84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39d3d3cd-eb26-417d-aa84-5b6de0777c09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5eaf1840-5ecf-46a5-a2b5-d1c2f107692b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f58e5f93-d3e1-433d-a2bc-c35aafe6db52",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66426a5f-6b4e-404f-ade1-362fc2913af7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb8c5239-eeb5-4076-bde1-a88380877f51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfa761bb-50cb-4692-92d5-5b833b0542f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6b9ec9a-6cb4-4b26-96b9-6f8dcddae692"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9e11d04-cb85-443e-866f-3d4f25f0b5f3",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17f58072-7384-4f71-8f60-8cb401f9fb15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57acb49c-d845-4543-a504-37e3d87422bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2dac4cb-e978-4b33-9e86-70586bd7bd60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6370ee41-1e57-430f-8b86-a6f8d421683c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c5d3bee-c5f8-4932-a574-93628cc96aa8",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8f196c8-1eed-4a1a-9625-0bda33ab19db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3515b18-d92d-471e-b32a-8aaba6490ec9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "618ced12-2b4b-481d-9923-f4791519c471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b38ed121-ce9b-47d9-bb19-b7b79ad418fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00fe2847-8768-44d1-bd54-35aa0dd8e10c",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57f6919c-90a5-47ee-be45-3d33d15b54c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b740db05-8e24-4835-b536-e042566e3981"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4491f55a-58f4-4afe-a797-fc4d1362e51d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bfbeaf17-ab36-4b31-b20f-09f441a9c255"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a06cb335-2726-4713-a4d6-66f85af314b2",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd9f3115-9569-42e5-a167-d87e6b40525f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e1a873a-769d-4764-8ac1-dd1b8d133855"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "418bcd37-99f0-46bf-946a-0414bac83ea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "afbbb7ce-e94d-4db1-b74d-57a198d4e621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5c9520a-ebc5-4cda-803c-1081558869f8",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "194e90b4-9b0b-483b-babc-23de85b63b6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7f72f84-3c06-41be-82d6-0512a7e8a30c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea4f5b5c-22bc-49ef-8ca6-dcb2578b924d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a69380b6-1dd2-4fe4-9dc3-af9f998aba70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01cbd3a2-ccfe-4890-b69f-c42a0fb616db",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "077f89ce-d6af-42a9-804e-1295d5caff42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2d11659-c245-4958-a558-56f0134e0edd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d42b8a9-97cc-4319-8817-0368f397649d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb67985c-700e-4ecd-a3ee-b59292d9ffd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ca9ac65-9157-4962-884b-7f0db4c072b8",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6aa0ade-b9f7-4f52-82d2-3afc08659bb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0666ef6-56d1-49bf-beba-e90546974e0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bc372a0-4a3d-4e28-bc0d-7338091ebc58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5a1f8de-6916-4c77-9a1f-777d5c6a5272"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17fd3d16-1343-42b9-93ed-8b1592804dfb",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "426d9b9b-90d4-4e15-b3aa-2dcedffed1d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b1c9973-5240-453e-8b18-83dcf3c83928"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b887c12-9fbe-4612-9eb9-d1460152a5a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2548f88c-8566-4c07-94a0-88d055d9d2f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72ae1481-2eed-4ae2-8912-e248abbc8363",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27557794-59e1-4fa5-ade6-7d1f3b4ef72b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fa2f84d-7b1c-4209-86f3-f2431df86ab2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bc50be9-772a-4822-b709-13576b27fd67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9fd22d68-5402-40a1-9696-fe527c965c14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a13cc34f-3a8c-4113-89c5-cdfbddad57e6",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b9f1f93-b1b0-47ad-a705-c4a74aceede2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d2f7507-b342-4c02-b139-d439cc526a35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53a41177-d1c3-4f29-8f00-40e149bc0680",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "845ca5df-e2bd-4379-bdb7-3939b424cbe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "244c1707-3c8c-45bb-967d-6932ae257720",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d576b6e-9a8d-4e16-bcaa-11b3c72de406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ff5c102-a913-4f5e-a11c-e0b45f7c8994"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc4644e9-4fe4-458a-a018-8e5bb085bf38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f179760-4a9d-4bc4-8fd6-524b6ce01235"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4606e06b-61ce-45c1-bab1-f88b1c67c3b3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "071855ad-ef10-4023-83ad-09020ebedb79",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e235c39-0f7a-47fb-890a-31a817e3c67e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "b2e28d12-375d-47af-a8f5-011eab475719"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea7e898f-4743-40cf-a65f-105739d5a4c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4b05ec47-4f53-4860-88b0-5e31c5bc044d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aa94ab31-18c1-458c-9c18-24cd351c54c0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "124c7970-dd20-4812-b437-e4edfb467170"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "76dcf95f-e8f6-4f5c-86b3-5630ce5b2a2b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "69010b66-e8a0-48aa-8960-b5ef552a28da"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5badc185-3017-4a43-9de8-f480981475a1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "56ba31b6-cb69-4258-84b9-8f466f1cffa5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0a47249a-89b9-4e38-a338-bc40099c13b2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e1d2f457-f449-4e99-a7e7-317299760123"
            }
          }
        ]
      },
      {
        "id": "cfcf1718-66e0-45c0-8e2a-e51426a9845c",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "ec012714-025e-4df0-948b-910f6faab278",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8829df9f-9847-48b8-8677-a154ac412eb6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "dbe2ac2c-377d-4c3d-acde-5d4b5d797f75",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83354060-0bbe-4b6b-9e77-71825ad2d2fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55431805-c30d-4eb7-9ecc-e47b339b5d2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce3a3242-4c76-4851-a1f7-e34af4c484e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "dbeb4c28-1844-4ebf-9705-d7e5978742d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ef65019-bee4-4e0d-a9d2-f975e9465b95",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "988eb96c-ce7d-40bf-a1fc-f13ba0f11d09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22af1fde-8447-4c22-890f-ddf3b9b22bd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa00b06d-0d46-40ba-b80c-4ec44d9752b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "86cb7606-88f0-466f-b9fd-e74ae51934d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d15b6922-365f-4961-8944-9992ca68bbd8",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fd614d5-7b64-4241-9034-07f17a5b10c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9d50519-9f60-484f-a0ed-dee27accb1f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd3399b5-b056-458d-8214-bc962a0ada36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2134fdec-8af3-403a-8d1f-4f3e4ca16b9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3091584d-b9e7-4e97-8c98-8f3b5b80bed9",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b3265ba-abff-4685-8b26-e13d6dca507a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46e0af1b-9981-4e21-8c4e-d4be14c4a555"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cbb1393-3786-40fe-ade7-859fe9fde11d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4703c571-63c4-4417-8889-7836f607e68e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7649c36-435a-422c-a834-8751e981bff2",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b7a2b26-d24d-4e0b-ad2d-d3c3070f1946",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1983d02-bccd-49cd-97e2-b5e3660c2017"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d66bd6c8-04a2-45ad-9c23-f088eb0b1b7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb72f441-75a4-4b3b-ab0f-d5708686e7d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42536671-4741-4ec1-89db-f39ebd656f46",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35eb96b1-1a95-4023-af3d-9592294a0a5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fca4ebaa-edfb-4fe7-bc24-da5439f408d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7bc1069-a65f-48aa-b615-00de11f44ac5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8117835c-c91e-4b63-b670-31c3b44bd7df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7558394e-0ea5-4cd6-8671-96611c58d252",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3a9be57-9d92-4767-8f3a-7de821760132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "750c321a-6cfc-4558-8875-f0f54e34edc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50d85a20-ef03-4e4c-89b8-7f4f3f0feeb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1d98740-1baa-4212-be32-5904aa883894"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed1678da-04bd-4b26-9e89-b5de672116f3",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e76134e-1d5f-4012-a10c-57e11e9c34bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16f36dde-0df9-4b69-ab9b-a9824d1bba1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19dc7c02-f45e-4f14-b23b-00317f8c2327",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c546539-18c0-4c10-bbee-b4b15b305423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3ff5a27-ce5c-406c-93a7-c0aa46be3dab",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b67ae4d2-e4a9-4b72-94bb-b82084082405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0875d9ba-b7ac-435b-a03c-05cb1d4b39d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86bbb59c-1e09-4264-8257-61d35e1cb4ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "47257f43-c1ce-42fe-acc8-4af4aaa678d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8232e862-dbb9-4771-9d37-0015f8e04283",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7071fbc4-f066-4bea-aa9c-f3be776456b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1136bfbd-6c41-4e02-806a-4c6298ef8666"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4ed8f48-9b96-4eec-9e6d-5a41c8f673a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2aabb505-489a-47e7-8f6c-6bbbf7304588"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4e82e48-0232-4cd9-85e4-12d7bab480cc",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40dec796-d096-4210-9cd7-28810456acee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88f5906f-869d-4e57-ae10-59533a6a5421"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b553f8d1-854f-4a06-9038-0fb2b4ed6d27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "17c63407-7cc8-45a5-9a20-05618c191433"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea3559d5-9493-43c6-b9a6-2c5cb69ebec9",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4a83b96-af77-490e-8416-75ec7e0e6e96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c6e7321-ec98-4d70-b787-6b7442c64aea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f317fd00-5b25-404d-a730-e49fef9c375c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e19582cc-34ff-4ac1-818d-9ef5de7cf773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce79aa98-beb4-4eb0-9ce7-f3d514a31006",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f810046-86bb-45b3-84a9-9ecd6cd0cf37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cb7e3b6-6e22-477e-ac90-ba449133d9a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad30f0cd-4fb1-4099-bece-3bc3a7c64822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "40510b16-eb55-48db-9a21-1cec2f3e377e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a515e4f3-f445-4e69-b4e8-3ee3c2a44f38",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04b20817-a736-431f-b9f0-c5f5cf8ec77e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b71d5eb-daa4-406c-b1ff-0ee33191d4d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13cb4f92-be96-40ff-9121-23117cc40908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c16fc47-92c2-44fd-a983-fff4de383272"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa95e629-d379-4b77-99a7-4af9581abc33",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adca70f3-9ff5-4d9d-a264-10468c5b9638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0991da34-59b0-407c-9a66-8c7c532275e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd6f9f71-ba9c-4c9f-935d-bb7d970a1dfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d1a20c0-4b36-4fbe-b70a-bacbdc1a2345"
                        }
                      }
                    ]
                  },
                  {
                    "id": "912f0bed-554d-4295-8156-f956e9e3a72d",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b45f2da-7ca2-4719-8ac3-b46ea3bf62d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05646771-38b4-4413-b788-6ffb99e1a81c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0a73a48-11ec-426c-b595-a6d855995202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "41b29a11-e92a-4e04-b976-2f19d2ae5000"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5e7304e-e49b-4fd1-89cb-8da74a3e7c61",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ef48ec8-71e2-439c-bc6b-b2cc195ba2c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3aa253ba-1e3e-40c0-896f-266fbb4e83b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7ed3fa7-1f61-41a5-9754-64b7230d22df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad1fda9e-54f0-469a-9836-464d592fad82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6d0e409-d35b-46ed-95c1-5287f3089ae6",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48e53f45-0ee1-4fbc-b61f-ed66ee89b327",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b802ac35-c07f-4b83-bfc5-e91492cccf8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef88b365-d21c-43e0-88ee-d84485edc5fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0803f188-7ead-430d-864b-daebc514f75f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8189b154-5eeb-4bd3-aad5-be411a716a89",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6377a406-513a-4415-ab68-84e7f25aa2fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a32a94a1-fbb1-4ced-9fc4-c8d43080530f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5e3a69e-61fd-4da3-bb55-5e5c98066008",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b2ae58c-342b-4279-812e-bb353f6906f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d54e0f91-2ac4-45c4-bcbb-a4a965f80544",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45a0cc8a-584b-4c07-970c-e310210f70a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1251b6f-c236-47fb-a60c-718a326d4774"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82527fb0-5543-4c4b-97be-8e6572ed8687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "15b369c3-dfcb-4460-8ad3-50d82688246b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaa212ad-ee81-4c7c-ac2d-7c5fff8f8946",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "689a752d-550b-4421-8a40-f09fe20ec0a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf18ef05-de5c-4599-8f78-89ea80a3b6a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ae9ffd5-1b91-4d20-a183-d1479f7549a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "88a38e98-d666-42ab-a83f-59a1200550e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45d8df5c-38e5-4f64-a909-02a5614bac63",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adc20481-bfae-4b19-8f68-16200ec92e44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8427d354-7881-49c6-bd49-a82265ce94b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b990c850-ed26-4c96-a9cf-1e25d3f34b5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "82e93bef-6b11-4d2a-92b8-5e72e21acbe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cec5a61-7ff4-40e6-8fe5-f0f5f35062b5",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcaf8dba-ea27-48ee-b165-59de6901dd81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "beffa090-a1fc-4fd7-9474-a57635255ab6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dcc2f31-8a33-4ed7-977b-9a6f218273f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "777107d5-593b-4358-b01a-02496eef1ebe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfcb5b8c-1d8f-40dc-8630-72949a9eaaa1",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e3fb990-8160-4394-97f4-acd8eb1a9230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dd2e8c5-a707-4587-a83c-083419fc1cc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bcbbab9-1dce-49d8-be53-0e91bf07e0ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5cf9510c-f545-429b-a32d-46443739686c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "149f3946-0bb8-4dc3-8187-d7880361ac19",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fe21641-fce0-4c22-8849-4d4deec53993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ef0e74d-9e12-4064-9302-c2183a594d7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be75b20a-d55d-4c45-80fe-a50ce539d96d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf55990d-611c-4a38-b4b7-c8353b613d58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e739c757-41c0-4b11-a9ba-1d250fc823f9",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "864f51d1-cc33-4d8d-be36-551b648809d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92c13acd-8d59-4802-9f29-dfd12a5a8eff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e06374c-3535-43a2-9239-d20d3e95b871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "27c308b5-4a6c-4aa7-ab6c-f3e579fa78fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0962f78f-b525-48dd-a0a3-dabd3dad117d",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e81f580-a8d7-469b-9333-bcd1837989d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "365628fe-15ac-4072-b8c3-2ff381cc9c58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76e3a6b3-37dd-43a4-a9f3-b9b11ff0ee8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "117a8658-18a0-4057-a534-ca5936b97fb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e878227-a15c-4dd0-b8f2-dcfe8f7474fa",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02be235c-9ab1-49d2-989b-db8e00a99cc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50827e65-5d1a-4f31-9749-271c0a4e8d8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc316614-09ce-4eed-9484-9981a52c61b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a5e813e-3982-44dc-8abb-ea61d9c62121"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ee48e12-6bca-4c9c-ad68-2293323f37fb",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2c59cc5-1377-460b-9456-51740b29ac79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41eaf074-80b9-489c-a296-6af5f05ee1a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f93275ac-c0bf-42c7-a3fe-c67a440651db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4835c99-4412-4dd9-9f29-ee78a78e7601"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db6029dc-d880-4198-9b04-b9b51de62fa9",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c178b65-d739-4d17-a7ab-84249e7ddcda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cac532bd-e5d8-4ae0-a7fa-714c6edec022"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "061570a1-a0d5-4a40-856e-c16c295f0b99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb4d0eb3-18af-47b0-9586-49cd301b6b59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "474db202-eb78-4238-99ff-3df2ce682d84",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5f9ef6f-7849-4bfc-9d7d-364f2a0ddf80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73a5aae1-13bd-4bd8-9f8c-124f864c9f04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "507691cb-25e2-43da-960d-5a95408ce416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9eb47fe5-366c-4101-bab8-79b8ff8985d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5ac16ba-3bc7-4932-86c4-ebdc570655a8",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74376732-792d-42ca-96af-83e0c091040d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78bea139-49f8-449f-a77b-ed39e0911c65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b07c8f85-4bd1-45e2-a88d-373e92be1176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfa506bc-02c5-4507-9562-0e1eb2ca59c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24be47b1-f6c9-4b1f-b0ea-6b69cf828e22",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5c6956f-4ba7-459c-b93b-9cee63c48ffc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95fdc8a3-0921-42a7-a199-f8d212e7b956"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "752177f7-2f6e-49fd-8199-de55baf6c488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "df08bb98-953d-4d56-b19e-fd61ff1d8e27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e5a4da2-7421-4d20-81df-a9199d282dd5",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2356f5ac-cbc4-4e89-b2a8-a2df5f58df8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2243e70b-f03a-4601-89cf-21cd7c24951e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04dca5d0-90c8-481b-b5f1-df047d3d7cdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ddb4749d-1fab-4349-ae44-f6693cc01c67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5479ce97-0231-48ed-bb99-0458fbdfb160",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42f181bf-8ee9-4c45-a76e-aeffe9be1f0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b1e91e0-66a4-4620-8fe0-d3cc566e75fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3a9d588-fbac-46e2-bf6e-a102328f166e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "046b667e-c4cf-4725-8da0-8afe6109ab33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d00c3b8-cfcd-4600-813c-d8562bd8ae35",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4ff2981-95d2-4bad-9e2e-dbcfad116c18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d503325-399d-40a6-9591-e04cc46014e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa1b342b-746c-49ba-b5f2-4cceec643766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fecd0d0e-8d56-4b84-b09c-3d7377eaf20c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eb1bc4a-dbcb-456d-b9e2-16c2963f8b16",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a20a3e9a-b5e0-4cff-96bf-56b27021970a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c8d4560-1f1c-4db7-ba4a-dd81872dd635"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0385e709-107d-4c9a-a74c-2e478c86c8e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c9b0f93-f2e6-4634-889b-9d5fd221169c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "12fa25d5-b435-4c50-99bd-0273b09c86d7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "85028c61-08d8-4421-aa57-e39034b44e78",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1641c620-33e2-4f2c-92a4-ef71e7ebff34",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "d3743c07-bbca-44b1-b447-27469eb80282"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7f3a286-73b3-4510-8cc7-6652e03eaaea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4e98c063-a0b0-4768-8e7a-b026e93691fa"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2d2b25f7-1004-4628-b73a-0ed4a9456d0c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f0d0f8a6-707a-455f-aa3c-d327c588f893"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fa382ff6-0a8d-4e72-bcc1-8a5f8995d132",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "88d07666-4909-49cd-a59e-6b84eff00b8e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d917bb3c-73f6-47a9-98bc-d97109c0cb07",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f32d5868-1f77-4447-8983-f634d5bf060c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2b34a2bb-4435-458b-bc83-c14bea3ad7c8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6a29ae98-94ab-4a9e-8adf-864335e2e007"
            }
          }
        ]
      },
      {
        "id": "0cda44f2-4b26-4736-ba06-910b18726b36",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "3da59853-e147-42e5-a0f8-f23fd0aa4f72",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2ed63590-3fec-4cad-b121-c14a8bd0496c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a64bca84-4a3c-4c1d-9838-a53b4300d721",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cdc122c-ba33-4d61-a5e2-6972a4f81c29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba2dbd98-527e-470c-b4cf-993a89fc048b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f36ea5b-b620-4d42-b28b-0e8ab8112f84",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18f6956f-04ec-47c0-8416-f4d9f310f8a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c3d2e25-c3c1-4552-955b-30e2349bc55a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69bd12ef-da5b-4408-b777-c89caa7ceb21",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b067978-1d15-4c6f-9c77-a62054d4f2ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ad88639-48e7-40a0-82cb-ed43df4a6c41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16f43221-7768-4ac7-a821-123c795bf668",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c22f29d-e4a2-4560-b6f9-016dae2d7cc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f1a12b2-4022-439e-b4a3-672e5d641e3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5b544b8-8d78-4941-984f-0a913edbcfcd",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eec00c67-e55d-469d-a5f6-f75100bbfc63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0803dbcb-96e1-4a90-812c-20b62f988b2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f964da62-b276-4e95-8010-6f34f806c4b9",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f24e2b4e-b165-4de0-b919-7623b69940d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e43cf6a6-d669-443c-a74d-cbfe2e647d77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08bccf3d-97e9-4cdf-b1f8-0b5eabfa5ccb",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7319ccc-baa3-4f56-bb65-87918f554f32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7343d981-5007-496f-a578-6305a4d4e4fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "535b2b64-57e7-4c74-bde1-b8d96fab5e9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ca80bcf-fe56-49e4-8dd7-d970c85f2011"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f10ddaf4-0437-4fcc-9a56-b23e0704699a",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a57b847f-6bea-4b2f-978c-51a065db3d64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d2102be-3063-4ee7-8f2f-4ef4fc32dc63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2551a26-00a1-4fb9-9579-ecdb72f4e574",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de63e9f2-af98-44c1-ab7f-b2399c9de54a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f05a645f-4399-4452-90b0-24598230762c",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4388c41-c691-4dca-9e3a-b6a25e63b0fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "558f02c7-55be-42ae-9471-3d355e9a402e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "236c9e33-ec95-4a89-bf48-b76ee3222312",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1716a74f-813a-4a86-bdf1-4e0c530803c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99eb8a47-7937-4c4f-9e4c-e42288160e7c",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22977951-6afb-4db2-8bd5-f7ac93725985",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1878861-2f6b-48c8-9725-8538afdc8bdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6137d793-3ca2-4d7f-91ab-e2915eaa4914",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c471b06-4b9f-4133-a5f0-9ce9a338f31c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d476fbf-7343-49eb-9d29-37b40491c566",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a61aee1f-deac-4777-82ae-800258a74cc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bf911e5-f3ef-43ed-a60b-98986f79d4e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "942b13cb-c221-432e-91bc-f2e9a33f3dd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "423dc459-1ef9-4641-95f5-d433b18b6ad3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "575a38c4-7976-4051-929c-9e561369002f",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81d4f34a-08d7-40d8-a9a1-39c871ead5aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5395265-c638-45fa-bf96-71145c24c76a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59bab3e5-2684-48ab-9132-02c3627bc814",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fd50a3d-2d85-44d3-a61f-6b787b33516d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f212d51f-8b83-4b4b-aac0-061bdc583ce0",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ecb5d29-c195-470f-b459-8cb563771fb6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d633b57-2698-46ff-9ad6-31ace5a987d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe785428-e9cc-4cf1-a0eb-f8f0d22f3d9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7a44d5c-77fb-4c88-9677-623e47538881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "025a7376-0f1e-4158-aad3-8e0dcaf2d240",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "913fb489-0ac8-4d5d-85f4-aa344bd52416",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a83fc9b3-78a8-4688-b6f2-b94a4a4540aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08645543-d345-45b4-a2c4-d6b4438e7513",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48e95826-03b2-4aca-95f9-6b5f17803ee3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b75c9eb-3d76-4349-908a-e33f56495cc8",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a82193d-af36-4b19-948a-eb0e9bce325d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3f12095-1080-4b2c-9b4e-39c7e8d56c06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17c20f57-fa53-468b-a22b-1c7b23c8f9cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d17ab6a-7e83-403b-847d-a3b47227d95f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5784c54-7a81-4a74-949a-7fc6989b00a7",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc57f789-50db-4a7d-9fca-2a65af3774ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "199d318a-fd01-46e8-bb93-d2da5a8a7526"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "126a352b-41da-43b9-8338-b017905a11eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8714fee-ac30-4ffd-8904-19677cd51e63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a65c12a8-9385-4ccf-9504-c607adf0394e",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4499a6d-1e4f-4d25-a531-c3475fa27535",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b9ce937-8aba-4543-9952-e223268e4bb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72fd5486-4ac1-4911-99b7-8853487a7aaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9e2a2ec-9a47-4bc1-88b9-79b8f0cd3d80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a86cf66-fd09-4fcf-a59d-9be12dbfe2e4",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca9ffa26-2f4e-4a1e-aeb7-e1bd50b3ff8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dcbd053-5bc0-4f52-b04b-f373bd8460ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a960a20-4fbe-4ec8-83c7-b5d821e5719c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a321724-363c-4425-ba7a-85bc25e29eac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5de8642-f75d-4204-bb8f-c0b0f8899556",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4ffb8d1-892e-42aa-964b-1cd4f0999887",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12ec8d4a-468e-4e70-8420-e8947c411bd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef92a929-ad63-4491-9441-434bf3ce17db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0b363e5-ed49-42b8-b86b-d914b52898c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7788a0f4-6d5e-4c41-b01b-a9d20deba809",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "605d1644-2de4-422a-8347-dbd40ab5beed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01774b3d-4392-4573-9548-e99dc4320b83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac9377db-cb15-4074-ab02-e40e7250d9ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69cbcbd9-347b-4b39-be2a-a05621b1a1b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c88876c-f1e3-4db9-8e1f-111afcf56399",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2440369-bc02-458b-934b-626a2614180e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3c2e267-9a06-4f6d-9fab-1d6cddfa5dd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e7566dc-c303-4d19-bc05-ffa0eb2500d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64418b64-68e5-4661-a872-e2942aaf0220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80e6eae0-3ea2-43ac-b9f5-77cc480cb1cc",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d1f1a74-d79f-47c2-ac34-92ecc7eeac57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "888d5e6c-adc0-487b-a015-0abbd3ed85fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e58f5961-ca21-42cd-9f0d-ce3a752153f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11809d70-41c0-432e-b988-468849429d94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a3e72f6-23b9-4695-8d0e-fa0a0eac2d73",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b7f9d8c-9fed-4286-abd7-cf45f5cd9751",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d09fc49e-8bd6-4f65-b8a8-9957b27e470a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54b1df5f-78f8-4fb8-ae34-3b5591ce23bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6fa789c-eefe-4f74-84b9-ab1f3b84bb67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eadc38c5-bc55-419d-a975-63e7d403c41e",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83f06ad7-1123-4000-b88b-af3f6ca7ea89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e41ca23b-63b0-4384-9cc6-4ea4c8e8d02a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a4367b7-317d-4dfc-bd1b-27283e2c33ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d98b041a-d7f4-4794-9502-9150055d9492"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfb038c9-e86f-4dee-84ef-beb79ee39486",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaaee0c4-1261-4937-a8a1-e4a790cdb9ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "061d55f5-ce4e-4a66-9eb7-6c3945f24e83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac510e76-7922-4bc3-b158-429bacc6c7d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "405859cb-de75-40a9-9b18-00ddc24ae30d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48d559db-dd03-4ed5-8e45-f52275cccdfd",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8abad8ef-e70a-4d9f-a269-af89ba7aae0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6387bc8-e5f5-44ba-9257-2f28769bd2a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "624130dd-1fa8-438d-a016-48da82e187d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4c38234-edf4-403b-a13f-a081569a7710"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d684cbb5-3d5c-4d4f-982f-32772f34bd71",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8026b338-8be9-4bf9-bf32-1e7a7abb6932",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2fc29a8b-827c-4e86-8324-6ac0ccc61734"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c47be262-7a73-4e5d-9dc2-3d79c1396fff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56317f50-205e-4d89-a68d-7bc3ef60fc72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9d3cf80-6741-4edd-bc58-4b58517d40a4",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1243750f-d666-4117-a084-bf362c88e57f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f544021f-eebb-4099-9eaf-fc69a28540d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96aa7871-b240-4293-8dc8-a233a21bba0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d1c042d-3fd5-4304-88c5-9e60783bcc48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21d0a18d-3e16-4f9d-92de-3bcd897b1f1a",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e40909a-14fe-4242-9694-d5fd7df7a66b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "655d87c3-11f1-44a0-adb3-a945b6300338"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d1ef4f3-2761-4e07-b009-112ed62a85a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31f4b8e1-c02f-45f2-8847-49623ae6c4d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c8ba4d6-e935-49ed-9311-786ce781d726",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63ba6571-0df9-4fc2-8e13-b2f6573fd7bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49da4374-46c7-4501-a94e-069e8441bdf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbe81fac-4a9d-4132-bc53-5bed4e73f32e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e39070b0-7ac6-4184-ab34-9d2621b48fde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f6acb23-2168-49ed-a21a-188686764fc6",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d397f99-7f7c-49d9-8dd7-31cd44d3c4f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a26b40d1-3523-4e83-af8b-43888e6ab44e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d50da013-f1f7-49e9-b8bc-e3025066717f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4aeebf93-7690-4ab4-804f-1a249b9f7461"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cabb4a51-1533-4e97-81eb-498b6d14df50",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a3b0757-3387-4c69-a117-b1c0eeb06422",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9cdd2683-b3aa-4640-ae3f-70519d8532da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b696b157-8479-4fd6-b842-bfba9b089208",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5146cbf8-f4e5-4762-8cd9-a7d3c5e88e3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef090fc4-c5e2-4ae3-8b39-fcfa83afd48d",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8dd8bcc-f5ef-4d31-a7f7-c9a6f2237dfe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5e2b3a5-1ef1-4ddf-8f25-8361e937bdc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29728729-144d-4749-a8fa-48679bcaff07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "691cd897-7641-4ed7-9f77-18496022875e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8d2137a-11db-4c2a-b67b-c2d4e361eb24",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb6d3f29-a075-4467-8013-90feae71c107",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8480a2f-2dcc-4610-a95a-b4bbf429ee64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4554338-ba06-4b2f-b776-0bcb66a8125b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efe6a343-c684-4b0f-a2d7-ca42d9c08924"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b1160d4-ed26-4ec2-80bd-3cdbabfe26b8",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6932187d-ac01-453e-9a27-32a1f4ecbf46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37e52770-caec-40bf-8fa2-ff938661f07b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d50758b9-7edd-4277-8279-a5a0c2aa25ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ccee322-52e4-49a3-865f-1a2cfc0fe262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b482e355-8dc3-46a4-a4fc-e3c6d183bc1b",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f1827be-4b1a-4165-a56a-8b68c61a399b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5404610-4c18-41d9-a13b-cbb6da47cd42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cfc87b8-a8b2-4b93-8f4d-4034b87bc7f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a0553a9-290d-4432-9318-3646ef8694fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ac6bf42-e9ba-4474-b5c7-52a10eeba1b5",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3573ca38-f9c8-4797-9871-8ce13bd2ed64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "742a38e2-2a2b-436f-a29a-a6a4a1f64ab6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "373a3703-0a9e-4ab8-9306-61f35c38bf2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f62768b6-7a5e-4d8c-b7b8-8e580211d7a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf093de6-0048-4739-8a0b-a69eebf89a04",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0099abc9-c57c-4b58-90c6-a0ad5cbc2c38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fc5ccb7-ba5d-426f-97b7-fba296e51f3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6025f6bd-36c5-4cff-9e55-39161f9fca04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d466f84-d2a6-48c4-b55f-04e06200ebe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6416faf6-2e7b-4bbe-884a-ba4044774a25",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e09e4293-7df8-4136-abfb-a51a761d299a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76ffa964-9f59-4bcb-a58f-c73a049623b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0f73334-9140-4779-966e-66c2e76b7372",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cee0dbe9-adf0-427f-9f66-060e4f3553a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7563e56-93ff-4bfd-9469-26a6b73b7896",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a559083b-1251-40de-8a0c-f7944e608e02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "076555f2-51e0-4b4b-852f-18972dbd7dd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f70401e-0333-4141-88d2-47e1925fa2be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38b1151e-b7b9-4cf8-921c-7b18b1ca65aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9002076-7ddb-48b4-9ca4-2fc54d768f86",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fffe7574-91d2-4348-a32b-e17c401dafd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "206e79c3-1522-4ad9-9b83-13f1a5c4b9ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec7d08d8-f1f8-4cf1-8074-9720ea94f673",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51480d40-3596-4a2d-9e7a-3b4fd0c1aef5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fee99267-aa93-4a01-9dc0-136d0e9881c1",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "908bb29e-6a51-4c1a-97d2-70f31f111a66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f104bd8b-e07b-4656-80f8-097549708935"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed22da42-d48f-4dcd-894c-cb8ae270b82e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e5f6a1a-57f2-4bf4-bd14-23cb0926799a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "705152ad-cebf-4199-97a3-50495c35b357",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4db2f69-473d-4ba0-a9c1-93e5f739e71d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c88ea1e1-8793-4096-ae3e-1fb11ee7efc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84986887-ea54-45e1-8f17-2c743928e359",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcd2a1da-7261-4e4f-b659-dd461b66188c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bca479e-b9c0-4d41-8b22-43266af8eb1a",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aa0bbe5-4b68-4c2d-a39e-4d509a97fd48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f8868fd-fbb8-4108-9095-087092666480"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9634087b-39da-4805-ae6f-3f81ad521e45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f4998ad-240e-4213-8aa3-4f0bc4a6aaf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "512745f3-2c9c-42b0-9d90-6f86691a211c",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35763e47-649d-4c41-8126-41bdb34b60f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc85c3ae-5172-4694-a95c-343bdbc43a78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b95faf41-7c6c-4dce-b0d7-29a2d44267aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4284dee-9632-4fb8-bf2f-a5191c511064"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f060072-1ad4-4a3d-8c28-de809c25711b",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a42171ac-550a-4f7c-ab74-0825afebafab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16e61d9a-3257-4588-a864-93a6d95d48b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b49eed14-4c2d-4645-bdcd-e43cecff4f27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a27e49e6-74dc-45b6-8804-71663a2278c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88d94705-6965-4d89-a660-e2fee9f02bbc",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef37bd81-d416-4376-aca2-26ec799f0c8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d041515d-f636-42cf-87ba-e6cb2929f9fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82915c5d-f0de-4d69-8d35-b406cec8a95e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bca5bde2-683a-4688-ac33-e74b3bdf12ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "771cc3ad-8085-4025-86e1-1d025d7ee389",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd946a3b-2a90-4b91-9f05-4fcc3612526a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6a42013-5f25-41b2-92cf-ba336f5f2fe1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "964672da-05d9-4752-94e5-775ee6d1427e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21fc0ba9-2265-4e7a-8e0a-cd1407f451c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fa7eb81-1be4-4193-a6f6-93df44fe8420",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cabdcb2-4ca7-4cb7-9d0a-c4f04f0cba41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbe6db0a-8ac6-4b4c-95cc-c6a334f07364"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0915617a-95f5-4c46-ab7a-204c9d922194",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66a2dd0c-f92e-4e1c-8e48-950567052993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f46947d-b3d2-4242-99eb-97bb333b4a23",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23a5b4a1-65af-4d18-81c3-ac9a1508023c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c93c5c82-69da-4f5a-8e8d-16bd8f6549ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a739eaee-1f86-40f1-b6ff-31aab88c7c0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "250e107d-2765-400d-91e2-9ad100e2c9ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3488b05-02b8-4c2b-b88f-61f0fcf9798c",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5924496-28b8-495a-84e1-5edb0cfee12e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c96ab2c-7bc1-424e-8077-1186fe4f5aa7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4394325e-6514-42d8-8500-6582e8a9bf5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e710575-3961-4f73-b8d9-0d33b1d84775"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bacec02d-0790-4933-9117-d48d352d4bd1",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9fff1be-3d71-4a75-9e76-07ffe98ad5ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e70df780-3668-4337-85b1-27745c78c210"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7a2c3a4-da4d-4ab5-82f5-3d060c05b8fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b83c62c-ba3e-4ac2-a02b-ef39abca0e2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f81b75e-0902-4d88-b49b-645202f59158",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "711920bc-1b11-48b3-95e7-40391b4af3a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f785db75-e3b5-430d-ad41-7ddb4129a7a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e32cb900-957c-4317-bf8d-02cc57444033",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cc0e4c0-dfe8-406e-833c-1c5fd3389a48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b276106f-3332-41f3-87cf-e33202a94e55",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a1a89e3-124e-4cf4-9db8-615d81a9f55c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5d11d20-c585-4b82-b8a6-ae0618ec4439"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76e5ddb3-f7b3-409c-b0dd-c5a5c741e196",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5abce1c6-6910-4379-b74e-e154a06dd0ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84f806e8-695c-4726-b035-075b21925618",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94faf7c4-4532-4d9a-8259-fee98ec17e81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04a9ea3b-4425-4fd8-ba2a-7cc24a27d3c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "241db915-0613-4943-a366-c7332bfc51c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d1f827c-eebe-4727-83d5-a24be0d51d62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9ae5c37-4c95-427b-b83b-d3537463258f",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b320af8-953f-4c77-b5a2-19a7b2594331",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9e6c932-fd0f-4f64-b53b-f9920e86e28e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "931a9427-8251-49a0-849e-154c14253609",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bb1da70-0c79-41ca-a386-459eb8e8245b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b6766fa-ad9b-43c3-b229-db99b7ec61d6",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1deb051-9251-4094-9288-7fd87088e5c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6938703c-bd2b-4bd6-847f-abfe409a62a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29813c88-6c8b-44ea-bcb1-99f73bc58e37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da429f8a-a92f-40a2-95ef-a473777ed037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de7d08f3-997d-4e8e-948a-dfb2b508f370",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80bdc11e-8252-4b76-897e-3c3b18837b39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3db41071-9aa8-4c82-8ea7-b4d8cb1cdf14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d0fc980-1f6c-4ab9-8acf-e76d56fc734d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb9d626c-5fc4-46cb-bed9-5c490ab1a42f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "971a55e0-c208-44a3-8bd4-6d5ba12ce516",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a55fa7d-0797-4029-aa37-086652e04ded",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08c335c0-5971-4e16-97d9-7f6a8c8a59bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24efc8c3-5085-4fc4-8518-506e7223d6a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e92d3fd-a951-4c27-bcdd-e185f9292012"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62b160d0-318a-4864-af7e-910cd8222c78",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2bb69d3-2d2d-42cd-b28b-59809296a4f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c23cd36-0cd8-45fd-addb-8d7010d414d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "467b85df-fa7f-4712-aa42-a6f667256e98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e5bbcd9-b29f-4a45-8bff-f90277a6b43e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b3de33d-d7aa-4e8d-a683-fa8d0ae9664f",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95e4eebc-120f-40e5-9008-c62822701f7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "def66004-ff5d-407a-bfbd-eef67a03fa3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aa808db-c4d5-4cb2-aefe-2730587c76b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e97888d1-74a3-4473-a02c-623dea385088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "111846c2-e01b-4fe3-a2cd-cf0e7abab11c",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "547bf3f0-cc23-4db2-9be2-5753dc049245",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d98f124-304e-40d4-843c-b137b00f6e27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32764453-60f5-440a-b725-0721d0705566",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3c7779f-c740-4a61-bf29-2de0985f1918"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b753acd-9f10-4565-887e-e56b6f8d3633",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b13525c-92fa-4785-bd0e-7802c0422b60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa94faa2-58f9-4add-ad10-f432a5e32c4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c701ef44-11e3-4d77-b9ba-cd59b25eb503",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4b713d2-c84d-48d6-aa63-0237ec45822a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d422f259-4369-4bd8-ab7b-9bb8ce1554ab",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af08dd66-0402-4a38-b067-a93ddf301ca2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1459a649-8a78-4c99-be58-30dc450fb89b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c6cb73c-b47c-484f-ab45-f50fd5eb8b4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99aa989d-1d9a-4f63-8030-9fff9fa929d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1a610d2-ddbb-473c-9dfd-a0b26ea15412",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a87649e-04b5-4722-b171-89c7f134bf02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d18f4ab9-5252-4303-b4bd-45eefe720154"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a815368-8f38-48c3-8625-77d0b78ac885",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2283ed5a-2759-4ffd-8631-c0e758690853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8ae3ea6-cc95-4c55-b701-fed2aa34da2a",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fff2041-8559-44cb-8966-32606c8949f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6ce465f-b9a6-4e99-9207-2df8d4bed6fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56d661fa-bf04-4035-b440-56f277d5c8fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc2ac1e3-af5e-4711-8dc8-0e2b565cafc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e20a453-0a29-42e4-81fc-0e795c25ddd0",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f195ffdb-ca12-4b2d-8f0a-74f7b87fd2a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c50d03c-2609-4f5a-9d68-debc2eebf464"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d88613ef-899c-4b1e-81cc-40ddfe9b8f61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a473ae1a-a386-40a6-95f7-eca25b52e541"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72305271-c76b-4e0b-87fa-327789eac70e",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8814f05c-7f8d-4bd8-8ac0-adb3550f3c46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6b9d8c6-ec3f-4660-a698-0fbd971b1b23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44fcb83d-1c23-4174-ae86-45af2a0d5241",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d7c6dc6-5062-4e0c-bc94-3b0e48d3cfb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "226a70df-3f0e-4a1a-9047-a04e5372b2f0",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a421130-eec0-4ca1-bea2-b9e6c88720bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8981a769-20a4-4d58-829b-fbd3da6a8472"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46f3dd72-5c7e-475f-8cb0-4fc8c8a648f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7aac7ad6-4076-475a-8117-50c5c9b86658"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a49080f5-d97d-4fbf-9b3c-613c23502fec",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3d5b0ab-a04b-4ae7-b492-4d963eba1a3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dcacde01-007f-4862-895b-95b54e7e59a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f202a57b-8478-4736-b044-24876d7b9906",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0d5f1cf-a2d4-4efd-a0ef-bce43127e344"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3e393c4-34d4-407b-b596-ac1a39ef9f24",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75348cc3-3f84-430f-bfa8-8b7f07e11748",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58f9b327-408e-4739-b94e-376cbdbe9f0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29a7935e-12b6-45e5-9fde-4e3a9728c523",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abf40216-6179-43ef-b54d-72d5bab2585f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfaf7a6c-7b07-4ff2-a995-524e1fa2e013",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "465c67f7-d262-47fe-bc96-87ce985c85e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca9ba24c-ecb1-42c9-ac05-91fc769aaa65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd9b5820-eb04-4456-b8e4-5bd956ef5894",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72ed5964-3992-494e-92f7-f9462222487d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "accc76ba-ef6d-482d-a81d-eef57eb2d2bc",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4ba0091-20f8-46d3-aff1-3e4b413a4b17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "776b3306-3b5f-4444-8409-a522d058c024"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdede0a1-4692-4d0e-8c09-1487a15eb068",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b0ae5cb-680b-4e43-8361-17785ec75381"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da50af04-eb27-46aa-b8f7-6589908b076e",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e54b4ba-a86f-415e-8135-ab4f703fc71c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f61a6ee2-e005-42ed-986b-d9eca1c80c98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90691fcc-9ae5-4a5a-9894-14c00ad7eea1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f092c3bf-4462-448e-b78f-a6effa74948e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b670cc2b-da7c-4983-9955-e1169d6f86df",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "800d8ea9-bdf2-449e-aa96-276466178e04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba09cd00-ff19-4132-8e2e-f5a37cb56498"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5846c6e3-491c-4260-8470-8b3f5b6834d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "333c1e28-71b4-4864-9573-a52e6b11dd29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db0abfee-9776-4f25-aed9-25e9eb1a419e",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7527b5c-f409-4879-b300-f5398eb2cb90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a90c56f-7727-40f9-acee-5a5bdebbba9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03127f6b-b8be-48b9-a996-e63655ccd57c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27504434-00f1-47e0-a5eb-4f9e507d8116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "451a407e-cbf2-4d80-82ed-3c946470e87a",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f76589c-18d4-41a3-b70b-29beec0a10e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b665117-9164-49bc-b52a-26df51a88a93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e27b62cf-a670-466c-a4d0-ea18be5e00f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "431755c4-ea7f-48f1-bb4d-ae51633c9624"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd45792c-faaf-4d98-8bdf-cd031fa0dc3b",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71db149e-c62d-4093-a66e-a398cb71f7a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13a73866-beb1-4c54-9acc-cdb14bf31e34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83d34b35-15e0-4315-aa9b-a8702cbde146",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64cd87b0-300a-4bd1-9a6d-f20ac9b5d589"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abdbed04-45a3-4a9e-a6b6-0534b0ca30c9",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1409976-4683-4651-9e0b-d072701ccf1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c0d2caa-c55c-40cd-b0c1-9d33b6277c27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "daa7b575-23de-4a70-b4d1-5ef25e106f82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f44fc66-b9aa-46ce-bc30-8eccecdee08e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66c56d24-f2dc-48b1-bc40-fdbb26aef9d5",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d40708d-9839-4845-acd1-3bed33bf62e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28259d76-b0a3-41e3-9fbb-35264bf238be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4da7878b-a3f4-4e69-869d-d33b73265b58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27d75cae-89e0-4af7-8fb7-87ee28d2c172"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8b448e8-3293-4eea-8079-637fb3ebe0a7",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49ccf8e6-85e0-4eff-9a32-70233a7e4ed9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16c2fc39-1159-4f9a-b2aa-d2c69e000aa7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2006f7f3-cbc0-48a0-9d7d-b3972e747587",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69e9abda-52c1-49ac-99d0-414bfee51e66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8a87df6-83f3-4dcc-b6ac-59afa4d2f520",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36a67182-d20b-4768-88ca-6161430b7a98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9687c691-cd01-441e-8686-81ab4aa3fc46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7da34d87-945e-479f-ae71-5e5d48b9c524",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bdcd539-94d3-4a8f-b447-553c69275ea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf666442-d2d9-497c-b715-df371fceab11",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c62d9152-e357-490e-8945-705164e49a79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a58bee79-089b-4044-9d64-a09aac8f2d32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36f7d659-7562-417c-a93b-27d8497e9915",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09216e2e-41fe-4afc-b420-710576c1710b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e4be11b-df6f-4d93-9048-23b2d3adebe2",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5f89bbb-0778-41b6-ab61-34556f129894",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1bdf9b00-c167-4f1e-ab58-299eb12b44b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf9be324-e0ad-4b59-be80-a437ddf94b6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff9f5061-12f5-49e8-8ec7-6cc2624a782d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e203c81-1e57-4579-b184-1a3af4eaefd3",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a0f325a-74ee-4273-aa47-4bcf712b1599",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2cb5d5c-525d-41b9-9192-6d09be349f43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "372d0edc-af1f-46e4-82ff-855b2060c515",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bf3764e-207d-4f7e-81fa-24473b9fb773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce1eaf82-c6eb-4e32-9c54-fcec75c10c45",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bee8c36c-324b-4b85-ad47-7b631504a689",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ede1673-85d5-4b40-920d-47e84ed77b8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90d2ca4e-39fb-407f-af13-26cd0678ec20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0795ba8-3843-45ac-99a3-14a98ada8690"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aae34860-d9b3-4483-830b-61fb215e63a6",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f449aa7e-2e56-44f4-b8cb-8b23fe8d0079",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46097ec1-c69e-4dfd-96f7-37422c462692"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2a860af-abf9-41ae-9da6-bd91eace5b3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4f6b647-3a90-4273-8907-fbcb4373a24b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee1e56fc-c9f5-4b3d-be13-a6c3466470c0",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab0f9353-35df-4d26-b661-be6f90b03827",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53851285-1eaa-45d0-9741-0e5f0f6b1045"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "326d451e-6f6a-4522-82a9-c133ed790cb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b78f524-78ce-403e-84cf-d5137244c179"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70663bf0-e373-4772-9595-b9b484543690",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e10db80-51b0-4f76-8021-b145ac5925b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a819b8a3-d0f1-4216-a113-15d5975ccc20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb7bf67e-6de2-43a0-af47-641398427b2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9abb3b76-cfb5-4be6-8dfc-8fe20b934751"
                        }
                      }
                    ]
                  },
                  {
                    "id": "618f74cd-0d9d-4f4b-a72b-dac35270b6e0",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2df1c87-ff4e-407d-918e-f40f48653ee1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c209ac73-71cd-416e-84bd-c2e69d8d07c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4f6babd-25d3-47eb-bcee-8324ad3e364e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55834a2e-cc18-4cc9-bff5-256ff64f7bb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f73b620-ba64-4b89-81a7-ea63a6428db0",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "677891ae-7eeb-4fd7-b10f-a60c5a83115d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bf1ea90-1cd4-4d0b-93b6-e4a028f9e848"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30f6f579-0e5c-46f2-b829-8c9c563218de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e4fe04b-0abc-4f8a-a257-3b7981c30d75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb4cf34a-48e2-4433-b17b-905012897130",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72faf1d2-f7cc-45f8-b4ed-9823dbfb4061",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29e26807-c2c6-4024-9909-004410ebc8f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e96dd57-38de-47b8-a90a-c12747f27a0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "869d6ab2-0b27-4cbe-bb18-0f54cfcf1d8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7630c4e8-96a5-4407-b7d4-7838a434620a",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45f0b148-36b5-4b2d-bfda-d61a5cd15ee1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e617fc12-43ff-4c98-8631-d539d5a2b154"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e6c771a-17ff-4924-b1de-2aec9c6dd429",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4745c954-3926-4ded-8b20-513c026abd0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0cf145e-f1f7-4501-9750-6339ca1ab913",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0b12978-d345-46d3-87ed-c67e01e71d22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1ce16b3-adb8-48da-a863-aa5cae17af9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e904dfd-d100-4574-9d9d-19834006430a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e359aa11-a5f6-482a-9600-33379e75dd6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dbd10ef-307e-4420-b022-760812e26653",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "062d1777-7ef4-4268-b763-9f66d9e9f664",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "923daee9-6509-4f0e-8f91-8653105d7a8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e14219f6-c4f6-47b9-87ec-da327241b84c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14065fa3-a620-40ae-a11c-358bbc7c6bae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "010899cd-a44e-4d9a-8147-c7503938c4c3",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "641a2d69-a4a9-401f-bd84-edf0bdf20306",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d045e4f4-64a9-4cc9-aec9-17dbce5dfc5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e61e3ae-d131-4482-804c-ddb6e7cecedc",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1fd463f-08d3-4bb0-8803-cb28eb14b873"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7237cf9-95eb-431a-b37b-d3fd59c4bf1a",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dab0993e-5e57-4cfc-8ead-34aa94bc2c1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c4fa459-538f-42a5-b005-009bc43831c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39c2655d-b751-4844-bf1b-4c779cdf3484",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "611d9936-fc91-40e9-8730-48203477f12e"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b49aee75-3e8a-47fe-a8e4-6f7834323640",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "49bfdf20-be03-498c-a08d-dd7b50ae040e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b389d0aa-3cc1-4e3f-b153-5ddfd1829be3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "78231033-710a-4c3a-90ca-ebfaba200e3a"
                    }
                  }
                ]
              },
              {
                "id": "758d1144-a8cb-4f59-963a-a0c12ec025e0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "74f3782d-5a8f-4dae-9d80-6bc6e7698960",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c2394a5-17ac-4e10-a500-39ec97984e0b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "5919bc44-c83c-4c7c-b08d-068fbd96455a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ee5f298-4c12-4ad5-b2fa-509fbd7f71c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1f95b420-77e2-4fbf-b23a-ed86e9f9ea43"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "40889210-c9cf-495a-ba95-777e2c6456e4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "85a92655-5cf1-410d-bb64-9c962bc13825"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fc36b082-2472-4d54-957f-1ef69a1189c7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c3f8d7f0-8014-470e-a8c5-fd39ee9f866b"
                    }
                  }
                ]
              },
              {
                "id": "bb4aea78-b91e-4070-b977-c1f0a776a12d",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "4fd2aaf0-d15d-4c9d-bf61-1c47f721eb4a",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a515203e-77e7-4f7d-81fc-fc14528975bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "6adce9d4-db48-4e00-81ce-ece06429414d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9a9aae8-9620-4a1d-bd8f-f61d7e984708",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95f25e22-0e0e-498e-a3f0-f7551ab41b8f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "26274326-9d30-430d-934b-760f569ea48f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a7c0c3a7-d697-44b2-a084-a7622d5ee1ed",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "842320b7-0ce8-4ef0-aea0-118e17356c8c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "3cbffb0c-19e5-4826-bbd3-15427e03026b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4c7bd58e-527c-44e6-a2f9-3948602e7ecf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "127805fe-0063-442d-9a09-e953e196a92c"
                    }
                  }
                ]
              },
              {
                "id": "24f035be-d410-49a2-983a-084302c0a59b",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "423888e9-dd7c-4cc4-a184-fad041d90157",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "59d533a3-8028-44c9-8503-6592643be3d5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5f3405a8-1071-44b9-ab1c-925e876668b5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e4773e9d-2656-4576-bc95-bbff8792c5f2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6b9d27f1-03e4-43c7-9821-44d79dfbc8c0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "06f324ac-d4a7-42a7-868d-38bf970dc8bc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a87b3ee4-d0a8-4991-a38c-4ef9035aa37e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "420585ad-d32a-4fa4-a576-ed633ccf0c62"
            }
          }
        ]
      },
      {
        "id": "7f179093-242c-4e97-94b9-aa63d2bf888c",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "b096e7c2-e36f-4586-a0b6-35c7f531e1a0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "40b79454-77e1-4e89-a8c0-bf7ccf309eee",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6db27e02-f55f-470e-9492-d1b46618e427",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cd2c23a-c00a-41b5-b0cb-288b0611c2a4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e7810fd1-688f-4251-8606-0f2cc1f4d8be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c4de550-0ae3-4e4f-b7a1-87fba253eaeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "abe9b6f9-4dfb-4797-b585-5b6340c70ec5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "54ad83ac-080a-450c-b692-18928861cceb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fc675831-627c-4e72-9a2c-eb093d6832d5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "425dc5e3-ee3e-4e7c-b6a0-04a5559d64c6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d5f39c02-4f01-4e96-aabc-d9643ad4b0b6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ddc024e9-36dd-4e8d-bd26-7317f5e2760c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "1e3a88bb-9667-42f3-a248-074082644968"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7a004d43-b704-42f0-8bf5-39280cdc026a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3b870d9e-7f73-4ec0-bbcd-0f5aac662a50"
            }
          }
        ]
      },
      {
        "id": "45de0a8c-7e93-4acd-b76e-cdc659ef0683",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "bd1da27a-5b64-43e3-ac4b-22cc4aa443c5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8c379127-4d30-45ca-ae0e-fb4ffe658be1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1ac6d8c0-367c-4cd5-8bfa-bca7dfbe2b97",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeb8e884-18d5-414f-bb6e-02754f7a7680",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ad99ed8a-97ad-41e1-afaf-ed422580bfc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56e952dc-e48c-4dee-9eba-aa92c6235f15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a5b1b1c4-711c-4ea4-b575-81232f9aab8f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3b55231f-4c65-4284-a3de-af5486809848",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "485c0dd3-6da6-4309-af08-83b6c44c5363"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "56245061-7513-4dc2-a755-0cc2452d5906",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f89eb39e-17a0-4345-8dbb-ed4744b6d1aa"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e47e8cac-fe41-4dee-913c-66ce4e547daa",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "baae4c13-0186-4c68-a52a-92dcdc803bc1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b3993500-e87f-4010-9fba-20505edcfa2e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e7a17026-7063-453c-bb86-6e5b71f396ea"
            }
          }
        ]
      },
      {
        "id": "1107cfde-3e05-4650-a9f7-00d891148192",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "5fc11c98-1a7b-4ebc-8402-bc97adc65da3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1008bbd0-fae7-45f4-b633-d7a857a2e61a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8c7e1b58-a3a9-442c-8b39-1483eb391d0d",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8c7bc9a-455c-4ef7-be0b-8a80147b3667",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c60ac5ef-19ba-4f4e-965e-91eacc5f493a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f97dd4ff-be30-44a6-bc70-375a429bdac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "caf76a09-aa48-4700-b1d5-c72a64087db7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2a3b3511-3296-46fc-94d9-6a203dd05b45",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "22c6ae18-f0d2-4b7c-9da1-45d03064358c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8a17d1c7-eb41-4e0e-8bff-f3c5bb986c1c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "33d426ef-a6cb-489a-93e0-4ba7aed6a3e0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d14635a8-c813-4462-a5f6-aab5e4ce426d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f5e35247-340e-4a86-a76d-8911eca13191"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "72b7e847-1c49-463d-97b2-09509c740d7a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2561d61b-20c5-40ec-aa39-9593db770f42"
            }
          }
        ]
      },
      {
        "id": "a359899e-a261-447c-8e8f-c0e86815a664",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7c81151d-2d4f-4f34-9788-0d025474192f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8337236b-b695-475d-8444-21b76b3a5284",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "8601b8e9-768f-4d1a-ab8d-1ced3cd72565",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "686051de-f04d-441a-a2f3-2ed76f478065",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1da1dfdb-25f9-46b8-9e7b-efa9dcd85d57",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 571,
        "pending": 0,
        "failed": 33
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 277.6267605633803,
      "responseMin": 7,
      "responseMax": 6814,
      "responseSd": 836.5363037267941,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1688518258627,
      "completed": 1688518351992
    },
    "executions": [
      {
        "id": "2b1413dc-e8ac-49b2-b499-da1085785572",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "8db7cb10-e44c-414f-8f75-14248d545c92",
          "httpRequestId": "502f8b42-8741-4317-a6c1-75a0bc9df116"
        },
        "item": {
          "id": "2b1413dc-e8ac-49b2-b499-da1085785572",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "03564609-6fa1-40dd-a5a4-8a5932a85fc0",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 0
        }
      },
      {
        "id": "33e88a62-8ec2-4bbe-9567-c04758b600bb",
        "cursor": {
          "ref": "265a38fd-2990-471f-8648-a8d1e8e862da",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "668687c9-1f45-4ef4-bb6f-e52a0649c092"
        },
        "item": {
          "id": "33e88a62-8ec2-4bbe-9567-c04758b600bb",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "c9359354-27d2-4e23-9393-1846a21369fb",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "02054991-a56b-4b83-9710-4d835fac20f3",
        "cursor": {
          "ref": "d02449f2-7ca5-40f7-afa9-5dca5b7acc43",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "7447d6ce-1763-4126-a759-0729abdaede8"
        },
        "item": {
          "id": "02054991-a56b-4b83-9710-4d835fac20f3",
          "name": "did_json"
        },
        "response": {
          "id": "34a991dd-c49f-4452-a536-ebfed84e7684",
          "status": "OK",
          "code": 200,
          "responseTime": 490,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4875a958-68d8-4499-be18-d066446997e6",
        "cursor": {
          "ref": "fb735fc8-eadc-4a13-b2e8-7b2a50efe16e",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7f2e237f-2379-4ece-8dc3-89fc3b4b8c7f"
        },
        "item": {
          "id": "4875a958-68d8-4499-be18-d066446997e6",
          "name": "did:invalid"
        },
        "response": {
          "id": "29288370-c576-4107-8ce9-904b7235aa29",
          "status": "Not Found",
          "code": 404,
          "responseTime": 4036,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "4875a958-68d8-4499-be18-d066446997e6",
        "cursor": {
          "ref": "fb735fc8-eadc-4a13-b2e8-7b2a50efe16e",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7f2e237f-2379-4ece-8dc3-89fc3b4b8c7f"
        },
        "item": {
          "id": "4875a958-68d8-4499-be18-d066446997e6",
          "name": "did:invalid"
        },
        "response": {
          "id": "29288370-c576-4107-8ce9-904b7235aa29",
          "status": "Not Found",
          "code": 404,
          "responseTime": 4036,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "ec320609-4bc6-466c-9608-45783fbe6caa",
        "cursor": {
          "ref": "88694b71-95ac-4ea9-bb23-721b49256692",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "0420f53b-f262-4165-8b58-5d72f7873bc7"
        },
        "item": {
          "id": "ec320609-4bc6-466c-9608-45783fbe6caa",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "386dc889-d1e0-42e1-81d0-7283b76ee909",
          "status": "Not Found",
          "code": 404,
          "responseTime": 69,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca62e249-f40d-4413-be1b-6efb97a0468c",
        "cursor": {
          "ref": "aa80c07f-882e-4364-991c-897590d6c08d",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "18d68328-7c67-4101-8dab-3a88dd02d934"
        },
        "item": {
          "id": "ca62e249-f40d-4413-be1b-6efb97a0468c",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "a42e07fe-82ac-40c0-b655-5a9712427a85",
          "status": "Not Found",
          "code": 404,
          "responseTime": 63,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb390a1a-4a17-4c16-8d21-fdb74ea05218",
        "cursor": {
          "ref": "7b415f10-3afe-4471-bba6-c5d1385c0c83",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "de841ed5-f25f-41ac-a4ae-bb7d4787d8a9"
        },
        "item": {
          "id": "cb390a1a-4a17-4c16-8d21-fdb74ea05218",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "0455f07c-f590-4e25-9a8c-dc5564cd82be",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "3499b7ed-17e9-4fae-98ce-55a2c1469956",
        "cursor": {
          "ref": "854ffa33-518c-449c-a146-ee96488d0a1a",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "16e300cc-ee91-4de5-97b8-cd111f4d7de1"
        },
        "item": {
          "id": "3499b7ed-17e9-4fae-98ce-55a2c1469956",
          "name": "identifiers"
        },
        "response": {
          "id": "2c0d7594-f841-40e4-8a5a-be525fc10049",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0af4dfae-1ac1-45da-acb1-c4adf054c9e1",
        "cursor": {
          "ref": "1a23ba33-c5aa-4ca3-8e82-ee0fb89cc359",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "4a509cd4-f37f-42e6-a5c8-efe24326ccd7"
        },
        "item": {
          "id": "0af4dfae-1ac1-45da-acb1-c4adf054c9e1",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "199c9b9f-3747-48d1-a0c5-2a88aec64da2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d741ba0d-6f05-4586-9a79-2ff447362f64",
        "cursor": {
          "ref": "6c318938-3a3a-4db3-9d13-814a4664095b",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "598bc605-8d9f-48f6-837a-712cd5a35a03"
        },
        "item": {
          "id": "d741ba0d-6f05-4586-9a79-2ff447362f64",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "364a2ee9-ba0c-4529-8bf3-836b18fcc980",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d31590a-a20a-426f-869f-e8f2c3e086ad",
        "cursor": {
          "ref": "71a1a0cb-f4d6-45a6-9bb1-a57e208eb978",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "15a606d1-6ee5-4a77-b3b9-2ffd0e0b8e2b"
        },
        "item": {
          "id": "3d31590a-a20a-426f-869f-e8f2c3e086ad",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "b80280d1-8a97-4976-899b-5ac815e127f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7e88c6d-ee09-47f0-8d67-73a41513cf11",
        "cursor": {
          "ref": "eea8e8ec-d041-4931-89a8-643615a554ab",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "b4588262-a53d-401a-81ae-b05f8a72dec8"
        },
        "item": {
          "id": "c7e88c6d-ee09-47f0-8d67-73a41513cf11",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "0cc677c6-52f3-481d-8b06-a145c34f5693",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c5621e2-0947-4cad-8a67-829e3bda8234",
        "cursor": {
          "ref": "794c50ff-178c-4580-b78e-0d3d68fb4ee0",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "5b4c7e29-9411-4cf4-81ed-a27bdd3f6b0d"
        },
        "item": {
          "id": "1c5621e2-0947-4cad-8a67-829e3bda8234",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "c2bd36dd-ffbc-4a0e-bcb1-2905bccdfe9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b384c7f4-878a-409c-88ec-79b7e5751eaa",
        "cursor": {
          "ref": "d4fe53df-e09a-4fb1-b6e1-300aa88f62b1",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "d6a1841e-4cd0-4477-8e9d-ce74fed68acf"
        },
        "item": {
          "id": "b384c7f4-878a-409c-88ec-79b7e5751eaa",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "efabf7af-647d-44ab-a625-dae1ee83db13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a43908a-fbc7-4508-b463-f1af35d84dbb",
        "cursor": {
          "ref": "cf1db461-3fce-4df2-b437-f40c16083686",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "193951e3-5f96-4c64-a400-7521b7436135"
        },
        "item": {
          "id": "5a43908a-fbc7-4508-b463-f1af35d84dbb",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "ee5a1ac3-9a47-4b65-97ae-6d35d29a0c2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "826cd7b4-0fa5-4cad-a29f-556db92c2d39",
        "cursor": {
          "ref": "a76a41e3-9db0-47ae-bc55-910b759cc297",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "aded1e4f-7e20-4c0e-86d5-d0d3e135ab79"
        },
        "item": {
          "id": "826cd7b4-0fa5-4cad-a29f-556db92c2d39",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "eb7b09ac-a02f-4c4c-ae7e-ca3aa03f910c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "580ffdc8-04dd-49d1-9e1f-20c74c832d96",
        "cursor": {
          "ref": "bf53c1d7-6333-40f5-93e5-0de65c57e91d",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "2180b45d-3ef4-45d6-b2ef-75ae6f32d22a"
        },
        "item": {
          "id": "580ffdc8-04dd-49d1-9e1f-20c74c832d96",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "8102f3cb-35f4-4c14-bc4f-2cf91a563f0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fce3f31-62b6-40af-878e-72f962fde577",
        "cursor": {
          "ref": "635b7c4c-ea07-460c-990d-43fc1850d2e0",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "baf1a276-c855-4929-864e-2d913eecb8af"
        },
        "item": {
          "id": "8fce3f31-62b6-40af-878e-72f962fde577",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "6befaa6d-90e2-47be-aa38-1981ce3e7137",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64f2137b-5345-4ea4-8d5f-bd2508f3686a",
        "cursor": {
          "ref": "069ddb3c-3006-4f39-b300-09414e679ef3",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "fb44b3b1-b71c-4e52-b5fb-075fc23114ed"
        },
        "item": {
          "id": "64f2137b-5345-4ea4-8d5f-bd2508f3686a",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "0eceed0b-0c62-487d-888c-a3a5905bb4cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c1ef23e-a1de-4119-b3de-33af758be4ee",
        "cursor": {
          "ref": "0b5b8cdf-c26c-4bd5-beb0-7f3757eda2b8",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "f84840f0-12ad-4ad4-bc7d-356193b9c49c"
        },
        "item": {
          "id": "2c1ef23e-a1de-4119-b3de-33af758be4ee",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "6b3bd444-4d27-4a16-8e5a-3070c7df9444",
          "status": "Created",
          "code": 201,
          "responseTime": 582,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "9967f7bb-22de-4527-997e-a5087700a806",
        "cursor": {
          "ref": "9ff9d8cf-604a-428e-a9db-66a8118aa87f",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "4f8a516a-b7be-42ea-950c-11e4b844dbb5"
        },
        "item": {
          "id": "9967f7bb-22de-4527-997e-a5087700a806",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "434d4057-71b9-4275-9e50-83cac8fb9c3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7046a3d7-0c5f-43c3-801d-e814ee89dbca",
        "cursor": {
          "ref": "d7c225d7-e3e5-4800-b8e5-52fa875279e2",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "73ecf699-fb49-4183-8713-6649e0e463ba"
        },
        "item": {
          "id": "7046a3d7-0c5f-43c3-801d-e814ee89dbca",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "d3c52c64-7491-44b7-b01a-78ff13ecac7c",
          "status": "Created",
          "code": 201,
          "responseTime": 6814,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "cdae3d6a-cfd9-46d4-9080-0328d0fc7587",
        "cursor": {
          "ref": "d47cced0-bffb-449e-bfa2-0acbb9509651",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "d4798ee3-645e-475b-8afb-eba22367147b"
        },
        "item": {
          "id": "cdae3d6a-cfd9-46d4-9080-0328d0fc7587",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "1bcf3053-177b-4c4d-89c6-fde9155aba3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "231935f8-ecf6-4fc2-8425-d20588ae5558",
        "cursor": {
          "ref": "4deb6785-5059-4e89-af11-285d120a34cf",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "5b72ed59-cb29-44bc-8780-f5f8adffb87d"
        },
        "item": {
          "id": "231935f8-ecf6-4fc2-8425-d20588ae5558",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "5c6ea1f9-0731-43c8-b00b-4a1904c78e42",
          "status": "Created",
          "code": 201,
          "responseTime": 4029,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "9b391c68-f6a1-4282-886f-e20e1623955e",
        "cursor": {
          "ref": "e2f04a1f-70f9-4b13-a94d-e42c8480d632",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "b9ac27fd-f39a-4472-98a8-9fbfc2018a8e"
        },
        "item": {
          "id": "9b391c68-f6a1-4282-886f-e20e1623955e",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "b0b2d450-f627-4cb2-be12-ec75f1edae46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ae4b386-f768-4dff-90bd-e1679d7f9b2e",
        "cursor": {
          "ref": "51650640-647a-44b8-99a7-d0564bb61fc0",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "bc2e3542-1098-4995-a77c-b70cc4e1785a"
        },
        "item": {
          "id": "0ae4b386-f768-4dff-90bd-e1679d7f9b2e",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "de3e797b-27d9-4f4d-aa60-e4ff86b1524e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab8daf65-be39-450f-9082-551f9f34a56f",
        "cursor": {
          "ref": "5f95ebfa-8375-4171-b232-f23291e95089",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "2d066484-31d4-4b92-be1c-775dbd262cd3"
        },
        "item": {
          "id": "ab8daf65-be39-450f-9082-551f9f34a56f",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "45cf0ba6-9b02-4edd-924e-806c9b5657e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2459c222-bfc5-48f6-bd29-462949dc443d",
        "cursor": {
          "ref": "c3bc38c0-1673-42e0-b0d8-adf83317bba0",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "0eb74825-b747-4f45-b928-c6091cd3dbff"
        },
        "item": {
          "id": "2459c222-bfc5-48f6-bd29-462949dc443d",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "14865f82-92f4-4d61-a4ef-7d7cc5caf3e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1516d000-3808-49bc-9721-22c4c1700686",
        "cursor": {
          "ref": "e50f800b-64f9-423d-b36d-c59b20a47e7d",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "260fd5dd-efff-420b-a413-3096782e4e77"
        },
        "item": {
          "id": "1516d000-3808-49bc-9721-22c4c1700686",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "242e9525-d78e-42c7-8eb3-649c6754394a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8e4a552-6676-412a-9870-41f79a810824",
        "cursor": {
          "ref": "02aa5be4-1020-4b47-a550-23b2e94d5606",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "eb57200b-cd2b-4beb-b305-3d9e7f52ee8b"
        },
        "item": {
          "id": "f8e4a552-6676-412a-9870-41f79a810824",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "762ca2c3-7bc9-45f8-9500-2974badaaf1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f69be4e-7b74-4114-9b71-ea7121c68912",
        "cursor": {
          "ref": "d500595a-3608-4876-9a61-40e75f032d86",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "43780fe4-a097-4c47-ba26-5e3cea5d36a7"
        },
        "item": {
          "id": "1f69be4e-7b74-4114-9b71-ea7121c68912",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "4ee71416-8ec4-40ef-8dd2-185fc68043ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae496c46-4fdd-4733-acf5-85a07e39b031",
        "cursor": {
          "ref": "eb6fde7b-366e-4c4f-9655-46e6160d1e01",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "03b9e704-2359-4180-ac66-17838e1be6a2"
        },
        "item": {
          "id": "ae496c46-4fdd-4733-acf5-85a07e39b031",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "4d5af342-3d92-4bea-8cb0-e07b3cce7fb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5381d03-a231-4319-a636-f9bf192639e3",
        "cursor": {
          "ref": "a5bb8634-809f-4cbc-8df0-54a44836ed05",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "51661684-0cf3-4f23-a1b2-f8aa2a4ba047"
        },
        "item": {
          "id": "b5381d03-a231-4319-a636-f9bf192639e3",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "33f379b3-c4d3-48d8-8efe-36db4f101458",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66b9ac0f-5183-4d14-b5c7-4b69bf1f0138",
        "cursor": {
          "ref": "b456d0cb-f1eb-45a4-89be-82cae5b64a77",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "eab68c68-bd38-4bdd-8627-3fa89e30fb62"
        },
        "item": {
          "id": "66b9ac0f-5183-4d14-b5c7-4b69bf1f0138",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "dd0f0a03-db5b-43bd-ae39-62b2f70c1c7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38305f66-4d17-431c-8fbb-403c5abe009b",
        "cursor": {
          "ref": "857714c0-b8b4-42f1-8ae5-fe5ba83b5c53",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "47f84114-62d7-40cc-8f12-58f2aaadf6e0"
        },
        "item": {
          "id": "38305f66-4d17-431c-8fbb-403c5abe009b",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "0d2cc90a-b953-42a9-be35-8fb92bb82c62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c07a6750-ab46-4a05-ab6a-1ed7f5b37d25",
        "cursor": {
          "ref": "f252a2f5-4810-42d2-97a0-96af95b2b731",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "b02ad51e-ca21-49d4-90cd-b222a12ade48"
        },
        "item": {
          "id": "c07a6750-ab46-4a05-ab6a-1ed7f5b37d25",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "d9df7d74-2e31-4fb6-821f-af9dcbb7e201",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdd752cd-5c9f-4501-b8cd-45411dd11c17",
        "cursor": {
          "ref": "66ba7cc0-9119-4f8b-bd91-b93a4a71f3f0",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "74200037-bc22-4731-9e71-0e11d3fce990"
        },
        "item": {
          "id": "cdd752cd-5c9f-4501-b8cd-45411dd11c17",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "0ced8f15-35ee-44ad-beee-689d7c26cd00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5708faec-f790-4ae2-9cfa-7f91025dd911",
        "cursor": {
          "ref": "e53dd5aa-46ec-4faf-a279-b852fe17d169",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "e8099b28-400b-4c3a-a425-e28007e9d456"
        },
        "item": {
          "id": "5708faec-f790-4ae2-9cfa-7f91025dd911",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "6569e7c8-e6e9-4dd9-b429-7e580617175e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 196,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7f185e0-2f69-46b8-9b27-fe9aa6022c8b",
        "cursor": {
          "ref": "10641dde-6846-4415-ad3b-33d11b9a4037",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "abafcdba-cbce-47e9-999c-f5c1707deb9c"
        },
        "item": {
          "id": "a7f185e0-2f69-46b8-9b27-fe9aa6022c8b",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "b8cb61f5-329f-4679-b8aa-a45352746f83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca6c9cff-304a-4c55-8705-6043a2ca844d",
        "cursor": {
          "ref": "78894f1d-68bb-47c4-acfc-821dce567e1a",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "4cbebdd4-4654-4bb8-a0c7-67750c0c1c36"
        },
        "item": {
          "id": "ca6c9cff-304a-4c55-8705-6043a2ca844d",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "bbacd0de-180c-49dc-816f-fd439a8330d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de40390f-288a-40f5-94ea-ad4d89046998",
        "cursor": {
          "ref": "bb681eea-6c3a-4893-8ef3-df7207e7b98e",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "0898efd4-3e3d-41c7-8441-525cc8400be8"
        },
        "item": {
          "id": "de40390f-288a-40f5-94ea-ad4d89046998",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "69a8efdb-b4ac-4bb3-82d7-bf37abf0d25a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbb51df9-69fb-4fa9-ae28-980d26ff288c",
        "cursor": {
          "ref": "428ce50b-5587-40cc-a4cb-cd58642e5573",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "89abba5c-e1d9-403f-a7cb-95cf47f5e009"
        },
        "item": {
          "id": "fbb51df9-69fb-4fa9-ae28-980d26ff288c",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "c99efca3-ace8-493c-b5c0-db7bd6244355",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80870332-fd67-4ccd-80c7-b9dda60eeac4",
        "cursor": {
          "ref": "d2fea09c-4ef8-40d4-96f3-90ee388f796e",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "ee41c7ab-e205-4ecf-9e9f-61d9f0aa80d7"
        },
        "item": {
          "id": "80870332-fd67-4ccd-80c7-b9dda60eeac4",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "132ea87f-9aaf-447f-8629-eed0754454d6",
          "status": "Created",
          "code": 201,
          "responseTime": 2848,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "11e35067-27c9-4775-bc24-c6f86fbcc166",
        "cursor": {
          "ref": "fbabfaca-504b-4408-8976-98889da08428",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "165a03b0-9b13-4b05-83e4-8939a9f29a8c"
        },
        "item": {
          "id": "11e35067-27c9-4775-bc24-c6f86fbcc166",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "64c6a910-4dd2-40f9-9b0d-bf660cea35e7",
          "status": "Created",
          "code": 201,
          "responseTime": 3538,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "39349dc0-9b7e-4fa1-872e-ec1c3ff90041",
        "cursor": {
          "ref": "2147b372-4342-438e-94ce-d52de6d63869",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "fead85c4-05cf-4978-9700-96b31eefb621"
        },
        "item": {
          "id": "39349dc0-9b7e-4fa1-872e-ec1c3ff90041",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "d2582cb1-c29e-435c-8621-50af3012c810",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca00b767-95cc-47c4-9b6c-88f75bde39d0",
        "cursor": {
          "ref": "8e12d97d-5f7d-4b21-bc3e-1336417cf836",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "028631d5-8f6c-41b4-b260-a73240aef3ee"
        },
        "item": {
          "id": "ca00b767-95cc-47c4-9b6c-88f75bde39d0",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "3b933be6-d116-4505-87aa-a7b7f7a412dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f705e5a7-8ac7-4055-a665-571487a19cad",
        "cursor": {
          "ref": "bd481cf0-f05e-4399-9c36-58ed26b8f2e8",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "91cfa755-179a-4c8b-9ce8-33f1d64ded1a"
        },
        "item": {
          "id": "f705e5a7-8ac7-4055-a665-571487a19cad",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "a6f719e1-121b-4e1d-a64f-b0af7e2882f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e39a24aa-7b08-429d-b24a-ec8050703d8b",
        "cursor": {
          "ref": "f9f95c15-344f-48ff-96cd-5476bceaa945",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "c6f31194-01c3-48cf-ac99-fe55683f420b"
        },
        "item": {
          "id": "e39a24aa-7b08-429d-b24a-ec8050703d8b",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "873e9820-5ccf-46b7-a069-a2b2d041b2ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22b7bc08-f6b2-4289-9047-675dd8639012",
        "cursor": {
          "ref": "0924bb9a-1095-465d-9d3d-42878e7b69c1",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "ee1d5bcd-b2d9-40d9-95e3-78045f1414c4"
        },
        "item": {
          "id": "22b7bc08-f6b2-4289-9047-675dd8639012",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "f30f0dab-d9a7-4cc0-bbc6-6016388219ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fccb131c-86cb-48ac-a03e-e28e73400222",
        "cursor": {
          "ref": "fd3607a0-3685-43c3-8d19-a685ef88c339",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "2810680e-0756-409f-bbb3-01dfa2579901"
        },
        "item": {
          "id": "fccb131c-86cb-48ac-a03e-e28e73400222",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "7e33436d-b2bd-4c6e-8c10-57cc8ff0ee29",
          "status": "Created",
          "code": 201,
          "responseTime": 3348,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "e21182bb-1b30-442b-a999-3aecc40f4a3c",
        "cursor": {
          "ref": "ecca1c79-f1c8-4b84-883c-22740d79bf2f",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "89953841-1011-474a-9cd3-3de7ac58715c"
        },
        "item": {
          "id": "e21182bb-1b30-442b-a999-3aecc40f4a3c",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "f8a6228e-b0e0-4a8c-b854-b247d19d5680",
          "status": "Created",
          "code": 201,
          "responseTime": 2651,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "074a9ae7-7150-4552-8870-fa35093e748a",
        "cursor": {
          "ref": "e7b8275e-8604-4475-9813-7c89e640b2bb",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "59193704-53c9-4d42-a66a-6e5f180cefb1"
        },
        "item": {
          "id": "074a9ae7-7150-4552-8870-fa35093e748a",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "a8946e45-9771-4032-a36d-4bd9df6f0cfe",
          "status": "Created",
          "code": 201,
          "responseTime": 2498,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "41d6dd83-ccb8-4905-b176-97b08924096b",
        "cursor": {
          "ref": "b2350db3-d57e-431f-83f1-5b54edf25301",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "de0cf50f-3694-41c9-8f6e-22b930627924"
        },
        "item": {
          "id": "41d6dd83-ccb8-4905-b176-97b08924096b",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "7478a79b-31d9-483e-821d-93d3b8d2f5ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d716ce9-b0cf-48ae-8aca-36012a7ce86a",
        "cursor": {
          "ref": "a6c18e20-dae8-4edc-bd1e-d2bc2a36f42f",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "82de0015-ff71-4803-8dad-c0a4e43d2872"
        },
        "item": {
          "id": "3d716ce9-b0cf-48ae-8aca-36012a7ce86a",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "e75c09b7-372e-4e3b-b795-033916482c3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e82995d4-f84b-412e-822f-25be168b01b6",
        "cursor": {
          "ref": "dcc27273-8813-4f85-aa2a-fd4dcf83f6d9",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "d9f0e76b-5c13-4400-ad27-3474e3ea2b0b"
        },
        "item": {
          "id": "e82995d4-f84b-412e-822f-25be168b01b6",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "b77ea42c-4fbb-41f7-83e5-2d9a79a94d7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8ee4df9-ee11-45e6-a56d-1672d25d497a",
        "cursor": {
          "ref": "459fcabc-0b55-4cb9-90cf-7594874e7860",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "a5080cb2-2b0e-49b5-8854-545ff1760a76"
        },
        "item": {
          "id": "b8ee4df9-ee11-45e6-a56d-1672d25d497a",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "0d1409ef-3e6c-49c8-a9ca-a7a09c9c4a24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2d39dda-4291-4897-9864-f11dad7c1185",
        "cursor": {
          "ref": "71394ba4-7ef7-4fca-aace-b039bf8fa67f",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "73edf0fc-660a-4655-85b3-f743fa2fe67a"
        },
        "item": {
          "id": "e2d39dda-4291-4897-9864-f11dad7c1185",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "df342a55-246f-4a78-8eeb-8ab1520ad9d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a78978db-8098-4321-9e71-1a215eb8e545",
        "cursor": {
          "ref": "cee2c096-c5e7-4a8e-bdd3-366c195ed451",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "c1e8975d-f9fa-4c76-9c5f-1dc0d83954e8"
        },
        "item": {
          "id": "a78978db-8098-4321-9e71-1a215eb8e545",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "e8f81b0a-e730-4a99-ae29-6df96f3f5bec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e944e27a-cf6c-4d09-aea5-fc72b8435eb9",
        "cursor": {
          "ref": "40a2a7c3-a5e2-4e2c-99d8-5e62138e10ea",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "e9b8a7ad-d3fb-4bb0-887e-08695ca385d2"
        },
        "item": {
          "id": "e944e27a-cf6c-4d09-aea5-fc72b8435eb9",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "4f5c27b6-0e2a-4c9c-8fe6-70ea53e2f09e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e7bf453-5787-40e6-8359-d94d6821b9b7",
        "cursor": {
          "ref": "87e3a0ba-27b4-4f4f-8a17-40d000ca4ad2",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "a94a8294-9af6-4271-ad25-b5c38cffd498"
        },
        "item": {
          "id": "4e7bf453-5787-40e6-8359-d94d6821b9b7",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "a99181cc-c636-4e03-8cb9-4cfc4d4e2439",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53a15203-464c-4742-b056-da8659c3568c",
        "cursor": {
          "ref": "1e0a9a54-c999-497e-8f3e-a215d69af3eb",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "ac8e267a-5354-4bf3-80e6-09281e2a82b7"
        },
        "item": {
          "id": "53a15203-464c-4742-b056-da8659c3568c",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "aac25244-f153-43c2-9ead-41432e1332bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "295390dc-b53f-409b-a838-d60d1bb65bf4",
        "cursor": {
          "ref": "90fe2917-e908-4719-ba8c-fbe752f37b1b",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "0002ac10-6782-4dd4-8c0a-cd44c22cc09f"
        },
        "item": {
          "id": "295390dc-b53f-409b-a838-d60d1bb65bf4",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "e41f7911-c755-4296-a32d-fad0ffad0718",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae4042c7-7421-4623-9b14-d7f395a4d0fa",
        "cursor": {
          "ref": "f83301b3-0980-4e6d-88b1-750e97d93b6a",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "429c8e54-5975-4ed9-8c15-7a90f9ad7eb8"
        },
        "item": {
          "id": "ae4042c7-7421-4623-9b14-d7f395a4d0fa",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "9d303f02-533e-49d0-b907-fcdf2e6a8048",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "367816db-18bf-4ef1-8e79-bb1088d3ce47",
        "cursor": {
          "ref": "faa3bce1-c652-4023-8cd9-01e0f219f31c",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "6b1ac16e-cdba-4cd7-be2f-81c35c1022ac"
        },
        "item": {
          "id": "367816db-18bf-4ef1-8e79-bb1088d3ce47",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "47f26fa2-b57e-4673-aa17-e88e7ab88ee1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc5bf60b-6489-43e2-a8a9-eb9b8f4746f0",
        "cursor": {
          "ref": "6fd693c2-2f2d-4e42-ac23-bf001512b968",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "8c0a639c-31e0-40df-8fc7-59ab720e7874"
        },
        "item": {
          "id": "dc5bf60b-6489-43e2-a8a9-eb9b8f4746f0",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "e0f08b8b-c42f-4073-b935-9bcde78d9d04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09952848-1225-495e-ba18-f0ab2a9417e5",
        "cursor": {
          "ref": "7eda6c79-3fe7-4ed1-a193-a47a17cbf5ed",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "e004e762-9cdc-4a3a-ac71-6d1dbb5b3cd7"
        },
        "item": {
          "id": "09952848-1225-495e-ba18-f0ab2a9417e5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "e0d7f491-73d4-4a79-b2f5-edb90773de8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc022b88-0f45-4b59-9dc6-2e8a54837490",
        "cursor": {
          "ref": "7a54a202-3663-4217-816e-f30c9925862f",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "e46ac03e-67d2-4b3b-8243-d871917984d9"
        },
        "item": {
          "id": "fc022b88-0f45-4b59-9dc6-2e8a54837490",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "b86e8b9d-8f98-427e-84d4-cc1e242f55c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "867264a8-cc57-4f9b-b807-e4cc3d289ffc",
        "cursor": {
          "ref": "bfa0c06b-f462-40cd-a85e-ffd105c60d7f",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "11970941-10c6-4445-bacf-d11f68f6808b"
        },
        "item": {
          "id": "867264a8-cc57-4f9b-b807-e4cc3d289ffc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "db614d1a-316d-4386-a4b4-92cbdbabf939",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "532cfc28-5342-4756-b93a-1f8400a09b3c",
        "cursor": {
          "ref": "1fd9eb78-bca4-4f48-9d85-dda563226384",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "09f81c99-bf19-4fae-abb6-bacf84c9cd43"
        },
        "item": {
          "id": "532cfc28-5342-4756-b93a-1f8400a09b3c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "73162ed6-8e97-4a9d-8e9a-d6a4d82f548d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c22108de-cd1e-438a-858c-b57a053f07c6",
        "cursor": {
          "ref": "124c6cee-3eb1-4777-ad50-6a2286851703",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "c3c7b453-1fb1-417d-9e7f-429adc27e06d"
        },
        "item": {
          "id": "c22108de-cd1e-438a-858c-b57a053f07c6",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "5e400da7-76b2-4a58-a487-b889178f8990",
          "status": "Created",
          "code": 201,
          "responseTime": 2961,
          "responseSize": 978
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "d0007328-e0c5-427c-be39-64395d1b7a8a",
        "cursor": {
          "ref": "540b12db-9efe-43cb-b0d4-8efdff9118ce",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "90e004ca-50c8-47b6-8f2f-708864ddde96"
        },
        "item": {
          "id": "d0007328-e0c5-427c-be39-64395d1b7a8a",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "ca2394e6-9176-4886-b613-b32dcf07053f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 122,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8716e259-ad31-476c-9cfb-eac8c70f26c7",
        "cursor": {
          "ref": "4a15bb6b-e574-4dfe-a97f-d4df31a4e8fc",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "e291b021-0b88-4fc6-8b98-29610c71f496"
        },
        "item": {
          "id": "8716e259-ad31-476c-9cfb-eac8c70f26c7",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "10d8877a-ffd3-49b3-a620-bb1e69b81faf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7cda71c-9f79-4143-940d-0cb6b8411868",
        "cursor": {
          "ref": "400750b4-7641-484b-a389-9d26f0c81e36",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "b5271088-ba2f-4f75-b7e9-9f79ad0ff8a6"
        },
        "item": {
          "id": "d7cda71c-9f79-4143-940d-0cb6b8411868",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "179c1397-e00e-4350-92b0-1786f48c65f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78c9800d-4e9e-46c7-a137-60f2c8c6feb7",
        "cursor": {
          "ref": "0fc6f02c-cba8-44a0-b80c-5f9d40f93945",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "ba9ce3c3-61fe-41bc-8a03-48802d2ba28d"
        },
        "item": {
          "id": "78c9800d-4e9e-46c7-a137-60f2c8c6feb7",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "58c395f8-7133-41af-a52a-831984c4a1b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b4730b1-deb0-4604-b2c9-b1b4745c86f6",
        "cursor": {
          "ref": "47d8b9ce-666e-4350-8773-a00f0e2d640c",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "f4ebfc27-000a-4442-994d-5e0e81160d88"
        },
        "item": {
          "id": "6b4730b1-deb0-4604-b2c9-b1b4745c86f6",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "f1668c3f-0821-4aa5-bdd7-de3e19816bba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cc3a951-9185-4efa-bd71-5b765fe290b3",
        "cursor": {
          "ref": "5d7a4f4d-30c2-42b0-be6d-6c221a3846e4",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "aac78c59-9ce2-4269-adaa-a55c34329a32"
        },
        "item": {
          "id": "1cc3a951-9185-4efa-bd71-5b765fe290b3",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "ff0de876-c312-4b8f-bb9f-c9afa13b0070",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "515bfc16-661d-4bde-ba8a-b127d1387c2b",
        "cursor": {
          "ref": "6246c41d-1e9f-47ed-a1b1-9e5b0b06abd9",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "41d718bb-eddc-4a1a-b1dd-e44428c3d6e6"
        },
        "item": {
          "id": "515bfc16-661d-4bde-ba8a-b127d1387c2b",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "d6eae940-791e-4ea6-aea9-0e43a17968c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "995c17ea-d700-4cae-9826-b33cc4dca1cf",
        "cursor": {
          "ref": "933c3afb-5ba2-445c-a7cb-85af6fa3887e",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "57d98ac1-1bb0-4cc5-bdbc-8d91a5b9eb94"
        },
        "item": {
          "id": "995c17ea-d700-4cae-9826-b33cc4dca1cf",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "f045a5c9-d362-4bdb-b691-79d27eded186",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78e10784-2d41-457c-9ed4-4860eb19beb6",
        "cursor": {
          "ref": "d2b019c3-e862-4dd0-85d7-ea922d2028e2",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "61927f1f-faa0-4dba-813a-61e65e83cb9c"
        },
        "item": {
          "id": "78e10784-2d41-457c-9ed4-4860eb19beb6",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "cdbd9b48-a1be-46dc-a927-1f0889c3f852",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f154f6cb-9b1f-4d6f-affd-0e2da6de3d52",
        "cursor": {
          "ref": "1871acd1-c07e-4526-8e0a-fdcfd58c8b8a",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "4fb3db22-c157-431b-a8c5-a85942b1612c"
        },
        "item": {
          "id": "f154f6cb-9b1f-4d6f-affd-0e2da6de3d52",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "6cf18ee8-76b6-4445-8e4f-0388cae8847d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5992df35-2cef-4363-ba48-6dfd7c17b5b7",
        "cursor": {
          "ref": "a8f4903d-2f1d-4d03-8ecc-b25010480e42",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "9c17485a-2d72-427c-a155-7bf54eef6e69"
        },
        "item": {
          "id": "5992df35-2cef-4363-ba48-6dfd7c17b5b7",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "17ae45cd-31e5-44a3-98f5-ea6135a3f902",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bb6d350-bf12-4ae2-995b-1d15d14d8064",
        "cursor": {
          "ref": "65005dc1-1b9a-4aef-a30e-2a8f884798c9",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "fc2906ed-60f9-4193-adc7-8e92b57de0a4"
        },
        "item": {
          "id": "5bb6d350-bf12-4ae2-995b-1d15d14d8064",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "28fd5c5c-ed48-4523-a9ca-c383febb3f36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28b65f85-0b63-43cb-9c90-fb0711a8a1e0",
        "cursor": {
          "ref": "e3bff419-d700-4adb-b976-e8a2a2b05c14",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "5a8a2cba-312a-44ec-a41b-1f8a58135dbe"
        },
        "item": {
          "id": "28b65f85-0b63-43cb-9c90-fb0711a8a1e0",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "48190c12-f884-4f0f-9b41-721756acc2b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19184686-ba73-4b83-92f1-1c6ec00dbf80",
        "cursor": {
          "ref": "a78672cd-15a1-4a71-81f5-4c7768b91d49",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "d3591293-c0d6-44c4-a765-83e9b83c9b8e"
        },
        "item": {
          "id": "19184686-ba73-4b83-92f1-1c6ec00dbf80",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "ed1753f8-ae24-4594-a72e-252f03edfffc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c76c953-7234-4dc6-a341-18af4d990708",
        "cursor": {
          "ref": "1ded68cc-eb2c-4904-b28b-f075b26afd75",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "be23f9a0-f6ee-4363-8e6e-46558cb022ae"
        },
        "item": {
          "id": "7c76c953-7234-4dc6-a341-18af4d990708",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "e3c5e70a-e995-41e5-96a2-87a467d95ac9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "204f4cbd-774a-4a98-9774-b73b90295725",
        "cursor": {
          "ref": "189f4115-e599-45e7-b9cf-2a3684ba11f9",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "2a0e673f-2ef3-4f52-93b4-c005735a8270"
        },
        "item": {
          "id": "204f4cbd-774a-4a98-9774-b73b90295725",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "67d0c8e9-08bc-423f-b2e6-6da04689d792",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b974bda-d4b7-48e4-aa4d-66cb1644de05",
        "cursor": {
          "ref": "cbc21b5f-ea0a-4cf9-b1bd-3b1600d1a352",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "a5b17053-7587-405e-9fcb-ccfb34cc1def"
        },
        "item": {
          "id": "4b974bda-d4b7-48e4-aa4d-66cb1644de05",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "1c924298-a738-47d5-9f90-fcdf0c3987be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc357df9-5edd-40d0-bd73-8d6de4bd3c32",
        "cursor": {
          "ref": "146ebb01-773a-4e51-b777-8c7b3ec2c204",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "f8541848-abc4-4463-8253-432f52b589e3"
        },
        "item": {
          "id": "bc357df9-5edd-40d0-bd73-8d6de4bd3c32",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "5d879c9b-e732-447d-a595-2949199dcbc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81df6e75-8a75-47ea-a0ee-9d2e4992bb9a",
        "cursor": {
          "ref": "d15bbd0b-aea0-40b7-84c2-67d130ed2dc6",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "f7e4ba24-985e-4ef8-9fbc-d544ab0d5cc9"
        },
        "item": {
          "id": "81df6e75-8a75-47ea-a0ee-9d2e4992bb9a",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "5eb64daf-780b-42f0-8696-f4721ad01387",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79b752c2-b01e-409f-ad42-06c8255e87cf",
        "cursor": {
          "ref": "6a143abb-0cb7-4dca-8391-95f4616caa1d",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "acc72576-700e-4eab-8ed7-4df6bfd5c5ab"
        },
        "item": {
          "id": "79b752c2-b01e-409f-ad42-06c8255e87cf",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "ad045187-b951-4551-b553-06796170ee81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c03e37f8-9ecf-4f3f-8e51-590b0a9a0419",
        "cursor": {
          "ref": "2b48551b-910c-45d0-ac96-a65a732576ca",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "f1499d44-eda7-425a-919e-f0ac54962cb1"
        },
        "item": {
          "id": "c03e37f8-9ecf-4f3f-8e51-590b0a9a0419",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "570047f9-c41e-45cc-873d-85f97115eb14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "605366c3-4f3a-4f4f-9add-5d21dd1d9840",
        "cursor": {
          "ref": "5a9cc16c-f24d-484f-9373-3f5b33a5f041",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "4b7a4dec-2e89-475a-80ef-30db63b1b493"
        },
        "item": {
          "id": "605366c3-4f3a-4f4f-9add-5d21dd1d9840",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "ac3751f9-d7a8-4c28-a2af-22bca1311ff8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9d575a9-07ae-42b7-9d3f-8d2f06c139f5",
        "cursor": {
          "ref": "ac9fbbc5-e010-4a66-b97e-5db69a5c4810",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "20fb2e30-e8ab-42c4-81d9-681cb0d335fa"
        },
        "item": {
          "id": "f9d575a9-07ae-42b7-9d3f-8d2f06c139f5",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "6b31f92e-e639-4e1b-84d7-86179256fe56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "864f08d2-771c-4e5a-9040-14f5e689bad9",
        "cursor": {
          "ref": "675a92a1-3229-40c5-a328-a58103cac8fb",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "11b8d4c1-03f8-4cc3-b1ff-e7f8f1cd4393"
        },
        "item": {
          "id": "864f08d2-771c-4e5a-9040-14f5e689bad9",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "9f00a59b-afd3-4cf5-a7f3-19bdad46f8ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cac430f7-ac9c-42c7-8247-b051392324d9",
        "cursor": {
          "ref": "8e4f86b0-152c-4957-abac-e4e4d6822b58",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "4ba1f85b-9360-4039-a4de-53f83bc400db"
        },
        "item": {
          "id": "cac430f7-ac9c-42c7-8247-b051392324d9",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "d4e6ccb3-4411-474f-9661-05de342911bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "651cf8d4-f600-46e5-9249-2610b8babff3",
        "cursor": {
          "ref": "b54b8472-2627-400a-8ec2-b164c03b8558",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "abf5387c-06c2-4f28-b888-6adcd769bcbb"
        },
        "item": {
          "id": "651cf8d4-f600-46e5-9249-2610b8babff3",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "1da928f6-71c2-4975-b678-bcfe50ec94d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b50b2b2f-d89e-4ce5-8a97-7eb705dca32d",
        "cursor": {
          "ref": "c6bea3a2-3c92-4fc9-97a1-214c87092d35",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "ec68d33e-2e6b-4181-bd3a-c70ab9d47b74"
        },
        "item": {
          "id": "b50b2b2f-d89e-4ce5-8a97-7eb705dca32d",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "04917451-4949-4766-a9c6-817f2ee726b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f689c40-f768-4afb-9f43-8eee6453e18c",
        "cursor": {
          "ref": "c03735ab-3f5a-4785-89b4-cfff3a87db25",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "340a19cc-24b1-4b77-86e3-920e69933c8e"
        },
        "item": {
          "id": "7f689c40-f768-4afb-9f43-8eee6453e18c",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "730df446-051a-4428-9580-57b03bd09a22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ea211a6-cd39-4ad4-ac43-06fc7d65140f",
        "cursor": {
          "ref": "b982aae9-1525-4cf7-8c07-bd9f48ff49dc",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "2226168a-ad78-434a-b782-652f9b3d3614"
        },
        "item": {
          "id": "3ea211a6-cd39-4ad4-ac43-06fc7d65140f",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "acd97fcf-33dc-4e1c-a434-2c78aada509e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "363e711f-1289-4f63-985c-cefa4f6c7596",
        "cursor": {
          "ref": "d8f74983-fdd3-4d09-93a8-bf51e8b608df",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "011824d0-7191-4007-97c6-a32410f7cf68"
        },
        "item": {
          "id": "363e711f-1289-4f63-985c-cefa4f6c7596",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "b77b9a68-c04b-4b94-b01d-6f16158dce6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "516b4ca1-7aa4-45e8-b59a-387da1580678",
        "cursor": {
          "ref": "c8a63c89-eb11-47bd-a863-1c30e9b3e48f",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "0f6fddad-1ce5-4b96-a8ae-5c8a6638c33d"
        },
        "item": {
          "id": "516b4ca1-7aa4-45e8-b59a-387da1580678",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "6bbf3045-6115-4d80-91d9-7e08236730e8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "15537113-ba7b-4fa7-aed1-81475bbaaeff",
        "cursor": {
          "ref": "66327e5c-45ec-4a36-aa54-73c06d6377ab",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "14661844-eef4-4247-8ed9-8191b450986c"
        },
        "item": {
          "id": "15537113-ba7b-4fa7-aed1-81475bbaaeff",
          "name": "credentials_issue"
        },
        "response": {
          "id": "34cb14a0-5f94-43de-9f9c-18ef56ec6ca6",
          "status": "Created",
          "code": 201,
          "responseTime": 2444,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7c37084-93db-45b4-bd8c-96bfed9eb22f",
        "cursor": {
          "ref": "f99df6ff-d10d-44b7-89df-194c25eb369a",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "792cbedd-affb-428c-a2b9-509b1302c426"
        },
        "item": {
          "id": "a7c37084-93db-45b4-bd8c-96bfed9eb22f",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "c3f7bf6f-8768-48b4-ad74-e0abedad0440",
          "status": "Created",
          "code": 201,
          "responseTime": 2689,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fb15058-e742-4963-9844-397e36134cce",
        "cursor": {
          "ref": "dbf2a4fd-3c25-4495-abb0-e1a2cefc521d",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "096b6b45-3438-435d-b840-db829554be98"
        },
        "item": {
          "id": "2fb15058-e742-4963-9844-397e36134cce",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "7e344b56-2843-4211-9985-dadc293ac48a",
          "status": "Created",
          "code": 201,
          "responseTime": 3422,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d031c44f-3834-4aeb-b869-0bf144902e29",
        "cursor": {
          "ref": "f118ec88-b69b-4084-8a63-e2d0e58313a0",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "836ddfa2-1ba6-4a13-abeb-bf482fc85205"
        },
        "item": {
          "id": "d031c44f-3834-4aeb-b869-0bf144902e29",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "58a64b3e-9a70-4ad1-b8db-f13c4768a2b5",
          "status": "Created",
          "code": 201,
          "responseTime": 2177,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4c5d929-94cb-40f0-9c64-ce409bbace93",
        "cursor": {
          "ref": "1bb2121e-c52f-42d4-800e-f67506474d19",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "f3adcf99-52c9-472b-89c4-c8fe3422a820"
        },
        "item": {
          "id": "a4c5d929-94cb-40f0-9c64-ce409bbace93",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "5086a291-4204-4623-9699-dd3e2a812884",
          "status": "Created",
          "code": 201,
          "responseTime": 3280,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-07-05T00:52:02Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-07-05T00:52:02Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "95bbb1f9-a162-4cfa-882c-a6139f808c94",
        "cursor": {
          "ref": "45f26c69-f959-437a-944f-a92bc79becc6",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "58489860-c93c-46bd-899b-51e55cbd3fdc"
        },
        "item": {
          "id": "95bbb1f9-a162-4cfa-882c-a6139f808c94",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "1e6e0e28-2444-4d9a-ad00-5c35cbc2d9d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "b1bcaa22-ff87-43e1-80ab-e8d1f2525c1e",
        "cursor": {
          "ref": "a9fa6c45-01ab-45f1-a0cf-65f58b40cbb8",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "c01cb0c7-6841-4432-b558-8624af055cf2"
        },
        "item": {
          "id": "b1bcaa22-ff87-43e1-80ab-e8d1f2525c1e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "0025a7c6-c509-4c09-b811-0e7362da1b73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ec3206a-183d-4855-ae60-62bed2d469d1",
        "cursor": {
          "ref": "04ef7fb3-f5e6-491c-a265-7f175e8e65c0",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "b595e4d4-ca66-4169-b75a-8697c4daf635"
        },
        "item": {
          "id": "6ec3206a-183d-4855-ae60-62bed2d469d1",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "0aa7110e-5001-4a79-b98e-4fb2bfe39236",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef046984-e7ad-4b0d-a444-ece158e6ac68",
        "cursor": {
          "ref": "54aa69e9-7ab3-4536-acbd-aa8cd39483e0",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "18d5aee9-d616-4b90-a8b6-e640f95a3bae"
        },
        "item": {
          "id": "ef046984-e7ad-4b0d-a444-ece158e6ac68",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "12aba395-8731-4cb2-9f68-62b64b265a83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9339bef3-3eed-4d54-9077-c6d02ff54d3c",
        "cursor": {
          "ref": "75171a30-e9dd-48c4-aa99-04b47ae16f59",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "7e9ca206-44d5-4260-8968-fcefa3d809df"
        },
        "item": {
          "id": "9339bef3-3eed-4d54-9077-c6d02ff54d3c",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "1d9c7adc-034e-438b-bf48-27f44e73101d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b115117e-b43f-4448-b879-1fda4a68b82c",
        "cursor": {
          "ref": "a3f0a36a-4003-4558-985d-e4f71f38206e",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "87679d24-bea9-4186-bce7-b45d3f3c13d3"
        },
        "item": {
          "id": "b115117e-b43f-4448-b879-1fda4a68b82c",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "caf91434-090c-4f14-906b-0fed4974801d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42d99845-2e37-4abe-af06-b258d08be136",
        "cursor": {
          "ref": "046364de-3fd2-4baf-bbcd-bdb82cdc7313",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "1a246888-c7f4-46a2-bdef-d29df99e4b1b"
        },
        "item": {
          "id": "42d99845-2e37-4abe-af06-b258d08be136",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "7ac80e2e-30aa-4443-a071-df62aabb36ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "312a6522-2666-4503-8892-e2a1a9407a2f",
        "cursor": {
          "ref": "69436cc1-b846-4771-be66-8c326d7c4ade",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "a2832269-a75a-41d8-988f-081864956de3"
        },
        "item": {
          "id": "312a6522-2666-4503-8892-e2a1a9407a2f",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "28ba726d-6417-4379-83b3-272706944188",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a77cd663-5808-41bb-9f28-e349dccbe8e4",
        "cursor": {
          "ref": "f644b006-d754-43a5-8d3e-7ecc82d22003",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "8df73cd0-5f7f-43a4-9185-477aecac86b1"
        },
        "item": {
          "id": "a77cd663-5808-41bb-9f28-e349dccbe8e4",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e02d31e8-5d52-4ba8-b16a-a1387d711af7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a89b03f5-69b8-4364-8cd9-a633bb9bafe3",
        "cursor": {
          "ref": "7e4dcdae-ba47-40e2-8dd7-37d71b5e3970",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "33bd99bb-f5ea-44c7-9102-6fd8eda14964"
        },
        "item": {
          "id": "a89b03f5-69b8-4364-8cd9-a633bb9bafe3",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "335d27d0-0646-486e-ab9a-5b9c81b2fa08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac17cba6-c1f2-47f3-a750-4011da9aa8f6",
        "cursor": {
          "ref": "63711f08-e551-4dbd-856f-0fefbf4f9f14",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "4f165d9a-466e-4644-a6f0-def7720a1936"
        },
        "item": {
          "id": "ac17cba6-c1f2-47f3-a750-4011da9aa8f6",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "af0fed0c-f3bf-46f2-995d-8a86d8d8de08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f50fce17-519f-4f5b-97f5-84d8b0dcffa7",
        "cursor": {
          "ref": "86de5b91-8ab3-4e69-9ad3-102910c5f869",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "bee4f4ad-de85-4539-8517-9559ca494246"
        },
        "item": {
          "id": "f50fce17-519f-4f5b-97f5-84d8b0dcffa7",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "10b341bf-3dc2-4efe-9975-27a7deb4b456",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d05f426-be02-4abf-bdb6-4f1b4d73de23",
        "cursor": {
          "ref": "cb74d980-59d0-4254-8015-ff1d4586c4d4",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "37c6dde3-996a-436e-aa47-9380887da642"
        },
        "item": {
          "id": "5d05f426-be02-4abf-bdb6-4f1b4d73de23",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "232bf094-d0c3-43fe-b0e6-675320a1de6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "139d2f28-fb82-4f57-a536-035ec9391b6b",
        "cursor": {
          "ref": "3f9a76c7-79ff-4bb5-9ed2-a42210b4541b",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "41b33f47-1c8a-429f-bfef-0be64aeeed47"
        },
        "item": {
          "id": "139d2f28-fb82-4f57-a536-035ec9391b6b",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "aaa98458-9841-4610-9783-1272c56bd638",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dec22e3-1790-4d94-a512-4554e73f9398",
        "cursor": {
          "ref": "bbf4cf28-90bb-421a-8ce3-5c9e719121eb",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "09c18997-835f-412d-9013-a66e38cc2e00"
        },
        "item": {
          "id": "8dec22e3-1790-4d94-a512-4554e73f9398",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "f16182ec-f697-4ca8-9cb9-da6a0ca4b32d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67d1d57b-a732-4636-a5bd-72c093371b54",
        "cursor": {
          "ref": "a34d2bca-616d-460d-b10e-3e2f2a360b43",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "cdb7f107-9187-4eeb-baf8-ba8a73e98c64"
        },
        "item": {
          "id": "67d1d57b-a732-4636-a5bd-72c093371b54",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "b5b0bed9-e133-499d-892b-013dfe081db9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99d7bca1-befa-4407-88cd-f3485115eaca",
        "cursor": {
          "ref": "c5ab0cba-152e-4c7a-b0ad-053fa1ac75f6",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "bb65f1a1-ec73-4879-9512-68a141fb2bd2"
        },
        "item": {
          "id": "99d7bca1-befa-4407-88cd-f3485115eaca",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "139c42a3-73a3-4a55-8707-9ad3c8b1a4e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "074a42c1-6779-4503-9817-235ade2b4047",
        "cursor": {
          "ref": "99858e68-5266-4bed-aefd-6b8b111b2ce2",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "de132030-45f2-4565-9190-30b8023e3c1b"
        },
        "item": {
          "id": "074a42c1-6779-4503-9817-235ade2b4047",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "fe090cd8-edb5-4497-877f-2a1915554f2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 170,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c1da137-b805-45a6-bedc-a398b3be1fa2",
        "cursor": {
          "ref": "93ffaa3d-70c1-4e4e-85fb-157633a5345a",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "679ae152-907a-4645-886b-9366758e180f"
        },
        "item": {
          "id": "6c1da137-b805-45a6-bedc-a398b3be1fa2",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "fbfc3824-f35c-4808-82a5-24eb151c0aae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34e217c4-460f-49c4-92ef-f988cfaa72c2",
        "cursor": {
          "ref": "244cd67c-d455-469f-a2b8-a790d7e2b740",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "2fdf7fe3-ee62-4107-9881-201b415d22e9"
        },
        "item": {
          "id": "34e217c4-460f-49c4-92ef-f988cfaa72c2",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "1c1992e6-de38-4120-aa15-9902566c5389",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "661dd744-1d3a-43a7-bd8a-436581d2f1c8",
        "cursor": {
          "ref": "e3bb456c-842d-45d1-aa02-8983dc96b6e2",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "35c851ee-7376-4167-af95-3783cd45ecef"
        },
        "item": {
          "id": "661dd744-1d3a-43a7-bd8a-436581d2f1c8",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "649412b1-acb9-401d-8ead-3e56dd57d5ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f58e5f93-d3e1-433d-a2bc-c35aafe6db52",
        "cursor": {
          "ref": "1002972c-1dd2-40eb-8da9-025dfd272e4b",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "03c1c866-b775-4bd9-a4b2-7ed285cd83db"
        },
        "item": {
          "id": "f58e5f93-d3e1-433d-a2bc-c35aafe6db52",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "1bc71ef7-ad17-4207-a05b-47a87db1424f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9e11d04-cb85-443e-866f-3d4f25f0b5f3",
        "cursor": {
          "ref": "8a712840-de38-4495-ad2b-e0add8c73d28",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "a96d03a0-b4a7-4871-8563-3c65d2d932c2"
        },
        "item": {
          "id": "b9e11d04-cb85-443e-866f-3d4f25f0b5f3",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "0b72baf2-2137-493a-81b8-a95008aee00d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c5d3bee-c5f8-4932-a574-93628cc96aa8",
        "cursor": {
          "ref": "76522639-8811-4f31-89ec-d1bd32c831f2",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "88806f5b-e07c-43ba-9087-2228b4450ca8"
        },
        "item": {
          "id": "0c5d3bee-c5f8-4932-a574-93628cc96aa8",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "ae7b4344-4581-492c-b759-6fb8a978a7a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00fe2847-8768-44d1-bd54-35aa0dd8e10c",
        "cursor": {
          "ref": "3a0b3e41-4cd2-4f19-92c0-82700b53d4ff",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "116bfcb8-11e9-4685-aae5-89dc3dfdead7"
        },
        "item": {
          "id": "00fe2847-8768-44d1-bd54-35aa0dd8e10c",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "71413849-5f9a-443d-8d13-afedeb0c1999",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a06cb335-2726-4713-a4d6-66f85af314b2",
        "cursor": {
          "ref": "bb1830bd-ec3f-463a-aa31-3dbbb33201e5",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "33b6f1ac-c5d7-4c82-8440-064f86f5b6a6"
        },
        "item": {
          "id": "a06cb335-2726-4713-a4d6-66f85af314b2",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "e6e95227-cb18-4443-8b12-6247799c25e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5c9520a-ebc5-4cda-803c-1081558869f8",
        "cursor": {
          "ref": "e2dc8c40-8415-4faf-9995-d6babd936872",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "172bcb4d-9948-429e-a5b9-5194ff68e213"
        },
        "item": {
          "id": "d5c9520a-ebc5-4cda-803c-1081558869f8",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "4c603e32-4865-4978-8b25-8edc8b5f553d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01cbd3a2-ccfe-4890-b69f-c42a0fb616db",
        "cursor": {
          "ref": "06fb353c-a88d-4a98-b01c-452911ce1094",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "019a1c00-93ee-4888-927e-292c306092a2"
        },
        "item": {
          "id": "01cbd3a2-ccfe-4890-b69f-c42a0fb616db",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a59bf2fa-bed9-4c61-8bd3-c3cbcc297144",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ca9ac65-9157-4962-884b-7f0db4c072b8",
        "cursor": {
          "ref": "7dc4d537-1b90-4322-ae2c-2fb4edf347f4",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "fd285a99-1ade-4624-a040-d6ac031b33ae"
        },
        "item": {
          "id": "4ca9ac65-9157-4962-884b-7f0db4c072b8",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "fa1e6e95-d7d5-4f47-b790-4adb360b351e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17fd3d16-1343-42b9-93ed-8b1592804dfb",
        "cursor": {
          "ref": "353f74d3-187c-45f5-87b2-4274d0e64592",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "af3107bb-f0af-4bfa-ac6e-ec00b72dc3b0"
        },
        "item": {
          "id": "17fd3d16-1343-42b9-93ed-8b1592804dfb",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "df1003b1-7dda-4398-a641-21912b67fe48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72ae1481-2eed-4ae2-8912-e248abbc8363",
        "cursor": {
          "ref": "3ce43c80-83b1-44a3-ba45-ace74c17776c",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "1c3bb54e-133b-4680-a2cb-7e1a46890865"
        },
        "item": {
          "id": "72ae1481-2eed-4ae2-8912-e248abbc8363",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "5342d24c-6dc0-42da-9e16-0a64e58d2c3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a13cc34f-3a8c-4113-89c5-cdfbddad57e6",
        "cursor": {
          "ref": "9a8f9e4f-0f7f-4d9c-aace-fa7787eb9434",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "bef874fd-7d37-4c72-a27c-04513ae3493b"
        },
        "item": {
          "id": "a13cc34f-3a8c-4113-89c5-cdfbddad57e6",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "04cda2a2-e254-4aff-88d6-e837aef2623e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "244c1707-3c8c-45bb-967d-6932ae257720",
        "cursor": {
          "ref": "81010d48-fd17-4806-8fb4-b9eaf1c0b66c",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "4889cbef-af13-4cec-b27b-31c00860fd9b"
        },
        "item": {
          "id": "244c1707-3c8c-45bb-967d-6932ae257720",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "f94bb334-2f42-464d-a4a0-f7c44b1f3c69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "071855ad-ef10-4023-83ad-09020ebedb79",
        "cursor": {
          "ref": "21b58a88-9db3-4d21-844f-abe36f01f76a",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "f6ca2c21-2b3a-46bc-a992-53f72e0e7214"
        },
        "item": {
          "id": "071855ad-ef10-4023-83ad-09020ebedb79",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "94e412cf-e498-41fe-94e0-478aa1909f8a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "dbe2ac2c-377d-4c3d-acde-5d4b5d797f75",
        "cursor": {
          "ref": "2bf16699-7d2b-4b6c-bcd8-39393d0fcedd",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "de10a93f-ad87-4953-b3de-cba63121e039"
        },
        "item": {
          "id": "dbe2ac2c-377d-4c3d-acde-5d4b5d797f75",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "42712c22-f621-402d-ba51-4d23a597eba3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 122,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ef65019-bee4-4e0d-a9d2-f975e9465b95",
        "cursor": {
          "ref": "81cbaefb-be7b-4063-a7d9-fcf54f132df2",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "918aa5ad-964a-4b71-9b9a-9e0e856f3143"
        },
        "item": {
          "id": "2ef65019-bee4-4e0d-a9d2-f975e9465b95",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "81630d52-3125-4e81-a29a-f8a5cb870c7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d15b6922-365f-4961-8944-9992ca68bbd8",
        "cursor": {
          "ref": "9dafa4a6-0c4b-4b34-ba7d-db81ffdd2f34",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "0a2938e6-7429-4e0b-b6be-4888ec540763"
        },
        "item": {
          "id": "d15b6922-365f-4961-8944-9992ca68bbd8",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "32449d22-1cca-4da8-b304-b58c6b5beeab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3091584d-b9e7-4e97-8c98-8f3b5b80bed9",
        "cursor": {
          "ref": "f23f0844-f455-4989-8180-ea3b199f1d03",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "1cc4393d-e536-4167-8f31-644ee1462563"
        },
        "item": {
          "id": "3091584d-b9e7-4e97-8c98-8f3b5b80bed9",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "598a3a2e-374b-4f19-a638-da01caa10ba0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7649c36-435a-422c-a834-8751e981bff2",
        "cursor": {
          "ref": "c639d93c-e554-4e25-994c-bb9e8e1bffc6",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "34f8e071-bb0a-46ba-b942-0bf2ec1e0786"
        },
        "item": {
          "id": "e7649c36-435a-422c-a834-8751e981bff2",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "9664383d-a2ac-4af6-8c8d-4aa7dad69a69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42536671-4741-4ec1-89db-f39ebd656f46",
        "cursor": {
          "ref": "767cb799-1054-4d75-a0e9-75ec6a9b2a69",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "35ead457-e6da-4b0c-8455-5b6d8027e14f"
        },
        "item": {
          "id": "42536671-4741-4ec1-89db-f39ebd656f46",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "cf3a008d-0716-42f3-a69f-a0ea18034ffa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7558394e-0ea5-4cd6-8671-96611c58d252",
        "cursor": {
          "ref": "56852b4b-e56d-44bd-a925-09e7f4fb9695",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "8203550e-8bc8-42ad-9b3e-79acdcc97b09"
        },
        "item": {
          "id": "7558394e-0ea5-4cd6-8671-96611c58d252",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "c18b1e46-5f07-4147-bfde-ab6cfd70fec6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed1678da-04bd-4b26-9e89-b5de672116f3",
        "cursor": {
          "ref": "83b64100-a1f7-4039-a32d-b58e1b8162f0",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "eeaad1ba-4aa4-4beb-a5d1-83acdf2a44d0"
        },
        "item": {
          "id": "ed1678da-04bd-4b26-9e89-b5de672116f3",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "a83d939c-854c-426a-bb05-204b84b3878a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3ff5a27-ce5c-406c-93a7-c0aa46be3dab",
        "cursor": {
          "ref": "ca446c5e-393c-417c-8f01-631bc133ca24",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "adc6eaf9-d60c-4af8-930a-56c53fe25b8b"
        },
        "item": {
          "id": "c3ff5a27-ce5c-406c-93a7-c0aa46be3dab",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "8e6a61ae-1550-4518-ae36-9de95b361100",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8232e862-dbb9-4771-9d37-0015f8e04283",
        "cursor": {
          "ref": "aae4026e-3d32-4c4d-851d-09d5f041ed25",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "2c482ae1-1c27-4c50-b7f9-f965425695c2"
        },
        "item": {
          "id": "8232e862-dbb9-4771-9d37-0015f8e04283",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "a61156d3-4ae9-48c0-85cb-fce3a209eb5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4e82e48-0232-4cd9-85e4-12d7bab480cc",
        "cursor": {
          "ref": "58b3ae41-9a15-4f18-8187-7e08472c30f1",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "9a4db5ac-1cb8-4613-b8a5-b67c7d4ddccc"
        },
        "item": {
          "id": "a4e82e48-0232-4cd9-85e4-12d7bab480cc",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "c95cd09b-6b0a-4f2f-b58f-868be63b5752",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea3559d5-9493-43c6-b9a6-2c5cb69ebec9",
        "cursor": {
          "ref": "f22ad7dd-77be-404e-b476-27bc5f145db8",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "41142918-7933-4c8d-9bea-d21c67946740"
        },
        "item": {
          "id": "ea3559d5-9493-43c6-b9a6-2c5cb69ebec9",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b05e9e32-ecb0-4619-9ad7-9a27f4b4acf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce79aa98-beb4-4eb0-9ce7-f3d514a31006",
        "cursor": {
          "ref": "018aadb2-4bb3-4f6c-886f-72f9939b1ec0",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "9c96d2c3-633e-43da-91c8-3626ffa58174"
        },
        "item": {
          "id": "ce79aa98-beb4-4eb0-9ce7-f3d514a31006",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "a56c9b1f-9ae5-4179-9545-334ecbf2c7df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a515e4f3-f445-4e69-b4e8-3ee3c2a44f38",
        "cursor": {
          "ref": "8e5066b6-2d37-438d-952a-e6de5503e610",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "d51732ad-891f-4c26-afa1-48c2d1e5bc7f"
        },
        "item": {
          "id": "a515e4f3-f445-4e69-b4e8-3ee3c2a44f38",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "61a1c8d8-e027-4cf1-87b2-6b640a6f12c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa95e629-d379-4b77-99a7-4af9581abc33",
        "cursor": {
          "ref": "b5a08a72-9377-4b4b-b30c-8c9c51e99d23",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "789804a0-0246-4dfb-8ced-9ed9e484fc79"
        },
        "item": {
          "id": "aa95e629-d379-4b77-99a7-4af9581abc33",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "6383b944-3ff3-4028-bc3b-2c9bc5198e56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "912f0bed-554d-4295-8156-f956e9e3a72d",
        "cursor": {
          "ref": "082bdff4-7edd-4ffe-a8b5-919e8468b0dd",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "d94a2259-b2ab-4a7e-9065-10268a4a7a63"
        },
        "item": {
          "id": "912f0bed-554d-4295-8156-f956e9e3a72d",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "3e2b5687-5c88-4a6d-b802-44e2a46691b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5e7304e-e49b-4fd1-89cb-8da74a3e7c61",
        "cursor": {
          "ref": "f4bd9eb1-669f-4e76-beae-18fb00ab1fae",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "7a2bf056-b3af-4b2b-b32f-43bcc5ef4694"
        },
        "item": {
          "id": "e5e7304e-e49b-4fd1-89cb-8da74a3e7c61",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "35725a79-1e42-4d8c-8fa0-d0695694173d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6d0e409-d35b-46ed-95c1-5287f3089ae6",
        "cursor": {
          "ref": "6d2a9fad-6258-4878-b2db-05320c05494d",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "24d1de6e-097d-4941-a1af-bf681a97c9aa"
        },
        "item": {
          "id": "a6d0e409-d35b-46ed-95c1-5287f3089ae6",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "32bec0e5-c20f-4ac0-bc20-10454ed53722",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8189b154-5eeb-4bd3-aad5-be411a716a89",
        "cursor": {
          "ref": "b1f188c4-2bbb-46f5-9f2a-ed4140471347",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "d439ac94-8e55-4688-820c-bb40d74c6971"
        },
        "item": {
          "id": "8189b154-5eeb-4bd3-aad5-be411a716a89",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "265fecf5-cb8e-41f8-98ea-8d3f3804e7d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d54e0f91-2ac4-45c4-bcbb-a4a965f80544",
        "cursor": {
          "ref": "28525c02-6444-4c40-b80a-99a4a274a946",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "2cc9da58-5d55-4939-bd9d-2d50dc1071a7"
        },
        "item": {
          "id": "d54e0f91-2ac4-45c4-bcbb-a4a965f80544",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "e6230dec-c1d4-426c-afa4-c4656c91d9ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaa212ad-ee81-4c7c-ac2d-7c5fff8f8946",
        "cursor": {
          "ref": "64a1ba92-d7a0-4cdf-b22e-bff84e3634f5",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "e62910b5-d799-4bbd-bdd0-be84d9d6eb31"
        },
        "item": {
          "id": "eaa212ad-ee81-4c7c-ac2d-7c5fff8f8946",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "4e023ce7-d2a5-4af1-bde5-2f3d1d6692d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45d8df5c-38e5-4f64-a909-02a5614bac63",
        "cursor": {
          "ref": "25826acf-6ba0-4aac-8860-4cd45c41e894",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "6ede450a-740e-41a5-ba86-2273b3616514"
        },
        "item": {
          "id": "45d8df5c-38e5-4f64-a909-02a5614bac63",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "95271fa7-59c4-482f-a6c8-71f6676e0c9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cec5a61-7ff4-40e6-8fe5-f0f5f35062b5",
        "cursor": {
          "ref": "62759ef7-6861-46d9-8495-aabd986e59d4",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "3fb50b42-d69a-42ea-8904-dcdd186e4a59"
        },
        "item": {
          "id": "7cec5a61-7ff4-40e6-8fe5-f0f5f35062b5",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "7cf536c6-603b-467d-9a30-ef5cfc597f0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfcb5b8c-1d8f-40dc-8630-72949a9eaaa1",
        "cursor": {
          "ref": "a8e31586-a862-4b2d-82c1-0a02a8949bc1",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "d7124e79-5dd4-47f8-a10a-6f5d5b0afc71"
        },
        "item": {
          "id": "cfcb5b8c-1d8f-40dc-8630-72949a9eaaa1",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "9288b7e6-b93b-4e18-8551-9fe4527b8fb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "149f3946-0bb8-4dc3-8187-d7880361ac19",
        "cursor": {
          "ref": "8ba04c5c-b138-4bb3-8d55-b63752c59ea5",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "f614674b-f909-4b7e-9bb7-fc4df54c07cb"
        },
        "item": {
          "id": "149f3946-0bb8-4dc3-8187-d7880361ac19",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "7832fa6c-04a2-4d0a-afff-a6437b934dbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e739c757-41c0-4b11-a9ba-1d250fc823f9",
        "cursor": {
          "ref": "120321c1-d9d7-47d4-be14-f8bf63c3ad58",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "92dd5a02-2875-484c-a2a6-ae17aa226eb1"
        },
        "item": {
          "id": "e739c757-41c0-4b11-a9ba-1d250fc823f9",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "edbdcc63-ea0c-4e1a-869a-e9f7aabcc238",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0962f78f-b525-48dd-a0a3-dabd3dad117d",
        "cursor": {
          "ref": "da4be95d-742c-411e-8a5b-102ff2a7e6b5",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "38278685-a755-41bd-8d1e-911081763034"
        },
        "item": {
          "id": "0962f78f-b525-48dd-a0a3-dabd3dad117d",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f1c24c92-b870-418d-99f7-9bcccd808efc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e878227-a15c-4dd0-b8f2-dcfe8f7474fa",
        "cursor": {
          "ref": "5014f245-e1fc-41bc-a361-c0e4ee6243fd",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "dd41c941-7328-48de-9144-b741649d9811"
        },
        "item": {
          "id": "4e878227-a15c-4dd0-b8f2-dcfe8f7474fa",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "b14520ff-8faf-45da-bfea-c4f83813a1eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ee48e12-6bca-4c9c-ad68-2293323f37fb",
        "cursor": {
          "ref": "781a8140-dcda-43f4-8c4f-42ad69c9f1e6",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "ca90fcea-5108-407c-be0d-53c19f8f8830"
        },
        "item": {
          "id": "9ee48e12-6bca-4c9c-ad68-2293323f37fb",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "5d111632-9123-4c9f-9b20-eac1e44e6f90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db6029dc-d880-4198-9b04-b9b51de62fa9",
        "cursor": {
          "ref": "b0aa8458-0939-4770-b754-c56526ff448f",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "8a9697bf-fd4b-472c-a351-6e59bf3a0395"
        },
        "item": {
          "id": "db6029dc-d880-4198-9b04-b9b51de62fa9",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "54ee6230-dc3f-4b9c-a734-18141964d277",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "474db202-eb78-4238-99ff-3df2ce682d84",
        "cursor": {
          "ref": "502b1267-ebe1-49c3-978f-b63c17b22c12",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "42a01210-bd5b-4b56-82c8-b3108108c1dc"
        },
        "item": {
          "id": "474db202-eb78-4238-99ff-3df2ce682d84",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "46f5ad86-5d8f-430c-a5e7-fd36383767f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5ac16ba-3bc7-4932-86c4-ebdc570655a8",
        "cursor": {
          "ref": "aac19ef5-fa2e-4a73-8ceb-2aafc43c11c8",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "136c28d3-6f40-4e2e-aed3-53c7cfb321d9"
        },
        "item": {
          "id": "d5ac16ba-3bc7-4932-86c4-ebdc570655a8",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "acd822ad-0512-4733-bf85-5b99c763f46b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 752,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24be47b1-f6c9-4b1f-b0ea-6b69cf828e22",
        "cursor": {
          "ref": "a10d5257-a086-4404-944e-ae2c6730ebce",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "453f402b-bd01-407a-a37c-c9ee29cb9760"
        },
        "item": {
          "id": "24be47b1-f6c9-4b1f-b0ea-6b69cf828e22",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "194e68e8-822a-4b82-99bc-9efa43b30917",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e5a4da2-7421-4d20-81df-a9199d282dd5",
        "cursor": {
          "ref": "a20ffe20-d7fb-4b0d-8703-57371256b7d9",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "10e05c3e-da9a-4141-be81-4069448d02e6"
        },
        "item": {
          "id": "9e5a4da2-7421-4d20-81df-a9199d282dd5",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "481f64ba-4cab-42ab-92ed-15bbdc9709fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5479ce97-0231-48ed-bb99-0458fbdfb160",
        "cursor": {
          "ref": "4297d385-e0ac-452a-9a1c-49b7056d138b",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "18a55b46-2c30-4748-b1d0-45893ff0cdb7"
        },
        "item": {
          "id": "5479ce97-0231-48ed-bb99-0458fbdfb160",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "db5aee00-59e7-4d8f-a23c-ac7c227eecb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d00c3b8-cfcd-4600-813c-d8562bd8ae35",
        "cursor": {
          "ref": "70551a60-3b1f-42f6-9e37-e657b52f76d5",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "019c0582-1226-415d-b4b2-da840717941d"
        },
        "item": {
          "id": "7d00c3b8-cfcd-4600-813c-d8562bd8ae35",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "17a4924d-49e6-4413-a8f0-7efb4445a4e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eb1bc4a-dbcb-456d-b9e2-16c2963f8b16",
        "cursor": {
          "ref": "8da20a19-6969-4cc5-8c4e-2d73c440bf62",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "64122cff-b44a-48e3-b186-8e9490dde58f"
        },
        "item": {
          "id": "3eb1bc4a-dbcb-456d-b9e2-16c2963f8b16",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "6fc670bf-cc32-4dac-b135-a20d486a5f82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85028c61-08d8-4421-aa57-e39034b44e78",
        "cursor": {
          "ref": "bcac6f03-16e8-48d3-839b-a8c31375c023",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "e59645a1-0fad-4cc9-9d11-a67263d8bafc"
        },
        "item": {
          "id": "85028c61-08d8-4421-aa57-e39034b44e78",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "1ae9a087-db90-424e-a702-853674b1d628",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "a64bca84-4a3c-4c1d-9838-a53b4300d721",
        "cursor": {
          "ref": "c078ece8-c720-477d-8c71-0ec64aab23fd",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "cb4be9c9-01ba-451e-9028-c298bea58efc"
        },
        "item": {
          "id": "a64bca84-4a3c-4c1d-9838-a53b4300d721",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "eb54370e-0b97-4ed7-bdc3-66054f4ae475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f36ea5b-b620-4d42-b28b-0e8ab8112f84",
        "cursor": {
          "ref": "a1aec992-d65a-4a09-829e-a803d01cfff7",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "1080d0f3-9b54-437c-8e76-65c2b8c55681"
        },
        "item": {
          "id": "9f36ea5b-b620-4d42-b28b-0e8ab8112f84",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "a8055b32-9e37-4c8a-bc3b-14b7e456f016",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69bd12ef-da5b-4408-b777-c89caa7ceb21",
        "cursor": {
          "ref": "22bd29c5-2c23-4e00-a3bb-fe24d736c859",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "c05d102b-af50-4966-adc5-36e167a29b37"
        },
        "item": {
          "id": "69bd12ef-da5b-4408-b777-c89caa7ceb21",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "16befcf4-1d7e-4ce0-8c43-68b555663290",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16f43221-7768-4ac7-a821-123c795bf668",
        "cursor": {
          "ref": "2745c75a-5afb-4b64-9aa2-605e1909ee93",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "669b19df-e2e5-4fdd-afbd-0bba742a701b"
        },
        "item": {
          "id": "16f43221-7768-4ac7-a821-123c795bf668",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "f5d5a954-6599-4954-8a29-6999cff82621",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5b544b8-8d78-4941-984f-0a913edbcfcd",
        "cursor": {
          "ref": "d8db63f8-cbd8-40c1-9a47-deffe347c50d",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "4cf7439b-42fd-44a7-bb0e-d47ee7b6591b"
        },
        "item": {
          "id": "b5b544b8-8d78-4941-984f-0a913edbcfcd",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "79c269d1-249d-45d7-a641-ff06b69d7a8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f964da62-b276-4e95-8010-6f34f806c4b9",
        "cursor": {
          "ref": "fb1a969c-68cb-4ea6-8255-48aed2e86c79",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "8a2bc675-2054-496f-bb53-90bfb1cb09a4"
        },
        "item": {
          "id": "f964da62-b276-4e95-8010-6f34f806c4b9",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "d8fe59c9-8fcd-4114-a2c1-d47c51265e2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08bccf3d-97e9-4cdf-b1f8-0b5eabfa5ccb",
        "cursor": {
          "ref": "204611e0-9f36-4cd5-aba4-167cefb3bb7c",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "cfff3b1f-e8f3-4b80-a9eb-a57b2c5e3abd"
        },
        "item": {
          "id": "08bccf3d-97e9-4cdf-b1f8-0b5eabfa5ccb",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "278b6f19-52e1-4cc5-b3cc-dcfbd2d6c8f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f10ddaf4-0437-4fcc-9a56-b23e0704699a",
        "cursor": {
          "ref": "63de1dc7-9442-4e8c-9b18-62497f40c31d",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "8c2d7152-1231-4bd5-80c6-eb15c789cfb2"
        },
        "item": {
          "id": "f10ddaf4-0437-4fcc-9a56-b23e0704699a",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "324aaf06-5de7-41aa-8f92-0a3339c560cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f05a645f-4399-4452-90b0-24598230762c",
        "cursor": {
          "ref": "db63e2a3-cda1-4030-b9e8-4924cf59028a",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "bf90316b-2b27-4bf6-b697-15b6207d6420"
        },
        "item": {
          "id": "f05a645f-4399-4452-90b0-24598230762c",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "5aab63c6-4d20-4525-ab81-e7547946f453",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99eb8a47-7937-4c4f-9e4c-e42288160e7c",
        "cursor": {
          "ref": "511432d0-ad01-4675-b26a-6709b8271f1c",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "7cd12a34-fa9b-4516-af89-fa2d2dcc590a"
        },
        "item": {
          "id": "99eb8a47-7937-4c4f-9e4c-e42288160e7c",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "05115fc2-d6aa-4c58-ba51-f21ea632d5f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d476fbf-7343-49eb-9d29-37b40491c566",
        "cursor": {
          "ref": "905bf181-16cd-4337-9ea2-6f451ef9674b",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "032f23d7-ef7c-4399-b2cc-ce5cd3de7f4c"
        },
        "item": {
          "id": "8d476fbf-7343-49eb-9d29-37b40491c566",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "84b68a1f-4dc2-4840-8c92-449838ded377",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "575a38c4-7976-4051-929c-9e561369002f",
        "cursor": {
          "ref": "e37e609e-ae54-429b-8425-bd8138c0a317",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "d291bbf1-49bb-49b3-abfd-4a234b9a8291"
        },
        "item": {
          "id": "575a38c4-7976-4051-929c-9e561369002f",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "6b422da0-1c30-4406-8b4c-a5f366a20560",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f212d51f-8b83-4b4b-aac0-061bdc583ce0",
        "cursor": {
          "ref": "0776d4cb-c551-43a3-88a4-f3c213ea20aa",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "e30035ad-2905-446e-8cde-8aa2979dce68"
        },
        "item": {
          "id": "f212d51f-8b83-4b4b-aac0-061bdc583ce0",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "4ab4f4b2-bdae-4625-87bf-155c722bad0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "025a7376-0f1e-4158-aad3-8e0dcaf2d240",
        "cursor": {
          "ref": "cc8122b9-25fd-4c8d-a013-b5496404c499",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "e9837d2d-ff55-402b-b6e0-2cdeda6850cd"
        },
        "item": {
          "id": "025a7376-0f1e-4158-aad3-8e0dcaf2d240",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "3ade1499-ef83-4d72-b0e9-828f116e96cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b75c9eb-3d76-4349-908a-e33f56495cc8",
        "cursor": {
          "ref": "b9db6a4a-d61c-41e1-b302-6bc2a25136c7",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "d0389121-8d81-4d06-bdb4-ebb2a5ca1386"
        },
        "item": {
          "id": "8b75c9eb-3d76-4349-908a-e33f56495cc8",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "92820caa-7510-467e-99d1-a91d00b585b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5784c54-7a81-4a74-949a-7fc6989b00a7",
        "cursor": {
          "ref": "361ed69c-a475-4c77-9a08-5b94c55ff3cc",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "3c9e3659-541f-4e2e-844c-72757555483f"
        },
        "item": {
          "id": "a5784c54-7a81-4a74-949a-7fc6989b00a7",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "2bdc12d6-f5f9-40f0-af12-ec5af9fa480d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a65c12a8-9385-4ccf-9504-c607adf0394e",
        "cursor": {
          "ref": "b388fd84-50aa-4f58-855e-81aaecea06b1",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "db4dc6fa-c2b6-437b-bb07-cb048114e46d"
        },
        "item": {
          "id": "a65c12a8-9385-4ccf-9504-c607adf0394e",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "6c48ca16-f0a5-4a41-8241-8b19b121c0bb",
          "status": "OK",
          "code": 200,
          "responseTime": 373,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "3a86cf66-fd09-4fcf-a59d-9be12dbfe2e4",
        "cursor": {
          "ref": "f8fb0a8d-fe56-43f1-90bc-2bf4bd3687ff",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "ec9c1cf6-2d2e-4761-914b-c4f0aa0ede15"
        },
        "item": {
          "id": "3a86cf66-fd09-4fcf-a59d-9be12dbfe2e4",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "491d7e03-954a-4005-8fcc-710df1bf4d9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5de8642-f75d-4204-bb8f-c0b0f8899556",
        "cursor": {
          "ref": "13ca30a4-d932-4f44-9101-5d34307bd166",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "233e6e33-a59e-4c73-b47e-e236299c5e6b"
        },
        "item": {
          "id": "e5de8642-f75d-4204-bb8f-c0b0f8899556",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "219d66b2-e84a-4a8b-b32b-1063c56bfd6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 140,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7788a0f4-6d5e-4c41-b01b-a9d20deba809",
        "cursor": {
          "ref": "e74944c5-e18d-4cc8-9e70-4670833d7dca",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "40a7547b-5de9-4549-b0de-d447d124648c"
        },
        "item": {
          "id": "7788a0f4-6d5e-4c41-b01b-a9d20deba809",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "9329484c-faa6-48ff-9a2e-6ee9e7c22aa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c88876c-f1e3-4db9-8e1f-111afcf56399",
        "cursor": {
          "ref": "99072885-0e9c-4da1-9c38-925300f74073",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "ebaafa6f-3bd8-47ce-ba9d-5c4ffc16755f"
        },
        "item": {
          "id": "7c88876c-f1e3-4db9-8e1f-111afcf56399",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "6dedeea7-a3d7-4fd7-b323-0ad12426b66e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80e6eae0-3ea2-43ac-b9f5-77cc480cb1cc",
        "cursor": {
          "ref": "861b6c26-b779-4ebb-9067-e4ef605e3a95",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "b299de28-162d-412c-87bd-81713c99f92f"
        },
        "item": {
          "id": "80e6eae0-3ea2-43ac-b9f5-77cc480cb1cc",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "7ba37fd4-27f8-47a2-831e-2f129dd432f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a3e72f6-23b9-4695-8d0e-fa0a0eac2d73",
        "cursor": {
          "ref": "b5b4d34b-225e-4a3c-9e52-41ef93cd7d9b",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "15bad6e1-5e15-46c7-b96c-32f181c09915"
        },
        "item": {
          "id": "7a3e72f6-23b9-4695-8d0e-fa0a0eac2d73",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "4ed598ea-f4b2-4109-86b8-3cb9fe956575",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eadc38c5-bc55-419d-a975-63e7d403c41e",
        "cursor": {
          "ref": "3c1feb30-f13b-4d04-a724-e9b428f15afe",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "b1a1d30b-294f-44e3-ad22-60dc84a83f65"
        },
        "item": {
          "id": "eadc38c5-bc55-419d-a975-63e7d403c41e",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "be3c21a0-84a1-4522-89bf-46df1a1a07c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfb038c9-e86f-4dee-84ef-beb79ee39486",
        "cursor": {
          "ref": "78b1ea18-bfb9-46bb-a557-98963bd172b0",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "79c5b484-d791-40aa-9705-eecc7a4c8a96"
        },
        "item": {
          "id": "cfb038c9-e86f-4dee-84ef-beb79ee39486",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "4f740a67-ada2-477f-a429-e801fc1414f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48d559db-dd03-4ed5-8e45-f52275cccdfd",
        "cursor": {
          "ref": "a9d00e1f-c0f3-4aa9-b639-2f8977c0b442",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "80d562fd-b43a-4a51-adbb-9bb3e9b54df2"
        },
        "item": {
          "id": "48d559db-dd03-4ed5-8e45-f52275cccdfd",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "8ddc5674-3744-4c1e-8255-d82b8dddd1b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d684cbb5-3d5c-4d4f-982f-32772f34bd71",
        "cursor": {
          "ref": "b7a34746-d5bf-4bd3-b341-4a390f4859d9",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "be9b2310-9c5e-4219-afcc-c345dd74f06d"
        },
        "item": {
          "id": "d684cbb5-3d5c-4d4f-982f-32772f34bd71",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "c9d7cf2f-aace-4b88-a6d6-17501f70283b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9d3cf80-6741-4edd-bc58-4b58517d40a4",
        "cursor": {
          "ref": "50d04663-c21e-4ba0-bcc9-ce5dc0944fb2",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "8db5cfe2-9593-4ee6-996d-5d88c493acc4"
        },
        "item": {
          "id": "d9d3cf80-6741-4edd-bc58-4b58517d40a4",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "e2e8afaf-51e3-4db4-8f53-d6dea5dbaeee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 147,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21d0a18d-3e16-4f9d-92de-3bcd897b1f1a",
        "cursor": {
          "ref": "410f73b0-9c84-4870-929e-40c2894cc013",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "f0c36b71-4e87-44ed-b07e-9ce0ae8077a3"
        },
        "item": {
          "id": "21d0a18d-3e16-4f9d-92de-3bcd897b1f1a",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "dc98db6d-5dac-4c6b-a801-d73153739578",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c8ba4d6-e935-49ed-9311-786ce781d726",
        "cursor": {
          "ref": "ed94b15d-40b7-4cef-b1ec-24997968aeab",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "6dc47038-d661-40ec-9bb5-1d26b2fd668c"
        },
        "item": {
          "id": "3c8ba4d6-e935-49ed-9311-786ce781d726",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "f8580c7d-0588-4c96-968a-e8fd89389f08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f6acb23-2168-49ed-a21a-188686764fc6",
        "cursor": {
          "ref": "3e69ef44-6d7c-412c-80f2-772c2fd14e7b",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "572d7683-1068-44fe-8811-01088138e1ed"
        },
        "item": {
          "id": "7f6acb23-2168-49ed-a21a-188686764fc6",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "61d86691-9d80-4b76-9b67-420072a2a50a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cabb4a51-1533-4e97-81eb-498b6d14df50",
        "cursor": {
          "ref": "e7c2d3c7-c60f-4332-9d35-1aceb0fcb56c",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "8a59b738-4410-4896-9b35-38660d09b302"
        },
        "item": {
          "id": "cabb4a51-1533-4e97-81eb-498b6d14df50",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "92fd34c5-c611-4869-b1aa-c8bc659e8172",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef090fc4-c5e2-4ae3-8b39-fcfa83afd48d",
        "cursor": {
          "ref": "f9958641-7968-4c76-9573-4189906c2f66",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "cc996b37-e727-4851-9fbc-616d84e0bc07"
        },
        "item": {
          "id": "ef090fc4-c5e2-4ae3-8b39-fcfa83afd48d",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "2fc496d8-3c8a-40f6-81f3-6f4c33bedc92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8d2137a-11db-4c2a-b67b-c2d4e361eb24",
        "cursor": {
          "ref": "f1e9d352-24cd-4619-9bfe-96de35f125af",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "b347595a-4c31-4bf1-910c-5e9b58bf39ce"
        },
        "item": {
          "id": "b8d2137a-11db-4c2a-b67b-c2d4e361eb24",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "83047991-14c7-454f-8720-0a8a26db5e21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b1160d4-ed26-4ec2-80bd-3cdbabfe26b8",
        "cursor": {
          "ref": "17e7a2ae-ba59-4219-9361-d467a2e77094",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "b1ef0950-4341-42e2-959e-bb4d5aea04cb"
        },
        "item": {
          "id": "8b1160d4-ed26-4ec2-80bd-3cdbabfe26b8",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "ef00419c-afb0-4255-bb24-697230f92e89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b482e355-8dc3-46a4-a4fc-e3c6d183bc1b",
        "cursor": {
          "ref": "5d690e61-d125-4473-821b-76e31c653c8e",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "7c782c49-b1a0-4d2f-a727-1c19dacb555c"
        },
        "item": {
          "id": "b482e355-8dc3-46a4-a4fc-e3c6d183bc1b",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "30efb8a8-ccc2-47bf-a0ba-5d10f60618ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ac6bf42-e9ba-4474-b5c7-52a10eeba1b5",
        "cursor": {
          "ref": "8400279e-11a5-4fa8-bdd0-493dc4b3a8fb",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "4998146f-c9b8-40e1-b1fd-37b0420708f9"
        },
        "item": {
          "id": "5ac6bf42-e9ba-4474-b5c7-52a10eeba1b5",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "4408069e-73dc-4e40-affd-cf16e9764546",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf093de6-0048-4739-8a0b-a69eebf89a04",
        "cursor": {
          "ref": "2a4dbf95-14c0-45b5-9fb5-79f90d3d2c75",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "016e8c86-7dfe-4c50-9acc-b75e987a9205"
        },
        "item": {
          "id": "bf093de6-0048-4739-8a0b-a69eebf89a04",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "172139cf-1ad5-40a1-a5a3-07d441fa4942",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6416faf6-2e7b-4bbe-884a-ba4044774a25",
        "cursor": {
          "ref": "84e8b51e-07d8-4555-aadd-c71dabc8614a",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "3355d44b-29f5-4110-aae3-3a91d0ab7db2"
        },
        "item": {
          "id": "6416faf6-2e7b-4bbe-884a-ba4044774a25",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "8676035d-ed65-4962-8a04-652fb5178f0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7563e56-93ff-4bfd-9469-26a6b73b7896",
        "cursor": {
          "ref": "883f8f46-ef68-4de3-b11a-81627fcab4c3",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "8ef0c26c-28bd-4f6a-be24-e038e5b00383"
        },
        "item": {
          "id": "d7563e56-93ff-4bfd-9469-26a6b73b7896",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "40e2d36d-e183-4181-bfb9-ba4bc9ffa52d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9002076-7ddb-48b4-9ca4-2fc54d768f86",
        "cursor": {
          "ref": "8c58dcbf-5017-4f53-84f4-13b5ca25e6ce",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "be3cc57f-a8b6-4d30-935c-bc3a338ca7f7"
        },
        "item": {
          "id": "a9002076-7ddb-48b4-9ca4-2fc54d768f86",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "53e204af-5f5f-4e53-88cc-8ad025fa44e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fee99267-aa93-4a01-9dc0-136d0e9881c1",
        "cursor": {
          "ref": "09f6fc17-b257-488a-903a-157c8e4ac219",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "e2addeb0-9313-46d3-8bbe-32664677357d"
        },
        "item": {
          "id": "fee99267-aa93-4a01-9dc0-136d0e9881c1",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "94f789a1-729b-4bd5-b4a2-3c891dfd8b23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "705152ad-cebf-4199-97a3-50495c35b357",
        "cursor": {
          "ref": "fb073633-ad85-42cb-8b92-a84989e22d3a",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "5ed07a8f-74cc-48f5-ac68-90e81883930c"
        },
        "item": {
          "id": "705152ad-cebf-4199-97a3-50495c35b357",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "b44805ff-64ef-42ac-a7cc-0856c8f9ac5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bca479e-b9c0-4d41-8b22-43266af8eb1a",
        "cursor": {
          "ref": "7a816452-7bdf-4804-b6d0-9810f0532db0",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "c38b1ab8-dae0-4804-a621-bfd9823e7fc6"
        },
        "item": {
          "id": "6bca479e-b9c0-4d41-8b22-43266af8eb1a",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "51d4d5dc-70ff-4908-aa26-d7d1ba744f1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "512745f3-2c9c-42b0-9d90-6f86691a211c",
        "cursor": {
          "ref": "af71cc57-8d1c-49cf-8bda-8064dd12ed98",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "b4998535-faab-4cac-8830-b918e071f50d"
        },
        "item": {
          "id": "512745f3-2c9c-42b0-9d90-6f86691a211c",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "bdf104a5-b1ed-46b3-a13b-84bb05f12da5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f060072-1ad4-4a3d-8c28-de809c25711b",
        "cursor": {
          "ref": "ac2617f0-c221-4263-96c1-b8ee6f0f6c24",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "a7109ea4-1176-41d4-b8f0-8a1da18a76db"
        },
        "item": {
          "id": "0f060072-1ad4-4a3d-8c28-de809c25711b",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "9ad9c620-f902-4afd-8477-4884e53803df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88d94705-6965-4d89-a660-e2fee9f02bbc",
        "cursor": {
          "ref": "6074684f-5da4-41a8-96a2-00ec9bc35d76",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "c169ba2d-47c7-4ce5-a71c-ead86d1cfe21"
        },
        "item": {
          "id": "88d94705-6965-4d89-a660-e2fee9f02bbc",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "b2d622b1-0071-4e0b-9230-0692d9e9c226",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "771cc3ad-8085-4025-86e1-1d025d7ee389",
        "cursor": {
          "ref": "17469392-6c3a-45c9-a0f4-c0bb7958cb33",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "37df5cef-350a-42d5-bc18-68cbc3770a23"
        },
        "item": {
          "id": "771cc3ad-8085-4025-86e1-1d025d7ee389",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "752a0ddd-6115-4c6d-8faa-a04a7191c8b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 208,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fa7eb81-1be4-4193-a6f6-93df44fe8420",
        "cursor": {
          "ref": "6e2b9b86-32fa-4ccd-a09c-7abd4b3cbc6c",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "ed2b821a-de99-487f-81ca-8a6301c24bb3"
        },
        "item": {
          "id": "3fa7eb81-1be4-4193-a6f6-93df44fe8420",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "5b67c2c3-674c-45f3-b031-226362a4ddba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 157,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f46947d-b3d2-4242-99eb-97bb333b4a23",
        "cursor": {
          "ref": "ac2570f4-6206-4de6-b898-59a0ae1d250a",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "f1830269-505a-4c3e-864a-d905e0a965a8"
        },
        "item": {
          "id": "7f46947d-b3d2-4242-99eb-97bb333b4a23",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "d331dcd7-8bef-4d24-8c8e-2ae7b46f259d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3488b05-02b8-4c2b-b88f-61f0fcf9798c",
        "cursor": {
          "ref": "ce286958-4243-4ebf-9291-fc54e071003b",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "2292e78d-c16c-41ab-9a6d-b0d93dabe853"
        },
        "item": {
          "id": "d3488b05-02b8-4c2b-b88f-61f0fcf9798c",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "ccbdca68-eaf4-4c3c-97cb-4872389832e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bacec02d-0790-4933-9117-d48d352d4bd1",
        "cursor": {
          "ref": "7d6c716e-6341-4daf-9d26-7b25dd9f3cb1",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "d2aeb1da-5cd9-4d3a-8c47-7e4b8290d206"
        },
        "item": {
          "id": "bacec02d-0790-4933-9117-d48d352d4bd1",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "2ca8e036-81e2-4f0b-9ce7-cee8680ef631",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f81b75e-0902-4d88-b49b-645202f59158",
        "cursor": {
          "ref": "723dd66d-1aac-4ba2-a2ce-902e23af0ac8",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "d20db118-30e9-410f-9cc1-28c43bc2f23b"
        },
        "item": {
          "id": "1f81b75e-0902-4d88-b49b-645202f59158",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "f228507a-e02c-4aed-ae96-79153ba1ce3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b276106f-3332-41f3-87cf-e33202a94e55",
        "cursor": {
          "ref": "2a2b4d2e-b6f8-4c51-9b0a-78e6abb33829",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "9b9a2295-5850-4d8f-a1d0-b338efa9495f"
        },
        "item": {
          "id": "b276106f-3332-41f3-87cf-e33202a94e55",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "6f762e7c-0c36-402d-a07f-bb3a9b7a6952",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84f806e8-695c-4726-b035-075b21925618",
        "cursor": {
          "ref": "86811d7f-3989-434e-bfa3-05f2ea3dd62e",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "cb4d82a6-ced6-4f01-a35f-47eff42253f3"
        },
        "item": {
          "id": "84f806e8-695c-4726-b035-075b21925618",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "04d5bd76-5f5a-4e3a-b223-41e36f623dad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9ae5c37-4c95-427b-b83b-d3537463258f",
        "cursor": {
          "ref": "d57f7b53-9958-49b5-afcc-6f084ecb676c",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "e611baad-2aa4-478d-97ab-ebdd0b043d91"
        },
        "item": {
          "id": "d9ae5c37-4c95-427b-b83b-d3537463258f",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "c0889a5f-6c7d-4e59-857e-f392f98065e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b6766fa-ad9b-43c3-b229-db99b7ec61d6",
        "cursor": {
          "ref": "d47661bf-ddc6-4a59-ab80-b1964b08b9eb",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "1264d8ff-dd7f-4b7b-ab2c-9951e5606c99"
        },
        "item": {
          "id": "9b6766fa-ad9b-43c3-b229-db99b7ec61d6",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "d857a052-be54-47d1-b82d-0c54a9983e08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de7d08f3-997d-4e8e-948a-dfb2b508f370",
        "cursor": {
          "ref": "509c1faa-8f9d-4333-8f98-b8b8a2339f24",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "1c9e9ff8-9612-473a-ac21-703da2f4f098"
        },
        "item": {
          "id": "de7d08f3-997d-4e8e-948a-dfb2b508f370",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "816d3467-4993-4d4b-89d8-e94704e6fbde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "971a55e0-c208-44a3-8bd4-6d5ba12ce516",
        "cursor": {
          "ref": "04c2b470-84af-4554-8ab1-f94d2369c733",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "4af6d277-d2c1-40d0-8987-695aadb13a33"
        },
        "item": {
          "id": "971a55e0-c208-44a3-8bd4-6d5ba12ce516",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "d04e4234-4d71-4824-9ae2-9bfa8323219e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62b160d0-318a-4864-af7e-910cd8222c78",
        "cursor": {
          "ref": "78edefbe-2bf3-48f6-8c65-9929872dabc3",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "44c71ceb-2f68-4a44-87e7-c0ba583a5a39"
        },
        "item": {
          "id": "62b160d0-318a-4864-af7e-910cd8222c78",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "06e8b465-62cf-4af6-bb3d-e0c5d7b6ace9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b3de33d-d7aa-4e8d-a683-fa8d0ae9664f",
        "cursor": {
          "ref": "c8ed99ec-1ce3-41ef-b020-462124eb2f7f",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "f99d1794-af3d-47e3-8821-c716685a6048"
        },
        "item": {
          "id": "1b3de33d-d7aa-4e8d-a683-fa8d0ae9664f",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "fc06eedc-c302-44a5-98f4-c194c3b2e319",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "111846c2-e01b-4fe3-a2cd-cf0e7abab11c",
        "cursor": {
          "ref": "adc74e07-3b2a-4c75-aff6-bc5acc4f0ab5",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "96b3cc5d-bae9-42d3-8be9-fb9bb489c384"
        },
        "item": {
          "id": "111846c2-e01b-4fe3-a2cd-cf0e7abab11c",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "3c98ab05-4074-49ec-8e8d-859a41db867e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b753acd-9f10-4565-887e-e56b6f8d3633",
        "cursor": {
          "ref": "ecaf3716-ed11-4790-82a3-9fa3bb3261c2",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "ed438548-648c-4648-9096-c4085c38363a"
        },
        "item": {
          "id": "6b753acd-9f10-4565-887e-e56b6f8d3633",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "ffbf49a0-bbe7-4562-9067-748bd0b40129",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d422f259-4369-4bd8-ab7b-9bb8ce1554ab",
        "cursor": {
          "ref": "5cfeaf67-dff9-42de-84f1-8fd33b204760",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "65d6d5fa-900b-4fa6-bd0e-511fc7f599ff"
        },
        "item": {
          "id": "d422f259-4369-4bd8-ab7b-9bb8ce1554ab",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "cf9ac60d-461f-477f-b21b-0904f79f7018",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1a610d2-ddbb-473c-9dfd-a0b26ea15412",
        "cursor": {
          "ref": "3bd3fcfe-6020-41f7-8f8d-b8929de3c2a9",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "01d342a4-491b-4554-b8f9-4c7ec3154857"
        },
        "item": {
          "id": "b1a610d2-ddbb-473c-9dfd-a0b26ea15412",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "70a5b7a4-3b39-495d-b687-17ac7fc8d27a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8ae3ea6-cc95-4c55-b701-fed2aa34da2a",
        "cursor": {
          "ref": "b4a650ed-5b53-498a-a950-b348204c127b",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "09196d58-336b-4310-87a9-04b7e44e6439"
        },
        "item": {
          "id": "c8ae3ea6-cc95-4c55-b701-fed2aa34da2a",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "6aab883c-a78c-4dd5-a4e8-ee4800204023",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e20a453-0a29-42e4-81fc-0e795c25ddd0",
        "cursor": {
          "ref": "6ce8a5da-2b87-40a3-9de9-59905c24a7dd",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "b0296412-4297-4ce6-844a-fc6b3f95b738"
        },
        "item": {
          "id": "9e20a453-0a29-42e4-81fc-0e795c25ddd0",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "36923924-83b7-43e5-b88d-5dae6a134e7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72305271-c76b-4e0b-87fa-327789eac70e",
        "cursor": {
          "ref": "95cc929e-9c4c-440a-928c-d692bca45cff",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "d050cb42-74b1-4aeb-9565-606f1a013d49"
        },
        "item": {
          "id": "72305271-c76b-4e0b-87fa-327789eac70e",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "b033cd64-df42-42a6-bd78-c12e309eb674",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "226a70df-3f0e-4a1a-9047-a04e5372b2f0",
        "cursor": {
          "ref": "ca4be3da-58c0-4d1d-be36-bf5a97a567cb",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "3cfe2699-7b5d-43ce-b064-f99027296676"
        },
        "item": {
          "id": "226a70df-3f0e-4a1a-9047-a04e5372b2f0",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "5f8e40e9-16f2-4e34-bd16-468807febc3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a49080f5-d97d-4fbf-9b3c-613c23502fec",
        "cursor": {
          "ref": "0b5a3d57-1d4e-4c1d-8922-914a85f58950",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "24b2cba6-b319-4d38-bb6c-f44827e760db"
        },
        "item": {
          "id": "a49080f5-d97d-4fbf-9b3c-613c23502fec",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "29783d8c-6956-4803-bf8f-1288ca121936",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3e393c4-34d4-407b-b596-ac1a39ef9f24",
        "cursor": {
          "ref": "066bab74-6a4f-450e-a8e8-b0f56d4ecae2",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "6b5cfdc3-4138-4de6-923b-c53637222ec9"
        },
        "item": {
          "id": "c3e393c4-34d4-407b-b596-ac1a39ef9f24",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "8bcb0534-07f3-4099-9aea-69c667564dc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfaf7a6c-7b07-4ff2-a995-524e1fa2e013",
        "cursor": {
          "ref": "5279f937-6ff1-46d8-b7e4-da1b1c16679e",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "78fe542c-569b-4946-a2dc-eaf261b912b8"
        },
        "item": {
          "id": "bfaf7a6c-7b07-4ff2-a995-524e1fa2e013",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "7bec1958-e833-41af-8821-1eb2ae1706c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "accc76ba-ef6d-482d-a81d-eef57eb2d2bc",
        "cursor": {
          "ref": "58390d39-b8be-48d6-b917-4d596a096f26",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "291e22c9-de56-4d64-9026-5315d26facea"
        },
        "item": {
          "id": "accc76ba-ef6d-482d-a81d-eef57eb2d2bc",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "5586f625-ec34-4500-a8be-2f81d0c8ac7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da50af04-eb27-46aa-b8f7-6589908b076e",
        "cursor": {
          "ref": "fbdd5c04-de93-4881-ba24-c4089b0f6cba",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "e2b5c48d-b1c0-4e50-8c7c-c70e4810dba0"
        },
        "item": {
          "id": "da50af04-eb27-46aa-b8f7-6589908b076e",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "a40c3c4f-82cc-40a1-8e24-d14301b343fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b670cc2b-da7c-4983-9955-e1169d6f86df",
        "cursor": {
          "ref": "603b1e02-fe66-420a-9f95-00a6874bbdc0",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "9422c34c-1ccd-4d8c-a956-eca8185a1a25"
        },
        "item": {
          "id": "b670cc2b-da7c-4983-9955-e1169d6f86df",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "a5e79121-a9f9-45b9-8c6e-55429fa93386",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db0abfee-9776-4f25-aed9-25e9eb1a419e",
        "cursor": {
          "ref": "53413589-f7c2-44a5-a906-c9a1601ef4b1",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "8d2ca99e-bccc-4458-9c11-e85ab67f8eb7"
        },
        "item": {
          "id": "db0abfee-9776-4f25-aed9-25e9eb1a419e",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "79679995-b98e-42d2-8e0a-868760102b13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "451a407e-cbf2-4d80-82ed-3c946470e87a",
        "cursor": {
          "ref": "7ec862c4-c374-495f-a5a1-595f468decf2",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "268d3232-46c0-43cf-862a-41e817fdefc1"
        },
        "item": {
          "id": "451a407e-cbf2-4d80-82ed-3c946470e87a",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "a93f2187-709b-4575-97c5-780f8810cb7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd45792c-faaf-4d98-8bdf-cd031fa0dc3b",
        "cursor": {
          "ref": "e2f3b35f-e378-4548-9639-baf5b605c396",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "ea09cc6c-fcc6-426d-b5d3-90d3a9aaf7a0"
        },
        "item": {
          "id": "fd45792c-faaf-4d98-8bdf-cd031fa0dc3b",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "278621f1-d51c-4304-936b-e26fcc720519",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abdbed04-45a3-4a9e-a6b6-0534b0ca30c9",
        "cursor": {
          "ref": "70ef381b-9194-4e2d-af92-75a21cb45b87",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "bfb84e67-38c1-4f40-a551-be3c1777a881"
        },
        "item": {
          "id": "abdbed04-45a3-4a9e-a6b6-0534b0ca30c9",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "1c8dd686-2ad1-4e40-8040-8d1e5adef70c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66c56d24-f2dc-48b1-bc40-fdbb26aef9d5",
        "cursor": {
          "ref": "8204738a-0f2d-497e-93ae-d498054860f8",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "03440d4c-21ee-4184-9b2e-41d94b61bdf9"
        },
        "item": {
          "id": "66c56d24-f2dc-48b1-bc40-fdbb26aef9d5",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "1ebefa3a-9f00-419c-8b7d-3341c2f8ad7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8b448e8-3293-4eea-8079-637fb3ebe0a7",
        "cursor": {
          "ref": "af484cad-035d-42ab-bc1c-007d673f8af3",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "82441199-98b0-4226-bd90-97d35e170562"
        },
        "item": {
          "id": "e8b448e8-3293-4eea-8079-637fb3ebe0a7",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "28a5aca4-1b55-4e74-be28-3d4c31318360",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8a87df6-83f3-4dcc-b6ac-59afa4d2f520",
        "cursor": {
          "ref": "dbe89721-8dc3-41d5-afc4-8455edc01ed4",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "89d6356c-01db-4e0a-8ad9-26b9a63bda2c"
        },
        "item": {
          "id": "e8a87df6-83f3-4dcc-b6ac-59afa4d2f520",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "efce9e97-c8e4-4fc6-a66c-eb335480fdaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf666442-d2d9-497c-b715-df371fceab11",
        "cursor": {
          "ref": "fde444bb-8be1-45d8-a4f3-7a17c61ab837",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "76fdfdcc-4245-4a7a-9647-fe32a9adb960"
        },
        "item": {
          "id": "cf666442-d2d9-497c-b715-df371fceab11",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "0f30066b-7e77-4f0a-8c03-2f4de5ced3e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e4be11b-df6f-4d93-9048-23b2d3adebe2",
        "cursor": {
          "ref": "2381f83a-7cdd-4747-be00-1bb5b038c403",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "9cc5640b-3306-4144-be91-25890f4d2621"
        },
        "item": {
          "id": "3e4be11b-df6f-4d93-9048-23b2d3adebe2",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "9124dd09-30ed-4b9d-8219-0e441cf636b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e203c81-1e57-4579-b184-1a3af4eaefd3",
        "cursor": {
          "ref": "1e3e351f-5e09-4392-8f5f-9af5ac1b9276",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "7109c777-960c-4b44-a040-01b686e6dc01"
        },
        "item": {
          "id": "2e203c81-1e57-4579-b184-1a3af4eaefd3",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "7e17ed82-1849-4709-978d-230a41cc8c69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce1eaf82-c6eb-4e32-9c54-fcec75c10c45",
        "cursor": {
          "ref": "4c7c8f6f-9b80-46e8-8341-c648c3c381be",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "3f38f8bf-3525-4feb-be54-aca62366b332"
        },
        "item": {
          "id": "ce1eaf82-c6eb-4e32-9c54-fcec75c10c45",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "aee51373-cf54-4fa1-a96f-47dc41ef8e2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aae34860-d9b3-4483-830b-61fb215e63a6",
        "cursor": {
          "ref": "c46d247f-3a58-4cc2-9240-2a5df2be340c",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "a0f7f87a-5172-462d-98e6-a0d1fa5d5691"
        },
        "item": {
          "id": "aae34860-d9b3-4483-830b-61fb215e63a6",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "9726b48a-19ae-4995-bab9-888b9e91dcde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee1e56fc-c9f5-4b3d-be13-a6c3466470c0",
        "cursor": {
          "ref": "ed8ccacb-edac-42b3-a287-2b0d0c0e666c",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "50411df1-3f71-4b81-adfc-7a9ad59240b0"
        },
        "item": {
          "id": "ee1e56fc-c9f5-4b3d-be13-a6c3466470c0",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "ac7ee6bf-3af7-47dc-8242-8b5dcf759e1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70663bf0-e373-4772-9595-b9b484543690",
        "cursor": {
          "ref": "c2d53c19-c324-4188-b136-b653269c2042",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "67ded43b-36e3-4025-9647-64f51041c216"
        },
        "item": {
          "id": "70663bf0-e373-4772-9595-b9b484543690",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "ddaee506-d115-473d-af91-405d98fc705c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "618f74cd-0d9d-4f4b-a72b-dac35270b6e0",
        "cursor": {
          "ref": "bf694f80-dca6-4247-be7f-8fbf9a6514ab",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "e8e22373-6d4f-41c6-912e-90ea3bf0ccab"
        },
        "item": {
          "id": "618f74cd-0d9d-4f4b-a72b-dac35270b6e0",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "ef9b232f-dc33-4abc-94bd-82e0a989c7a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f73b620-ba64-4b89-81a7-ea63a6428db0",
        "cursor": {
          "ref": "866f8c13-4ec9-45d5-99c7-20283abf0caa",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "205ad8fa-ec03-46e2-a1ff-9430eb4f2196"
        },
        "item": {
          "id": "8f73b620-ba64-4b89-81a7-ea63a6428db0",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "85ee3115-4f99-48fd-9b90-6ff5f225c0cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb4cf34a-48e2-4433-b17b-905012897130",
        "cursor": {
          "ref": "8bc95335-d088-40e0-bbd3-db4b105dd0a2",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "49b2c355-ebe6-4f01-aaca-5d13f80b6dff"
        },
        "item": {
          "id": "fb4cf34a-48e2-4433-b17b-905012897130",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "90a96543-fdea-4813-a3ad-4bbc3829f5ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7630c4e8-96a5-4407-b7d4-7838a434620a",
        "cursor": {
          "ref": "88a49c38-8083-4fc8-8750-aeb646f0af0c",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "1d24793a-fd68-40c1-a91a-5bd576eb2fc2"
        },
        "item": {
          "id": "7630c4e8-96a5-4407-b7d4-7838a434620a",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "412adcc8-a320-406b-915a-f472fe272b0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0cf145e-f1f7-4501-9750-6339ca1ab913",
        "cursor": {
          "ref": "32e83fe8-aae2-49f9-9dc5-b4acb827befc",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "1170c903-85c9-42e1-93a6-a7b1480961bd"
        },
        "item": {
          "id": "f0cf145e-f1f7-4501-9750-6339ca1ab913",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "bea8a15d-73b7-4ca6-93f4-6745ee441615",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dbd10ef-307e-4420-b022-760812e26653",
        "cursor": {
          "ref": "d8276766-a7b7-49c9-95de-bdd38bb07917",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "f08a0f17-0f3a-46dd-bcd7-5f3bc08b2343"
        },
        "item": {
          "id": "1dbd10ef-307e-4420-b022-760812e26653",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "5ee40e44-7e89-4d17-bc61-6466631c778d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "010899cd-a44e-4d9a-8147-c7503938c4c3",
        "cursor": {
          "ref": "1eb55d02-356f-4710-a19b-f5aca35d4471",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "2f65e0b3-fc09-4d71-8c70-b66065c2b442"
        },
        "item": {
          "id": "010899cd-a44e-4d9a-8147-c7503938c4c3",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "dc694627-a111-4279-9fd4-bcd5b3a9b50a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7237cf9-95eb-431a-b37b-d3fd59c4bf1a",
        "cursor": {
          "ref": "3e44bc56-4bda-4fce-9f0e-41e2a9644907",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "0d007800-32fa-4924-b18e-b4ba67f3a2fe"
        },
        "item": {
          "id": "f7237cf9-95eb-431a-b37b-d3fd59c4bf1a",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "0b20f638-686f-4b65-ab8b-3e7dc38d04f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 181,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74f3782d-5a8f-4dae-9d80-6bc6e7698960",
        "cursor": {
          "ref": "ef7defc1-f2da-46da-adbd-a2e01e87c480",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "1c9f383d-755a-4f52-9004-200c90495a44"
        },
        "item": {
          "id": "74f3782d-5a8f-4dae-9d80-6bc6e7698960",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "c4badb80-5007-474d-819c-9e51d90e4a7d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:276)"
            }
          }
        ]
      },
      {
        "id": "4fd2aaf0-d15d-4c9d-bf61-1c47f721eb4a",
        "cursor": {
          "ref": "2023cb6e-4c0b-4c23-9398-6c43ea97daa6",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "a487e65b-110e-4b84-b2de-548328cdd0dd"
        },
        "item": {
          "id": "4fd2aaf0-d15d-4c9d-bf61-1c47f721eb4a",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "6152bbe1-3ccb-4b47-bd8e-14f27b96a8d6",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7c0c3a7-d697-44b2-a084-a7622d5ee1ed",
        "cursor": {
          "ref": "f70c27b9-77cf-4872-9ac9-b82882e0a510",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "dfa97555-0b1f-473f-9716-65baab805d4e"
        },
        "item": {
          "id": "a7c0c3a7-d697-44b2-a084-a7622d5ee1ed",
          "name": "credentials_verify"
        },
        "response": {
          "id": "7f3e081f-5020-41a7-85c3-be8452e73ab4",
          "status": "OK",
          "code": 200,
          "responseTime": 2044,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "24f035be-d410-49a2-983a-084302c0a59b",
        "cursor": {
          "ref": "c17c74fc-fb62-4514-a81f-8d4c85e3f089",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "767a70e4-914d-4caa-91bf-bb0d61050548"
        },
        "item": {
          "id": "24f035be-d410-49a2-983a-084302c0a59b",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "c92cc3f3-db33-4f82-ac18-dcf9caafcb08",
          "status": "OK",
          "code": 200,
          "responseTime": 2483,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "6db27e02-f55f-470e-9492-d1b46618e427",
        "cursor": {
          "ref": "6a46fbb2-c113-4066-83ca-57b5e8d4c4af",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "2ccab45e-427e-4afe-9faf-b171c6af4b1b"
        },
        "item": {
          "id": "6db27e02-f55f-470e-9492-d1b46618e427",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c304dec7-886c-4710-a1f6-9a29cd95747c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "6db27e02-f55f-470e-9492-d1b46618e427",
        "cursor": {
          "ref": "6a46fbb2-c113-4066-83ca-57b5e8d4c4af",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "2ccab45e-427e-4afe-9faf-b171c6af4b1b"
        },
        "item": {
          "id": "6db27e02-f55f-470e-9492-d1b46618e427",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c304dec7-886c-4710-a1f6-9a29cd95747c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "1ac6d8c0-367c-4cd5-8bfa-bca7dfbe2b97",
        "cursor": {
          "ref": "5d9bbb50-23cc-4a48-a8c2-01a3987d25aa",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "88cc1a78-5e3a-43c5-b7db-ad389387922f"
        },
        "item": {
          "id": "1ac6d8c0-367c-4cd5-8bfa-bca7dfbe2b97",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "7f656742-caa5-4858-8c37-f23fbb62846b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:281)"
            }
          }
        ]
      },
      {
        "id": "8c7e1b58-a3a9-442c-8b39-1483eb391d0d",
        "cursor": {
          "ref": "83c274ee-6cce-4881-b009-8b173071d963",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "a9bafded-2bfd-4879-853e-8309d7ef89ba"
        },
        "item": {
          "id": "8c7e1b58-a3a9-442c-8b39-1483eb391d0d",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "d8ec8ac3-063e-4bbf-a0ae-1e40cac91f76",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:282)"
            }
          }
        ]
      }
    ]
  }
}