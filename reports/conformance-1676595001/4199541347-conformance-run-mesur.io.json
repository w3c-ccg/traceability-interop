{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "26b64085-129d-4177-add0-09966704af2d",
        "name": "Clear Cache",
        "item": [
          {
            "id": "e70ef4a4-a7ba-4381-b757-a86959adb2c6",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c98b1a65-b961-47b8-92cd-a44ebe2d5add",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2569b176-ac32-433f-93de-e1b2428e5137"
                }
              }
            ]
          },
          {
            "id": "1b2907b9-017d-466d-a919-6be2c8b15786",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f4fbc933-fece-467c-8631-b8289c1073d4",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "38e91486-108b-4d71-a704-12a883ab4e43"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "dcdd1472-1307-4b11-9d1b-66d469e61236",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "61739ec2-ab4f-4ba0-a062-6dad4157a360",
            "name": "Positive Testing",
            "item": [
              {
                "id": "57ba2ac2-6fe2-48ab-b78a-5d744c7ffd76",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9be14859-7ac3-4b55-b7ec-19957a8a8cf8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cd5ddb4f-ce5c-45f4-9a3a-c3dfc23f8b98"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "64651cce-fbd9-4579-bcef-d07dc0b6e795",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "070c4844-2962-4550-86e8-fa0a3628dcba"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c0b67067-4ebc-48f4-b236-5295666d86e7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0e796e14-5b11-4158-8499-55f2228c46ef"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dd78cc06-f8f9-4580-90c6-13c52f6bfc75",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "2703fe3e-c672-4b91-b631-60c5fa68c1f8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f95ce002-9def-4bd6-a54f-3566fe71d88f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4bb63a25-ce2c-40ed-a956-425563834ee8"
            }
          }
        ]
      },
      {
        "id": "dc975384-2985-40bc-b2bd-4ff76d7a6192",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "ddd42ae9-3759-4ec0-91b8-2d247ebd2b43",
            "name": "Negative Testing",
            "item": [
              {
                "id": "99a4576a-7f07-4d4c-94b3-0676057104e0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "33902bcc-f77d-4bde-84bb-5bb153da36c3",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71dc47fa-d204-4d7d-8446-5241b19634a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3240367e-d050-49c3-83ec-d2b71e663d17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c140c65b-72d1-4023-85e4-f69a054f940e",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1b543b0-7c6f-4178-82c4-769d94f10774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2d72fe8d-25e9-4305-9cc3-9ee1c4e5e892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fd0f3aa-261e-4ab2-99cb-966589b4e179",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ca57d84-0e3c-4be4-9ddd-226c85a85c94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0c3f1f58-92b5-48d3-939d-d75a9dd68c0b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4e3e2418-1b35-4655-b8b0-d1d691fe9f25",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "868f5711-60ef-4517-a7cc-b2aa318c90de",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3fd5e2a-aeff-4e26-b4da-4847104b8656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a9f235a2-4dab-4142-909b-8d2be1e10333"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de0d4f66-6679-42e4-9112-21e396e1d1d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f51cde3-2450-46cf-bef2-537a8343141f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05c34eec-8fd4-487a-85d5-0559564363b5",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f1255f0-0db5-4b36-b051-f88c02146696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3b9437a9-701a-4aff-a192-6283cfe4072d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "519b40ad-7824-42a3-a784-66bafa2570fe",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "93ab2570-cbcd-4b0f-9d9a-260114779155"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f0b16b1e-f616-4daa-bc5a-1a67275ab495",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f74bf2ff-5a7f-4a29-9e06-76a071467af3",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a62aff7e-c676-4af1-9f87-e1c30240a077",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "326259cb-7107-4cdd-ad34-97791965d022"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3148a0b6-9efd-487d-88c8-b6146d093714",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "4ff3b68f-10a2-4238-aa43-a1a28794b6be"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c18effa3-c0e9-47e6-a8ba-67d17b44b3f6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fb36416d-596b-4866-a6da-293440764425"
            }
          }
        ]
      },
      {
        "id": "8e6f3195-4bab-452b-9117-7b9963a760cb",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "96cb5de3-00e5-43fe-92c3-eec237ec38d4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "50daaa7e-d46b-448a-8e07-8c85194b0298",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "99404b8d-4381-4439-b243-e696326f8858",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2403009e-37c5-4393-8df9-e6b1ae4e6d8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64acdad8-7334-45c2-9269-4733178864e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04398998-02d2-4722-a50a-fc68a979e0c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cf49850f-bb46-4d1f-9923-f1868433e741"
                        }
                      }
                    ]
                  },
                  {
                    "id": "090f8c69-07ef-4582-83a7-2d25e52ff007",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eed0e18a-3d89-4e6e-8e5e-d07955a92bca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71c05f0c-b8ca-4d78-9da5-2581d1ba5907"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f8d9548-cef3-47c4-8f15-29dba6004d60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "853d859c-fff6-4e51-9a93-5bc99480cdbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdaae467-dffb-4d62-85d4-219e16ace444",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8090cd65-7f19-4c2d-a8db-12431b5ffe79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "907211cd-f17d-4c57-b5e0-348956ea75e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d97945f-2311-4423-9b12-e74d826a87a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "398a3503-da83-4497-b878-968bfc36fbee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a76be9f-04b6-448a-be37-e4ee8eed4751",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce3015c8-63f5-4b1d-b46c-ae9c20953f0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4f4eaa7-24fe-4ab6-8905-028995c8947d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1117e0e0-e101-4be1-a14c-771199906f2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8a826e61-ae5b-4723-9060-ff355f7a0886"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4db37d66-8fa2-463f-b6ba-a7bd1fab99d5",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30c2ce61-971a-4a41-991a-bc6ff5d3cd56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d086812c-2947-4df3-80c6-370833a27494"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8251e1c3-67e1-4357-a8d5-4923f68eb132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "907c959d-2134-4954-bd33-9d3c8417a71e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c4e169f-05b8-4f9c-84e1-b9d9bd714da9",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "298e79b7-6a46-47d5-8ba8-49b9d5d3b1fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e442921-9976-4013-8a69-a373cfc6d60f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3625c724-ad28-4e00-a73c-988f28070225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d1a66101-1ae5-4d9e-8cb7-32bab786cc3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9517a574-76aa-46c2-bf32-c623100d0f06",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c8089e0-965b-4aac-911e-e4391faadd41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fea5b1d-db92-439f-9b71-449bda202c22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d1f2d31-d059-491b-813b-db472f53998b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d9049505-6dca-4b9a-b660-59dd8d4f0aca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b44dbcb-e695-4c89-9ba4-7038c043b5c2",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa4b236b-95e1-4e91-a96e-a0b91a16480c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c109c499-514d-4659-9792-d393292c70a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7a4cc68-14a7-4aae-a980-f22f0bc780ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fbbc993d-b81d-4533-aa8b-cec8d9ebdbc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "986312ee-0923-4f44-b8e3-c8046d9a65e7",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dbeb66a-9cad-4d72-b0b7-f8005f67c992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8663da1a-8118-4bb3-a69e-14bbce28a783"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c4e03c5-8bf1-42a4-9457-580d70a60791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9f2449b2-af63-4c8c-a0dc-35b24fb5f78d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed6bbccc-73b3-4740-8798-99bae3eda627",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5487b448-6fee-4c4f-b27c-dbeb32942189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d3b3e09-a8e1-4211-87a7-6ba7ce2a8801"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e49c7685-d1da-4065-804d-627a5f8a0012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "03b774bf-3314-4324-88c6-f21eeabf0c1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4621ec6e-d892-442a-affc-a0816932eba5",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fd07e69-37db-41fc-b1a9-29bcaf2eb479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbc0c2d6-1c09-4db3-9c51-2aca099f983b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac2366f2-eb4d-4dd4-967a-52ddd364d867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7d901c5f-bbdd-42b3-b682-d4f6fe753ec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e36abb9-ce21-40dc-bfc3-ea7813130c00",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4834106-2b04-409b-b3d5-04ae8b1bdfde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "025ce244-5f37-41e3-85de-95aa9e567d19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca05ba85-e979-46d4-af2f-d33568966875",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "84e67073-31e5-49b9-89c2-efbaab3b3d62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d557972-c694-4a5d-b596-389d068f2023",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44186064-a80f-43da-b75c-d7feafa634d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d68e8ced-a345-4d3a-9061-a9c8164689aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74302c62-feca-4962-a960-751c3b7b09dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "9505c8d9-f59b-49f3-baf0-319bbcfcd253"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73a05947-233e-44ac-9a98-4f96b5099ac5",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eba8975a-2626-43af-861b-b2f0b1efa044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4cc8ae2-e97f-4604-a7a8-d4010b9bdcbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e92cb08e-277a-4de9-836a-0b737b4e76b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "686a27fa-ae3d-44b2-994c-77e2b840d782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cafac55a-9048-4de6-970d-8ddba7323bbe",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de4203fd-e6d2-44ee-b247-666049b6a75e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee8b7989-4dcb-4c31-9cf5-722a4be47e1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "293086b1-a6bc-40eb-b4d0-91471aa0c79b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bce1b097-d7d9-4550-aebf-ffd985d7e53d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ce71417-5c0c-420c-b46a-892c9c60a12d",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6a6a515-fe74-4486-b090-35308b817d3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5bfabb4-e805-47f5-8ff8-3ce759095f38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7c3434c-a338-43d5-bee3-4df5d29b8fc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a35c8be5-beb7-44ff-bc59-1f2793f418f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "972ef195-c3cc-4f1d-8616-26b7cfeef560",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "620799bc-4d23-4b44-8c7d-29d0fac6154e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91e514b9-2e17-40e7-bc2e-95474e18554d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7927325-28d7-42fe-b894-49b5b559b337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "12999bec-7ed4-45b3-91b3-94823d4bc776"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f6c79a5-125c-44ea-92cf-e6441bb74833",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f193c9e3-61bb-4569-919b-97aba461c8e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c61a7b5c-ca0b-43a6-ad1f-3920ccc89546"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "732df9d2-fe31-4e44-bb04-08a5180259a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cb8822f0-d1ab-4af5-b7c9-17c912aee17f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "241f19aa-80d4-4d3f-b441-429d4f02d6d9",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a3b02fe-95f7-4589-a2d9-aeb068b7bc09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b252647e-9796-48e2-b929-c7ca18807602"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5caecde7-20c6-46c4-8ff5-b9ab5802761d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "430423c3-1838-4bfd-b74e-65fb9ca3713c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b90eb070-9d9c-429b-8201-0f046d8c6370",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40c127f3-561a-4d62-829f-30afb4dd4c26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9dca3ad-6875-4065-a23a-17596f8b656b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "683f93ac-4551-4cf3-bfee-22336b759130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "984ef6a0-3efc-4eed-9634-13413d520f37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5dc58d2-5555-420d-b734-9d86c004847a",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a84bb2d-cb00-4049-b090-4833197cc6cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21649df0-c3ff-4f6e-9e06-845a7b3acbd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5209a6d3-4d5a-43c4-8ee1-0b56852852de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "18ef4e52-ae3f-4e98-b947-c32d66505867"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f71f05d-a121-4e23-a660-fb21cdc6fcca",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b5129c9-717d-41eb-a6dd-aa8874aaf56a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8471f9e5-1620-4816-ac25-2137d529897a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50ed0f2b-44ce-484a-a6b9-f68957930316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "29fb4f1d-629a-4118-8d52-79d6630f5f2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64ce3cab-c48e-4e2f-b226-8f6eae40e240",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65bd2f64-0a29-4072-8683-d4d9bab174b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34b16ec3-1abb-4fd4-8906-9f735322e313"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eeb9db7-80af-4017-b69b-2251d04b12e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f3e1d469-4702-4f6f-9e90-cd205c3f960c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a497509c-bb42-4bb6-afaf-847c61cd5bad",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "121df96a-0077-45a3-99ee-9f8ab5525149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be2244f9-256e-4006-b120-bbf8f5026c9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6dab183-4b47-4771-b36c-2f91d1d8ce66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "24153bcb-caa6-4a54-aeee-144360fd48e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70abb4ed-c0a4-437d-bb9b-45ca67f0f39c",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba9c7752-b925-4986-abac-bf843025c1da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47081ec6-ed6c-41c3-acb0-fe37ecb578e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ff85923-ab7c-4ab5-b26c-d948c34218d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "5555f424-6415-4706-b3d0-37463c383e8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2459f8c0-c9a9-4eda-8923-4e698ecba22c",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d14b63e-fe8d-468c-b511-d5c805ed3802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c60709b4-92ab-43b5-8436-7da39f7e2724"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68ae80b9-8bf9-453f-aefe-4e802039ab07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d165eb8-5680-49bf-893f-cba9d05c7dd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25bd0001-4cae-471c-a6a2-a76aa3be0460",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1e24350-50c5-48a4-a2b2-182ab5b53451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a21db91-8d31-46e8-a2b2-2034b13be89d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3cbc5ef-b5c8-4acf-867a-f3d1282149b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8588e42-53f8-42f1-9dac-f130c0db3646"
                        }
                      }
                    ]
                  },
                  {
                    "id": "091ddf0d-2e99-4a3b-b01a-287b406d07a3",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d78c740-f607-49f1-a9ed-9678ef172b65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25f1ab8f-7aea-4b2c-b5af-48d32be6a6cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "317d79d5-81fe-4511-b51e-fd97d1e14738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "41a9ec06-7e96-4dce-ba8d-ddc616d7a8c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bed1af0d-5b23-49c8-b77c-c2111aa9c60f",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62837a1d-ff70-49d6-b1cf-2579f2f5d1a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3772ffec-c211-4f4a-a0a0-42c13b766913"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27a77a3a-936f-4db2-b103-e87ee43fa4e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c1a5896-e6e8-4469-8929-bb1923aa179b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd128ab6-c5eb-4ebf-9f04-fee3993f0adb",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e746e2a6-ee35-447b-9525-99f5bc4613c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b34c6f59-bdbf-4be6-b85b-e2e8a44e0d24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88ee1eaf-89d2-4bee-ba0d-a1131a255d60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed175308-00d3-46ba-8e06-363883d29073"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8ee82c3-fb33-43fc-bec3-fb828bf5543a",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f282c2d9-80ec-425e-bbf0-fde032c1c8e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8abf6326-4e4d-44d1-ae9d-25b7b22b36a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aed54013-a2b2-4ad9-895a-3177d1304f0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "92d61e37-b1c4-4afd-9e92-df33c3ca5aaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be99ee8b-8096-4e21-b7d9-12c2a35e2ecb",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9644f45d-41c6-4f30-8a37-74f66f592736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6f9dd95-c4b5-4572-a062-46e699de118f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cafbc725-cc93-4ef9-988a-bb8f82c0a0df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "11e0dc9d-0c28-47ec-acb2-fb2bdab959db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2881c88e-df95-4d5e-8d7b-4bbdb68ca3e9",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62e8bfdb-6c64-470c-9639-840fe2caea8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b04b97d-2517-4615-9616-1c6e42315f12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62e2b999-1b41-4336-a0af-9c34766cb548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed76fe4b-a767-4eaf-b72f-a23ab85368dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "463cfa06-0ad2-4df1-853b-57b83eca153e",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "985615a1-3b23-4ce9-a970-3ac88b111934",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d899c34d-4e6c-41fd-a2f2-579cec81bf5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45ee4232-be15-4608-9ccc-0f19ade27ffb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "69273e93-cdbf-4050-985c-a6b329ab2850"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f39daab-8624-44bd-907f-3507dbf4e160",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "132ee3b2-1132-4e22-b46a-729add374c83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a1cbb07-8326-4bbd-a2cc-f20d88e7602e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d45399a8-b655-4f65-ae02-725802fc652e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8437301-a4f7-49e6-a69a-418cc82d8ba3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9180546-02e7-4111-ad68-361768fa10f3",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67bf9e86-0d9f-41d4-a34d-2f79d989c12b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12f02e3f-d7fa-4381-ae75-43cf0399293f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4a2a159-4c9b-4bd2-8efe-e770cd9d798c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "61042d8a-7470-4b22-b554-03f282c32f71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fc65d12-7e40-4b5b-b9f4-be4dde0d9080",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6837a9ed-d27a-4bec-923e-8a63f04a5bfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "643e3986-aa96-415d-a1d2-66587c2b46d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75424e97-66ab-4d54-909e-2c2c967ec96f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8b7864d9-4410-451a-9eea-55a6b0d6e371"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38559a21-978b-495c-bb5b-08432b513079",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a47537cc-9fe7-43fb-bffd-8ffa8559ec46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "884be46f-e987-426e-880a-5446ba30d79a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2b00b66-8194-4efe-80db-3046387944fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b6a536d4-4cce-4d8c-84ab-33a85066d868"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e58c3cd5-5aaa-4d2d-8740-e5bccd06ef3e",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22df5815-9b13-46b6-87d0-1ed8fa6774af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dc8748e-fcd2-4bf9-a7aa-3c1bb30fd6b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7facf488-9153-4180-8c9b-b59d7d907262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "78d9522c-40e1-4e2a-8335-e603b7c9c575"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36ecfe1d-2f7f-47c7-b630-105940bafb18",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b2d18c0-861b-4cbc-b354-efebe5ac2375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e05ee2e-6206-4868-9f7e-934b7f99957d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7cd5d62-4445-4225-b484-5c17af8d7bc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "935c2291-59b7-4313-8c1f-1fe59ef6beca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bdf3c1f-e27f-4d64-a527-815450005da9",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c5eb9a9-b6f3-4ed5-954e-eb17c34d4d22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d442ce7c-2fd0-4b35-9434-a263c41a4adc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99beebd8-65d0-417e-a131-7a1972d050f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "01fbe8e7-f49e-4e43-91d3-812e013bb14f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b0d5245-3043-440e-85c7-cd2e7e134ff3",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "859af91c-389c-4f15-9297-73bd827d2bf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f066d51b-7985-4307-9610-69063ba0a9b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf1c6fce-ec76-444e-88ed-b0e4a471caff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d9bba078-c800-48d1-a281-0cd656a4fcf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42cc5dc8-f001-40a5-a2e6-b429bda99732",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a9a05bb-1614-4fd9-94b4-d11f6247098d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea0a12eb-6e6a-44cb-8523-8ff4b3574389"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d2ecf0b-3d31-4358-bfd9-3e6e655eaca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "dd5a7f0a-6ebb-41a5-bf0d-b99cb6244b14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c3329a7-a425-4c5e-85b5-0c8f32dd2cb7",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47d07bb4-11ab-4379-9507-900c20c27fc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97400536-00c3-4e88-b9dc-61dcf3b28b72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f84d659-0b16-4f15-ae59-5ee275e534d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b798d9d0-6300-4a8b-a69e-ea78a0711d7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af83374b-6ec5-4a01-a37b-c8d0362e511f",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e8dfe12-4653-4c02-bcbb-869d688e0d45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e096530f-56d9-489c-b073-e84f95f92e40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc0cb608-e1e9-4297-a4c5-2250ebc7e6f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "71806ddd-1aba-4180-a850-bfe8192e5ff0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1530a30-b658-4616-89a9-417d2ba29fcc",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84430309-d8d3-4fe9-bd2e-f55b12e73444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "164de9fa-0fa0-4649-891d-62cf4c59b487"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b52ee6d-edd4-4e30-b8b1-8921894ac3f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "750c2de5-20d1-4e79-82e8-5592e3624d68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcdbb549-a7f8-43c7-99de-ab22286ec10a",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0a5925e-9b5a-452e-9183-fae70e0d857b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e81ee62-00fa-4a72-9136-f892d9c1bc11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a88db14e-f3f0-43cc-9a8a-5696a926f05a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "96ce4325-e638-40b9-be82-c95922d2a064"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a23ea158-b0af-40d4-a24a-cbee2e83e256",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6453344-5ac3-47f2-a1dd-3dbedd1885fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0414aa64-8a59-4731-b187-cbb0de37f77c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "343dd435-34f3-49c2-8600-f66f5e6a6673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b40639bd-df1b-45f1-acef-52ef9db8b187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47cc02c6-f4a4-4231-bc39-faa71e037e7c",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f545c917-9b8e-4582-bea4-03e0c0562d91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "240a6bd7-a76f-4535-9f01-f44fc9ef8b0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaa8f82b-4477-4b35-ae3d-c0094869ad96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2c402c5-b206-4e8f-a1ea-e9d84d707e6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "368d524b-f843-4ab9-8e9b-fadf649b835a",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e02a508-39ba-4865-950b-1c19bb9d0df8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba58e0fc-e5af-464a-a656-46427127787c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57006676-3c89-4554-85fa-8af9ff864fae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "91ebc7e1-04d2-40c2-99a8-0f09d6857945"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec813f4a-a886-4f02-9bfa-cb3153a2b4b2",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a328c1b-31bf-43d8-8f75-edf3d768c6dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "700b5902-ebcc-4beb-a7bb-84227163ecc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe630f7a-6555-427d-bcd1-8d3f7803475c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b1e94518-700a-489c-bae7-57bfdba7fbeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53edb7e4-8a61-4c0b-9244-1aa61d357a65",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74717af2-4c11-4b6b-94f6-70e413a844fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47123abd-65ee-4067-9811-436610da1138"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71c14412-9474-4a84-83c7-4e8db3fd8346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "377b5155-d966-44fe-a5bb-1f649e759b5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a4f7bf2-5201-4a39-aae9-dea26dc05f2c",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12fa64e8-d283-4713-b8a0-198298c8dc33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c411f41-b31e-4ae4-a078-8742ff1dd424"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8055f30-bc79-4272-bf0e-a53dd3d9054a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d50470b8-2c46-4873-b6eb-c804b38973f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "484f46da-e7c1-4f67-9b1e-a067975b9a68",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f69adbe-29a3-4c7c-a88e-9326f996e147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c831097-26e3-4bbd-bcb0-dfd749403755"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "008fed3c-43c6-4737-9c5b-bd059c0f9963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "acd988b8-c6ce-4c7c-873b-a77a18d3090a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cfd0cce-a004-4151-94a7-fb75f8a911e0",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb1cc42b-8ffd-4c4f-9f28-587d15217243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab875ca4-fdf2-433c-8ec7-6aab517b7818"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "029afa5b-fe54-4ea9-a3d1-5721d231b7c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1d51af0-13a1-4f6b-bd36-f9fc5251078e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dcef82a-a6df-4712-b322-066ddc29d8bb",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d1bd54d-525f-41b8-8a08-b40cf9b89ecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2dc2fb0-e242-4015-bf2f-7db7a68f6002"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "221e3666-0846-4b8e-81cb-c38a25b70367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0474de9-a04c-47c7-8a09-28345e276262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "218b0a07-877a-4df9-81e4-b29b5d917132",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fecd497-155c-4f69-9295-135a48ba21d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "476287ca-0749-40af-a328-7fefbb32d6ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16b07b05-152b-4729-901d-1e3acbd276e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "c3939143-32e0-4697-951c-6f7f744b0882"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f44364e-c046-43e8-95ee-51c4bb7f3976",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f080e2c9-b2b2-4df3-861c-7b39d49cb7dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4834551-9974-4895-a338-e870a0cb26f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "107b6741-15fd-4cbe-8ff5-5be06eda6418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e5c839df-2e75-4933-8f4a-643a5362c50c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71427e81-ebca-4d41-bf7b-ffdf83d20489",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a33a4c1f-0177-4b84-94ea-5869d62159f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bcad619-8cbb-4c4c-9534-69eedcf96e71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5da93a84-8709-4ce5-88c4-1ac55e1f5195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2b3a0135-7953-4750-8d56-cdf87aa73371"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06ac89d1-99e6-4038-8ab8-c972bca0006a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "605df1e6-93c4-4220-bdc4-0aca9687b6d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "504de547-cbb9-45ef-ba92-c7b0690c7d03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab8088b3-5e87-4935-aa05-f30706563b22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ff8a77da-402b-43a2-8b73-918039312906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02abc5d5-65e8-479d-8ccb-b44221027ca5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6d2e854-7a92-43ea-af36-b29b87ec9122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "668ec630-6e8a-4b2f-8685-746c15977d23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcb5267b-5dfb-476b-8be6-73a99eab1fe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3f13175e-1ed2-4b5b-a526-cce26cf5a7ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26842cbb-a5dc-40ba-a835-c7a191d3fcad",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6e8cdda-ea22-48a2-9a27-89a20d2b28b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b862b252-f793-4307-ba15-0b5cc393a7b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a192a941-6fe9-4549-9b53-3e051ab13103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a30e3d99-b003-4983-ac6f-ea8711ae63af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdaf6be9-098b-4f41-8982-ee35066eec3e",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afd0bd52-6716-4339-b45a-57dbb2a2b0c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6741a1fa-4148-431b-a778-3d0c7b127b26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6733f12b-6251-4adb-8dc9-7bbfe089cee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c3ee594-c24c-4224-9ecd-fcdf66a3155a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62d80047-1d2e-4535-8700-dded0bd96fe4",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a4a8d85-76be-4fca-8308-d92657765105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbf62143-d06d-4955-bfd1-0e4f93d05ccb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e359b959-7a66-4125-baba-a95cc77a4f68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0fb170e6-67ce-4748-aee1-f18331796daf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fce87691-58de-4e06-bef9-7c8e64da97c7",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21311e19-7f1d-48e5-814b-6252af1a1e74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffa9e6cd-d4b6-444e-a3c4-961d1854b73f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81615e5e-5152-48b6-a912-f99de279914c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "68dde5ac-d280-4e83-8bde-be26a6393bd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e6ccbf4-ee8b-4324-af93-d1f93f36861f",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f568b7d4-35bd-48ca-acc9-85f8d0199fc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fb3a3c5-ea28-49a1-be6f-f5bc411aff5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fc49a77-2692-4239-98de-2ec5dd69f1e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "24c5ece7-1307-4466-a9de-eaaba9d297ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60359b8c-9398-4e97-8365-9477c22a4819",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a61d2152-c079-41da-a435-6f6e64b7ab1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1979fdc4-f7e4-413b-816b-bb55aeb1823f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e750f2b7-73cf-4d9b-90f8-6267403909e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4cff252-2671-42dc-a1c9-cbd895b93f40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dcc0efb-c04e-4cfa-9ef8-fc0612f27de8",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da512aee-9f56-4c03-8e71-eae9478ebcd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a64870d-23a5-451a-8184-edc3e0265818"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3797498b-6acc-4c1b-99c8-c1b8bee0faea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1a021141-7310-4e10-b3be-c267e76747e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d535b89-b305-4de3-8d4e-3d1f6325f6da",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "049a567e-3ff0-4e2d-8efe-89aee464da1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5326787-14e1-446f-b3b0-1c5a950c31be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afcaf701-7142-43b2-ad1a-0eb389838706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "69a7cd65-a3e7-4069-9c47-81ea1ecd3e56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95b655d9-854e-4eb3-9fc4-2c553d57905d",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73d66aad-b2d6-4f7a-adbe-0a3a7d84d63a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35fa1b2b-20f6-4aa9-8967-f0f75f661943"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e536f9be-833d-4345-991b-f39f860e958b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "61ef55e6-f4ec-438f-81af-0ab0e202b3b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b075bdcc-c57b-4a95-a263-b0d031e36ca9",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a51322f-41a6-44d9-8a8d-20ec5f698626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2cf2379-91e7-411d-8eb8-1473dd283683"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8fa13b6-bb34-4f6b-927d-a768182e7a49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c57f452c-b697-41e8-bfe6-ac37c9a8360b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b9439ca-4d2f-4696-a303-aa8dc33524ba",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f490b4b-09c1-4100-87ae-bab53f72e00e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d44ba718-6bb8-437b-8384-de10d94283ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19ec4938-53eb-4adf-9889-e7ff39967eb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "df778750-7d06-45e3-81dd-1db899774f4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52f3b677-ca51-40b1-a22c-8b19b9d5b231",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "697a48d0-0aa8-4076-8ef8-6c698b10fae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0360918d-85d7-4e03-9a27-a450cea93e78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45df3d03-ec54-4b2a-b401-55401fe7753e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f3f9c22-57ce-4901-8434-d662a43f0f97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4a05811-d5cb-41f4-ae96-67d333fe31d4",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6698c1d8-72ff-400a-a234-7f00a32c9ebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73a082ca-f0d0-4c04-a64d-4c21bebbfeb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acdb3375-570c-4f31-a452-f62ce88da904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "499cf064-89eb-45a0-9d03-87b4fda97021"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c4bf70f-e947-47f2-a476-6b6e809fc94d",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e9eb720-6060-48d8-b5bf-070d9ecc214e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10e9643f-f192-476c-b59d-197c9283684b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39970256-01f3-4789-b0b0-f029fe9415c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d78724a6-7c55-407c-ae74-fc6e8df03420"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab58d27f-0a37-487c-a767-39a9a5bd8e7d",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e399bec-cffd-4880-b2b3-a44517aa541c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b4da57a-8926-4c67-a3bf-0ca4625119f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d02d1ff5-7e26-4566-a93f-24bc26e94e7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2990bb65-59c9-406d-8145-744d96c90b9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "932ca4fc-38f8-42b6-bb79-206531ccc450",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16e34572-09a1-42b9-8c7d-b9b9bec8d009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45fa3d39-3790-4dc1-8c43-52d7ab0d6fdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11df1537-d7ac-4b37-9151-ce19f4ad9c55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "04f273eb-cfe6-4a76-a9f2-723c6772007c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8112e575-2650-4e0d-9dbf-1378939f7fb7",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76ef6af5-6449-4457-973a-86abeb775961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60724438-ae97-422b-be93-e3192f75159e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaa6bbe9-6069-4c2b-99fd-0da83649c051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f7bcdc6-199e-476d-8f5e-8ddb14e032e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab8d98ac-2003-4b40-9e2e-dc8729cd9795",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e202923e-78b7-4749-99df-5e183458ee83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5855c1ce-357e-46f4-802f-6fcb0fdc5bfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c766aea-70aa-4dbb-8f28-077407faec9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "404d37d5-f052-42cd-b126-c83a20c610a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c234adc1-aa0a-4356-9689-580004b19b59",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6210e70c-3854-44fb-b58f-e9ba800489b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f5a4fa6-6e4b-435e-b7d3-ebf8013a1e05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65ef13b9-1384-47e1-a1bc-828e76d3fea2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf53bd2a-12ca-4e1a-bd70-988c9e3059ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77fae3d1-cd91-4636-bc35-4fff48970279",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c501040c-e32b-461f-b1a2-1035dbf36a46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae327d83-b00c-4ed6-a242-64ce0a081e08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52bdbb28-aa12-4432-a109-10afc69857dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1bb14c92-1bf7-4589-8ce5-d99b9dc6a978"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdf95100-f777-4bdc-9d9b-e5b7e23278b3",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f69265c-3c33-4ea0-8ae3-991321bb6ebc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fe498b7-a2ba-4627-8a4d-1c352dd88056"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81208720-1faa-4a38-8f48-6f6f6021621b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3cf6770-cf1e-48eb-9b7a-48d34a55c7f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb7cc424-3e48-4029-8e76-9034875f1ed1",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c26c53fa-cfd4-42d1-96bd-8cd9008a2273",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eabbb0a0-45e0-4426-8b9b-c9514deb771b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d6c8896-5b11-4137-b7c2-9f960a9acc43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "01b061cc-ecb5-4fd2-baa3-5882d9aad883"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6093ebb1-2969-43f9-b319-640d6f77b680",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97003be6-d83a-4342-a8f4-8e1ec23a1684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2344325a-2008-4393-8185-0270a0d30a68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a0abd1d-9a81-423e-84a1-f02302100bc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dab6c1ab-8b8e-422c-883c-4f899db2a93c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8eb32ea-72fd-4f89-8c7a-6e4cbfbc9fe4",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba8da297-bc48-4a04-9cf5-4ea98fd01356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acb7ba67-ee1e-41ed-87d9-57e9a6db38b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d75dde1-13f1-4605-bfba-3ff9b2cbf631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1499add-0eee-4dbb-ba16-ef0efdeaabd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e36f7e3-4888-44d2-afec-7b0a6933e611",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0f167dd-3505-4055-b48f-0d7af7924e58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4c2bc3f-cde5-410b-9ddd-df045123e402"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f9e8466-cfdc-440c-880d-2f542a585dcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0516a7a4-4cd8-4f00-9617-e21f645743f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71af7f3b-fc27-4cdf-8e35-a3ec8507053c",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e74f3ebe-90f8-405b-9d16-36d72bf4088d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "423e4524-99e4-4a16-bd8a-a46afc85ad53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2baf6f70-867e-44e6-a552-aed16aef856c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c5145491-23d2-44f4-8963-c61de963bad1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17dc37f5-7325-4b71-86eb-4ecc4ba36885",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1646e989-4498-4117-b12c-e1a5eac832d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b1f46d4-4ca3-4893-914b-fc7bba855ae4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33ea1bb4-a220-4d58-8dca-74004fcf3fce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ae9931cc-df74-4ac3-9642-4e05a5b4cb2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8c6c721-5800-409f-bca5-f23375df0703",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ba1c1ee-4c99-4c98-bd56-99879685296e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11261e67-5e1f-4f9a-9a04-133e85da8175"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4200108-210c-4aba-b443-c0c3f965edc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "fceb9408-8c67-40f2-afbd-06fea506b83b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d1d4e14-54b9-4c43-ae55-31b4b56ede09",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e673183f-2ce1-429c-ad06-a92c7e1b710e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "605b40fd-c57a-4a8b-80ef-dfb04a4f592f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08297506-50f3-4242-9fd3-c1821b78bd55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b69ec3ac-3466-40f5-92b2-00bb2adc7ee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11630709-1088-4d96-9113-c4f823484819",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "562ef410-00d7-4370-adbc-177e9c944fe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "426b47a5-50d7-4050-b4ed-32e20eb1f971"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9223646b-9518-499f-8889-666e11d761ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1893dd87-6fd3-4799-8865-c4559e2aedb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "918653ca-4320-4620-964a-feb4ddbd451f",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d4b1e7b-5f3f-4645-b5c2-82836f05d89e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c069ecc-7f0f-4f99-a1bb-00cebdad7150"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9ae2896-86b5-47c8-91c3-dd30b64ed495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "46f08409-d31f-4679-af1e-5dcfd4beadc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15ac943d-d923-4133-9d0c-6cc92accf1c3",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4397c234-4ed8-4667-8c1e-c29eb1c86726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "4b086ce3-ace8-4657-a656-2a83a3fa9203"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0b40803-f2a4-49af-a26d-a12090005c33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "37279c2a-66cd-459d-b402-80b1d2663804"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "39993275-283c-42c2-8f5f-c78eee3c3a03",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0a6bb8d6-a59d-4d35-b86f-495540e59438",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22aed50a-fe7a-41fd-84e1-e6a284830749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c6488d94-0d42-4855-b60f-bd667eafe284"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5366f94c-7bc4-44ec-acb7-91058e734636",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "19e1aba2-4451-4c3a-912a-43f2d2ba3a51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49d34d42-3c56-4115-9222-5035e37e7458",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90464e0c-6f62-40e2-b55c-f498aed2c961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5c2d273a-618a-4dcb-9798-2418bb469c3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f08c865-f3f3-4afb-9604-ebec14615eaf",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "065d9ebb-ee25-43ec-b1e5-c795e0c378c2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "192a7f67-f284-4122-b114-a3cf5e18ba88",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f79387e1-edde-450b-9879-c0a87364c678"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0f22899e-ff71-4123-9c46-d1cf8ea1ce40",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c9cc5bd9-d9dd-480b-b7bb-9782f00eae0f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "98b3e034-7f30-48a3-9381-692f24ca250e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4b9debb4-ff19-40d2-b497-7b6b6a71920c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e5f99257-717f-413f-9f31-41e87c83dc3f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4e4a243d-b130-4b76-8405-8619f61ab720"
                }
              }
            ]
          },
          {
            "id": "1354b3a8-6c38-40ed-812e-209e67869ccc",
            "name": "Positive Testing",
            "item": [
              {
                "id": "112488ff-b2df-4713-b4a9-cc499e6ec173",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2e67b417-7572-4741-a232-e372bbef9c39",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "89203137-b8e7-432b-8aac-b9bea7840c97"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0ae0b492-06ec-488e-b4a4-0410151b48a4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "eb257672-e2b2-4d0c-9598-22fbdf6bf6bb"
                    }
                  }
                ]
              },
              {
                "id": "d929c6e6-17de-4492-9f58-336f107232db",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8c156678-4d94-4a77-8fba-b667815fbe91",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "92962c09-0916-4e24-84f9-3c932c00a84a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4ced31af-bc20-49c9-853d-9dfd9c283943",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c101321b-bb88-4423-b8e8-032b1ed7a51b"
                    }
                  }
                ]
              },
              {
                "id": "90edb129-fa98-4650-aacf-8040958352da",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5091638f-a8d2-47df-af29-76585bdf400d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5c55b4cd-9e3e-4c30-94bf-57ff975e9627"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4a6a2949-3333-43da-92b5-43647db007c5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "5b2dc24b-8fb9-4427-b008-c2e5e048de90"
                    }
                  }
                ]
              },
              {
                "id": "9c77e36b-495f-462f-8b6e-aa7e72336f21",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b2eac836-aec2-4242-adb8-56222d3fd512",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a0dca054-4f22-4af6-9b03-aca6584f66f1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2f5f2e26-1bc8-4ef2-b313-a07ba0b62c49",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "7f118008-3ace-4716-aec4-5e99c30b8d30"
                    }
                  }
                ]
              },
              {
                "id": "199a0b97-45f5-4a86-a7aa-9af6c4d4860c",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "16d766c9-c778-44fc-bf98-0851efd98693",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "decf07ee-ce8f-4c63-a6b8-0963ec40fa1b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c258426c-89ee-4dd6-bcec-02a2e6d07be7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1e01fca5-e2cf-48cc-8456-3909bee363b1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "297f5cfc-d1f0-49ab-b3d9-c1a9c80561e9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4730cebb-efc6-4b05-8676-5e5bc96e315b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b01e5f3e-7a96-4f43-a635-b38b02322bb6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e944341e-e635-48cc-bab4-ed7138e11062"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cb4f1635-f7eb-4355-8bbb-85c963122df7",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "dd40a6f2-31cb-437e-8436-103d67ef61f9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "41d4b7c0-d9ff-407f-b271-0dd2c5d47cd6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5b297040-269a-40af-8760-05cc04381bf4"
            }
          }
        ]
      },
      {
        "id": "39494a4e-63ea-40b1-8548-e099bc166710",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "d51b30fe-2485-4c01-a3fd-8f7f0d7bc36f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "29f78a7f-5b55-41ec-a7d9-7acf15a3ff2f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5c46794f-eed5-4381-bfc8-d411d6239272",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84a70670-29e5-496c-b473-1b47d41808c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f954541-adcc-4600-9395-6719d910dd9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e82cceb0-5222-48be-a8fa-0e9362cbac88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b99c5c8-2363-4b38-ac7d-e75d93854ef8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeb2c137-e0b2-416b-97d8-1930863dc042",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f5e90be-d713-4e55-ac8d-d647a17179f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8e42841-0664-4638-a183-45f500fbc789"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7963c1d2-9cda-4f07-ba5b-8ea052044a42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4da71eef-0659-4314-bdae-212219b90d66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5301f2eb-b2d6-4503-a9d3-29c89d68f264",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0641f76a-e664-46d2-9340-70f52f015dae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "147f2c7b-8361-4fe7-a4aa-8dd3e2bb3265"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ba31946-8cec-453a-a87a-abfc30150c34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7bb5c314-bc16-429d-8f25-a8e924e7662a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb3727ac-a4aa-4df7-a473-74391092862a",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c9a188f-76dd-467b-a4a9-b1ff29a6e21c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "749e3f5e-2cff-43c2-a6dd-0d8ad728d8dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c141a29-7eb0-428e-b4ad-2bacd98056c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca7e239f-5b75-44e4-8d7e-b789adbc545a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "544e1e2c-9682-4f45-a7de-2e531e422041",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28777f2e-6993-4fae-95a0-9b27d6c6d2cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e879cca1-c57d-4561-afed-ac426770f1b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5795617-04eb-48bc-a674-06eabfd51166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a57180e-2906-4bc6-bc1e-c4584e7562d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd833737-655c-49e8-aed5-ffdb94e96ba1",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d6a4df0-3d31-47d6-9881-d7c8a8261dde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e8d762c-2886-4c52-ac49-1393a118d3b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef480b73-5d9e-4b9d-a93c-725db57553d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "26f32470-4e73-4e8e-8dbe-5d092d5c69a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0156b3b5-2f34-4cff-8908-6cc375b20953",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dafa7c9-5323-4cf0-a3bf-faae5a4e513a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a872d1e2-7568-4c6c-b50d-c85da4ec6010"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c9f4a67-81d0-4548-8ca2-bb1de63348c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b5e34b3-058a-4398-9407-386c14033ef6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c702310d-9775-4335-b044-367b295545d9",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b268a08-1227-4677-a1b4-744f6c7fe3c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4bdc59d-292a-4554-bcef-b8134924520c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff04715c-3b99-4617-8643-9ff09ebe14fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1529ccab-c8a4-4bd8-a972-d586845fda19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66639458-1244-4f38-aed5-59709725371c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a1119ee-0534-4497-8514-2165a39a4be3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c61d73fe-5056-40fe-af3b-1dd5f21c18e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9c18c3b-9719-411b-af3d-713c5a9286ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "678c1c49-a7e9-4004-8b12-fa0c78535ed3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4067a4f6-6383-433b-aabd-7b1b63edacf3",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e226cdf-750f-4e96-ab04-a92653981591",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0436ae4-78b2-4eb2-ba3f-a7db11e524dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b82a4fc5-0ce7-43ef-a0e4-5f5bc750e618",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff64655d-1625-4950-b37e-4ff9b951d646"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c52d8cd-0901-4e93-b71f-a66614f44a33",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54adbca6-3a91-413e-a47c-8b90c32a8b2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1937a285-11db-4631-b876-7677777306ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61f04a2d-708e-4134-b503-843862d833ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "eacf008b-53c7-4520-9816-b2e013930eec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8db5e1e-b376-4b06-92c1-c6a941cd5c6a",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1655ed01-3a71-435c-9b5a-2a32a27f8782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cbc122c-da2d-4f93-b10b-e0165d3723c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26520e13-564b-4354-bce7-65f727bfa3f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2ba199fc-a62e-4400-9109-007bdf8763c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ea6a017-7525-4ead-bdc4-91b530b55d8e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ef38584-c045-4480-9ef2-4dac5aa87e08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97ad2eca-2160-4c93-846d-dcd71e17ab3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5afbd7b-b067-424a-a5ef-4532d91ae893",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "be6f98b1-f87e-47f7-8300-eeb019a3d31a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd9f1f20-f7b1-4248-8757-4575280098b7",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5083b21a-d33b-4995-86b3-e4cae08f5a42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c9bf453-c8f2-47a2-bf1f-9dd5cfb2ae91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e52d306-0bc8-430b-b028-5b808280ab3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "339cc4e1-b628-44dd-873e-60cc831ee829"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cee0e22a-f511-454b-b2c5-58ad4eb39088",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9daeb1ef-4ca0-4b9c-b3c3-4c8b123fce6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad9b0913-f479-4649-81b8-d19c790c385b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8156dee1-0914-4c4c-abb2-798fd66b2a3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2258129-d0f9-4da2-b639-4f74197be138"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fbb48b6-16ca-4da1-a35e-d51d7d02acfa",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c89d1f0-69d0-4de9-ace0-e8aa6c67bc31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "407b2f67-9716-408c-8772-9b8fc9922f64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cc3171a-7800-4be9-9bc8-27e918703154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "aecad06b-d91a-42ef-8ec1-954a7447937c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18f46374-3169-4cfb-93b2-eabbd8bb3cef",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64007f25-ae69-45f3-9f17-91903e496799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4870fdcf-e5c7-4e83-9edf-960598a461f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a3f9709-8a1b-469f-aa42-364292dc15de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "ecd74731-5500-4094-b6f8-5aa236777d2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "560eeb39-1b83-481e-81fb-39359aea3a67",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39cbcc9c-15e2-454d-991e-d744033c27a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7526a212-a8b7-4a54-b69f-f4df714c8bd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "519dfeb9-209e-4f96-88fc-47b8dcb4fd25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0515f37f-0f32-47f3-a396-597c5c693c10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74f7f604-ba6c-4969-b168-c2716dd6cb29",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3fd7914-42c9-4824-b9dd-f616653655b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35b403f2-0d24-427a-9d38-905e67e2d085"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f61de527-8ade-4772-9277-1556735e5942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3dbafb7a-7dd3-41f3-81f9-2fb52feccc78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6033de10-25b8-46c7-864e-88ac13049619",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70af5ae3-7fc1-4b39-b8ff-a36c3f5cb96c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de206927-f0da-4185-9a67-fa9be603e237"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "981cb303-f83a-4359-a0b6-26689167ef2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9774b1b5-010e-4f22-aeab-3fc350f7f22a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53784bbf-a17f-4f6c-addf-ad4c5cf1bb2c",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb5d7349-f884-486c-b01a-1b593978f67d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dee77b61-07a5-4ce3-9c97-01c523194b26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c818a304-9cc8-421d-9a0a-555288d27ca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e316968d-485b-424e-a530-a662d52e97e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73f8e233-532e-4b7f-860f-f0d8df110f6e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ce7cdc1-2ad1-4c0d-a41b-a6449e712c83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58edf8ee-f5c3-4555-84fb-d34cc2409505"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "418dff79-8151-464b-af68-86f31090524e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "57e62094-ffed-44b9-87a5-9d96df721b58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5d2ff94-2514-4603-aa02-35df613b118f",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfbe6a2e-5254-4973-a75b-03fba9d160d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79b2b73d-79d8-41b9-bf55-84c3e301400b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5c6210a-1fbf-4502-a1f6-2a3a6477a1fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd99a01d-7d57-4237-8e8c-ac4ef4635f47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5866932-800c-435c-b164-2f5b8b5d93ef",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2646efcc-f737-46b1-a5c6-8b8fab8ab7b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a20f571-d84e-4382-ad4d-70286faab792"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37ab972c-d88e-4e7e-9234-06eabb6a3ece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b8fd775-fce1-45d3-a0d0-3b3e7865714e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2b08c32-987c-4df9-bc00-7596f5157ec6",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e44d875-e220-4d5c-a6ec-76e87e07b46f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fbf3f09-5d55-4ede-9b23-1188cacd529c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75ee10a6-a90f-41ad-8427-3d03af830a25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "10f6e0f1-3a00-4a04-852b-c5c6b7c12e9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6a15920-c52a-4c5e-8970-71f7d6872e53",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7a4c91b-47d7-4a85-b85d-66c66267c889",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f20816f-3068-40ac-aa2d-bb3858dfa3f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b47fba92-1e09-48fc-97cd-62366f391a88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9254037-1553-4df3-b14d-3a8f3d1d1c1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "433c8608-145e-4cc6-b5c0-979f39ec74d2",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e21d860-c661-42af-92f5-51b1e4ba6ab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25f63ee5-ae01-4493-b5cf-838dec791433"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8db54b7d-fe9f-4b9a-8141-7ae2a774bae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "90f4d564-df4b-4305-9557-a746b99edf31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54c88aec-9cb0-4bd0-a22e-0a1757596314",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76d296fc-4fb4-4a0f-bc3e-2a3451a650fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a03b0e2a-69e5-40f7-b752-354dc295f39b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f0f9bc7-0c12-4451-a24c-20f209ef8efa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3df13059-bca7-4e76-bd7f-03a7f9dda254"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ed8cc99-59c1-4e7a-982e-aff912a435bb",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f08f2eb3-4d03-46ed-80ef-b75332b40daf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3a91864-5a82-4a85-9704-75584b0de66c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36d568c5-0d2f-42e0-ad37-3e9f6086adaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "28ff0590-f121-41b5-9215-483442c27397"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76b4ea97-130b-4f40-b9d9-a5343c10b576",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c15cb10-7f9d-42ba-b6ca-d99582c9751d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2eb764d-d0ac-4d51-901e-6bf449e2c3e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72eb99a5-b6b4-4533-9374-eb33ac7c2c54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "469f1965-b3f4-493a-ab47-f8040af71a65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3837a3c8-c06e-4170-b087-3bdcaed93a26",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58c6d0d4-0d87-4f35-8866-ff6f1871a7c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a99c6bdd-02b6-44cc-b94c-e9b629f6e3be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efdaf04b-292f-4341-ad86-e919ecbd7f67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7f3d2ed-b5e3-471e-8669-6a8a7e815f7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f305a2c-93fa-488a-b2f1-b174890849e4",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec2444b9-84ae-4d68-a13f-5c815456eac9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc16851a-86ce-4124-98ee-19598e3cc15d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "067ac002-6c7b-41a5-9616-857e25e48d85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb5f9bf4-333c-43de-97d0-91d866acec9d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d35428a0-61dd-4cdf-a4df-2af879fe7455",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5db8d11a-e08a-4aa3-a3ab-f733d74b059e",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "101ea4d0-40e2-47c2-8c1d-f494d5e87e03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "add04e3c-a5dd-40e2-ae3e-ff0082968814"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8d7126d-b123-4226-9fe6-e0607767ede9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7a922bdf-7194-4ee9-b601-9c7947f8dd4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "970e7977-225a-404a-8f73-8861cffc6da5",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "216182f8-aac8-4ee9-9db6-f28f03a77ccf",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "2a681699-8caa-4cc9-a764-b863c64df85a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5719fd6c-0018-408a-9657-5aaa48383d27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "de465666-427d-44b3-8393-233830c4a7e4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "723934d7-333c-4e23-be7e-1d7496f5dc17",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ee535b89-0eea-4b05-9bb6-bb4ee87ac91f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "aea38e3a-b79a-4ae4-8f5e-cbf147d27121",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c6a182c1-36e2-4773-bae1-bc7aee625051"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "41283371-e3d0-4238-ad2a-e26304a121b1",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b8c95873-23ab-4774-8bc8-90387dac431c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "437a0ca6-64aa-4d87-b45c-108ccf44d6f9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "43543ce2-b23e-45de-a234-861ad65bbe53"
            }
          }
        ]
      },
      {
        "id": "75a87bf8-1922-4ac9-b1a8-909bb7a717e3",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "5685a742-2505-4b4f-a2ce-3ad90d175002",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cb8eda07-893d-4a2d-8a36-1872bb2f74f7",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "872bfbf0-9446-4a40-9054-d541c085af98",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bc1116a-7ae1-4e8c-999c-66be7bd616f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "530de541-97d5-44d9-a4f4-38ec824a3be2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b049054-b2ad-442b-8eb6-b1f0b4b7cdab",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33b18bd1-151c-44d7-bc5b-6f611a818e23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26cc3eec-67b3-4b8f-88f6-ef3aec60c298"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f0a8728-ef70-4fd8-93b0-6cb8ff4fad52",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4e4106f-6374-436d-a91d-776beb5c8e39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7e8906a-267d-4445-a8dd-c227f39164de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c7684d3-cea5-4124-b34c-12309894250b",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba31b6d1-efd0-477d-937f-45aae6adb6de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45fae879-c1ec-4ce0-9c6a-f6301a6cfeaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "798e69a0-3ad4-4b6f-a12a-f689ee5bc052",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8c5187f-89ef-4c43-b7e0-621d7852c404",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24df5e53-6f11-4a2d-b8df-f4868bd6c9e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "888a3803-a804-4e6e-bf69-69f4a8afb59f",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a97ef8ce-2e12-47d5-8984-cd70acd4dd02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed979dca-537b-400d-9529-ce4f43f2cdfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "176fc70b-dd1b-4785-8a7d-ca3a02eafd84",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e800f7a-7ee0-420e-a756-353c98dcf93e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc6306ee-aa38-41f6-9d00-eb88b033641a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe5cfe29-a32c-4b16-9222-5eac4917b4af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c7d04eb-6239-4de5-b7d4-a23af85c2d00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "687960e8-c877-4390-9fe6-1092567c5737",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67b93255-3656-4ace-987f-57e77027186c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7bdbdeac-d8cb-4d0c-97cc-03f0f1081a89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b676fec-fdee-4244-9589-18fcb62db5f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "368e1171-cf79-45fa-be66-672e1901309e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcae9770-eafd-4108-9ae7-9d8e0a08cb9c",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b8b4138-ffdb-4876-bd5c-5c3669d0be42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "854a5abf-60d2-4d1e-bc27-f0c8acfbd26f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "785eb1e4-27b4-4020-acb1-0579258f0538",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14ecd395-b54a-4550-9b9d-47c313c6f5d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cde55fd2-e1cf-4130-bd1d-a685be0c3c2d",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11aebf7f-96ac-4fb4-9349-c85790bacfc1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c75e3635-a90b-4157-971a-3ffa0bb177a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d1a9f93-23bc-4446-a2ec-86c89ff50a2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7416ce43-8a40-4b38-8045-b41bce612f99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "676e5eb3-fb96-4196-84b9-ded02764bfa6",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53ba5043-6af3-4d7a-a429-a8cb7d4982e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09c657f7-1c99-47a1-82fa-a1b277936943"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc6d8afa-f1e1-4ee3-a7a5-2579886f6e0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "299f8b6a-a3d8-4aed-a0b6-70991292bd4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42a1feee-8008-4503-bb4e-408a4b5d78af",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47a3f950-79aa-40fb-b021-6958db924b03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db80cd65-e2c8-4762-ae22-6ad741621b15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "274eed31-e349-4977-82d5-64da91a3d927",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ecb5cf0-ebd5-45ec-8add-a30f3964ae6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65685152-867e-4013-bcab-47dd123869ef",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "195436b0-97d0-4c1a-b142-1b7f0d3ebc2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a08b263-e64e-4642-bff9-a4cf1ee69cb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d2d5038-bc0d-4b80-bc7e-d8aa44642c18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0926c409-4c44-46eb-847f-54f980566749"
                        }
                      }
                    ]
                  },
                  {
                    "id": "320a115d-8fcc-4d49-b0a2-43442762f8a9",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b2cb567-d810-47d3-b1bb-da4ac13386a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2d27926-c15c-493e-a3e1-4c98d617b5be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b1f5b42-5536-4b57-9bf5-95f5326e1812",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a250b37-f6c5-4320-8c7c-a3465fc00eac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f49063f5-b35c-481f-ae08-69c1b8c3a991",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e519797-5696-4789-b906-399c48010f3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a09813d3-0cc9-4ed2-a39f-32340b86dc0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40d1d7b4-fc9c-4cfd-b23a-a3d1130f8510",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f81398e8-68aa-4bfd-b3f8-a1d12c02944e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0135ac01-21c8-4d04-b7dd-23151e7cbe58",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83be9694-5f7a-48d3-b627-3c3e799d44fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ffa250c-4d20-472d-af0e-b0cf1afeaf5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85957dda-3f86-498d-bc99-393ffb9a8854",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a16de62-fd55-44ed-9741-12aabe3b2d50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7882d9f-8656-4ea5-ad74-813ee7c9b9bb",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66c262d0-89b3-4a4d-9182-62a157d0d27b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecc3ba31-7000-4534-bb52-6ae54bb98c74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d4ae6c7-5f07-4ae7-b0f2-5d76f0e744e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b98422d-234a-46bf-bc3c-f5b3be6549fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d00df9c2-568d-4c23-bb3b-d465878bc39f",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f91509e-e302-49cc-bd90-34c9e8e56cf8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e03e8448-bf44-4328-8b3b-5ba8617eb087"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "298aaabf-8938-438e-b9c5-338192283009",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f757d740-ab8d-4b71-aa2c-872ec4b2b234"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a195b962-0b1c-4c61-90c7-fb227c1ca26d",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6c477a8-f947-447c-913b-487665597400",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57f9f34f-ca02-40c5-931c-a9c6531f863f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c7f011d-2cd5-4a83-b2c5-d0a7b566864d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "364b8d6a-7636-450d-bbd3-3f2392b21445"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b205457c-64e4-453e-980b-30b1b816568f",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81aa9543-0a98-4e02-8907-950cff2f639d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9532d8a8-1809-4912-a66a-5bb7731ad3fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f059ac3-de55-4a7b-93ce-32c75b1a35b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbb47218-5157-4760-a0cb-a21f50f29add"
                        }
                      }
                    ]
                  },
                  {
                    "id": "737cc918-5453-45af-93b1-3a5b9dc84382",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cf3367b-1c30-491e-98c0-47cb05fccfd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0372a85-8d63-48c7-b7c6-d56204ccdac8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "583827ec-37e3-4ade-8884-fae06869a554",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aedcc46c-ff90-4c9e-aec4-a6f4221042c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ae6ee1d-5d39-4c60-bcd7-c95e0785028f",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "801fdf63-7be7-4760-84f6-cc31683af4a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55a8d968-f34e-43c0-8fad-fa8445e2ac7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11812af8-35a0-4e85-ad9a-7c66673076e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "053203f5-0d04-47bc-b577-e6b484e950a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a16765c-275b-45b0-80a4-b1ebe179fb11",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a3f40d0-ab11-4e83-913f-0339264917ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7104f1fb-cb0c-4a03-965b-ec4cd54e473b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "370310f5-656d-4770-a51d-66796a6cdd71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4287795-ff3a-4c10-85af-588c9f08c0d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d32cf65f-582f-4f31-ad3b-d2fe3a347c08",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e7bc3ea-9f58-4755-9b1b-bfb8e62c5573",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4d2d164-a874-4d88-a889-898692637912"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "feaf4a09-bc35-4544-b836-9393dd57529c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eee66922-f40b-4233-8544-3d38566ca404"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdc1deb7-2d50-4357-80d9-95f25cbaba79",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a0006d4-f708-4265-8e9f-90b65f354a4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f6d7a0f-9256-49aa-8c33-90af327ad887"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2f30f05-b81f-41fc-a68e-24477b8a3e0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b4a99cb-d86c-4f24-95f1-25197881a119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b4efae4-9af7-45a3-a8d0-35efa72b03e7",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3a759c8-07b0-423a-9671-3575d13cb7d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08100edc-2f63-470c-aaae-7a481f6f33d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "900b372c-b876-4bf7-b482-28ea0e996327",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b73c0aa-00c1-4ceb-8023-0a86f6ab2485"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3978949b-a360-42db-8ba0-8c70c1d559b2",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a65a2c2-55cd-4862-8654-49a4a257b562",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "937399af-1451-4700-9f6e-2e2ec0541ae2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9f422dc-7771-4115-a33a-3debb416c11e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cc9306e-ade0-48cc-9354-382f32bc15df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2728d603-4f3c-44d7-81ca-9ad0596eb944",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "329dc569-0400-4ec1-bde2-00b44370b7f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe640dc0-91f2-4273-85b1-f1dfcd2ceb0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6cc195c-73e4-4312-b18e-55a54e437708",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de0bd4c8-5727-4511-88c6-461fe17421b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58512791-b315-416b-8b96-e1ba104e7a0c",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab0879b9-9ed7-48c4-a5bd-ffc7dae9a6a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "962317a1-6704-49a3-b469-d599008e69df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f40ddc69-26f3-4d77-a8b3-92f518aae9e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "996c6554-27ee-4b67-808d-6bd69bf64b43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14132b88-ed33-41ab-a1ee-984610c1f22b",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df271e1f-a8a0-4f81-b670-c866bcaf2c22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db0fa10b-bbfc-4df7-8a88-a25fbee75477"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "335d385e-7d75-4a33-af28-783b11c9d15f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96a06889-6659-40cf-b02e-d5079b802613"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4537ffec-6a82-4f60-84a4-c508cc09e775",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf448b6b-938e-4fce-90bd-71fdc6684539",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a073199-a3df-4b43-ac0e-77c3662b6d83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc242e6d-89b1-4efe-a973-cf0b1600adc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a92076d-4c37-4535-a576-62f9260eb9cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a57f48d0-ee2c-4a65-b9a8-bcd4111eb323",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d64fadd-1daa-4d8e-9f3f-25023bcb5381",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "594807ea-6607-448a-b369-0bb58ea81f4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ff7b984-e324-411d-b6ad-d9c51d565202",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54e1c920-9210-41ee-8654-1dc5038c4f73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56a9bd09-b4e2-432b-a1dd-7d7eea77c797",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22aa681d-1693-4c74-8420-2cece296d677",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41920977-e743-4874-adca-66fd1beda5b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df022c10-b652-4a4e-a106-e5c82cc29e63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0966937-fd59-469f-8d57-ef259598146b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "814adaeb-8c1d-4d85-96a4-579ebdd9a47e",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "609519f6-c8d1-4bd7-b725-b884ddf1b1da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da627fa8-cc41-4d9d-96ed-f913a4066de3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b8a1a9e-da25-4c60-b553-e35741fa5bfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "012cb1b2-70f8-4b41-8e72-bffd63f15ffc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9ed0134-0bda-4251-a2ab-e6f86ae5d5c5",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "669c5b2b-5d29-4e94-accc-1a4ea16a7fa8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb0c69dc-cf8f-4cef-846e-56d6e2ab7489"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f38f5aa-bd11-445e-9804-58a5a87d3ee1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e141bd41-27b9-4c80-bade-85dd7a199189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac5c872c-d61e-4b72-a557-535dd25bf6d6",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2debe625-3e21-40ca-b3f9-a78f86aa6f43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0efbcc5-37d8-46c0-b7e9-f4f5df4326ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5ea8f14-12bd-4efb-b35a-f9e67105e1f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1cb0ed1-5b3e-43c1-8b9f-f22d15422c51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b67b7b4-0853-4e90-b1f8-0b186c9365a4",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec516499-d93b-4818-9adf-895378b47da1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bfd28f5-577c-4466-9e91-937009329641"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b27debe-daa0-4f1f-a222-6bf92b4978df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffb4814a-b98c-4e1c-916f-5c3c0990a7d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2631eaff-9227-4f62-a9cd-2440c3558356",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d32dc71-f55b-4ce7-97dc-c6e8a23af86e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85fd0f99-0ec4-4af7-9ef2-829f1e269976"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc26dc4e-fdf3-4210-8805-125357a2bd6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f03669a-82d5-4ec0-b726-28e19d06d0bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0bb4adc-4151-46d8-a906-f8bdfe11beb6",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36598a67-2c97-480d-a272-ee04a3bc90d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c38dcd5-f021-45cc-9d6e-7234c3a47c43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97e6d090-1984-4780-a002-56d7ee796af7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98b38bc0-2bd4-494b-8248-e0ec2698d0ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87e2db7d-8482-4554-956c-9c9213772175",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a79bf794-2074-4be0-acf1-c4c904717b83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55001bf3-76d3-4cb2-b1c3-f3f540a13cd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfc9f9ff-8a2b-420e-b637-cfb0dca7a1e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1cfebd9-ccf8-4aa3-b224-476f6a6b5bad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d80c629e-73e7-40c6-bfbf-4ebfe03ebefa",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22c8fd13-3e85-4850-90a2-dc3f235f62e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1aa841f1-1abe-486d-8601-88338a1882cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb52d484-c4f1-4cec-97a9-f6e3fc2f32ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e9a5f8d-6e5c-4bc6-b80e-09ae34e41434"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9d845a8-f98b-4081-8a21-69b511667064",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b05f6db6-9312-4406-a5bd-5ce938e96d29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7577503-a70a-4ce9-9f35-b94284467d2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "252c94bc-2863-436b-b4a5-45cf11ed491f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f96bb88-1ae0-45fb-b278-5aceeb15d8e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1b6fcf8-6077-4544-b50e-5277ba94b386",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14d50a89-51dc-4156-94ce-a6de372355c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e82880a8-dd03-4f1f-aaac-8c1a73ec57d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c13ae4c2-d5f9-43a4-8d18-4fe3a8307c1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b770480e-ebf1-4b02-a597-66fdad62923e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80ffb0f2-2ad0-4557-b086-01afcf7d63fe",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "401683b2-f0d3-4157-9751-8c58f9d1ce70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5508c72-0e00-46c0-ab8e-1360600ad100"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55c7131d-4b52-4cdc-a4c5-25bb124da5d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bf90e17-84fa-4290-9d9f-390dcbf2cee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0ab6ebd-08ee-4a86-8667-afa6abb564de",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d70c377-f66f-4091-bfe8-1f7a5d80e9ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "851f7d4b-41f8-457c-b376-35e7f0842340"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a550f23d-be93-40f9-954b-4c04700adf5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9245d599-fc68-4764-8fd2-085805f63992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58961352-5c6f-4381-a7ad-b811d38fe585",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a2f44fd-58f1-4598-b840-7f8370d3ed79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c332fdda-bb02-48f7-80e5-d8fd87c09f69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2c42710-3142-4802-8afd-e6d3a6bdefa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e04031e-cd53-479d-b679-89cafe1e05a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8f03388-4002-4391-a093-8bbf53f0be44",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49539326-5a0d-4851-a065-dbb2c47243d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e60b0ba-8372-43bb-9e46-85b98bb9deaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62963c80-4391-40ca-879f-92f896573434",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67edd0d3-bc41-4cf3-b850-9c7d8066ab70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46e84c6a-2e44-4749-8fff-b938e16a64e8",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c4acbbd-9abe-4a89-bb72-775b70fa440a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d8538fd-5c08-4b17-a882-4fe5980ddb3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cde5124e-6151-4c4c-ae45-bc1ac359ed88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f24ca1a1-58ba-4a9c-a53c-c02d51895109"
                        }
                      }
                    ]
                  },
                  {
                    "id": "079698c7-f5cd-4019-86db-0050a17683b5",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18d52135-2887-4fb1-9f5f-74e81c32316e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47b2786c-7e15-4151-87a8-896c7f36d1d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b75fcb92-1287-45f0-b553-50a3fef0b378",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a483c9d5-7745-44b8-b78b-f03657cad15f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31aee053-93c6-4ab9-877c-046b3cc501b8",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7ca1ae5-ece6-43cb-9452-4b8aed14d84e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "709ce5fb-c21e-4669-8cbb-e8b5d69f9f85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fb8c150-4e4c-46ba-9094-858f6d4c30e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c1082b3-b925-49a3-81ed-25e47447b4aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2a5bec7-ca89-4b44-8325-66c52475fbd7",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bfe832a-c359-4655-83f4-6db5f715d57f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51726d1e-43c5-47d5-998b-4d4a7ad693b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4ad7d90-1685-4663-a40e-5f3826273a0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d032712-e11f-4647-b7a6-12d2a558632f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deab84f8-f168-4f9e-ab19-d7f7dd4581da",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b515f615-bec1-4892-9750-0f3db3ca15ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "853462f1-ad80-4792-9310-e4a96ba177e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5ce9e36-f202-4479-9d3f-f4a48f6a8349",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99f9d8a3-b0c4-4371-88ed-12b1b78c2f61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74482a15-8fe6-4964-a275-c499d90fdd2e",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4217c7fc-394d-4930-b743-c4aa3a1012b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8d24949-ca0d-407d-b317-1e157a1777fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe2add7c-35f0-4fff-b501-12a5daf321ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "decd5fd6-5c3b-43e1-8197-e9a2b9c0174a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8559ca77-ef1f-474a-9633-8142752c8417",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d525522-11bf-4ff1-b5ea-b5d567251997",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95fbe509-a8de-4740-8904-cf1206506aaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3823427-5d36-45f1-9f52-5ac2be0030d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6129cc8-6059-4b9c-ac13-0b380f4348f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e6e5ec2-5a69-4717-8737-8b33b5d90e0d",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a43403a-100f-453c-83ee-d0d211394175",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "512f66e3-d9e8-480d-8e76-3f13398f2bca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3f0969e-4890-48d0-a48b-ce0927cac7b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57fd18b0-1e2e-4c14-ac7b-19eaa8fa6a03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3a6ef92-8063-4ace-b014-d4b2275e402b",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7779ae2-f39b-47d2-ad9a-de7f35655268",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddb35096-54fa-4d6f-b411-e8b0f523a561"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a24d956d-51c5-4376-a4b4-a14d657e85a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60eb0f1f-1db7-4f23-8218-fd0ed9e2a0f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ee545fc-c16e-446d-b900-569fafff8288",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e78bda39-58d2-4041-bf7a-252baeb74161",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "951c6713-78f4-4968-ba0a-95a71c8b8422"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8ff5bb3-a2a7-4815-9bcf-d723fb0e2a2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88084fb6-8a69-4e9c-877b-d139cd02d0d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4024ec78-4557-4c1e-9659-289ecec35563",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7029d594-cf1d-40ac-a128-0a1b1a66e62b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06e5351f-0efb-4aa1-96e4-30527469acb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1552fd48-5a59-42f1-8eb0-0406570acd43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5ffc6c4-386a-48ef-94c6-6f3c4ebc36f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1d48f38-cdce-48aa-8856-7f3604d1b238",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "294d256f-409b-4aed-ba1e-0057149de41c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c55bc3c-653e-4250-89d9-788e9431d066"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8ccc1bc-4fb0-47fd-9639-01481e2494e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31ea08be-ffa5-4843-b22a-9c97aaabdff9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1116f4d2-6ab0-4875-8cad-a3b431b8313c",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caf4fe63-41b8-4a79-bf69-3f806a808d49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7f61254-d5b8-4c81-bf29-7c17a90cc529"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73450f96-de33-4d69-b13f-22cff5f3a5ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd254857-cf95-403b-b557-61a664d40510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b44622c1-b032-489f-b4b7-dd50ab0eadc2",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3232d7dc-c072-4eaf-8632-c25a18e7e8ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c3434be-71d0-42f8-8cb4-70a57f927ff1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1856000c-2904-4147-aa38-ca9202c32c03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b942b96-aab2-4fe3-bafd-f3ab38d8f8c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94bae396-26ce-4ceb-8208-a83d31abecc2",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71cf4f1f-eac2-416a-8a2e-5ced6f5b1505",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8102517-9905-4587-af94-9a6400053743"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "068fea8b-a4cb-42f2-be45-942ddd64af05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fa4ee3a-47bb-4382-9b67-ec3483cff82c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc9f9ebc-403b-4e14-b22a-45dde7921761",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eb7367f-c283-40be-a88a-9d03ee1fd72f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bdd9412-9234-4edb-814c-2de771426b6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84b2af18-fbeb-461a-9834-6f8a45156e94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c43116a-4998-4a38-ac20-7a2a7015a8be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed50017d-a34c-4c73-9c6f-d2ca8a5cfc84",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daf0c6ab-e2fe-40e4-a226-57f121090ba2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "108441fe-4f67-47a8-8d54-da32f4fe8fac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aa7de8a-7102-4d2f-8e8b-77a053c39dc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdcc49e3-5847-4c7e-ad7e-1ebf22eb0727"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a61c741-6c7e-4e78-9076-6703091a99ec",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2f3b0f7-18ae-4a9c-94dc-45cc7a9e1fbf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3d03cc6-a577-4b74-b8db-050cf2ccfade"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dce76b04-95bc-43cf-933c-b48818d89d94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8384d81-54e3-4d2e-b464-9ada7ad8e1f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98a8fd30-9b21-4eab-85d5-8c454e026f99",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "309e8203-7f2f-4a20-a09a-4643bd40f535",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80fc336f-ad12-45b3-ab56-853c61a5e30b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98d91471-6d33-4479-b5c2-880eed429076",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d5a7976-78db-44c1-afa9-58b3cbc6461f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc5da205-b764-4e50-91ca-b42f2c8b51a1",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "490370ea-67a8-4f5a-b924-99fb95e3dc16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39e3bf4d-c5df-46ec-bd7d-91b420810263"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5990e487-e979-498a-8290-a730441cffa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a22101ae-4d8f-47cb-94d2-53a599597fe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08d0df97-5656-4453-8bbb-0bdc0cc02a06",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98780017-04af-4ba8-a433-7e927a5442d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3b62c24-5dc1-40ed-a160-a8bae9fe05a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1711957-ece9-4ff7-9600-b81cad5adb68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "273d40e0-35e6-4339-b77a-2e2a6b08d99d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "103fd97e-8093-4f92-a75b-cec6491d8ee0",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5716de4-c45b-4216-8ab0-186fcf6aef8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23b25f7f-0252-4f53-93af-b0ac63db40cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "591c0829-5fa4-4e5d-9189-dae7d2025a30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd0bb6a5-c7c9-4576-8cc2-7cf7b1bfa2a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38428d2c-c3f8-416a-b9cb-7d58197271d6",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "054e6e23-e509-4ae4-9e8c-e135e86be0db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4a94213-9579-4c81-b1b4-e6a47ffa5459"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3354eb6-4683-4f59-8cff-e765e1c9e015",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0c9fb75-11ee-4071-96a1-98db95f9b71f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "220daf30-0b99-4d5d-9312-de90c7a55d9e",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d16a81d-39a1-4839-a1b8-0c5c9b9d0ccc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e20198a3-7b55-473f-ad4f-16ac752fa13f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4adf55a5-1c23-4eb9-a830-fe4651a61031",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "494ce6b8-ebb0-43e8-a98e-2f520e55a4b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8243ceb-a6cb-41e4-b1da-eb8df9863c06",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36490dc6-ecdf-4ef3-acf1-02ca8f74ca2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c0ef21f-dd5d-46cc-991e-54ca9eb93a43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fae07ad-85ec-4a4f-a7b7-fbf35ec26d86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb2c8d9e-2e60-4aa1-9677-a44bc878bd2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9583f4d-d825-4555-9e9d-d2de0970c336",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70986fb7-05b1-4d8b-8787-48cd0ecca9ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d101a0a-69b4-4b99-bcc4-e4fc3525ccfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9875db4e-3042-4662-b4a6-fefafd3a566d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee3ccabb-42b3-4735-bb12-a0796cce1cf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0636f88c-9dae-4cc5-825b-537e98322637",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "495ed89a-9f9c-4d75-a24c-7d6401c47877",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca65891f-f9a1-44fd-b363-ac8bf0e7a34b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0830fb4-b1a5-4c14-aafa-66d6f7258e2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60fc1938-7ceb-4627-b036-f012cff7d73f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b289a262-828a-4f87-bb4f-2406f42ef20b",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6db551ec-01ee-48e2-b526-13ab7f8c6578",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5af7daa1-b58d-4348-93ae-d581cc271605"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d099acd-8d7f-4bdf-b3e8-72d5839a5161",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fbdcec9-6680-4eb5-b196-373a798f815c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ccaedc7-8614-4a7c-a43f-45aaba0546ee",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e11bd63-517d-41ff-b30e-563a18d71992",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55b8ef11-b459-46cf-b22f-e299f9451442"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aad128f1-fc8e-4d5c-b229-033c032eea8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04b76793-4d18-4c9f-b442-c0666ef614f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9ca9070-de53-40e7-ba5c-30b6f1986bfc",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdf0866d-4245-49f5-9704-0f59f6b65c3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf07ee8e-e029-4c63-8771-889cba1de0ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83a2f968-8819-4508-aafc-7bf233617ced",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dbff378-3654-4d3e-af85-0b1e896a3792"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c7f34cd-6428-48e8-96c2-630e55bc7b3f",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "496ddc70-299b-4954-9531-765cbdd61a87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3707d8ef-e50b-4c74-8715-39df800adafe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd3646b2-33dd-4fcd-aa44-77f3b3d51f99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51199889-8199-426e-8594-b407b90ee0a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77b4b49f-8658-4475-9bb6-937588130e81",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6832b8b5-e84f-4656-8688-389930bece15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "968f2e3d-789b-417c-af77-3b13738f132d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f035c274-6ec9-404b-96f5-1ae89b7c106d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "665a25a2-c160-4136-82ed-e4a16c1d6af6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a63c3952-5376-473b-8944-095a5ea611b0",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f854777-02a7-4148-bbf4-ec9db1e664d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6792dc5-04b5-4927-ac30-4d17f4f558b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7834c5b1-8f03-458b-9917-e19e755ae090",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d3b6e5a-737e-4bc6-9e22-77cdad2834b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a97dc820-4431-4784-80d1-8c0deb6f5abb",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1471ae1-83be-400f-8065-d8e39427ac82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b52ee7c-062e-4f86-9176-830e0bb9cf1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dae701f4-89d4-430e-9bdd-cf3a174994ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ca758de-616c-4bdd-95b2-d563ef3d6637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "731b3846-86bb-4ca4-971f-e618d2ee7a92",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aed8b41-d690-4d8c-86af-b633a88a1c91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08975507-cb97-4eba-b457-6c0a052a5a65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11d70c7d-9c7e-4434-96bd-2e4f3290ea5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "426e4fc7-c1c4-4f81-8603-c8d9d2c03fa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "368d05dd-ed22-411b-80ed-0fb392e0072e",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4107cb8-4e19-4150-a0e9-d50491fa746d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9764abf5-ce9d-4dd7-8fc8-52c78954c045"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e29d9253-7b75-4b54-a2c2-a6e4423fec2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8701287-1a6a-4d67-a266-cd611f08256d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f00a40c-425a-489a-8427-cc6a73354fa5",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4880c64-b079-4002-b27f-02b7e84e926a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea195f1c-b037-46d2-9e0c-55ce9ca608c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "330a1efc-b64d-437e-bf79-3c7ae0875d43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa644ad0-14cd-4623-888e-9e85433fdc90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a4dea95-c188-4c3d-a443-f75f6f1957ae",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ba2919d-91a0-4130-8b8f-1e178d8ec04b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5fefb148-389d-44e1-94e9-7fd637c83a01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a743d488-a8c5-42be-b5d6-36c8995a300c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "084a82b0-10b1-4348-9bf3-a674a8507b13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b81cceed-f1c6-4f9b-96b1-df2210b05244",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42f081d3-b266-4cf2-8214-80005cc86b9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53c121c7-fe10-4ca5-af8c-c6ed49233eb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7573d46-4912-4f47-b658-00a293663ca0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa87478f-0972-4ac4-99a6-a65c0eac588e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d3eb6c6-f669-4bde-9ddc-e614a3dd5a10",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d418601-76a9-4f88-aad3-cb2b2a6893e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d628a30e-a2d0-4050-8d28-cc255eb7902f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4861c801-4d8e-4894-b342-8d9109fc8df6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "844a66a1-316d-4f54-afbe-2c23f136cfd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "615ab79e-03a1-43ad-a3c3-8e90c4338b38",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf9eb669-fa44-4c45-83d2-f75d86cbb2f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd0598f9-59dd-40f6-9318-2cdb20495038"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7d2d245-6653-4d1f-9440-f3e149ffdb3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "418399f2-ce29-4a8b-8fac-9461f1922a0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "634761bb-c2b9-450a-b44b-5ee67af7c94a",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05e9f77d-c3bf-43ab-ab81-c1d1021b99c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "207a6364-48c4-4cf8-a3a6-0f81f2caf693"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11c80b36-99a6-483d-aa0e-069a5ff83c60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ab8bbd6-3dce-4d1c-aa51-f19e889b2a84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "276fad0b-28d9-4fb5-b224-0c5b3ae64a32",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9793fab6-1956-47b6-9242-c38cb8e90fac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19728e9e-4c7d-4878-a344-0d77d575c8a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3faaa856-2344-473b-abc9-adf27e754d3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "143e3ef6-0ba2-4253-97ce-cdd851974546"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b586b97-8555-4a9f-86cc-934183e8beb4",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63684296-7a33-47eb-a925-dbae825ca939",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca34c4a1-ce8e-4a18-b8fb-6242f7fe1a64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbee68bf-f533-4868-8240-daaa013c8961",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bea4af3c-6bf7-47f6-9abd-3e5df78599b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8be06b5-ef28-48d8-8197-2018dfbf0091",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "270942e1-4946-4c2a-824a-0c8af9f3c1df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "020fbdc5-bba3-4738-b585-ed61e1d6db70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e9fba3f-6e7a-4621-8562-b1c42fe8c028",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e14269dd-95d4-4a0b-9408-7d2e2f01023f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e4bf3ec-4163-4a43-99cf-0ad3075eb517",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b29f16bf-caad-4cf4-b03c-5870281b70c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fffb6da3-3cab-44ee-b244-3117157d6b2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b88b8e49-7f82-462b-9be1-c5a9c678f2a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93c0adbc-dcbb-4b0a-b91c-8a076c2a666d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9e6fe7d-88e4-446f-81fd-f76dd122267e",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c894c139-97bb-4bfd-b051-468bd1ab87bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa6b06a6-2903-43f4-98f3-74e90482fba2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "effbb597-59a2-48e5-ab14-764568f6f893",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f49c2b7-7867-47ef-a989-08436ab366ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14f14e93-ec59-47ab-9872-1c2a6947bce5",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4320f124-ede2-42fe-b3f9-7df8551d67e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "254d895b-a82b-4a5c-9ff2-b9d0207462f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93341595-23f2-43c4-be75-d4bc78b95fe5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "461e599f-2b71-4cdf-9fbc-b37d4a236f0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "589d3ce1-3534-4840-9805-1e3266bbab05",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47f9e20e-4710-4b7f-93c1-3d6739d50d9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a9aed65-736d-432e-a9da-92ebf857601f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de1a2aa8-5c8e-48aa-b08e-b2aae9034bf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f642cdd-d64a-4c8c-ad96-9f7e64fb7a39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d427ec02-eafd-4b29-8c14-07743236e533",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5edee085-06bd-4fba-a06a-3bbc2f3bfa66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b3347ea-8047-4cd3-9ffb-277fd31b97ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "444880b6-6172-4c70-983f-43f14c726269",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "125db064-b28d-472e-829f-3213249e59a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "796e3e63-cd4d-43d0-8c6d-14d602113756",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88bf8e0d-5b47-408d-9d98-b0dc443d5f13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7b56a1a-3a7d-4919-848b-58a4dab7a193"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4d46b51-d78f-461f-8958-d9234fc9be42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af841b4a-346e-4632-904d-2c575891971e"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2111f692-2dcc-4f3a-aefd-adf2a84b38da",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "45d1be75-b6d9-4f71-a2d1-0c64d60c5477"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "81a79ccd-925e-4109-856a-f8674619dbea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d3852c27-1992-4ca5-a18b-6c6ca6e14704"
                    }
                  }
                ]
              },
              {
                "id": "467a939d-3c40-4318-b918-cb744e98578f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "72eb706d-009f-408c-a918-b7cf9bccc996",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf972801-0de3-4661-92cb-b0901ca5926e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "42623d7d-bd8f-4a3f-9fef-dad6f00da0a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "138004f8-2af2-494c-87ab-65ee5ef946d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c3240567-ef09-47db-8a97-554ce27918a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "489a440d-66f0-4282-860b-7650d01d8870",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e7e4a4a-ba21-44a5-8a55-7a0bf7f5c524",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "400d578e-19d5-4ab4-90aa-05388291b8bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1e77997-fdea-4492-8d65-0b861bcaf658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c89ea03d-d90a-48a3-9267-dc65ab9a6b80"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c86c51ab-2045-4dd2-bcd2-8bab1a27be8f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "264bb49a-96cc-4c46-97fd-7311bab30462"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7fcc9fef-83ca-4ac8-8764-512881351b26",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b1f416d8-a80c-43e5-9c2f-2abdc837428d"
                    }
                  }
                ]
              },
              {
                "id": "7e58b8e6-0912-4194-9bf1-58a6cb70a7e1",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "42d5a1df-fd48-4715-be6b-7248ca6a33c7",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "589c7fc0-8ea8-4f0c-8bbf-347ef6f476fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "b20be6ae-cd57-4b7c-b08d-826916c4d349"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "750eec29-267c-473d-9d48-c6b8468ebeb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aef93014-1f63-4843-94c3-b437e605e650"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "843fd6d9-53d9-4e36-b8ab-5a39166f8a95",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bd9129da-61dd-485b-bb75-b784eb7154dc",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0b4223b6-09da-4a9b-be2a-8ba1904c2ac7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "4e46b987-9008-47c9-9dea-f3facc63723a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7ebea70f-16b9-40e0-9649-b354acbec2d0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0720e215-c975-4357-838d-4f56cfa85b4e"
                    }
                  }
                ]
              },
              {
                "id": "cf4706a9-110d-4707-b04c-e5344f225b19",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4eaa4e51-c292-4e10-9b90-6a531254964d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "e9fcc584-3529-440f-b996-52ab1d12940a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8801cf98-69e2-48ec-8a7e-17de95d14a19",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "29f3241e-895a-4493-b7e0-aec28c287c39"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ab1c9708-ab5d-456a-b0a9-aef6a9ef81e5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "1fef24fb-acb7-4d66-b0be-ad6703d234a5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ec1d4712-d33e-4f55-80ea-4af6a716d8fd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0551ae30-c3da-4f9c-bb27-6d921fd460d3"
            }
          }
        ]
      },
      {
        "id": "07dd969b-9bcb-4e27-894a-619413703ccc",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "625d3f7f-99c3-4d2d-8048-5c57ddc6fd79",
            "name": "Negative Testing",
            "item": [
              {
                "id": "090a4ad1-869d-4e4a-b661-d98c2c71e7c9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "35de2b8c-ad0c-4f0b-86cf-e30807dd15c6",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b190826-7b1e-4ad4-9090-ce0c453eaa97",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "9dbdbdc0-dd8f-48ea-8fc7-4e2f342b0b9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e54b796-9f84-4652-a8e4-c02648f978e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6d552785-c23e-489e-b1eb-e8f2009b4167"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5974de40-d3fe-4d1d-a9d7-5b58fc3b9067",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "508c2eec-05a7-4620-932e-e65db62ce75b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d2d83b77-c061-4477-a1de-306abe3b8e07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bfeb298-f65d-4bb5-86f4-a83dadac5229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "71536ced-d2e0-472c-a29d-88127d024ab9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9ac00917-f202-4e88-bb7d-073c556f1e55",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6240a416-5977-44fb-8f74-cec696be2b95"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2b9976a2-becf-408e-b0cd-eb502fe8ac35",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "76fe5a84-3f70-4b72-9f91-338982b89bb7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1c902a89-d0ff-4e7e-8eb4-173180a71015",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "af4787a8-f51d-4569-a782-0d550dc88992"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "43534200-b830-4d69-9b2b-f3b9d6a13da5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6724c52a-84ed-40f9-a6bc-28eaf4fac0f4"
            }
          }
        ]
      },
      {
        "id": "af2dc77f-c913-4ec4-b5da-5b2e148f2198",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "8c7fa3cc-f7f8-46c8-946c-2fdd15f6ade0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "257a543f-8f9a-4146-81da-e5e0af30b96b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5e5fa7ea-2b68-4ef1-86ef-86c8e7501598",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e43fdcd6-8ed1-4773-a568-77a9b971ef98",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3d54fc4f-7afb-49e6-a88f-c2a0abcdf36b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5cc8029-6648-43cc-a70b-e57c544c1f4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d7bb17d2-a392-4b86-a707-b2b3fbd95a3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37a48ec6-70bc-47da-8ff0-fcc3f2794672",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dea46b98-7bcf-4697-a045-12142384325f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "cafa5523-d657-47d9-82c4-a313ac688fa3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e863361b-f0d2-49cc-92a0-53afdf8fa7cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bc271597-6d21-4d2a-9329-8cd9f9ea964e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5fcdbc38-becc-4453-ab09-c7f636d9d321",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bbb77711-8f2c-4bb2-8d31-85bc326d3fd4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a47d6f5e-256d-4eab-a276-9d30621dd4e5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5bf26d25-53d3-4192-8114-c0e80c371cf6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f2decd55-0282-4db2-b212-0c5661858d1c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "f02e0b10-5d48-4418-967e-e158936a9c8b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1d1dd548-3eb1-4a7d-960d-3f144c28581c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3e7efbde-4002-4569-bef8-1c930b2c6ea5"
            }
          }
        ]
      },
      {
        "id": "fac85a35-73f5-4c5c-b305-647e0abc5ea4",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "1ea32e13-f8f3-4be5-9447-8456a87f27a3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "83f20e89-0990-49af-a38e-186c9b9d7454",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4b22b131-3d1d-4cad-b504-2aa5f35c266b",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a386d06-9ac4-4ce6-b712-7dba39da4aab",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "8fa72ec3-ec26-4860-b280-49731eec2563"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c6ff292-5897-44ac-a273-a1dd379e1251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "de798409-5229-4ce4-baad-cdd57c4a8ce6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a88f0d8-b215-4d09-8bef-54f9bd633d7b",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff4dd023-8f57-467d-b446-f7f62b78e87c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "cc5bf8ae-5d3f-4234-a0fa-0883b27f1a55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afb01169-4b4e-42b7-bd06-925a3cc7bd1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3b3fb572-4b64-4012-aa45-3d654b0eb40c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c2688fcb-4bf9-408d-8552-2924c9481003",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ba47946c-6ca1-4de4-a331-7cbcb73285df"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d57b6f5a-f12c-42b2-b410-203c5f0bff62",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "74efe4ca-d54f-4541-bad6-36a0040e0c06"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ef7edf9f-b8a3-4387-b983-2906ee40f62f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "4655bb9f-16e2-4eaf-ba28-2d5b9599fe06"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4b3f9a14-a465-4185-a889-3fb4baa220cf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "97f325e0-6868-4525-9af2-a1fdc0ccd8b6"
            }
          }
        ]
      },
      {
        "id": "01b05b1c-695f-476b-bf08-4d94d703fd2f",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5fe8421f-2dfa-40b9-ace4-a62859e486cd",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1390913b-e201-4197-89d0-bb6c6b6fc860",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "3b208376-a85a-401c-b595-eef6b39b7282",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f8b2a36c-595a-486d-ad31-09ee9b4ad9cc",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c1ac3b90-b704-4654-839e-c8229109f6c6",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1917,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 261,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 515,
        "pending": 0,
        "failed": 39
      },
      "testScripts": {
        "total": 963,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 954,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 45.24137931034485,
      "responseMin": 23,
      "responseMax": 489,
      "responseSd": 51.52047515842235,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1676594645864,
      "completed": 1676594672304
    },
    "executions": [
      {
        "id": "e70ef4a4-a7ba-4381-b757-a86959adb2c6",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 252,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "30b992db-ea50-42ac-ae40-1b91e43e7506",
          "httpRequestId": "6e26851f-db50-4cf1-b5b1-92a4fa55b8b2"
        },
        "item": {
          "id": "e70ef4a4-a7ba-4381-b757-a86959adb2c6",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "b5114718-2ac9-4064-93dd-b04495cb7fd5",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 0
        }
      },
      {
        "id": "1b2907b9-017d-466d-a919-6be2c8b15786",
        "cursor": {
          "ref": "27c7b068-ef9e-4c8d-912b-46fabf438192",
          "length": 252,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d8f01c49-68b3-41aa-91e3-790836e09f79"
        },
        "item": {
          "id": "1b2907b9-017d-466d-a919-6be2c8b15786",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "c48f97d2-c046-420d-9ad2-c5d79ff6a9db",
          "status": "OK",
          "code": 200,
          "responseTime": 23,
          "responseSize": 0
        }
      },
      {
        "id": "57ba2ac2-6fe2-48ab-b78a-5d744c7ffd76",
        "cursor": {
          "ref": "dd330f9e-301e-45e3-a713-6d5fc882042d",
          "length": 252,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "6d00d8d5-80f4-4afa-89aa-575555814efc"
        },
        "item": {
          "id": "57ba2ac2-6fe2-48ab-b78a-5d744c7ffd76",
          "name": "did_json"
        },
        "response": {
          "id": "9d62f445-2b8a-41e1-9b7b-2a69174fb192",
          "status": "OK",
          "code": 200,
          "responseTime": 381,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33902bcc-f77d-4bde-84bb-5bb153da36c3",
        "cursor": {
          "ref": "4ce94419-be1d-4bab-9766-4ca8230a1690",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "70666bd9-c8d2-4812-a02a-821dd840c9f4"
        },
        "item": {
          "id": "33902bcc-f77d-4bde-84bb-5bb153da36c3",
          "name": "did:invalid"
        },
        "response": {
          "id": "f28b121a-0815-4611-ba06-2b0ed16faa78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "33902bcc-f77d-4bde-84bb-5bb153da36c3",
        "cursor": {
          "ref": "4ce94419-be1d-4bab-9766-4ca8230a1690",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "70666bd9-c8d2-4812-a02a-821dd840c9f4"
        },
        "item": {
          "id": "33902bcc-f77d-4bde-84bb-5bb153da36c3",
          "name": "did:invalid"
        },
        "response": {
          "id": "f28b121a-0815-4611-ba06-2b0ed16faa78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "c140c65b-72d1-4023-85e4-f69a054f940e",
        "cursor": {
          "ref": "840c54cb-c110-43ab-9255-23f4c58077e1",
          "length": 252,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "0fd5a1e9-8e96-4a65-892c-7d69dbdffda8"
        },
        "item": {
          "id": "c140c65b-72d1-4023-85e4-f69a054f940e",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "ddee9137-185f-41d8-a8c6-516298a0bf67",
          "status": "Not Found",
          "code": 404,
          "responseTime": 130,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fd0f3aa-261e-4ab2-99cb-966589b4e179",
        "cursor": {
          "ref": "1a3e96a4-2b63-46f0-a64b-6bc1ece8bfb2",
          "length": 252,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "7e00c98f-9b0e-420a-9af4-1169273a19e6"
        },
        "item": {
          "id": "9fd0f3aa-261e-4ab2-99cb-966589b4e179",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "9a842c3a-9d08-4cc0-b841-5c5283e6a9b1",
          "status": "Not Found",
          "code": 404,
          "responseTime": 32,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "868f5711-60ef-4517-a7cc-b2aa318c90de",
        "cursor": {
          "ref": "7d00ffef-14cc-4832-8ce6-5eba0a36c195",
          "length": 252,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "041b48e0-686f-40f0-96c2-6822728f190d"
        },
        "item": {
          "id": "868f5711-60ef-4517-a7cc-b2aa318c90de",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "6b78175b-d7b0-4c22-84d2-14ef8c179689",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05c34eec-8fd4-487a-85d5-0559564363b5",
        "cursor": {
          "ref": "82bd9368-c6ec-45bc-af70-e8fe0121e7df",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "4929c9a1-fb4b-4268-a682-51ec46a85fc1"
        },
        "item": {
          "id": "05c34eec-8fd4-487a-85d5-0559564363b5",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "e22b45b9-65b6-46b2-8c12-3dd9fa210115",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05c34eec-8fd4-487a-85d5-0559564363b5",
        "cursor": {
          "ref": "82bd9368-c6ec-45bc-af70-e8fe0121e7df",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "4929c9a1-fb4b-4268-a682-51ec46a85fc1"
        },
        "item": {
          "id": "05c34eec-8fd4-487a-85d5-0559564363b5",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "e22b45b9-65b6-46b2-8c12-3dd9fa210115",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f74bf2ff-5a7f-4a29-9e06-76a071467af3",
        "cursor": {
          "ref": "f33ff811-bf7f-4018-ac95-6b790373acda",
          "length": 252,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "54ae225d-7cf3-422c-a139-2de07b72d4c7"
        },
        "item": {
          "id": "f74bf2ff-5a7f-4a29-9e06-76a071467af3",
          "name": "identifiers"
        },
        "response": {
          "id": "86bf6eb7-e629-465a-8c68-7fdefc7c3a52",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99404b8d-4381-4439-b243-e696326f8858",
        "cursor": {
          "ref": "185475b0-09b9-4a9d-9a0c-6b3d0d676c82",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "43eb0fb6-1f13-41bb-b4cb-ad48d1689e61"
        },
        "item": {
          "id": "99404b8d-4381-4439-b243-e696326f8858",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "4cd1f24b-a965-4d9c-83ee-db234eee70c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99404b8d-4381-4439-b243-e696326f8858",
        "cursor": {
          "ref": "185475b0-09b9-4a9d-9a0c-6b3d0d676c82",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "43eb0fb6-1f13-41bb-b4cb-ad48d1689e61"
        },
        "item": {
          "id": "99404b8d-4381-4439-b243-e696326f8858",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "4cd1f24b-a965-4d9c-83ee-db234eee70c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "090f8c69-07ef-4582-83a7-2d25e52ff007",
        "cursor": {
          "ref": "ad3b3242-fa89-4668-a112-7bd783723c4f",
          "length": 252,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "5cf54460-e675-4a8d-8577-01a1d1a56149"
        },
        "item": {
          "id": "090f8c69-07ef-4582-83a7-2d25e52ff007",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "5472b45b-8040-4630-b633-b4a593fbf957",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdaae467-dffb-4d62-85d4-219e16ace444",
        "cursor": {
          "ref": "2428fcc2-3f84-452e-96ef-889c51f13f15",
          "length": 252,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "9b71f978-7926-47db-9d11-11187ee9d720"
        },
        "item": {
          "id": "fdaae467-dffb-4d62-85d4-219e16ace444",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "2b093c2d-17a2-4b30-bed8-5c3abbe5c777",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a76be9f-04b6-448a-be37-e4ee8eed4751",
        "cursor": {
          "ref": "687e7a22-81a8-4742-a341-771530449fcf",
          "length": 252,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "2b1d270a-4fd1-4c2b-8ec7-b66cdb9b5819"
        },
        "item": {
          "id": "0a76be9f-04b6-448a-be37-e4ee8eed4751",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "9cbc7518-432b-40c6-b1ff-d4641b861cd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4db37d66-8fa2-463f-b6ba-a7bd1fab99d5",
        "cursor": {
          "ref": "46f00943-9d41-4116-a7f2-320141ae95af",
          "length": 252,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "b778df8c-422e-4870-a6f9-2ce99456d5c0"
        },
        "item": {
          "id": "4db37d66-8fa2-463f-b6ba-a7bd1fab99d5",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "b1a34b96-569a-4c50-8e3e-680542c62c4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c4e169f-05b8-4f9c-84e1-b9d9bd714da9",
        "cursor": {
          "ref": "a2144df2-9e76-4496-8e1f-3cd9c006c8f9",
          "length": 252,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "800c974b-5ad8-4cf3-a8c3-bf29abccacb4"
        },
        "item": {
          "id": "7c4e169f-05b8-4f9c-84e1-b9d9bd714da9",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "4410d650-c11b-47cd-85fd-47c9cc8b1238",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9517a574-76aa-46c2-bf32-c623100d0f06",
        "cursor": {
          "ref": "14008603-a71e-4cc4-bb94-adfc4883bb0c",
          "length": 252,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "94faa6de-8f5a-4294-b61d-904bcae40a8b"
        },
        "item": {
          "id": "9517a574-76aa-46c2-bf32-c623100d0f06",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "10623773-8af2-41b6-ba1e-eae9484db714",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b44dbcb-e695-4c89-9ba4-7038c043b5c2",
        "cursor": {
          "ref": "73c86995-c4d3-49d0-80a8-613dbdd23190",
          "length": 252,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "940289e7-6298-4ce8-8548-a9a7fc9b4cee"
        },
        "item": {
          "id": "3b44dbcb-e695-4c89-9ba4-7038c043b5c2",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "7239c12b-5919-4caf-b7f5-9d2bcb0ad1fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "986312ee-0923-4f44-b8e3-c8046d9a65e7",
        "cursor": {
          "ref": "430bca48-ec9e-43f8-b1cc-1a5868dce46a",
          "length": 252,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "0b9e5e87-0d99-4341-ae51-4c2d4cc238a4"
        },
        "item": {
          "id": "986312ee-0923-4f44-b8e3-c8046d9a65e7",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "4cbf4632-4c2d-4f3a-8c67-424736ad790b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed6bbccc-73b3-4740-8798-99bae3eda627",
        "cursor": {
          "ref": "af96c03c-9ac6-49ca-a896-d23c4c467808",
          "length": 252,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "7e5f50cf-7648-4519-b023-f6436095d4b1"
        },
        "item": {
          "id": "ed6bbccc-73b3-4740-8798-99bae3eda627",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "b5e70eaf-9ef0-4854-acd8-b5fbd5322842",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4621ec6e-d892-442a-affc-a0816932eba5",
        "cursor": {
          "ref": "fbe870e9-1744-4a56-833e-67ef2a4e1e28",
          "length": 252,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "2b1dc4c6-1041-4503-b1e3-d56b90c697ab"
        },
        "item": {
          "id": "4621ec6e-d892-442a-affc-a0816932eba5",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "f0cd6000-373d-4673-9aad-b5bec6be3cd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e36abb9-ce21-40dc-bfc3-ea7813130c00",
        "cursor": {
          "ref": "5370f3b7-1091-41d1-9065-892f0d7a8f53",
          "length": 252,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "213a5f4c-7029-43ac-8145-a067ea7471c7"
        },
        "item": {
          "id": "6e36abb9-ce21-40dc-bfc3-ea7813130c00",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "19a8ee5c-ea9e-4af9-95fc-3bea7180c68b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d557972-c694-4a5d-b596-389d068f2023",
        "cursor": {
          "ref": "e1dd6d44-2937-4781-8099-67e36168d8a3",
          "length": 252,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "700ea7d7-38c9-4079-b060-f9141884ea17"
        },
        "item": {
          "id": "9d557972-c694-4a5d-b596-389d068f2023",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "b84cc5ce-aae0-4c12-96ee-cef5f3d25598",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73a05947-233e-44ac-9a98-4f96b5099ac5",
        "cursor": {
          "ref": "c9caf66d-6928-4bed-9a54-3683b60c7061",
          "length": 252,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "59ce5591-dc7e-4459-86da-232cb64b3c66"
        },
        "item": {
          "id": "73a05947-233e-44ac-9a98-4f96b5099ac5",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "28b71a4c-87b5-41b9-86cb-1d93833b465c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cafac55a-9048-4de6-970d-8ddba7323bbe",
        "cursor": {
          "ref": "6bb89ae1-0bcf-4791-92c3-ff8f9fb0089c",
          "length": 252,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "8888dfa3-9d4c-4a85-bf2a-1c056f7f6f1f"
        },
        "item": {
          "id": "cafac55a-9048-4de6-970d-8ddba7323bbe",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "951b6f95-99b8-48e7-9980-261b65a6ce15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ce71417-5c0c-420c-b46a-892c9c60a12d",
        "cursor": {
          "ref": "0880d289-4dd9-4968-8819-6d69d086bdfd",
          "length": 252,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "7ad15199-ad01-49ce-a922-1a654f103231"
        },
        "item": {
          "id": "4ce71417-5c0c-420c-b46a-892c9c60a12d",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "78532830-d1e8-4dd1-a79a-19915668b300",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "972ef195-c3cc-4f1d-8616-26b7cfeef560",
        "cursor": {
          "ref": "d4bd19fe-1068-42e9-8be0-13c1132b72af",
          "length": 252,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "3b2d1546-9922-48fd-be42-07ed8f7b3b8b"
        },
        "item": {
          "id": "972ef195-c3cc-4f1d-8616-26b7cfeef560",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "55b86a40-b455-46f6-9dd6-5b67f7f205be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f6c79a5-125c-44ea-92cf-e6441bb74833",
        "cursor": {
          "ref": "2a89d093-9fab-40e1-bcea-1a441e423ccf",
          "length": 252,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "a1c34c23-2a4c-4cb2-b7c9-fa15e2c1195d"
        },
        "item": {
          "id": "6f6c79a5-125c-44ea-92cf-e6441bb74833",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "18c5eb1d-b0c4-4ac6-9a54-62e08881b288",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "241f19aa-80d4-4d3f-b441-429d4f02d6d9",
        "cursor": {
          "ref": "96ee3f0d-fad3-449f-b75d-21bc31a0f9bb",
          "length": 252,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "e10e1042-bd89-4268-a034-846a41b259cf"
        },
        "item": {
          "id": "241f19aa-80d4-4d3f-b441-429d4f02d6d9",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "40bdc5bb-cb20-4e00-92d1-368947f89bfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b90eb070-9d9c-429b-8201-0f046d8c6370",
        "cursor": {
          "ref": "36d1b94a-5c0c-4d0d-a3a8-911b0bbeeb5a",
          "length": 252,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "cf9aaab1-c2ef-4e46-bba4-07b3bb25b509"
        },
        "item": {
          "id": "b90eb070-9d9c-429b-8201-0f046d8c6370",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "bc294e7e-9e7e-4535-9ece-1a86706bd258",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5dc58d2-5555-420d-b734-9d86c004847a",
        "cursor": {
          "ref": "1697904f-b6cc-4b6f-965f-b098ca64a9db",
          "length": 252,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "df74d234-0236-4cbb-bef9-6d42f6aeb2cd"
        },
        "item": {
          "id": "d5dc58d2-5555-420d-b734-9d86c004847a",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "f34f01e1-4f2a-4ef1-ac31-8a897fca5e7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f71f05d-a121-4e23-a660-fb21cdc6fcca",
        "cursor": {
          "ref": "dabbbb8f-e26a-4ed7-91f2-e3d2e5ab9a74",
          "length": 252,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "76558788-bed4-43f9-bf4f-130f2bb10f57"
        },
        "item": {
          "id": "7f71f05d-a121-4e23-a660-fb21cdc6fcca",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "215f4d99-82a3-475c-8749-ccf6876f2ed4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64ce3cab-c48e-4e2f-b226-8f6eae40e240",
        "cursor": {
          "ref": "80d80437-b951-4015-ba24-6129e5002c51",
          "length": 252,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "c0cae8a1-4ae9-495b-8aa2-0ef5680b3b96"
        },
        "item": {
          "id": "64ce3cab-c48e-4e2f-b226-8f6eae40e240",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "91ecbb4c-8ca1-4d30-87d4-9849fadbe27a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a497509c-bb42-4bb6-afaf-847c61cd5bad",
        "cursor": {
          "ref": "74fc668f-f32d-4d73-9c0d-16932ce290ee",
          "length": 252,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "5e059e06-5473-4b31-9cb8-3a46a079acc1"
        },
        "item": {
          "id": "a497509c-bb42-4bb6-afaf-847c61cd5bad",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "aa60445b-3b0e-43d9-a9e3-57483d7f7fd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70abb4ed-c0a4-437d-bb9b-45ca67f0f39c",
        "cursor": {
          "ref": "68a84673-8f63-47e3-a01f-505625f5aeb5",
          "length": 252,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "47e551f3-c2ea-4e30-ad82-0097df220f20"
        },
        "item": {
          "id": "70abb4ed-c0a4-437d-bb9b-45ca67f0f39c",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "f6650b16-8c92-4e57-b468-59ccacd62911",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2459f8c0-c9a9-4eda-8923-4e698ecba22c",
        "cursor": {
          "ref": "5ebf561c-9107-4e90-8af8-1ef112eb8cae",
          "length": 252,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "73e25a3f-38ef-431b-9017-6d813e76d07b"
        },
        "item": {
          "id": "2459f8c0-c9a9-4eda-8923-4e698ecba22c",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "295b4fef-669f-4649-80b5-91f1099247d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25bd0001-4cae-471c-a6a2-a76aa3be0460",
        "cursor": {
          "ref": "222c9238-9920-46d0-9224-14a65a7c098b",
          "length": 252,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "b0da2df9-ca7d-400b-8934-b313cf84c4a1"
        },
        "item": {
          "id": "25bd0001-4cae-471c-a6a2-a76aa3be0460",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "b41cfdd7-e593-4d35-a61b-c354dd09e779",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "091ddf0d-2e99-4a3b-b01a-287b406d07a3",
        "cursor": {
          "ref": "675aaaef-338c-4c46-8cfe-93d9444226aa",
          "length": 252,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "e1ae8f51-f93f-4e6b-bde6-c8a407ed9496"
        },
        "item": {
          "id": "091ddf0d-2e99-4a3b-b01a-287b406d07a3",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "91d8ca5b-6f1d-49cd-ac87-2a7e529d6134",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bed1af0d-5b23-49c8-b77c-c2111aa9c60f",
        "cursor": {
          "ref": "832a9dac-029f-4bef-a1be-6cd4d544b1c7",
          "length": 252,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "2b8dc576-23e3-4579-8891-643ad00eb4d3"
        },
        "item": {
          "id": "bed1af0d-5b23-49c8-b77c-c2111aa9c60f",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "776450f5-656d-4943-95f5-df34dce8dcc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd128ab6-c5eb-4ebf-9f04-fee3993f0adb",
        "cursor": {
          "ref": "6dfbb9fd-bd13-4928-8a04-8403045807fe",
          "length": 252,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "326a7beb-61c8-4e2b-9175-cae7add61c6a"
        },
        "item": {
          "id": "bd128ab6-c5eb-4ebf-9f04-fee3993f0adb",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "7db9aeb0-d387-4c83-9a59-f285070aeaeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8ee82c3-fb33-43fc-bec3-fb828bf5543a",
        "cursor": {
          "ref": "8759113c-c589-475a-8a61-c7547dd88fd9",
          "length": 252,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "79ad09e4-ffbc-4528-a1fc-3e911acd0cc9"
        },
        "item": {
          "id": "a8ee82c3-fb33-43fc-bec3-fb828bf5543a",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "019c213a-8f7f-4858-bbea-b556916c195c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be99ee8b-8096-4e21-b7d9-12c2a35e2ecb",
        "cursor": {
          "ref": "82c5733a-d56c-4e23-9113-5c215696f20f",
          "length": 252,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "4743f3f6-904e-4078-b435-9a2e26a0ea17"
        },
        "item": {
          "id": "be99ee8b-8096-4e21-b7d9-12c2a35e2ecb",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "d1fbb24c-2963-4fcd-aa7a-3591318db185",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2881c88e-df95-4d5e-8d7b-4bbdb68ca3e9",
        "cursor": {
          "ref": "9930d73f-d6b7-4f90-b538-5d591f357061",
          "length": 252,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "6b6ff402-2beb-4bf5-a0eb-3d5a04708b2b"
        },
        "item": {
          "id": "2881c88e-df95-4d5e-8d7b-4bbdb68ca3e9",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "9f374e87-7763-4649-9f5d-e8ac15ef5a47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "463cfa06-0ad2-4df1-853b-57b83eca153e",
        "cursor": {
          "ref": "0ca30032-bcf6-45a4-957b-397b796006b5",
          "length": 252,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "9ddabfec-e6ba-4d23-bb8b-9a19ad858f4d"
        },
        "item": {
          "id": "463cfa06-0ad2-4df1-853b-57b83eca153e",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "f6604a5a-c4b5-46d6-9d64-d22c6934e769",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f39daab-8624-44bd-907f-3507dbf4e160",
        "cursor": {
          "ref": "c97907dc-f57b-48c2-bf59-6678022d27c6",
          "length": 252,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "27c4ea95-8a62-4a9e-8e53-32e4d9dde49d"
        },
        "item": {
          "id": "8f39daab-8624-44bd-907f-3507dbf4e160",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "81484583-a9e0-43cb-bb2d-9a3665d052d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9180546-02e7-4111-ad68-361768fa10f3",
        "cursor": {
          "ref": "c79b12b4-5451-4e49-8260-08b3611933fd",
          "length": 252,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "be380765-aff8-4a6d-821d-6bc98a4cff80"
        },
        "item": {
          "id": "a9180546-02e7-4111-ad68-361768fa10f3",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "0cfb1990-da01-4188-9226-a08ccb15fbef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fc65d12-7e40-4b5b-b9f4-be4dde0d9080",
        "cursor": {
          "ref": "f7f5617d-b780-47f3-9a34-88799a727973",
          "length": 252,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "f465ad56-6960-4753-938f-f586af9ccc5d"
        },
        "item": {
          "id": "7fc65d12-7e40-4b5b-b9f4-be4dde0d9080",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "60fbb502-b774-495f-97f9-31785f744399",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "38559a21-978b-495c-bb5b-08432b513079",
        "cursor": {
          "ref": "3ca2fdea-bb88-42e3-8022-5d4954cbc973",
          "length": 252,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "14386ba7-699c-4b95-9270-2d2ddff3f923"
        },
        "item": {
          "id": "38559a21-978b-495c-bb5b-08432b513079",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "81049d55-9186-4868-8f74-a37c8d81d64a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e58c3cd5-5aaa-4d2d-8740-e5bccd06ef3e",
        "cursor": {
          "ref": "0030044e-23ed-4a0e-a21f-f2f5348e735a",
          "length": 252,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "22f132f3-f415-44e7-a1c2-a406ae620353"
        },
        "item": {
          "id": "e58c3cd5-5aaa-4d2d-8740-e5bccd06ef3e",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "bfae6987-5297-462d-8d76-d892bdd48f56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36ecfe1d-2f7f-47c7-b630-105940bafb18",
        "cursor": {
          "ref": "187a487b-f48d-4761-bf34-4a07dd4ba8b2",
          "length": 252,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "5250209a-d277-44c0-89f6-9104e7134cb9"
        },
        "item": {
          "id": "36ecfe1d-2f7f-47c7-b630-105940bafb18",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "fec0a557-0a9b-473f-8522-bdc9f27bf0e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bdf3c1f-e27f-4d64-a527-815450005da9",
        "cursor": {
          "ref": "3ca3a109-7bd7-4609-ba16-08902e4f8a81",
          "length": 252,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "f011b759-5f00-48af-bf16-21d3a8b141ee"
        },
        "item": {
          "id": "8bdf3c1f-e27f-4d64-a527-815450005da9",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "f9d7626c-5b1f-4d97-bc4f-b67b4be287da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b0d5245-3043-440e-85c7-cd2e7e134ff3",
        "cursor": {
          "ref": "efc84103-a808-40d5-8ee1-f9aa832f95e1",
          "length": 252,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "9a6458e3-b0e8-4d08-8882-d15faf739de8"
        },
        "item": {
          "id": "7b0d5245-3043-440e-85c7-cd2e7e134ff3",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "e5217e15-05f0-430c-9e59-ffeb7778d21a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42cc5dc8-f001-40a5-a2e6-b429bda99732",
        "cursor": {
          "ref": "41d8b319-0773-49e9-85f2-4f0328e7e7a8",
          "length": 252,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "6eeca3f0-8bf2-4099-b4ae-dd3002050d9e"
        },
        "item": {
          "id": "42cc5dc8-f001-40a5-a2e6-b429bda99732",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "f763209d-51ea-4627-983f-54fb16103d6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c3329a7-a425-4c5e-85b5-0c8f32dd2cb7",
        "cursor": {
          "ref": "f360acb1-0ddd-43a7-9496-6a18bd8e96b9",
          "length": 252,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "3dbbe5a2-bd20-4ae4-bf88-268c16c1a44a"
        },
        "item": {
          "id": "5c3329a7-a425-4c5e-85b5-0c8f32dd2cb7",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "c95b0fa6-8272-4fe8-91ee-48627278fe7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "af83374b-6ec5-4a01-a37b-c8d0362e511f",
        "cursor": {
          "ref": "7594d20b-af74-44a4-b21c-7fd2c97b04b4",
          "length": 252,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "afb4e418-a9c9-40a4-ba2b-bb42a61df608"
        },
        "item": {
          "id": "af83374b-6ec5-4a01-a37b-c8d0362e511f",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "2916f6e0-265e-49f3-ac94-fac89e8e96c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1530a30-b658-4616-89a9-417d2ba29fcc",
        "cursor": {
          "ref": "af55d137-17a1-48a7-bbd5-6af6332ba9be",
          "length": 252,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "21f77922-b5f4-4809-8fa5-2673ea9fdd64"
        },
        "item": {
          "id": "c1530a30-b658-4616-89a9-417d2ba29fcc",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "bca67e12-c48a-40b7-9358-487c7dc8773b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcdbb549-a7f8-43c7-99de-ab22286ec10a",
        "cursor": {
          "ref": "79936ec2-82cf-4d36-8357-11ee4eff575c",
          "length": 252,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "4f66c73b-bf37-4978-999c-e834e56fe607"
        },
        "item": {
          "id": "fcdbb549-a7f8-43c7-99de-ab22286ec10a",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "90b33a1c-0daf-4f24-aa5f-74c3d22a8ff2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a23ea158-b0af-40d4-a24a-cbee2e83e256",
        "cursor": {
          "ref": "8838b8e6-b459-4055-8830-d1e0e093899c",
          "length": 252,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "ff1080b2-2bd5-4087-a9ca-652215b95e63"
        },
        "item": {
          "id": "a23ea158-b0af-40d4-a24a-cbee2e83e256",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "9a7ffd41-f761-4be0-8be1-6a46239dd019",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47cc02c6-f4a4-4231-bc39-faa71e037e7c",
        "cursor": {
          "ref": "dd4cfd60-6caf-4165-9333-edd8f00e51e3",
          "length": 252,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "7e8e61a9-3b94-4e53-86db-a20e3ed67a1c"
        },
        "item": {
          "id": "47cc02c6-f4a4-4231-bc39-faa71e037e7c",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "450dcf53-e532-4672-890e-d79f36c6e27d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "368d524b-f843-4ab9-8e9b-fadf649b835a",
        "cursor": {
          "ref": "f0e8c52f-f3c8-42ca-b62c-28c2dcea0f65",
          "length": 252,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "eee773c9-b6e9-47c3-a40b-f08e99a5a65a"
        },
        "item": {
          "id": "368d524b-f843-4ab9-8e9b-fadf649b835a",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "677a65fa-933d-4a26-8fe0-1baeec712382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec813f4a-a886-4f02-9bfa-cb3153a2b4b2",
        "cursor": {
          "ref": "851f1e8b-acb9-46fe-8e65-7a0c6a86e182",
          "length": 252,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "9fdf6a92-5be9-4143-aceb-a68252d7a106"
        },
        "item": {
          "id": "ec813f4a-a886-4f02-9bfa-cb3153a2b4b2",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "6fabfb07-3fd3-46b8-b373-27b192fcabc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53edb7e4-8a61-4c0b-9244-1aa61d357a65",
        "cursor": {
          "ref": "1355f8bf-0c96-432f-8e0e-f37c38b06ba2",
          "length": 252,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "6727c96d-0e10-44c9-9f65-e9ff2b106c2e"
        },
        "item": {
          "id": "53edb7e4-8a61-4c0b-9244-1aa61d357a65",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "23243812-4d45-4adc-8209-8ecc32957664",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a4f7bf2-5201-4a39-aae9-dea26dc05f2c",
        "cursor": {
          "ref": "7d57af95-9aea-4564-8254-0dcb9e5683c9",
          "length": 252,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "f54731a7-3011-4a15-84e9-c8cc9e67f7a9"
        },
        "item": {
          "id": "7a4f7bf2-5201-4a39-aae9-dea26dc05f2c",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "20db9861-26c1-447e-a575-798cef9f3ca2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "484f46da-e7c1-4f67-9b1e-a067975b9a68",
        "cursor": {
          "ref": "48a4990d-6ced-4790-86b9-0dcddb92f82f",
          "length": 252,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "853b20e4-c55b-4f07-b27c-b3bfb04334d2"
        },
        "item": {
          "id": "484f46da-e7c1-4f67-9b1e-a067975b9a68",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "f4da692b-c536-40c2-9058-7a26973e7781",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cfd0cce-a004-4151-94a7-fb75f8a911e0",
        "cursor": {
          "ref": "a8a99f86-bf98-451f-89bf-77e24e01def5",
          "length": 252,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "d53cd14b-6748-4425-9089-46a4da4a0533"
        },
        "item": {
          "id": "7cfd0cce-a004-4151-94a7-fb75f8a911e0",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "c7901055-69d9-4a44-b040-8355e30f7d13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dcef82a-a6df-4712-b322-066ddc29d8bb",
        "cursor": {
          "ref": "de34f148-6f4a-4a98-b3e5-ee0c47e3bc86",
          "length": 252,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "d4e5e29e-069b-4527-a837-0fa8cbcfc289"
        },
        "item": {
          "id": "8dcef82a-a6df-4712-b322-066ddc29d8bb",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "4344d85f-a54d-4378-be8a-356f675b42dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "218b0a07-877a-4df9-81e4-b29b5d917132",
        "cursor": {
          "ref": "97d1a91d-5a6a-4a1d-b68b-f394300f3f39",
          "length": 252,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "dc10fe16-e95f-4191-a0b5-806a7a78075e"
        },
        "item": {
          "id": "218b0a07-877a-4df9-81e4-b29b5d917132",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "f97a46f2-d2d9-4ad5-99dd-dda4046f5eb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f44364e-c046-43e8-95ee-51c4bb7f3976",
        "cursor": {
          "ref": "af5473b7-b9b0-4730-9ff6-be994341916e",
          "length": 252,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "f833088c-d99f-4702-8c3e-51998f3024ed"
        },
        "item": {
          "id": "9f44364e-c046-43e8-95ee-51c4bb7f3976",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "38a9bba8-17ec-4722-8f16-c12d85e83d45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71427e81-ebca-4d41-bf7b-ffdf83d20489",
        "cursor": {
          "ref": "7618920e-e2ff-4f06-91ab-3711199787ac",
          "length": 252,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "2f8f1a00-2c8e-424e-bb62-6d33857c11ec"
        },
        "item": {
          "id": "71427e81-ebca-4d41-bf7b-ffdf83d20489",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "f353d03e-3811-4f00-ab73-daf4086f49ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06ac89d1-99e6-4038-8ab8-c972bca0006a",
        "cursor": {
          "ref": "4d3511d0-5a16-4879-bd62-993d7981d7c7",
          "length": 252,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "d381e7f4-f8ac-468e-a98e-9f337f8a05e5"
        },
        "item": {
          "id": "06ac89d1-99e6-4038-8ab8-c972bca0006a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "6aa5f6e2-b508-468d-b09c-3fe04e205e43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02abc5d5-65e8-479d-8ccb-b44221027ca5",
        "cursor": {
          "ref": "575f8761-3f72-4c02-b6f3-14e7304dc89b",
          "length": 252,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "ef608088-bf39-4f23-a32c-e4d07c4ab00d"
        },
        "item": {
          "id": "02abc5d5-65e8-479d-8ccb-b44221027ca5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "fca032c8-720c-440b-9651-a3ecb53f8c9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26842cbb-a5dc-40ba-a835-c7a191d3fcad",
        "cursor": {
          "ref": "2c94dde2-1826-4d5b-bc14-d5c7c2c7494e",
          "length": 252,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "0588febe-3ae1-415f-be1b-389994ffc89a"
        },
        "item": {
          "id": "26842cbb-a5dc-40ba-a835-c7a191d3fcad",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "d5f1aa68-189a-4f6b-8e12-14cd71741598",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdaf6be9-098b-4f41-8982-ee35066eec3e",
        "cursor": {
          "ref": "b2fcba3b-0c57-4817-b9b3-ddea925a5470",
          "length": 252,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "f5772661-bbba-4c68-a04a-dc7a6841172a"
        },
        "item": {
          "id": "bdaf6be9-098b-4f41-8982-ee35066eec3e",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "d530b45b-dcd0-4a74-b9bb-e94f048dcac8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62d80047-1d2e-4535-8700-dded0bd96fe4",
        "cursor": {
          "ref": "0be67874-b548-41ae-b792-af4dac1b8456",
          "length": 252,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "2b04745f-f59f-49ad-a312-154fca427d0d"
        },
        "item": {
          "id": "62d80047-1d2e-4535-8700-dded0bd96fe4",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "ec2a9e2f-c834-4a74-8d86-08e045673077",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 684
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fce87691-58de-4e06-bef9-7c8e64da97c7",
        "cursor": {
          "ref": "697f21e4-991a-4259-9fbd-750d212badf3",
          "length": 252,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "77f89ee1-eb5c-4ab9-aee9-be1bc85f93d5"
        },
        "item": {
          "id": "fce87691-58de-4e06-bef9-7c8e64da97c7",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "8cf3e1eb-74ad-46e9-baa2-08b59b0542bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e6ccbf4-ee8b-4324-af93-d1f93f36861f",
        "cursor": {
          "ref": "296014bc-f64a-4f8d-ad6f-49a8682260bd",
          "length": 252,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "1c9e2640-f1eb-447f-bb54-a9c24bbc6583"
        },
        "item": {
          "id": "6e6ccbf4-ee8b-4324-af93-d1f93f36861f",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "e0f2f7b7-406b-424a-bb2b-55f0bddaf128",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60359b8c-9398-4e97-8365-9477c22a4819",
        "cursor": {
          "ref": "d45d8958-eee0-41e3-906c-84fcb67e0a6f",
          "length": 252,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "8112334a-9023-47cd-b282-555a78b4e5be"
        },
        "item": {
          "id": "60359b8c-9398-4e97-8365-9477c22a4819",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "5feb1865-58f4-4c51-9c00-ec00cfd414e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dcc0efb-c04e-4cfa-9ef8-fc0612f27de8",
        "cursor": {
          "ref": "3ae31b2a-ad9c-41cf-8761-f67e6676a886",
          "length": 252,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "456c36bf-83b9-4633-a9f5-251de3b18f7e"
        },
        "item": {
          "id": "4dcc0efb-c04e-4cfa-9ef8-fc0612f27de8",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "9df691c8-c264-4c5d-85ad-d99c5f5c8e5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d535b89-b305-4de3-8d4e-3d1f6325f6da",
        "cursor": {
          "ref": "35373be4-1b78-4a75-a51d-845c7f50cfff",
          "length": 252,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "05a92797-dfdb-456a-876b-ac7a73320317"
        },
        "item": {
          "id": "5d535b89-b305-4de3-8d4e-3d1f6325f6da",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "71568396-4686-447c-9d8f-d5bf23c1a534",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95b655d9-854e-4eb3-9fc4-2c553d57905d",
        "cursor": {
          "ref": "51d7a5ea-7d8a-435b-bcf9-5a418d1c6200",
          "length": 252,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "c282b9b6-d79f-4561-9de0-49fed2c33aa9"
        },
        "item": {
          "id": "95b655d9-854e-4eb3-9fc4-2c553d57905d",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "3dfbab2a-8dc9-47ec-bba6-234449d95246",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b075bdcc-c57b-4a95-a263-b0d031e36ca9",
        "cursor": {
          "ref": "7c49edfd-7795-4a02-9c3f-66d584a6d198",
          "length": 252,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "147f9b7e-5dbd-4b24-93c4-54efbc60d683"
        },
        "item": {
          "id": "b075bdcc-c57b-4a95-a263-b0d031e36ca9",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "59b22e91-08f6-471f-81ef-548ee2e95d37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b9439ca-4d2f-4696-a303-aa8dc33524ba",
        "cursor": {
          "ref": "9c061944-3d36-4999-9743-99d83ba669d0",
          "length": 252,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "e42ce2bc-f653-403d-a433-f0dae5a315ed"
        },
        "item": {
          "id": "6b9439ca-4d2f-4696-a303-aa8dc33524ba",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "135c43bd-b719-44ba-a325-452cfe19510f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52f3b677-ca51-40b1-a22c-8b19b9d5b231",
        "cursor": {
          "ref": "fd8d6ba7-177f-402b-8719-03b44f2cd32a",
          "length": 252,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "a5459494-b744-43df-b923-fe34f50d0d63"
        },
        "item": {
          "id": "52f3b677-ca51-40b1-a22c-8b19b9d5b231",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "5ab2745f-d6d5-426b-8009-daf3ad46e32b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4a05811-d5cb-41f4-ae96-67d333fe31d4",
        "cursor": {
          "ref": "733fe505-3316-4f72-a613-9800fb024075",
          "length": 252,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "5a0181f2-3d8c-4586-813e-cd725f9f31aa"
        },
        "item": {
          "id": "e4a05811-d5cb-41f4-ae96-67d333fe31d4",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "7d3e39ad-a083-4c5f-a596-a2cc5a995f60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c4bf70f-e947-47f2-a476-6b6e809fc94d",
        "cursor": {
          "ref": "5c40748e-03ef-45e4-a290-a6b495f57e59",
          "length": 252,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "a7d1f204-d4af-41e0-8cc2-d5ab6a4cf7f2"
        },
        "item": {
          "id": "2c4bf70f-e947-47f2-a476-6b6e809fc94d",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "22fff614-655b-4ddf-83c3-d873db477802",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab58d27f-0a37-487c-a767-39a9a5bd8e7d",
        "cursor": {
          "ref": "931105c8-4441-4e7c-8fbc-ffe62c3b3488",
          "length": 252,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "0b65ca22-414a-47b1-a5e8-d47d4baeed99"
        },
        "item": {
          "id": "ab58d27f-0a37-487c-a767-39a9a5bd8e7d",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "221f44e9-9f19-490d-8e83-9e19a7da42d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "932ca4fc-38f8-42b6-bb79-206531ccc450",
        "cursor": {
          "ref": "e1837504-291d-4dcd-bb74-926b97420c77",
          "length": 252,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "9ba01797-db5a-4d58-82a9-3a90efe3d679"
        },
        "item": {
          "id": "932ca4fc-38f8-42b6-bb79-206531ccc450",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "eb1e513b-bd93-416a-be5a-5ad4233a6ee3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8112e575-2650-4e0d-9dbf-1378939f7fb7",
        "cursor": {
          "ref": "7b612cda-01e9-49e7-b1c6-05c615034571",
          "length": 252,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "4e98f9ed-225f-45dc-bfc2-484d66d97629"
        },
        "item": {
          "id": "8112e575-2650-4e0d-9dbf-1378939f7fb7",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "128f8089-d2ee-4207-95b2-76c9ccd7766e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab8d98ac-2003-4b40-9e2e-dc8729cd9795",
        "cursor": {
          "ref": "79b3ffe6-8051-4f7c-81a6-c7bf0b5a582a",
          "length": 252,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "03e8bff2-86f8-4206-89c0-7d9386707f43"
        },
        "item": {
          "id": "ab8d98ac-2003-4b40-9e2e-dc8729cd9795",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "ea196d2f-bfc8-4cb8-906f-de82095d5c6b",
          "status": "Created",
          "code": 201,
          "responseTime": 87,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "c234adc1-aa0a-4356-9689-580004b19b59",
        "cursor": {
          "ref": "d6c8d52a-903c-4731-bdca-e0b9078e204b",
          "length": 252,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "6644c19a-1c1c-4ba3-beaa-3b951d1c7efc"
        },
        "item": {
          "id": "c234adc1-aa0a-4356-9689-580004b19b59",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "7ad46077-5244-470b-a2aa-a298fff84abc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77fae3d1-cd91-4636-bc35-4fff48970279",
        "cursor": {
          "ref": "2980975a-d804-44c8-b817-f03c9d0cd8c1",
          "length": 252,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "6215f69b-2d90-4aa2-92ba-1acad7dde46f"
        },
        "item": {
          "id": "77fae3d1-cd91-4636-bc35-4fff48970279",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "28f2ebab-d468-44e0-891a-187b2857ed09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdf95100-f777-4bdc-9d9b-e5b7e23278b3",
        "cursor": {
          "ref": "746b4b9e-5261-4fec-9a3d-cbf9443febbb",
          "length": 252,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "54488ff3-96a0-4a05-b90c-41ab95be76ca"
        },
        "item": {
          "id": "bdf95100-f777-4bdc-9d9b-e5b7e23278b3",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "bd38dfe7-48ca-4ada-b10c-d1fc02e3444d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 515
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb7cc424-3e48-4029-8e76-9034875f1ed1",
        "cursor": {
          "ref": "82e794d4-5c0e-4049-812f-2435bf240b3c",
          "length": 252,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "211ac103-937c-493c-a584-7ffd5e81b107"
        },
        "item": {
          "id": "cb7cc424-3e48-4029-8e76-9034875f1ed1",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "8d56f160-7427-45b3-a124-c2e068786db2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 514
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6093ebb1-2969-43f9-b319-640d6f77b680",
        "cursor": {
          "ref": "971a6dd0-3679-45ac-b6de-0905d3e0c32b",
          "length": 252,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "75a81523-7d04-4ebc-b0d4-a081a189273a"
        },
        "item": {
          "id": "6093ebb1-2969-43f9-b319-640d6f77b680",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "fb578d7b-8ed6-4b51-acd5-5b5b235825d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8eb32ea-72fd-4f89-8c7a-6e4cbfbc9fe4",
        "cursor": {
          "ref": "01216dfb-1630-4df3-baa1-6453b5300169",
          "length": 252,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "e371902f-45c2-4e30-b777-307e31e85c39"
        },
        "item": {
          "id": "b8eb32ea-72fd-4f89-8c7a-6e4cbfbc9fe4",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "490fb480-a06a-4f2c-b3d0-461cb9b0daeb",
          "status": "Created",
          "code": 201,
          "responseTime": 50,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "3e36f7e3-4888-44d2-afec-7b0a6933e611",
        "cursor": {
          "ref": "15d008e0-ec8a-453e-bb0d-946a664f1975",
          "length": 252,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "80fb2a6a-6aa4-4b34-ab1d-e34e7afc7ae5"
        },
        "item": {
          "id": "3e36f7e3-4888-44d2-afec-7b0a6933e611",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "c5348ec0-dafa-402e-bf4d-f1153c52bcc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71af7f3b-fc27-4cdf-8e35-a3ec8507053c",
        "cursor": {
          "ref": "35d83b45-31d3-4dcc-8763-7d76192e919f",
          "length": 252,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "41e23065-d8a8-48fb-8776-3fbecceb0d72"
        },
        "item": {
          "id": "71af7f3b-fc27-4cdf-8e35-a3ec8507053c",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "977a275f-26c5-4ccd-abe3-976b19341a69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17dc37f5-7325-4b71-86eb-4ecc4ba36885",
        "cursor": {
          "ref": "ef6b4346-f2e6-4533-bed2-fd4a8681ae7e",
          "length": 252,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "1394c70e-da2a-4e83-aca8-7a508effee49"
        },
        "item": {
          "id": "17dc37f5-7325-4b71-86eb-4ecc4ba36885",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "7ccc3c71-c27d-4b03-911a-66024e512214",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8c6c721-5800-409f-bca5-f23375df0703",
        "cursor": {
          "ref": "c92ebfc8-59e4-41db-a144-958f73851005",
          "length": 252,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "76da6cf9-6a6b-4763-896e-80f65922756e"
        },
        "item": {
          "id": "d8c6c721-5800-409f-bca5-f23375df0703",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "6111587a-db89-4ae2-a8c1-3de191c31d9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d1d4e14-54b9-4c43-ae55-31b4b56ede09",
        "cursor": {
          "ref": "c4b3e66d-e768-4c5b-8e7a-94844ff88486",
          "length": 252,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "3a1fc277-a27b-4551-8643-ed4dfa634f86"
        },
        "item": {
          "id": "5d1d4e14-54b9-4c43-ae55-31b4b56ede09",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "6dbcf000-d5f5-4ebb-993f-218009b90a0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11630709-1088-4d96-9113-c4f823484819",
        "cursor": {
          "ref": "f7e0ef59-ce9b-41ce-8ca6-3716eaf7cec5",
          "length": 252,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "dade7580-b59d-43ec-83dd-9828ce666977"
        },
        "item": {
          "id": "11630709-1088-4d96-9113-c4f823484819",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "3e403df3-ddad-4190-8f2d-2523eaea485a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "918653ca-4320-4620-964a-feb4ddbd451f",
        "cursor": {
          "ref": "ac8df454-589f-45ab-857a-e0f8919d1359",
          "length": 252,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "4e9dfcdf-e58d-4e91-b661-d0287430653b"
        },
        "item": {
          "id": "918653ca-4320-4620-964a-feb4ddbd451f",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "7218275d-c97e-4f67-af39-8ee755d33a15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15ac943d-d923-4133-9d0c-6cc92accf1c3",
        "cursor": {
          "ref": "5d2440fd-cb5f-4fce-8832-a9481a7ac945",
          "length": 252,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "0d537a81-f1c5-48b1-94fc-05da9231b5c2"
        },
        "item": {
          "id": "15ac943d-d923-4133-9d0c-6cc92accf1c3",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "6a7c4d17-6fa8-4b23-b5d3-049451684d09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a6bb8d6-a59d-4d35-b86f-495540e59438",
        "cursor": {
          "ref": "ac204f46-1eef-4bb4-9c29-05d4b455da03",
          "length": 252,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "19f8a96c-250f-49d6-85e9-032f8f39b6fa"
        },
        "item": {
          "id": "0a6bb8d6-a59d-4d35-b86f-495540e59438",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "77ec032e-1965-4a00-a644-5e4947d02914",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 330,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "49d34d42-3c56-4115-9222-5035e37e7458",
        "cursor": {
          "ref": "e0f4531e-5872-46ac-9d76-135ccdd96886",
          "length": 252,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "28839286-ae5a-437c-a393-4a43e2655fd5"
        },
        "item": {
          "id": "49d34d42-3c56-4115-9222-5035e37e7458",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "99bbfd04-584b-4bc0-ab4f-d0c6b0b4b2b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "112488ff-b2df-4713-b4a9-cc499e6ec173",
        "cursor": {
          "ref": "f8a89521-1577-4355-9cf3-e9475e79866a",
          "length": 252,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "9c716358-802b-472a-ade7-09d9f92a1842"
        },
        "item": {
          "id": "112488ff-b2df-4713-b4a9-cc499e6ec173",
          "name": "credentials_issue"
        },
        "response": {
          "id": "2151d6f8-d0cf-4452-becf-a7d11a028f9e",
          "status": "Created",
          "code": 201,
          "responseTime": 53,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "d929c6e6-17de-4492-9f58-336f107232db",
        "cursor": {
          "ref": "480fe4d8-a23c-4684-810e-4ea51bf3005f",
          "length": 252,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "3f3ec766-cb89-4ec6-9880-4d3e2d3cf26a"
        },
        "item": {
          "id": "d929c6e6-17de-4492-9f58-336f107232db",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "378d03a8-6a55-4389-85a0-df6f701de25e",
          "status": "Created",
          "code": 201,
          "responseTime": 53,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "90edb129-fa98-4650-aacf-8040958352da",
        "cursor": {
          "ref": "dbc77de2-6e51-474e-8ae9-47ed14377370",
          "length": 252,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "7b608166-e640-447b-9648-69c122cdbc24"
        },
        "item": {
          "id": "90edb129-fa98-4650-aacf-8040958352da",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "8a2ea554-dff2-40a2-a66b-1892d6dfb4a7",
          "status": "Created",
          "code": 201,
          "responseTime": 53,
          "responseSize": 665
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c77e36b-495f-462f-8b6e-aa7e72336f21",
        "cursor": {
          "ref": "d0666527-5a15-4827-a4f5-666a8a0d1d91",
          "length": 252,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "15595ed0-9b0c-40c7-a30b-12720aa4cdf0"
        },
        "item": {
          "id": "9c77e36b-495f-462f-8b6e-aa7e72336f21",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "28dde26c-a847-4b07-8396-8004a23624fa",
          "status": "Created",
          "code": 201,
          "responseTime": 52,
          "responseSize": 633
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "199a0b97-45f5-4a86-a7aa-9af6c4d4860c",
        "cursor": {
          "ref": "1dc1e600-36df-4f19-919e-5db7e42c9fe5",
          "length": 252,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "31a9204c-e995-4b55-a535-f2e072b04501"
        },
        "item": {
          "id": "199a0b97-45f5-4a86-a7aa-9af6c4d4860c",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "fbbd90bc-65e1-498f-aa68-79601b38e0fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:109)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:109)"
            }
          }
        ]
      },
      {
        "id": "5c46794f-eed5-4381-bfc8-d411d6239272",
        "cursor": {
          "ref": "1fc91dcc-6ecf-4e51-a6f0-7064dea91dc7",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "fe067d22-f095-4a27-af84-6d9d5af31f7e"
        },
        "item": {
          "id": "5c46794f-eed5-4381-bfc8-d411d6239272",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a47cd03e-1a8e-4b5d-8ee7-04f11f6682c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c46794f-eed5-4381-bfc8-d411d6239272",
        "cursor": {
          "ref": "1fc91dcc-6ecf-4e51-a6f0-7064dea91dc7",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "fe067d22-f095-4a27-af84-6d9d5af31f7e"
        },
        "item": {
          "id": "5c46794f-eed5-4381-bfc8-d411d6239272",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a47cd03e-1a8e-4b5d-8ee7-04f11f6682c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeb2c137-e0b2-416b-97d8-1930863dc042",
        "cursor": {
          "ref": "5b40fbfa-93f6-43e1-9798-bff9381ee113",
          "length": 252,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "fba82682-8e8e-4710-a5ec-7a680b07bb5e"
        },
        "item": {
          "id": "eeb2c137-e0b2-416b-97d8-1930863dc042",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "08bab94c-dc71-4e61-a32a-02eeea96dd30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 307
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5301f2eb-b2d6-4503-a9d3-29c89d68f264",
        "cursor": {
          "ref": "a0f48078-e6b9-4835-8f7f-98c5b8b7af8d",
          "length": 252,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "d7d5ac27-f244-467e-8da8-86dbb1790905"
        },
        "item": {
          "id": "5301f2eb-b2d6-4503-a9d3-29c89d68f264",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "0c7ca0be-6cb8-480b-b34b-1e24db1fac66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 306
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb3727ac-a4aa-4df7-a473-74391092862a",
        "cursor": {
          "ref": "be2d2315-e1bc-49c8-ba06-f466e4bb0240",
          "length": 252,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "1ae6477f-be4f-4e73-b464-10f2a148746b"
        },
        "item": {
          "id": "fb3727ac-a4aa-4df7-a473-74391092862a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "70be904f-046a-4db6-a98b-d5bd1ec6695d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "544e1e2c-9682-4f45-a7de-2e531e422041",
        "cursor": {
          "ref": "dfc55c30-ecb9-47de-8f35-9d5cb0d8a255",
          "length": 252,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "182ba2f3-0ff8-49ce-9d41-e6befa05d683"
        },
        "item": {
          "id": "544e1e2c-9682-4f45-a7de-2e531e422041",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "b7a78e4d-cd5c-46a6-9d82-f90863698659",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd833737-655c-49e8-aed5-ffdb94e96ba1",
        "cursor": {
          "ref": "072f3a4b-b2fd-4074-8cea-a2d7e1c5ebf2",
          "length": 252,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "5841662c-5c8d-4c35-8c49-a1b921e99e74"
        },
        "item": {
          "id": "fd833737-655c-49e8-aed5-ffdb94e96ba1",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "17a73e29-2e53-4d4f-af4e-56b01eccfce3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0156b3b5-2f34-4cff-8908-6cc375b20953",
        "cursor": {
          "ref": "fade8eb0-38fe-40e5-88ac-87023a9ad124",
          "length": 252,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "bfddee20-66f4-49a9-bb21-376cec460225"
        },
        "item": {
          "id": "0156b3b5-2f34-4cff-8908-6cc375b20953",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "65bdb637-2d45-49f1-9583-43bd8739777b",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "c702310d-9775-4335-b044-367b295545d9",
        "cursor": {
          "ref": "a5e0df29-31a2-4c65-8179-ff38c055a0b6",
          "length": 252,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "9817162f-a374-44d4-a181-340eff233f84"
        },
        "item": {
          "id": "c702310d-9775-4335-b044-367b295545d9",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "b13d8a6f-6260-4338-8298-2a3a92929762",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66639458-1244-4f38-aed5-59709725371c",
        "cursor": {
          "ref": "c55c5b09-cb60-4fa7-98e7-5cfec17bea45",
          "length": 252,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "adfcd46a-bfec-4586-be11-5a3a35b72172"
        },
        "item": {
          "id": "66639458-1244-4f38-aed5-59709725371c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ec5b68ba-2cfc-4a63-b440-1808ebcfed0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4067a4f6-6383-433b-aabd-7b1b63edacf3",
        "cursor": {
          "ref": "3e3cb4e3-921a-4e57-8ea6-1a09cb2abb1b",
          "length": 252,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "a242734f-8ecb-4834-9624-59c5fb3203a4"
        },
        "item": {
          "id": "4067a4f6-6383-433b-aabd-7b1b63edacf3",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b65327e8-5229-40ac-bd50-ff8a355e2e3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c52d8cd-0901-4e93-b71f-a66614f44a33",
        "cursor": {
          "ref": "cc89e280-1b4a-45e9-941f-c3b07a53eac5",
          "length": 252,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "033affde-210d-4493-b62b-68868342061e"
        },
        "item": {
          "id": "2c52d8cd-0901-4e93-b71f-a66614f44a33",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "1302de98-8590-4114-acb7-55e58fa9f699",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8db5e1e-b376-4b06-92c1-c6a941cd5c6a",
        "cursor": {
          "ref": "c7765a57-1bdb-4976-953b-40d078734d43",
          "length": 252,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "240baae1-601c-403c-a5a1-3246aae3fe6f"
        },
        "item": {
          "id": "b8db5e1e-b376-4b06-92c1-c6a941cd5c6a",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "e6169da3-e6e7-46cb-bee0-b32539cb47c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ea6a017-7525-4ead-bdc4-91b530b55d8e",
        "cursor": {
          "ref": "eb7ca706-939c-4e36-9ba2-9becede94a67",
          "length": 252,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "e1b72278-9c3c-432b-b5c4-ad2d5e0f8a1c"
        },
        "item": {
          "id": "0ea6a017-7525-4ead-bdc4-91b530b55d8e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "d6b63663-e335-47a4-91cd-a249084eb8e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd9f1f20-f7b1-4248-8757-4575280098b7",
        "cursor": {
          "ref": "959a8b39-ada4-4f80-ab60-a56df0fbb784",
          "length": 252,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "2b70f96b-40a5-4b7e-8fa2-3a657f5cf6cb"
        },
        "item": {
          "id": "cd9f1f20-f7b1-4248-8757-4575280098b7",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "8c3883c3-dd49-409a-ab85-3f8fa45f2bbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cee0e22a-f511-454b-b2c5-58ad4eb39088",
        "cursor": {
          "ref": "10751ee2-7f5c-4849-9f97-66f449799b02",
          "length": 252,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "0e597ad1-4a8a-41c7-b841-347d769ea47f"
        },
        "item": {
          "id": "cee0e22a-f511-454b-b2c5-58ad4eb39088",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "fe5a78fe-972f-4065-be16-302287c45ad4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fbb48b6-16ca-4da1-a35e-d51d7d02acfa",
        "cursor": {
          "ref": "bc162167-fdcb-49c2-9659-6ed59f18288a",
          "length": 252,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "bf81208d-94a6-4a7c-b311-23a754e27c01"
        },
        "item": {
          "id": "5fbb48b6-16ca-4da1-a35e-d51d7d02acfa",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "196e07e0-7639-4ce8-a1cf-6c660ca5f807",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18f46374-3169-4cfb-93b2-eabbd8bb3cef",
        "cursor": {
          "ref": "751171e1-ac90-42c4-a88a-8c3c09a17758",
          "length": 252,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "a1f77d27-96c0-4376-af67-899b266eeafc"
        },
        "item": {
          "id": "18f46374-3169-4cfb-93b2-eabbd8bb3cef",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "d7754ba9-0f0c-43ce-bb02-024e3174c407",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "560eeb39-1b83-481e-81fb-39359aea3a67",
        "cursor": {
          "ref": "d53dfe6e-e887-47d1-b03c-76849c1321b3",
          "length": 252,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "55131349-f478-4ca7-bc71-2fe47a389c31"
        },
        "item": {
          "id": "560eeb39-1b83-481e-81fb-39359aea3a67",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "3f0c4ed5-8452-42ff-b771-13bb2b9f7d5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74f7f604-ba6c-4969-b168-c2716dd6cb29",
        "cursor": {
          "ref": "0b6dfc45-8480-4770-95d6-82741cd4ab25",
          "length": 252,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "68603b2b-8544-47a0-8e25-a00fa4133b4f"
        },
        "item": {
          "id": "74f7f604-ba6c-4969-b168-c2716dd6cb29",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "293f4561-5f27-444d-8dd3-381f9e18cb57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6033de10-25b8-46c7-864e-88ac13049619",
        "cursor": {
          "ref": "785644a4-292c-4f81-b804-46feb640885c",
          "length": 252,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "4f81cd34-2eba-4b3e-93b2-ab6ceb31d04d"
        },
        "item": {
          "id": "6033de10-25b8-46c7-864e-88ac13049619",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "8f75d86f-110e-4808-bddd-46e45e76e64b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53784bbf-a17f-4f6c-addf-ad4c5cf1bb2c",
        "cursor": {
          "ref": "9e6dd3ec-3258-47a8-b913-e96dd0c43006",
          "length": 252,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "fbcbdf14-87ec-435f-895c-d037d354f084"
        },
        "item": {
          "id": "53784bbf-a17f-4f6c-addf-ad4c5cf1bb2c",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "993a9829-2364-42dc-a124-da97136ca31e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73f8e233-532e-4b7f-860f-f0d8df110f6e",
        "cursor": {
          "ref": "74a7a91e-a343-4b7d-a466-6e5f7f198f3c",
          "length": 252,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "f32e6151-47be-40fb-9a77-bfb17497dcb2"
        },
        "item": {
          "id": "73f8e233-532e-4b7f-860f-f0d8df110f6e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "3f2627c5-1e4a-43bd-ba87-4ff6ae352174",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5d2ff94-2514-4603-aa02-35df613b118f",
        "cursor": {
          "ref": "0c5c3b94-e95a-49a9-a88b-8dcd03f3d0f2",
          "length": 252,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "6dd41983-51ad-44ba-af6e-f95f37f2a019"
        },
        "item": {
          "id": "b5d2ff94-2514-4603-aa02-35df613b118f",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "41f8a7b9-0b13-4e76-b855-9dc2099b15f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5866932-800c-435c-b164-2f5b8b5d93ef",
        "cursor": {
          "ref": "52bc2a3a-755d-461e-a5e7-ef4a8a03caed",
          "length": 252,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "d729c892-ef31-46f1-b72e-fc29d55324e0"
        },
        "item": {
          "id": "f5866932-800c-435c-b164-2f5b8b5d93ef",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "e0b5c77e-1676-4707-a738-ae328e967aee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2b08c32-987c-4df9-bc00-7596f5157ec6",
        "cursor": {
          "ref": "5d2baa89-a31f-4359-821b-d0baa6943e0e",
          "length": 252,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "875113c2-018e-4adb-b1a8-eff74349ee04"
        },
        "item": {
          "id": "f2b08c32-987c-4df9-bc00-7596f5157ec6",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "3ee21aa1-bd2f-41d9-9a6a-3424956f15f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6a15920-c52a-4c5e-8970-71f7d6872e53",
        "cursor": {
          "ref": "d55fd8f9-94b0-4b44-b824-77715e0a70d8",
          "length": 252,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "5518e4c0-1ca9-48e5-9b41-d981d6d32a40"
        },
        "item": {
          "id": "a6a15920-c52a-4c5e-8970-71f7d6872e53",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "53bf548b-4b74-42f2-804e-f70706d8c209",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "433c8608-145e-4cc6-b5c0-979f39ec74d2",
        "cursor": {
          "ref": "cf076c8c-a62a-422b-9a1e-52f87d34e6b6",
          "length": 252,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "e95a22a7-00c2-4e57-baad-6defad9770e6"
        },
        "item": {
          "id": "433c8608-145e-4cc6-b5c0-979f39ec74d2",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "0965d2b8-b4b7-458d-a694-c71925772b00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54c88aec-9cb0-4bd0-a22e-0a1757596314",
        "cursor": {
          "ref": "4e3718ff-f98e-41c6-96ba-54eb63fa96ad",
          "length": 252,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "3304a81e-a1a0-4a66-ab4e-3d8d76a9c103"
        },
        "item": {
          "id": "54c88aec-9cb0-4bd0-a22e-0a1757596314",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "8f09c046-cbbd-4f0f-9c6b-01608f3e2cad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ed8cc99-59c1-4e7a-982e-aff912a435bb",
        "cursor": {
          "ref": "aedb87f8-2881-4769-8551-bd175678455d",
          "length": 252,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "3db1d4d7-d030-4eae-9636-b953b69b0a06"
        },
        "item": {
          "id": "4ed8cc99-59c1-4e7a-982e-aff912a435bb",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ab529974-6eea-42f9-a429-c33897ed1ecf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76b4ea97-130b-4f40-b9d9-a5343c10b576",
        "cursor": {
          "ref": "98e65353-c82c-4a03-8fa9-983fe6d437cb",
          "length": 252,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "0eceaa6c-d7df-4c89-a353-f7a3f0cc9556"
        },
        "item": {
          "id": "76b4ea97-130b-4f40-b9d9-a5343c10b576",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "57370b72-5841-440e-a0ba-f031aebe2c88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3837a3c8-c06e-4170-b087-3bdcaed93a26",
        "cursor": {
          "ref": "207a8df2-f384-49de-af5c-e23bd0dd40de",
          "length": 252,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "54949a65-e545-486e-a6ad-70b0f98ffb92"
        },
        "item": {
          "id": "3837a3c8-c06e-4170-b087-3bdcaed93a26",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "da1adc58-ba25-4366-aeea-2f29d310ec77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f305a2c-93fa-488a-b2f1-b174890849e4",
        "cursor": {
          "ref": "aa8f14f0-711b-4eab-87c7-c48b65b2b28f",
          "length": 252,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "1904d0c5-21be-44c0-99c8-ab9726ce5079"
        },
        "item": {
          "id": "9f305a2c-93fa-488a-b2f1-b174890849e4",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "4ad05a13-4a70-4b92-97f1-708f64f5fe59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5db8d11a-e08a-4aa3-a3ab-f733d74b059e",
        "cursor": {
          "ref": "2baa160a-dfa4-4f0e-b842-50b033991291",
          "length": 252,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "1d4a8979-7dac-434d-8127-9628a083cecd"
        },
        "item": {
          "id": "5db8d11a-e08a-4aa3-a3ab-f733d74b059e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "b738f50c-b9c8-444f-b6e2-7d519eabffb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "970e7977-225a-404a-8f73-8861cffc6da5",
        "cursor": {
          "ref": "af5582e5-b621-4d83-a446-5e78a73933ae",
          "length": 252,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "1f61c3e2-4d76-4659-9f4d-3fd38461f7ec"
        },
        "item": {
          "id": "970e7977-225a-404a-8f73-8861cffc6da5",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "812ead0b-b2d1-49b6-883b-ead5cb0d3c94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "872bfbf0-9446-4a40-9054-d541c085af98",
        "cursor": {
          "ref": "b6a8f171-1bd6-4973-84d8-fe7e629d85fb",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "ced7ad9e-eac6-4168-8cd4-aead8e11520a"
        },
        "item": {
          "id": "872bfbf0-9446-4a40-9054-d541c085af98",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "9c112aee-c653-4355-aa86-4d6cad4e010a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "872bfbf0-9446-4a40-9054-d541c085af98",
        "cursor": {
          "ref": "b6a8f171-1bd6-4973-84d8-fe7e629d85fb",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "ced7ad9e-eac6-4168-8cd4-aead8e11520a"
        },
        "item": {
          "id": "872bfbf0-9446-4a40-9054-d541c085af98",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "9c112aee-c653-4355-aa86-4d6cad4e010a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b049054-b2ad-442b-8eb6-b1f0b4b7cdab",
        "cursor": {
          "ref": "37b6121e-606d-4f14-ab06-5b944601887c",
          "length": 252,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "cbaf0903-aa3b-41af-ac0b-f2a49ec034b6"
        },
        "item": {
          "id": "2b049054-b2ad-442b-8eb6-b1f0b4b7cdab",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "de7a8296-7a3d-4a1f-b78d-83dd902d7857",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f0a8728-ef70-4fd8-93b0-6cb8ff4fad52",
        "cursor": {
          "ref": "08ae427f-e454-4bfc-833b-002fe54de39f",
          "length": 252,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "c767c828-4301-4059-865f-54718003d7a1"
        },
        "item": {
          "id": "1f0a8728-ef70-4fd8-93b0-6cb8ff4fad52",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "3a95a756-049b-43c4-b412-21a1c3f78a84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c7684d3-cea5-4124-b34c-12309894250b",
        "cursor": {
          "ref": "4bbde07c-3235-4d3c-8bc8-063afd05f491",
          "length": 252,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "5baf433b-004d-4b87-8d49-d87b3608e954"
        },
        "item": {
          "id": "9c7684d3-cea5-4124-b34c-12309894250b",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "36604e2d-8da0-461c-9a38-a838c0ca12a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "798e69a0-3ad4-4b6f-a12a-f689ee5bc052",
        "cursor": {
          "ref": "a1f7aa02-846c-4632-9a8c-fa35b1051fe7",
          "length": 252,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "44ced70d-e4c9-4819-b191-420b45e43013"
        },
        "item": {
          "id": "798e69a0-3ad4-4b6f-a12a-f689ee5bc052",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "1f275190-189b-4f0a-9cbe-d8f7a5ec2ce6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "888a3803-a804-4e6e-bf69-69f4a8afb59f",
        "cursor": {
          "ref": "fe82c280-186c-4fac-b405-5c3c62478dee",
          "length": 252,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "789ddb44-5f38-43f4-9542-79961fe720c3"
        },
        "item": {
          "id": "888a3803-a804-4e6e-bf69-69f4a8afb59f",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "3aa369ec-46e9-44f0-923f-d3abe19208d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "176fc70b-dd1b-4785-8a7d-ca3a02eafd84",
        "cursor": {
          "ref": "a0adbaf3-71ce-4183-93cb-237dbac6fcdd",
          "length": 252,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "6c83e303-c61d-4d92-8563-f2c3e0c76a2a"
        },
        "item": {
          "id": "176fc70b-dd1b-4785-8a7d-ca3a02eafd84",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "9b9aa5a8-c2c5-434e-aa51-51ef0427d65e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "687960e8-c877-4390-9fe6-1092567c5737",
        "cursor": {
          "ref": "8e0415e9-29c9-47b2-b634-27fcff6bdcf0",
          "length": 252,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "6618a0f7-f2c5-4876-9b37-b7e1e1ace3ed"
        },
        "item": {
          "id": "687960e8-c877-4390-9fe6-1092567c5737",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "a2b24727-927b-45ef-ba26-bb6d823610f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcae9770-eafd-4108-9ae7-9d8e0a08cb9c",
        "cursor": {
          "ref": "1baa5ec5-f47f-4726-945f-dabfa5ccde23",
          "length": 252,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "e2713abe-0d11-4739-b82c-282f6da0ecd3"
        },
        "item": {
          "id": "dcae9770-eafd-4108-9ae7-9d8e0a08cb9c",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "a5950b3b-9fb6-4288-b3bc-bc61e86bbf62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cde55fd2-e1cf-4130-bd1d-a685be0c3c2d",
        "cursor": {
          "ref": "841ad968-9ffb-4ebb-9b0f-a0858daa0e32",
          "length": 252,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "df636f37-5a6c-4c8d-99fc-17a6f74ee6f4"
        },
        "item": {
          "id": "cde55fd2-e1cf-4130-bd1d-a685be0c3c2d",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "0dec2810-8049-4fbd-b39e-52b0b06b6130",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "676e5eb3-fb96-4196-84b9-ded02764bfa6",
        "cursor": {
          "ref": "2a1c5bda-8ba1-4112-a050-589397c87078",
          "length": 252,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "929f529c-5f33-491d-8b1e-651f17d0f5d4"
        },
        "item": {
          "id": "676e5eb3-fb96-4196-84b9-ded02764bfa6",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "959d2f4a-93d9-4427-b946-655c258b644f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42a1feee-8008-4503-bb4e-408a4b5d78af",
        "cursor": {
          "ref": "0ffc372b-9f28-471b-8405-cc0ba18a2cd0",
          "length": 252,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "757054a3-a43f-4eab-a1d1-0ab8469dad87"
        },
        "item": {
          "id": "42a1feee-8008-4503-bb4e-408a4b5d78af",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "8e4007e2-a63c-42e0-8932-faa7d2b8dda0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65685152-867e-4013-bcab-47dd123869ef",
        "cursor": {
          "ref": "eea37755-3a4a-4280-9f40-2992be8dbcfc",
          "length": 252,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "929dbcfa-a80c-4d6b-a88b-5f488e7614c6"
        },
        "item": {
          "id": "65685152-867e-4013-bcab-47dd123869ef",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "411827ea-a543-48e7-ae02-b74f4662c237",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "320a115d-8fcc-4d49-b0a2-43442762f8a9",
        "cursor": {
          "ref": "e12fe9b9-3c61-4a9b-bc17-e15810edabf8",
          "length": 252,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "eb886d1b-8625-405e-ab92-de16fb8ee257"
        },
        "item": {
          "id": "320a115d-8fcc-4d49-b0a2-43442762f8a9",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "b297eacf-b251-409f-b87a-b7708dc9db1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f49063f5-b35c-481f-ae08-69c1b8c3a991",
        "cursor": {
          "ref": "49d8bd53-233b-430a-97c5-88fd4bcabacd",
          "length": 252,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "8700bca8-df56-4460-8256-3e5939cce531"
        },
        "item": {
          "id": "f49063f5-b35c-481f-ae08-69c1b8c3a991",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "0928a52f-6740-4abc-a30b-64a9a3a253b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0135ac01-21c8-4d04-b7dd-23151e7cbe58",
        "cursor": {
          "ref": "f9773d31-aa2a-4e76-ae0d-26037b2a660c",
          "length": 252,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "e1a240a9-9cd5-401c-bbc8-f1628e050b90"
        },
        "item": {
          "id": "0135ac01-21c8-4d04-b7dd-23151e7cbe58",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "527a1681-8e7c-4555-b99c-7e28dcd39ff0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7882d9f-8656-4ea5-ad74-813ee7c9b9bb",
        "cursor": {
          "ref": "dc286de9-6f86-40e4-a81a-9030fa93b88c",
          "length": 252,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "6900a40b-5d73-4781-844d-af243b1f3fb3"
        },
        "item": {
          "id": "c7882d9f-8656-4ea5-ad74-813ee7c9b9bb",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "30eb6432-24c7-4e7f-bf2c-08a3021e5401",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d00df9c2-568d-4c23-bb3b-d465878bc39f",
        "cursor": {
          "ref": "6e449c09-6bfb-45f1-9c98-71dee8f9538d",
          "length": 252,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "3e531c52-2cfa-4441-83f9-37e797571d35"
        },
        "item": {
          "id": "d00df9c2-568d-4c23-bb3b-d465878bc39f",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "c2ead82c-0592-4896-bcc8-e5dbae46fce0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a195b962-0b1c-4c61-90c7-fb227c1ca26d",
        "cursor": {
          "ref": "88235ea4-8871-4f3c-bf9b-1bd69ef80198",
          "length": 252,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "9c9a2ea4-08b9-4e43-a49c-063e7806a6b8"
        },
        "item": {
          "id": "a195b962-0b1c-4c61-90c7-fb227c1ca26d",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "ea8a5638-21da-4e88-94b1-ee2ab94069f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b205457c-64e4-453e-980b-30b1b816568f",
        "cursor": {
          "ref": "4e4782fb-8f8a-49f4-9ffc-14f0d67a3c10",
          "length": 252,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "d6bfc1f5-54da-4cf3-a1de-1b3c0c59038e"
        },
        "item": {
          "id": "b205457c-64e4-453e-980b-30b1b816568f",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "4ac1d4cb-d883-4f21-9576-5e55bd073d5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "737cc918-5453-45af-93b1-3a5b9dc84382",
        "cursor": {
          "ref": "924ad442-6ec8-4d1a-b8e3-b30b5cc1ac43",
          "length": 252,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "2229fc81-9575-44a5-9c81-928e2e2d0eac"
        },
        "item": {
          "id": "737cc918-5453-45af-93b1-3a5b9dc84382",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "ca6d2b3e-a68c-4757-b9de-eecb762aa51d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ae6ee1d-5d39-4c60-bcd7-c95e0785028f",
        "cursor": {
          "ref": "507fea94-ef6d-4442-acb2-8d9fbedd0afa",
          "length": 252,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "25fd2628-c285-4a5f-861d-1a5817542bd7"
        },
        "item": {
          "id": "2ae6ee1d-5d39-4c60-bcd7-c95e0785028f",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "a90408f7-551f-44bf-8af1-90469d9a31d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a16765c-275b-45b0-80a4-b1ebe179fb11",
        "cursor": {
          "ref": "e557871b-0993-4bca-bb23-6c7243c17ff1",
          "length": 252,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "b6f2caaa-6ed0-43f2-9ca4-92b463591182"
        },
        "item": {
          "id": "6a16765c-275b-45b0-80a4-b1ebe179fb11",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "91b5912b-ce83-44c8-8e72-98baf2a246b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d32cf65f-582f-4f31-ad3b-d2fe3a347c08",
        "cursor": {
          "ref": "fc480339-c76a-41b2-bc17-bef8348b6365",
          "length": 252,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "9129b026-b477-4fc3-9b26-834d6f282b61"
        },
        "item": {
          "id": "d32cf65f-582f-4f31-ad3b-d2fe3a347c08",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "270b53ee-5ce7-401b-b9a6-642f1b1db954",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdc1deb7-2d50-4357-80d9-95f25cbaba79",
        "cursor": {
          "ref": "15744629-720d-4075-8e34-e446499dad6a",
          "length": 252,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "90e647a2-adb2-42bb-82da-9650dbac950d"
        },
        "item": {
          "id": "cdc1deb7-2d50-4357-80d9-95f25cbaba79",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "f2909699-ae5c-4d06-826b-9cb9fd01e62f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b4efae4-9af7-45a3-a8d0-35efa72b03e7",
        "cursor": {
          "ref": "4b5fc094-638e-4e7b-a627-31b6163b135a",
          "length": 252,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "5dee7d9d-2440-46db-ba38-8b13d7a1734f"
        },
        "item": {
          "id": "6b4efae4-9af7-45a3-a8d0-35efa72b03e7",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "f4c9529b-71bc-4919-b7c6-c9205d785b13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3978949b-a360-42db-8ba0-8c70c1d559b2",
        "cursor": {
          "ref": "e6372a3d-be7d-454a-88b5-4614b65c6843",
          "length": 252,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "31b53130-014f-46c9-be29-efd5fc0b75c3"
        },
        "item": {
          "id": "3978949b-a360-42db-8ba0-8c70c1d559b2",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "dbbb9be5-6120-4e59-adf2-d57432efb1d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2728d603-4f3c-44d7-81ca-9ad0596eb944",
        "cursor": {
          "ref": "5814fcbe-5ef3-432f-9b39-2bc44318f93b",
          "length": 252,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "580864c2-633b-4a76-8b23-af5a190525cc"
        },
        "item": {
          "id": "2728d603-4f3c-44d7-81ca-9ad0596eb944",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "487a0db5-279e-45c1-a008-8109d412077d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58512791-b315-416b-8b96-e1ba104e7a0c",
        "cursor": {
          "ref": "892b9309-f5cc-4de0-9f94-0afc0434263a",
          "length": 252,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "b419434c-86de-4fcc-aa21-c9de86757218"
        },
        "item": {
          "id": "58512791-b315-416b-8b96-e1ba104e7a0c",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "bd31e35f-df29-469d-96e8-920d659dcb0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14132b88-ed33-41ab-a1ee-984610c1f22b",
        "cursor": {
          "ref": "eecf7506-a95b-4a28-9f97-d361b32d5d8e",
          "length": 252,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "0b5e89d0-9cf5-46cc-b8dd-3b94cef6d2d3"
        },
        "item": {
          "id": "14132b88-ed33-41ab-a1ee-984610c1f22b",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "bfe6aee0-dcef-4869-a8ed-4281f6d22465",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4537ffec-6a82-4f60-84a4-c508cc09e775",
        "cursor": {
          "ref": "fe763ba7-fdc5-4562-b04e-bd87e611a793",
          "length": 252,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "a0a3676a-2b06-40af-afbb-6fe6ebe49886"
        },
        "item": {
          "id": "4537ffec-6a82-4f60-84a4-c508cc09e775",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "02d4483b-75ef-4474-afd7-a7ceab16cd04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a57f48d0-ee2c-4a65-b9a8-bcd4111eb323",
        "cursor": {
          "ref": "1ae5a496-58c8-48b5-984c-7b4e18d1cd17",
          "length": 252,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "0021023d-8ebb-44db-9611-ffaf24ada8d6"
        },
        "item": {
          "id": "a57f48d0-ee2c-4a65-b9a8-bcd4111eb323",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "e54f3d3c-ca89-4a7e-8c41-6e31dfd64f5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56a9bd09-b4e2-432b-a1dd-7d7eea77c797",
        "cursor": {
          "ref": "3410510d-8b68-40e4-8eee-36baaf121a87",
          "length": 252,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "df62e70b-3997-4ecd-924e-7a5a7ad387f7"
        },
        "item": {
          "id": "56a9bd09-b4e2-432b-a1dd-7d7eea77c797",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "3eeb16ee-6a5e-431f-8575-04e4318f4ef0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "814adaeb-8c1d-4d85-96a4-579ebdd9a47e",
        "cursor": {
          "ref": "867639a4-8cde-45ab-9cc8-18426b93a01b",
          "length": 252,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "f0a166e8-68ec-4c01-b31d-da22ad1e54b6"
        },
        "item": {
          "id": "814adaeb-8c1d-4d85-96a4-579ebdd9a47e",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "8699bec3-ba79-48e9-9e87-bcd4766e9955",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9ed0134-0bda-4251-a2ab-e6f86ae5d5c5",
        "cursor": {
          "ref": "3ad39381-c296-4ea1-8bef-06fba120c8fa",
          "length": 252,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "b0d86272-3dff-48d5-99fd-c6b1b1cd0490"
        },
        "item": {
          "id": "d9ed0134-0bda-4251-a2ab-e6f86ae5d5c5",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "a029146e-5c19-4fee-a396-f8af89811794",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac5c872c-d61e-4b72-a557-535dd25bf6d6",
        "cursor": {
          "ref": "84749591-0bd8-484c-9e17-15209bb83bc4",
          "length": 252,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "4aa53761-fb37-49e2-ae03-9381c1f0ac6a"
        },
        "item": {
          "id": "ac5c872c-d61e-4b72-a557-535dd25bf6d6",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "29e02875-f281-437e-91e6-02d0d06fe709",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b67b7b4-0853-4e90-b1f8-0b186c9365a4",
        "cursor": {
          "ref": "48500a15-e7ed-447c-a482-1fe24f06b8e5",
          "length": 252,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "34d5028e-f8b8-4270-9852-1111f1506cf9"
        },
        "item": {
          "id": "3b67b7b4-0853-4e90-b1f8-0b186c9365a4",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "14e3e5b1-3533-4481-8513-33dbe8ff9466",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2631eaff-9227-4f62-a9cd-2440c3558356",
        "cursor": {
          "ref": "188b4ac1-7935-48d0-b85e-f0d6a17ac92b",
          "length": 252,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "dcffab82-70a6-47b4-9ffc-49a6f54203da"
        },
        "item": {
          "id": "2631eaff-9227-4f62-a9cd-2440c3558356",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "22b7fb6f-2fe8-4992-a011-9f9fd3bd0b04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0bb4adc-4151-46d8-a906-f8bdfe11beb6",
        "cursor": {
          "ref": "7db55c2e-e4a6-4b28-8d68-75e2b8272b2b",
          "length": 252,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "d4eb0eb2-cfde-4b74-949d-0c9c706ef60a"
        },
        "item": {
          "id": "f0bb4adc-4151-46d8-a906-f8bdfe11beb6",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "befe1466-013f-4cf3-add0-b62f9146d48a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87e2db7d-8482-4554-956c-9c9213772175",
        "cursor": {
          "ref": "6af6c97f-4f7a-4428-9591-0c946ef4b247",
          "length": 252,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "be1eb583-08b5-48cb-89cc-278fc898958e"
        },
        "item": {
          "id": "87e2db7d-8482-4554-956c-9c9213772175",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "4fcb147d-3010-4d02-b2fb-971a1446490a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d80c629e-73e7-40c6-bfbf-4ebfe03ebefa",
        "cursor": {
          "ref": "e90c11af-e08a-4438-800e-ddb349a772d6",
          "length": 252,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "59b7e7c3-243d-4a31-8734-d900e772bfec"
        },
        "item": {
          "id": "d80c629e-73e7-40c6-bfbf-4ebfe03ebefa",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "7cb4f652-2218-4fa4-8445-a494ecb9facb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9d845a8-f98b-4081-8a21-69b511667064",
        "cursor": {
          "ref": "f79dbe2b-1ff8-4c7f-ae05-20dcf7d80230",
          "length": 252,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "f938ef46-2050-4e95-bab0-69a5c85d8780"
        },
        "item": {
          "id": "f9d845a8-f98b-4081-8a21-69b511667064",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "1c9b0d8d-ebc6-4720-9122-95cb87f23ad8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1b6fcf8-6077-4544-b50e-5277ba94b386",
        "cursor": {
          "ref": "934f0d8f-6c31-4feb-81ac-029415939b28",
          "length": 252,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "5dc09ea9-1a15-46c2-ac60-9e4e45e14062"
        },
        "item": {
          "id": "f1b6fcf8-6077-4544-b50e-5277ba94b386",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "f322ba56-4517-4624-a99a-3e6fa05ae510",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80ffb0f2-2ad0-4557-b086-01afcf7d63fe",
        "cursor": {
          "ref": "434c06d3-2f30-4dc2-85b1-8df3d79c1a33",
          "length": 252,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "0091cb7e-b843-4843-a2aa-c9d1e29ff832"
        },
        "item": {
          "id": "80ffb0f2-2ad0-4557-b086-01afcf7d63fe",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "5a86a93a-984f-4e03-a870-5bf22a80663b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0ab6ebd-08ee-4a86-8667-afa6abb564de",
        "cursor": {
          "ref": "8356ae32-7d8e-477e-b718-bbe5d257ee24",
          "length": 252,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "b78fd40e-f833-42a5-bb83-6ae5efe6a655"
        },
        "item": {
          "id": "a0ab6ebd-08ee-4a86-8667-afa6abb564de",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "5c8b6176-cab4-44f8-8ea0-12941516e1d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58961352-5c6f-4381-a7ad-b811d38fe585",
        "cursor": {
          "ref": "624319e2-bba2-43d4-b8c4-4ae71f354fc1",
          "length": 252,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "796a89e2-d1be-4b76-9a37-8a4b97241953"
        },
        "item": {
          "id": "58961352-5c6f-4381-a7ad-b811d38fe585",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "03b5edab-090c-4d21-bbb3-84d3c0890892",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8f03388-4002-4391-a093-8bbf53f0be44",
        "cursor": {
          "ref": "608709dc-f782-4b3e-b554-46e1dfb048d5",
          "length": 252,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "165f2b7a-cbf0-420a-bf0f-6fe3419b3636"
        },
        "item": {
          "id": "b8f03388-4002-4391-a093-8bbf53f0be44",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "f41ac87b-a874-4c71-9863-8a539ad3f58a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46e84c6a-2e44-4749-8fff-b938e16a64e8",
        "cursor": {
          "ref": "80f5af74-430e-4c64-a3d1-9c6c00098d6c",
          "length": 252,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "c7d60267-47df-4c2e-9760-8b25d937249c"
        },
        "item": {
          "id": "46e84c6a-2e44-4749-8fff-b938e16a64e8",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "6cee4172-e256-4c0d-b9e8-3466dc6267cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "079698c7-f5cd-4019-86db-0050a17683b5",
        "cursor": {
          "ref": "1f3056f7-6d1c-4f8b-8ebd-d6ee375484c7",
          "length": 252,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "45eee0ea-7988-4230-9ae9-070ecb04e8b2"
        },
        "item": {
          "id": "079698c7-f5cd-4019-86db-0050a17683b5",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "de553bf7-f00b-42ed-bde6-d4fd468cf382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31aee053-93c6-4ab9-877c-046b3cc501b8",
        "cursor": {
          "ref": "80834c45-8ece-4183-9c2b-5c8fedf5763b",
          "length": 252,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "297774af-7a53-4009-ac2e-c17ea9dc811f"
        },
        "item": {
          "id": "31aee053-93c6-4ab9-877c-046b3cc501b8",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "cc72c4dd-5514-4f7f-8e22-65a77e4c83b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2a5bec7-ca89-4b44-8325-66c52475fbd7",
        "cursor": {
          "ref": "9e63cec7-33a1-47c2-9b6e-e93f193bae0d",
          "length": 252,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "068a3df0-4f0d-4de7-a47d-555b8d1da81d"
        },
        "item": {
          "id": "e2a5bec7-ca89-4b44-8325-66c52475fbd7",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "33ee0c57-9ad1-4c67-9574-59bbf0fefe8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deab84f8-f168-4f9e-ab19-d7f7dd4581da",
        "cursor": {
          "ref": "b08733d8-84e8-45cb-8389-cf35fc5cad86",
          "length": 252,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "3d18ec8b-50ec-446f-b7c7-8f4eb4b01d38"
        },
        "item": {
          "id": "deab84f8-f168-4f9e-ab19-d7f7dd4581da",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "375a80fe-6d1b-4f4f-a755-f90b34428b5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74482a15-8fe6-4964-a275-c499d90fdd2e",
        "cursor": {
          "ref": "27760d53-971c-4f56-88d5-dd5c2be08486",
          "length": 252,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "80ab4cf2-73ba-438d-a6b8-114e0989fb0b"
        },
        "item": {
          "id": "74482a15-8fe6-4964-a275-c499d90fdd2e",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "5a4a0568-0afc-4ba4-aac5-a02a974206fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8559ca77-ef1f-474a-9633-8142752c8417",
        "cursor": {
          "ref": "56d062f2-4345-4ef5-9d8a-0be13e3db941",
          "length": 252,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "d9996895-84f5-4036-858a-ceacac7af4c4"
        },
        "item": {
          "id": "8559ca77-ef1f-474a-9633-8142752c8417",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "a1e8be8f-8213-4cdd-a4c9-bccb8eb2eb48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e6e5ec2-5a69-4717-8737-8b33b5d90e0d",
        "cursor": {
          "ref": "47ec57e1-cbc9-4721-811e-cb56e19dc53d",
          "length": 252,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "fb8909f8-a5ce-4b67-85fd-a980df8a1da7"
        },
        "item": {
          "id": "6e6e5ec2-5a69-4717-8737-8b33b5d90e0d",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "39347eed-057c-4e9f-8329-4f90ab875a03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3a6ef92-8063-4ace-b014-d4b2275e402b",
        "cursor": {
          "ref": "0745747b-52fa-4ebb-98f2-1bd5c020190c",
          "length": 252,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "d35397a2-b09b-4f58-a78d-13d74a10a7e3"
        },
        "item": {
          "id": "c3a6ef92-8063-4ace-b014-d4b2275e402b",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "92429cfa-ff89-4b42-a63f-4ebb4dd8aec5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ee545fc-c16e-446d-b900-569fafff8288",
        "cursor": {
          "ref": "18897540-0b0c-4b3d-8008-c60b7036aa95",
          "length": 252,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "18232bd8-d46d-4f8c-967a-359448584094"
        },
        "item": {
          "id": "5ee545fc-c16e-446d-b900-569fafff8288",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "f5a87c0a-46ad-479e-8d54-8bda87e40daf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4024ec78-4557-4c1e-9659-289ecec35563",
        "cursor": {
          "ref": "6f9fb721-8998-4a56-bd52-635250123603",
          "length": 252,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "f56032ce-e9fa-4aee-80b9-fcb32c7d227f"
        },
        "item": {
          "id": "4024ec78-4557-4c1e-9659-289ecec35563",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "b57e759e-661e-4b96-8a51-aab06838fe3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1d48f38-cdce-48aa-8856-7f3604d1b238",
        "cursor": {
          "ref": "2949e250-cd7a-4fe0-8551-ef809cbff129",
          "length": 252,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "47a13455-7717-425b-876a-07c4d8eb368c"
        },
        "item": {
          "id": "b1d48f38-cdce-48aa-8856-7f3604d1b238",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "edad2703-da29-4122-ba9d-4e470c48c797",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1116f4d2-6ab0-4875-8cad-a3b431b8313c",
        "cursor": {
          "ref": "aacfba06-7945-4b75-ad52-6cc187001af7",
          "length": 252,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "de3a9459-0c16-472b-b54c-7f7331330b44"
        },
        "item": {
          "id": "1116f4d2-6ab0-4875-8cad-a3b431b8313c",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "41ac27c2-d972-4faa-b487-37fb69aac7fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 140,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b44622c1-b032-489f-b4b7-dd50ab0eadc2",
        "cursor": {
          "ref": "dcf3338d-0f43-45ca-9a75-d10fa302e73c",
          "length": 252,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "497986ef-989f-45e0-8391-f979783a8681"
        },
        "item": {
          "id": "b44622c1-b032-489f-b4b7-dd50ab0eadc2",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "54eb2724-dcef-4904-a74c-2185a6078a40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94bae396-26ce-4ceb-8208-a83d31abecc2",
        "cursor": {
          "ref": "557eb977-5826-4135-a5b9-f6e105a8197a",
          "length": 252,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "1346cccd-8685-4e14-8ba8-060506bb6510"
        },
        "item": {
          "id": "94bae396-26ce-4ceb-8208-a83d31abecc2",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "73978830-5677-4081-b3ef-18d5bed48b10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc9f9ebc-403b-4e14-b22a-45dde7921761",
        "cursor": {
          "ref": "281e598f-d837-442e-a26b-7277ec1ebe48",
          "length": 252,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "4eaa288a-f380-487a-ab25-ee64909ced68"
        },
        "item": {
          "id": "fc9f9ebc-403b-4e14-b22a-45dde7921761",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "0d82ae95-81d4-4fda-868f-4bac11160c21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed50017d-a34c-4c73-9c6f-d2ca8a5cfc84",
        "cursor": {
          "ref": "54ddc814-4913-42fd-b01a-f254bbd67589",
          "length": 252,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "1e52af9d-cfe1-4a14-9e0f-ca470a49809f"
        },
        "item": {
          "id": "ed50017d-a34c-4c73-9c6f-d2ca8a5cfc84",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "d913ebc4-aee8-4231-a2c8-987743b2b031",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a61c741-6c7e-4e78-9076-6703091a99ec",
        "cursor": {
          "ref": "4a1e1ee1-8d54-4212-8dfe-6151f763fb7c",
          "length": 252,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "b29cab9a-4316-4dc4-bea0-530c771c006f"
        },
        "item": {
          "id": "0a61c741-6c7e-4e78-9076-6703091a99ec",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "19ae48e3-01ef-4059-8c6a-d5ee19f57707",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98a8fd30-9b21-4eab-85d5-8c454e026f99",
        "cursor": {
          "ref": "f7e01285-fd84-4b78-ba98-25e1b889e64e",
          "length": 252,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "dba0f7cc-89c2-4466-ab69-f80902597b27"
        },
        "item": {
          "id": "98a8fd30-9b21-4eab-85d5-8c454e026f99",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "6d93e2d3-03c5-4c0e-8354-cb03751621ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc5da205-b764-4e50-91ca-b42f2c8b51a1",
        "cursor": {
          "ref": "00f44f8b-9e17-4192-8412-39ef84e3132d",
          "length": 252,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "8320fa41-a92b-4961-8603-4625aa43f98a"
        },
        "item": {
          "id": "bc5da205-b764-4e50-91ca-b42f2c8b51a1",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "b113985d-645b-4c15-94c0-8fd2789b034e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08d0df97-5656-4453-8bbb-0bdc0cc02a06",
        "cursor": {
          "ref": "886b3a1e-436a-41f1-bf3c-9f8e444b2d54",
          "length": 252,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "caa4aa30-bafc-4333-8e9c-7d1068725895"
        },
        "item": {
          "id": "08d0df97-5656-4453-8bbb-0bdc0cc02a06",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "f4e2cba9-29ef-45f8-88ed-760870326e24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "103fd97e-8093-4f92-a75b-cec6491d8ee0",
        "cursor": {
          "ref": "34aa323e-fb80-44b7-8bf3-c429642bc97b",
          "length": 252,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "7b8101d1-2838-4e8c-a8fe-1797b3811eaf"
        },
        "item": {
          "id": "103fd97e-8093-4f92-a75b-cec6491d8ee0",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "4dcc87cb-25ce-4945-88e7-b9fb09ca32d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38428d2c-c3f8-416a-b9cb-7d58197271d6",
        "cursor": {
          "ref": "f0d9ddbb-fd17-489d-9626-f38c023e4d5b",
          "length": 252,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "39689d6e-b946-45db-b246-1a0393015b27"
        },
        "item": {
          "id": "38428d2c-c3f8-416a-b9cb-7d58197271d6",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "e6df69b6-fa36-4391-a85f-d73fd428ac9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "220daf30-0b99-4d5d-9312-de90c7a55d9e",
        "cursor": {
          "ref": "187ea59b-9db8-4885-97ea-6909daadd150",
          "length": 252,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "71ee92e4-bf89-418e-9d37-72e6aa64c58f"
        },
        "item": {
          "id": "220daf30-0b99-4d5d-9312-de90c7a55d9e",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "14a22c93-4528-4b1e-92f9-b483e29ff98e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8243ceb-a6cb-41e4-b1da-eb8df9863c06",
        "cursor": {
          "ref": "82f425b2-e9ee-40c2-9e1e-ea9e184aba09",
          "length": 252,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "50049dd9-dd10-4837-8b0e-842dd85c6050"
        },
        "item": {
          "id": "a8243ceb-a6cb-41e4-b1da-eb8df9863c06",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "3413b5ad-fd95-4573-9525-0a2033386a74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9583f4d-d825-4555-9e9d-d2de0970c336",
        "cursor": {
          "ref": "a74fcf0f-5db8-46cd-9caa-20cf3c353ab2",
          "length": 252,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "da54d5a0-aac6-4628-b66f-6488f3ec86a5"
        },
        "item": {
          "id": "e9583f4d-d825-4555-9e9d-d2de0970c336",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "79b7ad82-6d5d-4e5a-8578-5e3dc8a48d3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0636f88c-9dae-4cc5-825b-537e98322637",
        "cursor": {
          "ref": "a2c2824b-96c4-45c6-90bb-4a3bf233d93c",
          "length": 252,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "2c2ea5ab-567e-488f-a583-e8a27bbd3618"
        },
        "item": {
          "id": "0636f88c-9dae-4cc5-825b-537e98322637",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "dfe26741-f39a-4c0b-a80c-9226c9c7bc53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b289a262-828a-4f87-bb4f-2406f42ef20b",
        "cursor": {
          "ref": "5ca04adc-dfe9-4d40-9d89-3385e2342c5d",
          "length": 252,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "2f64db26-7486-4eb3-aebb-baa89a93df12"
        },
        "item": {
          "id": "b289a262-828a-4f87-bb4f-2406f42ef20b",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "eb4c459b-a934-4bb1-bc2d-d446acbd5b18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ccaedc7-8614-4a7c-a43f-45aaba0546ee",
        "cursor": {
          "ref": "7abf3642-3b0e-43b9-aca8-2f2a333b7ffb",
          "length": 252,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "5dc74e03-5e86-44b1-b9cb-a08edd005b68"
        },
        "item": {
          "id": "1ccaedc7-8614-4a7c-a43f-45aaba0546ee",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "0253d33f-fa24-4134-997c-f03e37cae2c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9ca9070-de53-40e7-ba5c-30b6f1986bfc",
        "cursor": {
          "ref": "8890be08-1815-4eea-bd17-fc8e3183e993",
          "length": 252,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "c123c75b-304d-4067-8688-e6b367453867"
        },
        "item": {
          "id": "a9ca9070-de53-40e7-ba5c-30b6f1986bfc",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "d64aecf0-4735-4447-95d9-29cc70fb708d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c7f34cd-6428-48e8-96c2-630e55bc7b3f",
        "cursor": {
          "ref": "7f179130-86e2-4d0f-9c42-d848577917d5",
          "length": 252,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "4979fc69-d965-4c63-937f-3cdb0ca0c454"
        },
        "item": {
          "id": "9c7f34cd-6428-48e8-96c2-630e55bc7b3f",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "d3e96571-4bcb-4b32-a452-a6dedd8a1114",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77b4b49f-8658-4475-9bb6-937588130e81",
        "cursor": {
          "ref": "ae769cd1-0dc6-49e8-b3aa-01292e70880f",
          "length": 252,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "cec38b15-cedc-4774-8d82-e9821853337c"
        },
        "item": {
          "id": "77b4b49f-8658-4475-9bb6-937588130e81",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "80846675-27d9-49e1-a71b-f05e398a2233",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a63c3952-5376-473b-8944-095a5ea611b0",
        "cursor": {
          "ref": "42631932-8545-442e-b2a8-9a6cb998a77c",
          "length": 252,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "bc9c8d5c-f433-448e-8d52-6cab2ffbf7b6"
        },
        "item": {
          "id": "a63c3952-5376-473b-8944-095a5ea611b0",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "d1f62ad2-624b-4f01-9c60-fe450c7f18f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a97dc820-4431-4784-80d1-8c0deb6f5abb",
        "cursor": {
          "ref": "bbb50bc4-9e50-4508-8906-edfb2f16850c",
          "length": 252,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "aed1e748-9fbc-48d3-a599-e9fc5811634c"
        },
        "item": {
          "id": "a97dc820-4431-4784-80d1-8c0deb6f5abb",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "9f2c1bbf-1524-4b1d-9a9d-0376a6c7cd83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "731b3846-86bb-4ca4-971f-e618d2ee7a92",
        "cursor": {
          "ref": "f0ddc0ad-6960-4500-a6cf-1d3313d8e344",
          "length": 252,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "a3d5f6ec-57d5-4273-881b-6b8a4adcd8b6"
        },
        "item": {
          "id": "731b3846-86bb-4ca4-971f-e618d2ee7a92",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "1dbbf1d4-bbbb-42dc-ac71-5723aa7598f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "368d05dd-ed22-411b-80ed-0fb392e0072e",
        "cursor": {
          "ref": "a9b9f0ce-783e-49d5-adc6-dc144d009674",
          "length": 252,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "19d06186-b94e-4b6d-8e35-8a30d035566e"
        },
        "item": {
          "id": "368d05dd-ed22-411b-80ed-0fb392e0072e",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "9c92b05d-0f87-468b-b22f-7ced73681c42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f00a40c-425a-489a-8427-cc6a73354fa5",
        "cursor": {
          "ref": "7fa3f2eb-778d-4650-b64a-b70bf96d5d4f",
          "length": 252,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "db159ab2-447a-4169-a74b-9894cc36f055"
        },
        "item": {
          "id": "9f00a40c-425a-489a-8427-cc6a73354fa5",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "6c396db8-83b3-4005-9f50-feadcec30d1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a4dea95-c188-4c3d-a443-f75f6f1957ae",
        "cursor": {
          "ref": "d1dcc67e-2206-48ae-a554-28009b2ba1ac",
          "length": 252,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "2fa10431-cf7f-4cdc-a37b-39f35b6f8298"
        },
        "item": {
          "id": "9a4dea95-c188-4c3d-a443-f75f6f1957ae",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "7238aa30-db69-480a-b961-7d41dc806c6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b81cceed-f1c6-4f9b-96b1-df2210b05244",
        "cursor": {
          "ref": "c3fe505c-1c7b-458d-9b40-615e3783392d",
          "length": 252,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "660ccaa4-b0f9-4443-89f0-01884585bfaf"
        },
        "item": {
          "id": "b81cceed-f1c6-4f9b-96b1-df2210b05244",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "80b60df5-d1a0-41a7-896c-aeb1fb8e4ec7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d3eb6c6-f669-4bde-9ddc-e614a3dd5a10",
        "cursor": {
          "ref": "b473bffa-8653-4192-86d0-da8164ff6bac",
          "length": 252,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "e9b3bb8f-d2c8-4858-823f-8b6e90c7df43"
        },
        "item": {
          "id": "0d3eb6c6-f669-4bde-9ddc-e614a3dd5a10",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "5f4a4d70-e945-449c-83ef-f0a4ae01ab47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "615ab79e-03a1-43ad-a3c3-8e90c4338b38",
        "cursor": {
          "ref": "2f7a61c2-ce0b-4506-bdb0-55b70e29896f",
          "length": 252,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "8aea70ff-9336-4605-b8bb-df33d5318f80"
        },
        "item": {
          "id": "615ab79e-03a1-43ad-a3c3-8e90c4338b38",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "ec1598ea-78de-4630-b30b-a1690121643e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "634761bb-c2b9-450a-b44b-5ee67af7c94a",
        "cursor": {
          "ref": "0da69912-09d1-40fd-b60d-9bf9e6d58c4f",
          "length": 252,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "aa438ef7-7cff-4a28-b207-694fe19ed22c"
        },
        "item": {
          "id": "634761bb-c2b9-450a-b44b-5ee67af7c94a",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "8b3e1505-f125-43f8-8172-b98f750228a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "276fad0b-28d9-4fb5-b224-0c5b3ae64a32",
        "cursor": {
          "ref": "ece7bcaf-0672-4656-bfba-89ecc202cd7d",
          "length": 252,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "84b187eb-0a6a-43bd-a1aa-67fcdc3ad5d9"
        },
        "item": {
          "id": "276fad0b-28d9-4fb5-b224-0c5b3ae64a32",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "38d486ba-d3db-4651-a621-1878ab7cd4fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b586b97-8555-4a9f-86cc-934183e8beb4",
        "cursor": {
          "ref": "5bb1dea7-a580-4e50-aec0-3c03e01179dc",
          "length": 252,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "e4a9ca88-30e4-4591-9d0d-81c622f444b5"
        },
        "item": {
          "id": "1b586b97-8555-4a9f-86cc-934183e8beb4",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "d38444d6-23bb-41f1-8579-e36210e176f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8be06b5-ef28-48d8-8197-2018dfbf0091",
        "cursor": {
          "ref": "6165b5ca-ed22-4aee-ab96-245860b9232a",
          "length": 252,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "1ede912c-13a9-4cfd-869c-f0f9d272d2bc"
        },
        "item": {
          "id": "f8be06b5-ef28-48d8-8197-2018dfbf0091",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "8f65e82c-3df3-4233-937c-c5729c3a7cdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e4bf3ec-4163-4a43-99cf-0ad3075eb517",
        "cursor": {
          "ref": "1baab356-49ab-4afd-855b-208521ba9438",
          "length": 252,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "e77f2fcd-29c8-423c-b628-5f71e4020133"
        },
        "item": {
          "id": "1e4bf3ec-4163-4a43-99cf-0ad3075eb517",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "1c544d8d-71e0-4e95-84a3-8c1652e589ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9e6fe7d-88e4-446f-81fd-f76dd122267e",
        "cursor": {
          "ref": "1937fe50-ff15-4257-8bff-d5559ac6cf66",
          "length": 252,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "9ac4c270-d76b-4d16-af3e-763618274dd2"
        },
        "item": {
          "id": "c9e6fe7d-88e4-446f-81fd-f76dd122267e",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "6f4b8401-fb94-470f-a0b8-8da21d624412",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14f14e93-ec59-47ab-9872-1c2a6947bce5",
        "cursor": {
          "ref": "213acb82-7b2a-48fd-a44d-a18031a27822",
          "length": 252,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "32358a20-9bde-4e26-8a4f-84ebe5150a9e"
        },
        "item": {
          "id": "14f14e93-ec59-47ab-9872-1c2a6947bce5",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "368f0bb5-b5ba-4ae4-b794-9db9ff03baac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "589d3ce1-3534-4840-9805-1e3266bbab05",
        "cursor": {
          "ref": "ca87d9a1-85fe-4224-9cb3-1db41583f3c0",
          "length": 252,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "371b4bb5-3f91-44e8-8175-68a7d5ab5a92"
        },
        "item": {
          "id": "589d3ce1-3534-4840-9805-1e3266bbab05",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "29e1fa4d-5d9a-4922-a5aa-ac22fbab04ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d427ec02-eafd-4b29-8c14-07743236e533",
        "cursor": {
          "ref": "7b12691a-3d50-4218-a69f-467aa1c2e3e9",
          "length": 252,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "e8ef1010-5866-4df4-8ab9-d702bec90542"
        },
        "item": {
          "id": "d427ec02-eafd-4b29-8c14-07743236e533",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "39e6d430-6ae4-4281-b774-3ca385226eb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "796e3e63-cd4d-43d0-8c6d-14d602113756",
        "cursor": {
          "ref": "d1e3769e-6870-4d74-a52a-e980ed6c87f3",
          "length": 252,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "106a0c8e-6656-489f-84ce-b23fc0c4f41f"
        },
        "item": {
          "id": "796e3e63-cd4d-43d0-8c6d-14d602113756",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "52d9324f-1a36-4de0-ac04-1b9f8dbe5108",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72eb706d-009f-408c-a918-b7cf9bccc996",
        "cursor": {
          "ref": "57088891-2c3b-4d49-acd3-6efde3088499",
          "length": 252,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "100f2029-73db-4229-a736-f5eaee2cea52"
        },
        "item": {
          "id": "72eb706d-009f-408c-a918-b7cf9bccc996",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "1a9362b6-43aa-4436-9bda-348365ebbc36",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "489a440d-66f0-4282-860b-7650d01d8870",
        "cursor": {
          "ref": "e18447c6-ed65-4e81-808f-a129da00ab4d",
          "length": 252,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "00f5e8c6-3254-42d3-9f01-d232209ecb3d"
        },
        "item": {
          "id": "489a440d-66f0-4282-860b-7650d01d8870",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "5c986b0a-029e-4132-ada5-c7317c6d7681",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 35,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42d5a1df-fd48-4715-be6b-7248ca6a33c7",
        "cursor": {
          "ref": "393510af-bbf0-44a1-972f-39b0e2249eb9",
          "length": 252,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "5b33aad3-d655-4af0-b5f3-dd945ac66047"
        },
        "item": {
          "id": "42d5a1df-fd48-4715-be6b-7248ca6a33c7",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "5951cffd-2181-4727-824b-c10ff249a614",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:244)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:244)"
            }
          }
        ]
      },
      {
        "id": "bd9129da-61dd-485b-bb75-b784eb7154dc",
        "cursor": {
          "ref": "ed9a104f-d69d-4c9b-96d4-598fafb75e78",
          "length": 252,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "ae7ad6f5-dcc5-47c4-999a-d07685b83ebe"
        },
        "item": {
          "id": "bd9129da-61dd-485b-bb75-b784eb7154dc",
          "name": "credentials_verify"
        },
        "response": {
          "id": "e1c49685-044b-47cf-9085-803bc64972eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "cf4706a9-110d-4707-b04c-e5344f225b19",
        "cursor": {
          "ref": "67dbf831-4863-4a8c-bfba-f0c23b30ad03",
          "length": 252,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "3ee934b6-8690-46d7-8128-71daeaa8d632"
        },
        "item": {
          "id": "cf4706a9-110d-4707-b04c-e5344f225b19",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "786523e2-a739-469c-8ac1-e6e724041d32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "35de2b8c-ad0c-4f0b-86cf-e30807dd15c6",
        "cursor": {
          "ref": "d8a7bd37-92b0-465b-9d81-da1dbc7c57c9",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "b14a36d6-63ce-4fa3-80fb-3bac79112b2d"
        },
        "item": {
          "id": "35de2b8c-ad0c-4f0b-86cf-e30807dd15c6",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6ff29bca-cf76-49c1-ba6d-0508cfc050a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35de2b8c-ad0c-4f0b-86cf-e30807dd15c6",
        "cursor": {
          "ref": "d8a7bd37-92b0-465b-9d81-da1dbc7c57c9",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "b14a36d6-63ce-4fa3-80fb-3bac79112b2d"
        },
        "item": {
          "id": "35de2b8c-ad0c-4f0b-86cf-e30807dd15c6",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6ff29bca-cf76-49c1-ba6d-0508cfc050a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35de2b8c-ad0c-4f0b-86cf-e30807dd15c6",
        "cursor": {
          "ref": "d8a7bd37-92b0-465b-9d81-da1dbc7c57c9",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "b14a36d6-63ce-4fa3-80fb-3bac79112b2d"
        },
        "item": {
          "id": "35de2b8c-ad0c-4f0b-86cf-e30807dd15c6",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6ff29bca-cf76-49c1-ba6d-0508cfc050a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5974de40-d3fe-4d1d-a9d7-5b58fc3b9067",
        "cursor": {
          "ref": "a591d6d9-0107-46b5-8958-ae2f4aca5a70",
          "length": 252,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "dbeb0216-8e1d-4a9d-873d-b9a4c854bb62"
        },
        "item": {
          "id": "5974de40-d3fe-4d1d-a9d7-5b58fc3b9067",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "8baab9cc-4b22-4020-8e7c-06177d171d95",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 35,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e5fa7ea-2b68-4ef1-86ef-86c8e7501598",
        "cursor": {
          "ref": "58af7dd6-de82-4846-abc1-9ba6e54c3bd9",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "824cf33d-7077-4882-95a5-02af35a3479e"
        },
        "item": {
          "id": "5e5fa7ea-2b68-4ef1-86ef-86c8e7501598",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "2033f35c-9a87-4eb4-9b0f-0f462c3a7214",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "5e5fa7ea-2b68-4ef1-86ef-86c8e7501598",
        "cursor": {
          "ref": "58af7dd6-de82-4846-abc1-9ba6e54c3bd9",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "824cf33d-7077-4882-95a5-02af35a3479e"
        },
        "item": {
          "id": "5e5fa7ea-2b68-4ef1-86ef-86c8e7501598",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "2033f35c-9a87-4eb4-9b0f-0f462c3a7214",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "37a48ec6-70bc-47da-8ff0-fcc3f2794672",
        "cursor": {
          "ref": "eddce804-b14d-4e2b-9a3b-8739a1c51ecb",
          "length": 252,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "d8eccfd0-fb26-4f00-9595-90bd04de1d4e"
        },
        "item": {
          "id": "37a48ec6-70bc-47da-8ff0-fcc3f2794672",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "f456489d-8ac9-4a45-b26b-14e350a6e776",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "4b22b131-3d1d-4cad-b504-2aa5f35c266b",
        "cursor": {
          "ref": "90bc36ae-e5ea-42e0-9b6f-f670be3c4c63",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "9297f020-fbf1-4d4b-b49c-0b72c9cd8cbe"
        },
        "item": {
          "id": "4b22b131-3d1d-4cad-b504-2aa5f35c266b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "c0855c56-aa54-4ef8-8cec-491840dfea5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "4b22b131-3d1d-4cad-b504-2aa5f35c266b",
        "cursor": {
          "ref": "90bc36ae-e5ea-42e0-9b6f-f670be3c4c63",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "9297f020-fbf1-4d4b-b49c-0b72c9cd8cbe"
        },
        "item": {
          "id": "4b22b131-3d1d-4cad-b504-2aa5f35c266b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "c0855c56-aa54-4ef8-8cec-491840dfea5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "4a88f0d8-b215-4d09-8bef-54f9bd633d7b",
        "cursor": {
          "ref": "77f156cc-21b2-4333-ae18-78b4e897d23d",
          "length": 252,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "31b31bac-9584-471c-a8c5-f176c5c7c5be"
        },
        "item": {
          "id": "4a88f0d8-b215-4d09-8bef-54f9bd633d7b",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "251c45e3-f553-4efc-a515-6568c72a5e96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      }
    ]
  }
}