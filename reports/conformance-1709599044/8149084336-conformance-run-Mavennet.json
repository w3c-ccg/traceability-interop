{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "942f406c-6335-41c5-bb9a-ed4b67cfbaa3",
        "name": "Clear Cache",
        "item": [
          {
            "id": "53a0108f-a19f-4bf5-b68e-242d438be2fd",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "87cb16cd-ef97-45cd-b0bd-2e6a2cc43c0f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "72aca212-1346-4edd-aab7-36ed183ecac1"
                }
              }
            ]
          },
          {
            "id": "2e9cfc66-1a9d-4bc9-9c18-c2132ed33c33",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9661b677-5614-4670-a705-a9b0dca7c108",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "1fa173c8-44ce-4686-94d0-a1562267f326"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "117ebc1a-cf08-4999-a013-4eb53c8f5d6f",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "00b00afc-4735-40a3-acba-20b410615fc8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "da656a15-1aa6-4aaf-847f-482efeb99854",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "24c41c44-67a7-43f2-908a-c0a3cc009f99",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "674ba62b-de1d-4bc1-89b4-d50152b740a9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f373d0e9-4e5f-4c1c-a15c-21e49bd1dba5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c1de2ea9-9af6-49b4-bd15-f2fe18109fae"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9ce23556-e6e1-4100-b000-d32216ab01df",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ee1a1075-2125-4c73-b36a-71a46cc118fd"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ea2f126c-9d29-47fe-a433-12168a38127b",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "f81d2ed0-0971-40b1-bc9d-e6f311d88c65"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4f90413d-c55f-44c6-bcd3-1396ef12c1a8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9ed20620-0d18-40e2-9d53-117dcda1f246"
            }
          }
        ]
      },
      {
        "id": "e9e8c533-d6eb-4c8e-93fa-6d42775270ea",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "82bd864f-a78b-4a9f-8b11-af1a8197f963",
            "name": "Negative Testing",
            "item": [
              {
                "id": "17f1aac2-af64-4065-89a9-cc5c3955efab",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0c0000a1-9d41-403c-afe9-84c39e610fce",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38ecdb8c-8bf0-4d27-82c9-b2db85c6e57b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "99f82e8b-11c6-43b9-a5c8-ac6288b199a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dd67150-501e-47be-97d9-8d0195b6fd76",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2edbc365-5e7d-4588-9e65-6f173dd09fcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b8b136cb-8d5a-46f5-8fa9-f5b66336381e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad98a83e-6552-4fe5-911b-27928257f98c",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45f694e7-266b-4f49-bea2-60564922b3af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f2b8ec0e-a7a7-492e-b147-c8d8bc2e08db"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e3f4b657-6ea1-41e1-8c87-cd53b5f69682",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "352cfe04-472f-45f1-851a-700a9e7330dc",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ced353e0-6b4c-4140-97b7-58d15ebb31b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "79b756de-d008-4f3a-984f-270d774fc14c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "533eae81-9b04-4c7a-85a6-7e3ae65349d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45cee40b-147a-4800-9c7e-ccaae373456f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "bfd75b90-252a-448b-afce-18c0a8edcd82",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ff3e10c8-65bc-40fd-a05d-853bdd605a3f",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "77e39814-8e4a-429b-972a-b4350a0cb981",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "995c92fa-f54d-44f7-995b-187adefd0d95"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "38d45937-05cb-4f81-b7ea-534a0b8519dc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "add04113-bfb4-4527-8c47-f6911c1f5a43"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6fc12470-8cee-431c-ad71-c44afcb39612",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "49109b41-7bde-4acb-9d1f-32a1233ed124"
            }
          }
        ]
      },
      {
        "id": "e1f8b377-79a7-462c-bccd-8e3271d8fe89",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "bda458d9-eba2-4870-90d6-98386aeea48a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f21909a5-5200-46f1-9a1b-43187599c7a3",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "1f1cdf31-b4d0-4cc6-abfb-04cd65560109",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c896827-fea8-4b8a-869d-67db4fc68776",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ea8ff76-02c2-4b32-bfc9-7f17379abcc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5be1196-9b83-4c45-9128-37d627329e48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "45e7f8f2-b8a2-45d9-ba12-87a3e1bc50fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4871b561-66c9-44a1-a136-2def4e716474",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33a9896e-753a-4c21-8729-39a2c40e688e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7466015-8fc3-49e4-876d-b85590dd79da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3ca4e4b-9bf6-46f4-8f89-419ddd64452b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "de4403e6-7d5b-44ca-b296-a177bc905fb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16cd5d65-e71b-4ae1-be4f-9c351e52ca1d",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24945975-f1d0-48eb-9b6c-e9ed3602535c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "560b925e-b9a9-448b-b94a-eb30e133f354"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad387ff2-2ba8-4f61-999e-e67b2ab96dcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7ece1fe3-1932-4e87-b4c0-bf577e1bc51e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49f08110-0574-4335-9a6f-3a345f387e89",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2cd1c2a-fa92-4444-b413-726448b2b3ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b643c6b4-192a-479c-bb47-e431bd0dfc33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "687a3424-850f-47aa-9c0a-34925bb57384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2c0d8433-a720-4821-9086-d27af0eb2d78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d3bf8e8-7998-4df2-bb47-a4f67a90fb51",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fce4e17d-ff51-49d7-aabe-e34e7e19571a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f70e11c-7ad6-421b-bbfb-53d715bb9d31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d43b2790-68e9-49a4-9c33-d82b1d62850c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "21e8f207-a061-4871-ac9a-778d4301025d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b804494-5307-4a29-9339-26392c85c12d",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26d2438e-4405-4051-a48d-eff602eea864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "203cdc34-593e-4f43-a4a0-c046bea4ee7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac27f5b9-b2cc-41a2-aed4-8e232be6c701",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "60b1ec29-1b39-4112-abe9-fa5092e42c91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "664fb114-7a3b-4fb5-81f5-74f64415e563",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b754279-0a14-4ea9-abaf-2b574ac0ab3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe979175-da8e-4960-b30b-e708af943f2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d1e358c-6bdb-4fcf-aa10-0d1ac1d04ef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e6869ab2-4510-408f-9f93-540ddc07b187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bbd70aa-49fb-43a3-a75c-dff11c649ecb",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01c8c8a4-216a-4955-b3fc-a4ab7e7079c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "138cba32-46b8-4294-b8cd-437e34234e21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93b05a38-3df1-4e30-9ee6-950552e2aac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "29b13709-b306-4965-88c3-d1e5f622126a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bebec1d-0401-4434-9f94-7a0057672864",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6c075bf-2e40-4026-aeff-10ac166c0c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57999887-440b-40f8-9368-5b5a56060049"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3618f76e-97b3-4d71-962e-e4d9d09e52de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4d3a1362-7818-4a61-96a9-e612d010636d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e22f415-0b26-4081-9f77-7951d1a1854b",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7254ca0e-7e29-45c5-9b40-516c92ce00ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "631c1e9f-1cdf-4a07-9326-b29c467d54fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e13d20e0-b2d3-478d-8413-6fde3368e310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6dc4ebad-2164-46ad-8d6f-3131ff4c113c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7ec1b9f-7abc-4c8c-96be-6a0c75680d85",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4bb8ecb-963b-4205-8b54-b589f548d660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7e3e576-278b-40ed-b775-a7565571b94d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e634f388-cfed-406f-8d02-c3650d0934b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "227acf00-68f8-4684-ae4d-097307ec8720"
                        }
                      }
                    ]
                  },
                  {
                    "id": "444ee707-2e5a-4127-a03b-aad471e85a7a",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0c1247b-4f43-4ef4-9630-03d3bc77f850",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2beaa55-2ee7-4c4a-873e-a9ee0ad5a316"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bccbc90d-cb31-4e0d-b2bd-a8cb34f525a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b4300f94-3a3c-4038-8728-df8146685eaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec015524-81da-4bca-8329-734e067e40c9",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "815ef4b0-59a4-46f1-b13a-c502191c9b94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e54f87a-da60-46db-b84c-49683c5a9239"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d696352d-6e7e-466a-a39b-426832ea2012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fb4eba4b-50ad-4820-b7b7-7fbc48344251"
                        }
                      }
                    ]
                  },
                  {
                    "id": "265b73a7-1e41-4fcd-bb66-5bd53624fa46",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ccc993e-818b-4991-bde8-e99e7336761c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88266f65-7454-4422-b5fa-de882ce0f401"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "045cd39c-5111-46fa-9ff3-1519d4a01930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "565bbe4b-48b1-42a7-8ddf-e0ce84ce00a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a94c939-518a-4ce2-bdd8-9748cec07630",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbefed07-43c7-4c73-b641-4751443fd160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e21cdfe-f8a0-4529-a4b4-9aba2359e1b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e378f862-e183-4771-b1a5-d1f5b2de4fb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5d248963-de13-4cd3-a1a3-34c071db8f5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4430c4b3-f119-41ef-81ad-b9b3345eb815",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba4455e1-2e52-421a-83a3-35f55a9ea5b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f951eb71-d8db-48b8-86d9-3b667d92567b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58d725bc-8788-4efb-8972-ffb19063b446",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "37af016c-a071-4212-a70a-683e662e0dbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f6ea87c-b701-4562-90ce-9f34c33c30d4",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b91ac85-6be9-4c76-a3b5-bb2423f22340",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66743635-1edc-4c06-8953-d7df3b6fa16b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14065a4a-87bd-4985-9f6f-283fbb1d6287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a8ef9ae0-945f-4e4c-a314-ef6ee92e5279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb0e1973-b758-4b7e-b917-b705186ccd0a",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6185f179-4aa3-49a3-babd-a8b175878fee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09c90455-e35c-4950-91ed-7a7a5062e6f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c2befa5-1bca-4fda-87d9-0613cbc0c131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "166b3240-d23c-4b8a-8282-df4dbef5de0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbd17f35-76ae-4f3c-87c5-e78bdb39a8ff",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bd258a4-6d80-4886-9fbf-9c90f1c09d68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8be4c3a1-10d8-450a-8baa-bd904a4130e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86c0c3cc-f4f7-414a-8e71-62afc7f3b863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c34f4c1-3375-417f-a333-15aaf4ffc991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4a8f893-ce7f-4860-a47b-d89a71fe7716",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "392c8556-f5ae-46ae-aac9-f406b9f450a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3aca9873-02a4-4aeb-b214-2a5349456bea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4aeb885-b86c-46db-9204-10a0245307c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "738f8070-9569-4bab-801f-07c3667ccd24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be07a7fe-2dac-4bb1-8315-462046c7d6f5",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c3f279c-b945-40c1-b788-16590fe6f105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7ec60c4-0125-4a15-9491-d7ac0de53f0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7756eeeb-e073-4b21-a181-151292c8f7f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7bde0410-fe3c-4651-b6c4-d90f5f17058c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dd70947-45b2-4e16-8090-a2951b5f0a7d",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17f18535-396c-47d3-b42d-76bd699e450c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73a670e1-379f-4cb2-a4bb-38bcad6a4b82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e1c0c0d-9d68-416f-8e7d-46c7b9bffd6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "60c3050e-7d5f-43c5-8f3e-a80166481c82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4b0af77-6440-4728-b34d-0ca93c0431b0",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a6247c1-3f38-45a4-8d98-679e5ed300dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f40ecaf2-b3a1-4d48-9a7c-c1c77445cae7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "584c9805-d785-448d-9103-4ca9414f2729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1e3e9519-f8cd-41c6-ba2c-2c98dfa0dab3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ee5cafa-2b50-4945-8439-aba48b218728",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b5c12be-67f1-4f45-a571-8eab2dc8c926",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66bded91-9cab-4996-ad6f-f4fafeb682d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04b99748-67ac-400c-9e5e-6d5e4b9082f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "5de0285d-9f7b-48f4-beae-c856cdfc92a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dddcebfd-3e94-4bfe-9e57-4f277cdd3b9d",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6407b4e1-18f6-4371-9703-1a977705fa74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc9bbaac-1bc3-44e5-8498-8c27ab0a0374"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43909d2d-6374-42e4-a77a-7fca9d9a7827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d1533e8-8861-41e7-b77d-b3ef61033d74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26eb3240-1986-4a22-8712-1a559a0b30c8",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "669767fa-5ad2-4b38-bc67-e275ed797ca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c84ca24f-f7e6-4966-b1bf-773a5978fb9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "155f366f-ab07-474e-99e6-3700293338a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c85ba5dd-e9a3-459c-a9e5-4f39136262ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29618c69-cb5a-4e00-9799-3621bdb65c30",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21253fe2-2938-4c0d-9c91-16e77b84423f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7450a47-d1f4-4332-8267-93c00de4442f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55235c97-8669-49c2-b73c-075ebfd58ded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "23c86e8c-fdc3-4cc1-94d2-5acbf66d3a55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79eb6f70-1ce1-4bb3-b095-262113e9a77c",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81bc765c-fe4b-4ee6-9a0e-ef3cd26346da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7ce8992-ae8e-49a4-9510-9fffe4722cdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bada2363-df11-451e-a3d2-0601aae797c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "390c9ac9-b440-4171-b275-dc2d9332fa2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dbb8f6d-2681-4c8f-bdf3-eb379dce0e73",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bdf5450-552a-4502-9ed3-4561560181f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b162c42-2e65-4b7e-b9a9-dd8de727a179"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6d9db7c-d80f-4cf7-b0d1-9aae7670d488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7d07a9d-ce61-45b3-b620-9490c3ee4187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3514fbff-b3d8-49c4-b3d6-85879e99712a",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2279fd23-73b3-4a99-99de-d78a621697a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfbbaddd-32ab-4d7d-80ee-a0cfd99eaaee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "569a3bf1-1165-4a97-8456-7b95efc385a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "115bf137-4fb0-4eae-bd34-951d10a4eeaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80152eb9-c5b9-4f84-b1ee-33d356917293",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57f7cf11-5c18-45ea-92e8-59afa841ec67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adeae8cb-709b-4900-b263-a78699d44c18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49775776-8e6f-46ad-89f0-8108fb6e4e9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3bfd7e13-60b1-4631-8287-8746595b57ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b09000c9-eb04-42bc-b2bc-0591c10814b5",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "535274a0-5ced-4de7-97dc-072b3b027a3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78d5aea2-e8c3-487b-8ac1-1fd9fa463d70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1181c79-b45e-49da-a644-a6245f48cc43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3148f4f4-7ea7-4d0e-a5a9-9924a887f53e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42a23f22-81cf-44f9-b507-ca2467864e5e",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e31683f-8fde-433b-b03f-0fb9abeb16aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80e9829e-76d2-4ce8-ba57-b3c69ab014e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea44d6be-35e0-41d5-a7ad-3ce684f13d0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "735dd2f1-53fd-4900-af5e-2449cc8fc312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58d4eee1-fdd5-4166-8979-81ceefbd1543",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fe01c53-91cb-4056-9ea9-aac18ec171f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1db397a3-0364-49b1-b422-36123b11d639"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d461990-5832-4680-ac81-937880967470",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1d40210-8990-4a54-9216-7b86340fbd2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c0d4dea-0e63-4ecf-9819-64bcc23e296d",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5401da26-5f8a-4547-a3e8-dd22f89ef27e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1085fd3f-4bd3-4fdc-a64f-ba05b3ca4de7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab762945-be5f-484d-80f4-edc72198a1e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "09576f61-38aa-4a4b-b985-e371145bec20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ac8910e-22d1-4a1c-a48d-cf4db1dbe2bc",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a903a16e-6785-4d47-a1a6-776eacbd6982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6d86d35e-6a97-4e00-a4f0-1f997a5eb1a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f01d58fc-96ca-4990-9b3b-8f16249aa92f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b2ec09f2-a575-436c-b8a8-2d0011b5345b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d41f88e-c49a-4724-af72-e871819b7473",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7041b597-fd4c-4a88-8ca7-3ff32aff18d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "183d62b4-ded2-4095-a750-90429e4e64ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7de5ac95-acd9-4b97-a9e7-ee141a15b781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c9b0d5e1-b3ec-4b39-b85c-02b84f39ef37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5b39867-f243-4fde-a8ba-158e8bc43ffe",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c6a7231-4924-48e5-9383-aa4c120ec192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e1a5c3d-dec4-4772-9522-acb5f16562d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c390f0d-6379-4736-8d1e-ce3b48d7b7da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c7781794-bd88-4e8b-b7f9-7e5771a082ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0951577b-7180-44d7-a96e-ba5e7f79d98d",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f6096e6-5fa4-481a-bb8a-e7885c8d1309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b61b760-964a-418f-a104-c48ed27a5b45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5094e4d-4bb2-4d2b-943f-13d300029ad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "db011611-de52-48a3-8af3-8ffff473e728"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05000d15-2bda-4c67-bbac-20aa93ec944e",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf3c3b41-9201-46d4-94cf-38c668aad9f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14de9d26-0787-4803-bae1-2853a2a04c40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f035909-fe23-40be-9658-20489751a68c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d2b95cec-fccb-4c9f-9915-af15d7aea48d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "546eadc7-c089-45b3-a2a1-a01220cb49ac",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea11d001-e79d-43ce-a213-361e4fb68639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c296e087-2ca7-4b5f-b5d8-4d919667422c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0af09919-b35e-466c-ba0f-06af614af161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "89be89c0-b39a-4812-a119-05842d117757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b76bb5f-52f3-49da-8f36-ec37ccba4e12",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba4f9052-9a6e-4891-97f4-74386f08c340",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "198e9fb8-8d04-4be9-be08-88efe4ca5168"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f107b669-cd48-4dcf-b297-89d55c067e43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "28105167-6747-4ad2-98e2-b307b6624efc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "504c1604-7b94-4744-b716-e1de387e77a8",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "830597ef-3ac5-4f42-ad78-89ff20fa3df2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ed2a1e8-1f48-4b52-a6e9-5019282f954d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "594f071c-9976-4f40-ad4d-31d5c4e7c2f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7ea61610-7736-4123-aa2c-7d77433ed189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f5d1d11-2ecb-4c83-b433-4d48ded83166",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f67ceaf-3167-4476-bd47-5c08176960a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7f54fe1-a262-428c-9f8a-2e2d2a95e87b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f141873b-d7a0-433c-9bd6-0bb9db813665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "4df24e23-8e4e-4f57-b3cf-b8206925bf01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be13a75f-a285-456f-a66d-a5d5b9264f98",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69c638da-1025-4144-95f2-8ebf83958969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0e1c23a-f84f-4ec1-9d7d-c3f86c696f36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c116b49a-2102-4a8d-b8b9-381531fb2a19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "efa359b4-c161-4dd5-811e-9cf88a10146c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c79d1753-c8c4-4e8c-b35a-ccd22a894eb4",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0931b6c8-a563-4539-9703-fe8805f669ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24afdd65-8aed-4ace-8f61-fd4541138647"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f15ef2b7-622a-4392-80f1-87c15ef6d0bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d4854ac-4c80-4c1c-8638-f97058ad03f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16ce768b-d0a8-4bf7-a627-f4cd5027bde0",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33249a24-18b6-48f2-8e63-ffee1b18cb3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "447a7e7e-9869-4164-8e71-f8fa718c734c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcd6ea05-9c05-438d-87d0-db967b95e79c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "76395158-ff08-468f-ad15-bbc20c484c38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65a631c7-9b49-4823-9128-acbb676d0f19",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "766c960f-a81b-45b1-82ca-a003b4b4c1e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59602e17-473f-445c-a509-6e086b092c70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50bc80c5-6c57-4c30-9d60-7eb6f46d6983",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "90494a03-63a3-4910-803e-17963d6e4569"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00fdb16d-b111-424e-8724-e0aecfa6fa5a",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1414c027-b4b9-40c8-982d-34e4bb0e7189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dc0f283-f6a7-4cb0-a134-bc10780c2960"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43cfb733-c8a4-4187-9e77-a50f63c093ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "79f79a4e-e7aa-4ab8-8ae2-5d0f3724545d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1decdbbf-ca09-4973-ac6b-3b98adc102df",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77207e99-0baa-43d1-98fa-45d3664ce33a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d371198c-5d0a-4f1d-ac8f-f6ac43adaafe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3feb607d-e873-4b00-b964-2f6a04ddac1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3d946cb0-35fb-4e78-99db-b0e5815572eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ef204e1-8b8a-40fa-9dd1-653d254c42c0",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0be2b76-2905-4168-8464-0e59d8083903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a158d712-6a73-4d09-9370-bf8c16e14b20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a1bf499-d3ad-47c1-a1ac-d4dd3ebb5593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "51575562-465a-4d29-be68-ec0493b19472"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ffd5437-8dd0-424c-9fe0-6f9a9c6fd8d7",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03797665-352a-4f85-ac20-1985ed0cf2b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb7e2b1c-1a68-4181-a60d-3ee729266b17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81acbbd5-eaa4-4d0b-89f6-d91d4ac46dde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f0d3eab-c36b-4479-992d-204cd287f3c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3dfc26b-144d-45ed-8b6c-f0aa271483b8",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "082c9977-2326-4ded-808d-f2218423166d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47532e76-eb4c-4e96-8ab1-7b4c1f7ba1b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3818524-024a-49fc-8017-f882eed322f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c60360b-879e-488c-ac48-08586846e329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba62eee8-d4be-4ad7-abd0-4d0185e550e6",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e8869ab-a246-42c6-93bf-8077f3f93d77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea1e2a68-da2b-49e2-becf-765ba5dd355f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fafe570-200c-4ed2-a4b4-05cddb002758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4cb0a3cb-5e6c-480f-8213-ae2d67f34eb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "078fd34d-4e3a-4ab2-8fa1-554f2d3aac04",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "115179bf-7137-4c55-a276-68ab410ae553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13cd286d-fad0-4430-b3e7-eedb030bf105"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d6373ad-86df-4bea-ad54-34b2e0cd1a43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e6d1f53-17d6-45ad-b9ad-03e489dade38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c056829-14ea-4b38-a189-2264772884de",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b1ff315-107e-49bd-bb67-9d0143a51d41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "462233d2-32fb-4665-8694-10a7c6742cf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f95d2ddb-345d-452a-a241-a324b4e0874c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "e9e62e71-1fd4-49ad-9dd7-48c33cab02ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d65376b-8cdc-48db-9401-2da289c4824c",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db1104cf-8090-4856-b416-65bf2c5f73e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6140113b-f340-476c-aebb-59443d2eb72e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a10fcace-a1bd-49fe-9d3d-90c494047331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9d24a46b-54cd-40af-9ce7-4fee63056580"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66a77a62-52f8-407f-ad66-67c0a243e244",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3103562b-9f37-4555-a46c-c31c8fa9d588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1861bc02-ba07-4722-8958-9af0669942fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2757d68-d035-40e4-928a-547da1959fc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8491dfe0-148f-4504-a6be-6b7f6ac29c24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d0dfa62-ff70-4e07-be2c-1262cd0cfc00",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6124d187-9ec5-420d-806d-23de1c2eac66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7805ca0-13b5-49a5-be5e-13270df86f60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50ad1927-df61-4cb3-bb64-6b43a9aa1508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0ef4caab-35a4-4b96-961e-8475ef54ff35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "592544a3-8ac4-446a-b0b5-44c1b38136c4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae799e7e-b936-44a1-8f21-492eb36e81c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f4ad4f4-a7e3-473e-9131-83c2c3c72c4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1697de6-8184-444c-aa94-b884c6f64681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "be1f3633-adff-45cd-abc3-7d8478316302"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27c6b25c-472e-4277-88db-5a69aa143770",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e524dc0-8f5f-4d5d-bd0a-1bc7384cab03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f5aa969-17ec-4aa4-87a9-e8d24cbeb961"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da6cd40d-4396-41d9-a987-0433ebb32b48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "37d0fb99-3b33-467e-a77e-31035cdb0b0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d67fb9c-646e-40fc-9046-c5d01b6fab19",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49d16762-baa7-4b64-ae78-6ee2b1102fa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc70d9dc-374f-4459-a5ad-e531e73ec4ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "360b75bd-2a9b-4980-8627-300492b8519d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd790950-dc44-4353-92c1-0cdf9af19f9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5583507b-f8e6-42ef-9b34-3a02c970eb71",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa3116b9-ff25-4d45-a67c-f4b28700674f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "656835d7-e3be-40f2-bc38-e2c49c5454bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b502323-42a0-4c0f-ad4b-1fb5a32f49e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e118b454-d026-42e4-89fb-2312b9e5e89e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3688176b-1b18-4c49-8441-e447d46fb2a5",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4610f36-4676-4db8-b702-120f0f816a0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3dae4eb-afed-4704-b332-ea2cc5edcab8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e9582e3-a076-40fa-9686-aaff6dde7d08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f593283-2dad-47a8-9c0f-62fd72125ac1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "155322a0-5411-4a9b-8685-08d394cc5532",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99675c16-b417-4ba9-a5c5-0d0f2faf6a55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3c21fab-2cdc-4ee0-84a3-fb61ab3a9a66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fc083a2-d120-4ec2-a0f5-072e1750bb9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "887a7e58-027d-4d0c-b254-cbe04caad79b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "609c36d5-9049-4673-8d70-6ae61b13aa56",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30e4af44-c457-4700-9880-4b100f4f9a17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a223c156-d63c-412f-acd2-e19f6c767783"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7ad3ec4-3db0-4f24-91b6-9a267cd65bc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c38b788c-12b2-4ea4-81e0-860a8289c0cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e81f3f0-8e6e-4560-a60e-80141b1c75e9",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4be30379-ca24-4351-9f99-b62bad823a38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f479fa3-cb64-4cbe-888d-46a417ea87b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c98bc25-1b7c-471b-a994-355d55d7b1e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cca3c8c1-4485-4e87-ae27-102b703e4a2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09d34d0c-a731-4b4a-99c3-c62494b0641b",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de3ff37a-8952-471b-9318-a218d2fbb098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2adc8b53-9604-42e1-a368-cefe93c4f044"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7788d1fc-8526-4ab7-b0c0-5f8ef6fb6a94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "9283aea1-22bf-42ab-8a34-1c9af2fbf723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "912053d0-30f5-4480-8e08-e74b9aada4ca",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2baae7e8-e0bc-4cb4-9ab0-ade79a5608d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdcadf18-6fe0-4a9e-bbaf-58add1b3d5cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "839a48af-7bef-44a4-a467-a10725ca9bae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8261d55-5e5e-4286-a7a6-c3f644ee1f3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "410f6cfe-4024-4a34-8495-952afae1fe6e",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04e536e5-88ee-4b2b-84d1-c671f7ff6bb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b98fa984-97d7-4065-884c-e4e2963dfe95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "630ec7e0-77b3-41a9-b2c2-f09ad4f9f45b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2417717-35c7-4cfb-bede-ea56ad81d144"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7f6e158-482b-4df4-9175-aca9c394e5e1",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15b94fea-8f64-4af4-b9a3-07388bf7a7d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "786705b7-9aee-4db2-9160-3bbe549dfb88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e6b4866-609d-4acb-a698-f4becdbf9830",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0d56617-4c80-48e8-9e7b-1d030281f379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eab0934-5942-4ad1-9ae3-56a2c1b728b0",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1799ed7b-6d6b-47f5-a616-b8b396426fb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d961f98-7f93-406a-8de6-4eadafa33006"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a4801ad-f97e-444b-b012-0196c59dadac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4773b850-f956-4d37-86fe-0f31f6825ec4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18bccbc5-19eb-4704-81b3-731f7777c808",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22e9f279-6a97-48f7-aba3-c7c29f4e3bad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30fec06d-5757-4302-856f-5445306fdcf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19fa0f93-636c-48f5-ba22-970679e34fbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "01d24d51-b923-4805-be60-4102bc1e0173"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7005e61d-4eda-46c3-83ce-f2708e68bb15",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2b13a7a-2440-4f81-ab2f-fe6942661ba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7e84423-7732-4ade-8fd0-e87a47b0c86d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22566178-d7f1-4245-bdf5-bb26da6c5b7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5d0c86fc-03b5-4640-a4f1-d250808b88b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a41f0616-f599-41bd-b8d2-bf9057e16836",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34fb42c0-165d-4a3c-918d-d5e97e8623f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aed1ed12-bc55-4c44-a6c3-0acecc6c4f1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ef70522-0c9b-4d24-9f60-428b0e9966c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "07c52cd7-1523-4bcc-bb39-d1ac8c64c547"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f933553-1311-4fd3-8bba-8f9a558eda4d",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5e950d2-e73d-4793-aae4-6a187e71b95a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44048d36-b62a-48fd-b82d-f00f17f4dd21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80dbfee7-cefe-4d69-ba69-2f12d0f0a3f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7a34e11-9b7e-4324-a64c-98c3facaf36c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4e03181-e09e-4a62-9340-21b87a2cec19",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfe39819-b20b-45b2-bc99-6373066d7925",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d710fa6-e2b3-4b7f-9b4a-ec2fb42c8278"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36ac7f4c-2afb-4b12-84f6-3c4398d335cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b51b48b3-bbfa-4267-87f2-64e48bb7f2e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff50fc0b-2c64-4ab6-957c-a99aa17c878b",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c5efe01-0841-456f-b33e-906f6a56045b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31649ecd-3b1f-400b-a6d6-79a625947a13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05a6386b-c67d-4395-bd22-7990951d5d51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "69377a0a-5e60-450c-a3bb-ff8dc5ba8602"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55b0a084-2742-431a-86e4-29e55abb888d",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3706e795-51ce-4d17-9e47-de96e1908a57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad2e0cab-4f0f-416f-aa1a-f2723394aff1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ed82067-b253-49bb-8213-f2252226f7ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dcccc3cc-35f4-4920-bce3-58279e93c057"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21aa316a-06e3-4a5e-8188-4bf14a5ba222",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33abdcde-ccea-47c8-8db1-60a49efe3c5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "527c9b30-7ca7-40a7-8913-2c5f8d5d4003"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf27b1b8-063c-4f77-915f-c42a96cb716a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "48fa47ff-0950-46df-968a-e25075b76671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f6c5c4a-9288-44fb-9ddd-b3ee791815d6",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "332f040a-e10a-43c9-b1b8-635b3820e0a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ada90817-24a1-407e-9bcf-f51a7698cb7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34e1a5f6-caf9-4516-9bcd-70d2dd0b6679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "455aef7b-d7dc-4beb-9f8c-15b75798a22f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7618647-39dc-468c-bd86-4f9862db71d7",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4cd03b5-13f4-4877-9a92-938f4b4460de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26645546-90fe-4685-acb5-8c4e8fda73b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c3e43d1-332a-4a2e-9c9c-b70a1ec14c88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ddf57efb-064f-4fe0-b57c-a2098e273749"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77a800b1-e1c4-44e0-b821-c87f022c95a0",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c61ba3a3-6140-46cc-a737-4b61a7b23dce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95aa6d6f-e9b6-40c5-a38f-9c4e34915d52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7019084-a671-4635-9189-ef8a133725dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f24ba269-a228-4c65-9162-22a25765cc19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80e88557-6320-44b9-8ce6-31e957482b95",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e490530-e8c8-44f9-99c3-0077212e6c16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "179c63ea-e0be-4451-9330-2e7756080e34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c67674b4-0fde-436b-802f-5bbe4b969888",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "10ba435c-7f63-44fe-8586-a6c98fe99571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a275ab60-2044-4ac7-a4a0-0c30217552ff",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ef2cf18-9031-4b86-bfed-af0833ed9017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfa2cdf1-17d4-48e5-b77b-35ded1526232"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa52de3f-8525-48c6-9f21-0db699bdb951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bff40379-ab36-4b09-b961-685ccebad145"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9c0e7ef-b56e-43d7-acc8-de54be2e6313",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bf9edf1-58f0-4179-87b1-2378495e4e1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b8bd34c-546e-4d0f-a6ba-2f6c62ca77c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5936d257-73c8-468d-9ee7-0e60a5c3a44b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5466021f-f694-4866-8ab0-5a862ef1728c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80b3921b-4483-49e7-93f9-1eff1bcf0246",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a438285-7e27-49ad-a236-53da2bf98766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "161b7c34-053f-4190-81ed-939168642088"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97c5e05f-d7f7-4ec3-a792-9ac64743c65a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a7cd9945-6344-452d-a416-191991c098b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa00c764-413c-42f9-b6af-0e9c0bfb93d6",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04beb4fb-f2ea-444a-9dac-70f8e0b508ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8eb5393f-2b8d-4b21-9a05-c357d6740707"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a165181-f9b7-45bd-8ebc-87cb92a1b736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b8b1ac4f-0929-449c-b5e1-0ccc0967b738"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86e42c9a-a9a1-4310-b968-9e0eb59207be",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a449c8eb-abed-44f0-af90-45a826cfb2c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e2f5087-8fda-42f6-92df-44d71b0e58eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97aebdb1-cf57-44c2-9ecf-f3c70cdebacc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf074300-d5fe-453a-af09-a746808dcd3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbbf89a6-5b7c-49e6-abbf-28b42c1dc2b2",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60c55ada-368d-4718-9838-07218f10bd32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c41ae1f-4057-4f38-b710-70f7c41ec9a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48019f51-7464-4ff9-bd22-35c08b0de941",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8da91f8c-616f-4fcd-8beb-d41eeeae6f6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37034215-4494-4612-8034-2324cbc3543f",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79118611-8904-4d4a-9f93-fafd39079b43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69b342ba-0af5-449d-9bbd-5d934beb8c69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3156f1e2-8983-4f9d-af59-9eabd2d0fa11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d7f3758e-4f76-40d4-941e-b9ed773cfeda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b7958ee-ff47-439a-a466-32f5e94b9135",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f633fa7d-33b3-4604-aefa-c5d28dc9b67a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c7f81e23-7d62-4996-92fd-17dbc26b5ee9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80f6e5cc-21f7-4a87-a30b-1621624f017e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "5f8b7184-bbaa-47a1-8dda-08faee73f197"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e32597a5-899c-4704-b81c-eea4051f3bac",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9c186b9c-8ab2-46bf-9013-1878cc03fdce",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4be5e2fa-1d57-4ad7-bda6-e83b021ffbae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ff8e0478-0e56-49d8-ba93-47e9a2474915"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ab225ac-b5df-4e3b-924b-60be521079f7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "469137d3-ac53-4aba-b7a0-8a647581a725"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "34739e70-88ca-4be2-ae57-2279adfc93b3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "85eed91a-0c0f-4697-84d2-dea61b79148d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f24f0664-c1b7-4ef8-bfe4-84c7a2e76e33",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "283ca948-a73d-4f3b-827b-29b4da7c02ab"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "96aaddf9-6ec4-4342-9c5d-8dbd0e70d1f9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cff9cf34-fedc-4850-94d4-c1fc96cedc27"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d13bf466-2c04-424b-81b5-d42e9a6001a3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a47e340e-0bbc-4151-883d-a40bdf358d3a"
                }
              }
            ]
          },
          {
            "id": "314f5803-0622-498a-84ba-0f39087c6c94",
            "name": "Positive Testing",
            "item": [
              {
                "id": "23ebe376-0135-4d40-b9af-f01c6966351e",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "7f7d6bf7-0951-4bca-95af-1d3505513f0f",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7d967ed-5615-4500-a2c2-a6b432313426",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "a8c4df40-d0ed-4d8b-9049-49fd1267107c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71d90037-e679-490d-b832-38d2f19a57e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51fafdb9-1b85-4739-a027-e107a0d27934"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f264fa4f-11e1-468d-8b7f-9ba857516e7b",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "56f824e3-1cc0-4c69-a552-f64c76b10211",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fa362526-abe8-47c1-807d-c04e9a912edd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f7f0243a-48c8-42af-bc4a-6d184fc7a4b2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2d2880d7-5520-4d03-9733-d2c298e31acb"
                    }
                  }
                ]
              },
              {
                "id": "a34788c2-6de5-42d3-b740-7875a007c750",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e08d1604-b782-45e1-9bf5-de779bd2697e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "58f78afc-99ad-45e5-b78d-cb06183d57dd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c8fdd8f7-0610-42f8-8a3d-88ac503dd402",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6e7950ad-a68f-494a-a7c8-17afedce45db"
                    }
                  }
                ]
              },
              {
                "id": "f8508927-08cb-4afe-a0cc-bd46720d46a2",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dc741906-e79a-41ee-b2c6-0a8f978f13b8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f8c8a0ed-1ada-463d-b86b-ef0bbcf6a8a6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5bff2a23-be39-4f22-a7b9-5968dce0bd45",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8aecae6f-d59f-4629-8096-5a516b64aa81"
                    }
                  }
                ]
              },
              {
                "id": "91980433-2611-410c-af89-f428a5607e0d",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "23614545-7090-49ba-9cb5-1e0b80a114c3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e3c3e7f8-833b-4922-84f4-43d8ddd7eb41"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c7aa686a-938b-4312-9044-f5d45b08c53e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "324d858f-7c01-4715-a8bd-a714d2ca8119"
                    }
                  }
                ]
              },
              {
                "id": "f37bd0d8-3748-467b-8e84-c8eb2543e577",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f667e37d-0ac8-4995-a40b-6805ce07d927",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "365dd622-e9bd-48dd-9c21-135171cdbe1a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ca02b485-8bac-4360-a483-caf327c0881b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "43eddfb3-6a71-4825-8617-e8cc2a65005d"
                    }
                  }
                ]
              },
              {
                "id": "44cfc59f-7616-48f4-b788-ecd1e5313a41",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ebd63e2a-637d-4300-8ac5-def637df7aaa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c26735f0-037d-4855-b9cf-a62f73e9c9fe"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "43b64967-b013-4c25-b5dd-e26a2b1b479e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "33b89bad-ea75-4836-98aa-2fd5262a99a6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6224dc1d-5c18-4aed-9504-e4e184f68913",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "93c8dc67-2bcf-4fd8-818f-7f867aef462b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "64816c4e-6cab-4e95-91f9-93e339f9b02b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "068c4c9d-e005-4ffc-aedc-523a14817e45"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "34e1d9b4-5a4b-4a2f-97b3-cf753959b089",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "2a959a94-f352-4d45-83cf-7a1ca7c9a2df"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9e050e4c-36fa-4621-b1e6-351f899cd7af",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "71e17af7-83cb-4eb8-aefc-fef588285d35"
            }
          }
        ]
      },
      {
        "id": "41092c5b-f899-409c-85cf-be2f67639cbd",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "fcd10b23-3084-4c68-b18f-24b943d46e59",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a7dc81a3-3d5f-4321-92f6-50b702b637ba",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b5b7d3ed-e762-4212-8a82-80a1bbf50642",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9de782d-fa16-4400-9aec-b36223a541af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abc476e6-1156-4b9f-8d29-cd0fecaf3c50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a356008e-d679-48ec-b52b-e51c2c184700",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "76ad2511-c23f-42af-84f3-fb4a1526ef4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bb83848-639a-4051-8d32-652bc690a991",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01a5d850-1334-4020-9d67-39ecd1f3fddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db18d863-81cc-4d9d-a2bc-c212039d9e58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cb5a03d-e5c4-42ab-9cfa-c83c424d6d9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "29d0e7b4-4dc9-46cb-9f40-023f6ff98b84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87abe8e4-89ab-44de-9f18-17716d9a6810",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0c4d3d7-1fd3-417c-a032-7d3b6af1b23e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54731ee6-6cd1-4aad-b42a-76094e602610"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59c48120-7887-4f8b-a070-97b5bfa3fcf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "be783be3-f083-4549-b346-d0f8ba8b91aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "976f2d39-bf09-4ecb-8a53-7e60a6457c0c",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d88b2347-2fd0-4be3-b254-362ad1a94fa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a96e810-e5a8-4032-9c44-71241c065eb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d244cf9a-bbb5-445d-8bd3-1f1808df619f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "00c43ffe-f2c9-431d-a6bc-de5b6e1fa787"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4267078-dc31-4148-8ec7-adedf9e1a150",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5157b7d4-b8b9-4a37-92ad-b7814ef5aa42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eee9bc66-d82e-48a2-8e3f-f0ca7643a1cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12aa7bca-757c-4b78-8a34-581d19c048f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0336449e-7f43-4943-a5be-22af01bbe97f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48bde594-a206-4053-ae4c-090a3c7a3825",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3855cd82-4601-4e68-8ba0-3a70e31056a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e39e51a6-25be-4816-9811-a7fb2ec00a4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88899c16-ea6b-4822-9c1d-7e5a3976d2fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b26334ce-21ea-4b8f-9c0e-0b0e6cee384f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ba7fdea-3823-49de-a0fa-d8d7c82aa159",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3799be60-2f7e-4335-8633-516a868c814e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32067330-be22-43eb-b9c7-1ea3b8d10494"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2375adb2-91cc-4e66-86ec-7e3ad230288a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad8e7c07-2411-4baf-a6bc-98ebcdaf87b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bd3da83-cdcd-4bb0-86e6-70505e3346ed",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79262c81-29a9-4212-a6c3-f7146af4af52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0811eb85-0e90-44e6-8613-c140be0fe598"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f0724cb-466b-40ea-87be-8ab78ac28096",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "773c885e-3050-4931-bcfd-97b5828c081b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30e95d0a-6726-4535-8849-3636032020e4",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48ec8fd0-a638-4b6b-a3a2-76beb963c535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "367b9e8b-db6a-4f3c-b9a1-559f74ea8c16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cd8675c-6c71-4655-ad1b-17a895d2024a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "30e75a46-ff29-4d82-8719-cc1d9384e853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "977c4b93-f248-4170-883d-8fe71b3b17c5",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67dd4c56-5bab-4741-9834-612d7870e692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec13b490-93a3-4cb3-9b95-e0d50ecef6c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01cd7794-a3f9-4150-8e10-480733e1b23e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8042668-8f41-4150-b4d8-674fe643715d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9ea1d30-ca2d-4ab1-b26b-9b227d2d8744",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a20dc4d-ba6d-426c-96fe-043e0db4f9c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7c8107d-a048-4e19-b1f8-d85a4116645b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "071c6f45-f721-4e7d-b173-128af90e1c4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "bdbbce3f-53f6-432a-8bea-c31ce42945f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "837658fa-2862-495f-9106-5b6da3913f39",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b2f663f-643a-4a33-94b9-7ab6137c73d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faeb323f-f457-4b89-9337-6e54e34172be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b91563a-6e83-45f4-abf0-752b0b999172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "04b601f5-685a-4870-8a8a-955386be7c95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0356eec-8d39-4659-929e-4fe444945c96",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "267247d0-c817-4e94-9690-39acc9dc67a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "626396d6-5372-4d19-803a-fa29b60a68c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d12a926d-560c-4344-a963-104e83b58b52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9dbbd25b-6b95-418b-a8b0-43f4baa419d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b6d9e27-1c3e-4c25-9dba-033940397fa2",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb020e64-2f57-47e0-bea5-e029076c3b93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed14277f-8119-4d16-a6e1-38fdbc95754f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f867d1d7-9b28-4015-a901-6b4a846837ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "a230cd8f-a2ee-4599-9979-b529dcfadcc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99286234-533e-4eb3-b8d4-d4071849cbf7",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be5069b0-657c-4196-9f04-23b8f8bc65be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1b57f57-b27b-4398-9c97-6a8440f35229"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56caab78-7533-4890-a9f8-820847ae3ab0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "3644be3f-fd6b-4f76-8b2a-17468875c61a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc7215af-ae1c-4155-8243-0870a2ec3c5b",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79440faf-b053-4d8a-a28b-f858e2da8782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e516dd7-3864-44b2-9006-3fc3128f550d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f37073d3-fae7-453d-94d8-c6fba590b6e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac4bde07-b417-4b90-8891-4abe1ae57df3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6daa685d-8f6f-474b-a9cc-5df16cf8cb40",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a1c212c-a4f5-4039-8dab-4f4c2e34ac8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72ef9e2a-9ffe-44bb-a805-bd2219d498b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8031b18b-d1c3-44fb-a88f-49cbc8d9ec9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "a778cb62-9f37-47c5-9bdd-ee5d9b6f26c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5121fd06-44eb-4bbf-85d7-3a9deb55c531",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4152c377-829a-45f2-984f-79f79eee4d32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7840728c-8fce-4cb0-ad3d-b135969a1295"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79ec30d8-1b13-4b06-9296-91d7451fbb33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a52f3f64-ce1f-4cd8-8000-cd8e0b17c0c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5fd0d9b-5c5a-4277-8279-3b3d37aab95e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c3dd708-1e1f-43b5-9608-ee0e9ba4f631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "062bda52-f5c9-424f-ab10-4822eae069fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cc1b78a-bf09-486b-85e0-a874cc4fe341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5f9c0c0-96f9-480e-adcc-ecb70e5ecf27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da9c5273-7daf-4766-99d2-337e8b517589",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3176c60-0b13-4bea-b758-fe2d51298b6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "544e08e0-4dca-4e4d-b5f4-f2fa9c75fc24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9fd1818-8b39-4df8-b420-2ff32391ebd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "37995195-fea5-4738-a857-6a1765a9dfae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f0e6825-2ce4-4ed3-99d0-3dc84af2234b",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c7c8c33-0edc-4a37-91c2-689b0ee44d67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b967149-f988-44f8-ac77-b04d37e64480"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eb5cb34-cf85-40e5-aea8-8968734f72f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec3017d3-2a59-46f8-9a1b-503208810391"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a544073-1e0d-482a-b028-30ac2e9cb306",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aa0fe45-da7a-46ed-869e-424382b0eee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd7bb005-f13c-49bf-bc9d-201d4f3507b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a10897ef-4b7b-43a0-bdec-e6b2f1876cbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f0cc1e7-7c06-4699-9f23-ea273381ec55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4836f62c-de9a-47d6-93a9-e177d8fd4839",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68cec1eb-f885-465a-a836-9d6134f801ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb3a0914-3fb5-46fe-bbfb-d8d0912f66bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6252b127-49de-4a02-8c18-d6ac99394edb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c33a4f9-5ba0-4152-bafe-3af8814ee4bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5075de9c-316f-40f0-975f-8a018c4a940e",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b524fec-3bf0-44c9-9e72-71c445a85438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c589737-bed8-4547-be78-d7a54376270a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd1a1d0f-8406-49eb-a9d6-13712a8637d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e25d7147-c921-4e22-a389-506a1046637a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b969764-2684-4b51-9bce-88787a337ebe",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71f789b4-0e14-4d08-9a55-8f38a4e74480",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7e2507a-4fe1-46a3-8cb6-6824724765aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce23c29d-c33d-4fd7-9add-f131ca1da3ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb5e77e3-32a0-4b96-b7ec-27bfc8479599"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cae97aa8-0774-4c69-b1d0-3a46ad8bda10",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43dbcb9a-59cc-42a0-825e-dc95f9dbbf05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4755ba0-112d-44ea-b118-332df948b79a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b513f3e-c43d-42bb-8e3c-42b1e106963b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f6944f5-255b-4d8b-92ee-66fb4392c6f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "576bafac-8d4d-47eb-bd59-382012f1539d",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39cf629a-1aa8-4ce8-9f8e-04c9af5a4240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40cbdd96-e797-40a2-96b0-6452e55d263a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b1e80d0-3129-4a2a-b118-927231a8d39a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d708e32f-96b8-4d32-a793-569c25b35c7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33cba7af-2ea2-4bd7-8f4a-e4e7b0085eca",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3a7d980-5ce0-4e9f-9644-a7f1885e0404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ca43a95-f019-4ae2-9a79-4c362fd4ac4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d2cfc64-465d-4b17-8380-3b0f16f67ed5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c46e86a-c38c-4eba-b339-311b54be98f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab57271d-db6a-457e-993c-542687652258",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3011aedc-f4c7-4458-8bf2-a7a6b0c4b4a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0c3ab1e-2d7d-44d4-9e78-06f413f27f36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e483747d-ac6f-4e2f-93f2-8aa6adc9bc9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6759fee6-8749-4e27-b605-259da8a3c448"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b0a99d4-664f-4338-a972-fa4c95fe15ce",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6a6b1e0-8b6f-4d7b-bd25-325cf89de62d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0aa1d70-292b-4189-a9ba-946c545bf34f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63a19ffd-052c-4b7a-ac9e-61570d1046c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb9f78e0-533c-40b9-9e94-285704d17fdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44c1f2ba-32b0-4dfd-b852-1894e47e127d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aedc87d-2bea-4f10-95d3-da4d65a7af2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b78e8e31-2276-4a7e-bb39-09658d67adc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2913a412-cde2-4b7b-b73b-24e929199878",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "20c4a7cf-4d6c-4874-a4f4-e5c6a8bd4158"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29b22a71-2ba4-4fc0-9e82-e0a58ddda74e",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc717577-e660-43dd-806f-1aeb9e3f2836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c2c0cad-3f2c-4291-8f52-8435eb40ddcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50669dac-f7b6-446a-843f-0c20bab9b33c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "43ed990e-9aa3-473f-ae9b-be5142ab5d6f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "35efd5a9-3ae7-4c28-8725-aabac48fce50",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c1b24d8b-d2eb-48fd-9475-c574d96cf805",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3123da4-45a7-440c-817b-64606d0341b1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "578cf167-0570-43e6-bc7d-fb7cf8a5f08a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b522fb0-3fbb-40c5-9f27-3b735e841c58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "684bc314-a6c1-42cf-a96e-45f7fd4f9ba3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5b024529-74bc-45cf-8397-10513e28dba9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fb5de4a3-896d-4ad0-9cd0-129a85dda2cb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dc4ac461-5d23-4ca1-b2ed-62b97a822ed3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "28de4f8f-a997-47c6-bc59-97b576a13aa0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "25dc2ca6-25cd-4e91-8b97-11993a46a2a1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5b794d97-4466-4042-8700-8065a4c4277b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e1cd2ad4-e455-41a7-be49-a943a5430ff9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f798c178-840d-44d7-8b36-4503fbdd26a1"
            }
          }
        ]
      },
      {
        "id": "80eb6082-286f-4016-9843-8f40cfff386e",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "eeb1b500-ec5d-4b1d-899c-20bdf58e3b32",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d5668481-f899-4bb3-a435-2b9f599c60b7",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f723319c-1b3e-45de-b8f7-05790b9e7266",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc3e5b9d-c551-49a4-96b7-d026566829b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cc868c0-50e2-4a6c-bdda-b80c0897a1e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59fd213b-1f6a-407c-9e02-c9fccc3eeb03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "dbd53515-274d-40f1-9820-60635ae16a3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b0d55d4-993b-4694-b748-f9bfc0fb110b",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0953dbcd-4f17-4503-ac93-630ec6e1f1c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ff8942d-b55c-4c19-9738-103e954d20ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c24ef3a-9cd1-400e-8a83-103b58c44f56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bbfee037-715f-4c36-a892-dbff09794c28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e07b70eb-0cea-41c7-9e68-e68db41b97fe",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e07ca9d3-654a-42ee-851e-03c147541288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de331533-e406-45ef-973a-b716325a46d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53b840da-ec88-4d4f-b579-2802deabd1e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a5c2102-6f98-4356-ade9-fca28c9f24c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d04cb33-6eaf-4947-bfa7-271adc5bf1c6",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6089faf-a98c-4d27-b583-e591054c915c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5812949-80fb-46e4-93e5-1e46aa03ebe4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a99aff21-d61f-4d58-ab00-f1d7db3c9f99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "62c587c5-b475-42e1-8464-88f991e72e6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33d5c81a-f918-4c37-8584-573afad05721",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fff8790f-4535-45ed-9b61-7bc14050d53c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cac62a8-0960-4ddb-9834-7feee8f43ce2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70271b57-4438-4ae3-8128-262f7eff9e54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a0cf978-f4b6-4cf4-8f93-38702b1e8f3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69ca7efa-b606-4039-8d97-70a18b0ee3ea",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d70790f6-748f-4671-96a5-a9af80e73186",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5bcd408-cf75-42e0-8e99-050969cd0304"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f73a57c-6474-4ef0-b0ae-50562a4fc7c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ae94acd3-30fa-48f5-a77f-2868d1545d84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7966238f-b24f-4730-bb77-0449ad17efdf",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e89b5fd7-9df8-47d9-9427-929ceed0eb93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15db9db7-c146-4076-897b-0d27ce9753e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f6f8417-39d6-4114-a2fb-4f61289819bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d9dd142-36c0-47d9-b316-cdf4b0b81400"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a9ca78f-b114-49fb-97cd-d56e3cd29868",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96309162-c8b1-4953-8db9-bc78e3717644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72bbb36d-3f80-466d-bd21-84a2ce9d4c55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6739d59a-ef15-4202-882a-3b4714406468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "536ef410-ff95-457b-b843-d0ebfa77616b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebda42a2-6dbe-47ee-bf5b-b8763ef8e27e",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28863c17-dcfb-46a2-a2dd-c331c722acff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d31a15d2-737f-4774-abdb-4a7b5e6cba10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e15832c9-7b9b-498c-99ef-978a609e84b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7942188-d469-448c-927b-d453664c8bde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "341c3aec-c4dd-45f0-8362-31a2b5489350",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26b6b4e4-1a78-40ad-9067-578990e60742",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6987cdc5-e8f3-4f1c-8e6d-0c31232af5b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a01634f6-dc62-4823-9ea4-cb674e23ebb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "35f88cab-3633-44a6-8225-9beaeb697b14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d89ebb45-75f4-4865-8423-739f3662b4f5",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7d86b78-9549-4ad1-b902-ee291817c271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6b7abdb-b6ad-482b-a375-85acb2d664a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96bcc132-64a6-4588-9a7d-36aa19f2fc4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "96c539d8-7647-4908-a652-521f5469010c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18ff496b-1435-4e40-b01e-72db5b04dc23",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47fda131-8aa5-4146-8eb3-bcee393f29f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47fb7853-0a33-4713-9c82-f2e11234d301"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de210cf0-29d5-4801-8854-d1ac24808b2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "49069475-0c47-4988-96fb-1d4dcdc49bd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "383f3a34-473f-4ccc-b3ab-2c62717c3668",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "840789b0-fd6b-434b-8953-126865303017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b726ccfa-4e66-42f1-9d90-79cb60bc5b75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d23fbb95-c186-4c5a-852a-91a7514bd3f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "31841b91-651b-4b1c-afa3-2e852a01cd66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32dfa6b0-4278-460e-9e7b-54a39baaae36",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d1419b0-bffd-48a0-a4d6-2e75093d3502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00749de0-72d5-4128-bd7f-6028a5b44c25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4e8ed53-b8d2-4bba-a6b7-c77e209afcac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "39208db1-a6dd-403f-8cc1-325206348efd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a67baf46-16d6-4ed5-a377-a5dec5eb39ad",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "138cee43-c3cd-4b26-8da3-45dff7656364",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b479d01-b6c3-4200-8391-d0cc6cc1d09f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5689d5cc-61aa-405a-97ff-20294a94e58a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b87522bf-6e44-4740-87ca-affd508e66ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fce24e10-f68d-4591-b42e-68f68f89dd37",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dd70df2-4656-4ac0-840e-ccfdfaeaf2cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af01fece-b336-45b9-9350-4af81f323897"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fa53d68-3c33-4800-8710-7ea5adb851a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f3d4b2d-f4aa-48bc-9df6-0d7de3ae4387"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96f6f2ce-0a9b-4d00-ba0b-dbdf13935337",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9ff5e88-ec4d-4a0d-a211-deb156447333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "907fb4a9-fe6f-4f88-8133-eb57e1f534b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3d965e4-bd97-4d15-8902-03ce7c59b888",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "a88ac827-3ff6-4226-bcb8-11b66b5a3d41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca9d43cd-beb5-40b3-9da1-1948c50a9f08",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e639baf-73e0-4d45-ba6a-eed7d3fdc7eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dea59107-3d96-46b2-ba61-f614d626c2a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe850934-fda3-4864-be7e-e69ba9e0d57d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "078c946c-8f1e-43f6-9578-3d214641efbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8724a9d9-2016-4977-8339-fb1611cf2f04",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "200d22cd-90de-428f-b838-9e3bbf04c102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebce1c8e-e904-4e5b-871a-ae7361136899"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cca9e8e2-96e0-4571-ac29-fa3e932b4be4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f2876b1-c94c-4502-9cca-b1b0eab11b96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ecd33c7-eb84-493d-b272-e5f93ab78c00",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89ed2551-b105-450f-90d6-2239dc6d6d0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6a5b409-3eac-4a12-9c41-62abe3a337bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db88362e-b279-4dc4-b074-21d600f3eb93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6566ea61-b341-4ade-88cc-6c729becfbb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4022c42b-4d57-43b1-bb1a-c5de6c164b0e",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0246a092-6597-414c-b088-2daa3eccb6e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42c7541d-7fb6-45b9-9119-732ef94eeb9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a018e99-79aa-427b-8d31-7215112619bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b50865c4-23c0-42e7-808d-7baea901cc47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fbde7ed-35c9-479f-890f-bbd758b70cf2",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d7937c1-aa77-4506-b970-32692c9f1507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "badb26f7-38b8-43d4-b41f-51bedb947f00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b368d395-c65f-43c3-8f19-9fb62d9db9ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "28b2a7c5-7bbb-4e8b-9873-a529bd35b600"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbeb840d-8c5b-4d8b-a6b3-d906b3047ad7",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "501c6359-9061-4c1b-8317-ac17513c67a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "221c1497-50f6-4d08-9bf9-4938e70ed87c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57838a29-8187-480b-aba3-5ad8cab7b574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dda98917-6f5c-4410-9a03-45185c4f9e71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c217e49-ed1b-490b-b890-fe882ee68ba7",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "533f1b1d-4939-43e4-9fca-3365ae4e1b08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55bc439b-a53c-4531-885a-eb73d0c603ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8c76f68-7647-4faf-a32d-4b5bf733af5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1cb82f00-a492-4679-aa82-ce7e208b8f41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e950d7d-550b-4f6b-ba98-aabd54fec14c",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7fcce2e-0760-415b-a4a2-db0e5c6308bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f854ca05-9ad0-4c61-a48b-15b13789d7a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "668f4cb8-71c3-4859-a848-3626d4dae29c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "30fa722c-caac-4d5d-a821-ad9349800e5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23596472-b77d-416d-8537-16dfffdd649b",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3109157a-2287-4a5c-8fe2-23c08351e44d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ff82a54-f0ba-4898-b69d-0bb0e0f9c95b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91bc733c-20ce-4fb2-9173-9310d3221599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f2bd114-003b-45b5-9805-3addb83b1fc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfdfb294-1c16-4cb2-8bcf-56379e348d74",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95316037-6f2d-44f7-b9c5-6a6fa971a81c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57952ac1-4437-4894-ac2a-9f15569ab262"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13321d50-65b4-485d-a2b2-3cb144f1d058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f15b831-d38d-4dac-b498-c26cf7b0160a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "354c24ae-4194-40bd-9140-9f72fb4b4682",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99514094-d84f-495c-b46a-8bae152e7402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcf3a581-0529-4529-8093-85216e49ddb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74b854ba-360e-4409-9050-2a6d1074ccbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "445aa6cf-d0c8-49cf-b336-13f98b876d0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "529269aa-3d5d-4d1f-ac49-b80d97418c2f",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba9af1ca-ca8b-4341-bf10-0ab5063297a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b23e003b-ee95-4505-8760-7bd5ba56e418"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b8eeef9-970a-4ac8-a344-b9b4448905c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "002d3159-f893-416a-b451-c0f02550c39f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12f1ac82-76c2-4711-982d-3e5469c554e9",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fde7d399-2c4b-4a9f-82ef-afc077e5d751",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3a4fd8d-6633-4a8a-b408-2114e0ca12c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8860417c-358e-4cd7-9cb7-305dc80e4135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e67f626-9f60-442d-9e80-7c45b20ce3aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fb973cc-dd00-4771-b6ac-73e4d27d5b48",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79235da3-985a-44e9-934d-23040b34db8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82f8a1fe-89f9-45dc-9b86-2f04f09dc4ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa81c495-f295-436f-ab34-90d2211ace98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8499e2b1-c0ed-4c89-8a53-5b0ad1427c19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3eca9af-5f47-411f-8dbe-15a04f4dd4ee",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4296a9ae-faba-4c70-8cb5-3babc9be8448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10cba6d5-92c6-4d4d-a80c-12e7d3e15812"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d5bce64-cbe5-40fb-b6f7-0651326441ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2845454d-ad40-4380-b8c6-7b5b69ce773c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b221e3ca-e6c7-4bbd-b503-a38fe68852d0",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4d7fb30-aebb-47e0-ba4a-0b20a3be1e41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b906d62-fd99-4980-8b29-8255c6eeb9a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db33bead-4ed4-4085-947e-32a8983e8407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "357f5259-98b8-41a6-ba77-878910af3c53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aae97514-af1c-406a-927b-3026a39ee7e1",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "381648be-8e08-4747-a6c9-898adf3287b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95d88b88-2051-4aa3-8940-9e5ae2e80833"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "418b3798-60d6-4d9c-834a-9e06c47f56d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ae16579-0ee3-41b4-beae-36c3d823bd10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9faf8073-2251-4e74-87c8-e948969ab2e3",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2133106-c0f8-42f5-a64d-c904ec26ba22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6f350a0-0a58-4b4f-8024-e91dcab9c5dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd333705-70f1-4e48-9855-623a92128229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d129c745-5f1f-461c-83e8-9f12dfa7d34a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cd34a5f-c137-4da0-a1cc-5894c164de33",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "108c6007-33aa-4f7c-aa75-0c387b18b2af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4541779a-a84c-4d25-9eae-8392c0eb82da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afe9f9a4-426e-457a-ad5f-083aeb1cdf56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "23022cd1-43d1-45a2-8886-493095c85946"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c31361f-10df-4002-9cc6-badd51823a27",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42d8c298-3789-4172-947f-8dbb28be8b7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5ee90a5-eb9f-4401-9fef-a7892d7ddda6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "762c4ef9-0411-41c9-a73b-4264ac563d2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab9ad56c-d0b1-4655-86a6-08a7c50a8c4a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b648dc25-7a1f-4e31-b2e5-f70c7111fef3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6797c90e-35c6-4582-9c54-5e5fe9012d7d",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14830189-62c1-44c2-814a-b2867b439353",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "d74435cf-f0ce-42a3-8dcf-530838c07d19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4678c16-27fc-485e-b69d-0f3a1d7f7986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "636029e6-5816-4b23-9a13-288fc11571e3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3cad4f59-2d44-4a81-aec9-1358829812be",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a9f31199-b7a2-410c-9980-d98b7b1e126e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2bacb1dd-79a6-4c4f-8f7f-d4ac9f82e062",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "18e0ca80-f129-4259-a5a8-9019ec5a1a90"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4a9bb42f-a2a0-4de3-aae0-855a5c0671de",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "71bc22f2-5848-41de-a16a-123d8e9301d0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fedb829a-5289-426f-8091-f52bb35dcc0c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7bf8cf99-e87d-4903-9861-a64a5583bc70"
            }
          }
        ]
      },
      {
        "id": "c0c82e64-e74c-46d5-9e19-7bdce3ca4e90",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "6dc268e3-b573-4ecb-9595-e36263fbd4a0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e9e3aa2f-43a6-414a-b0d1-3423589b442a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3673c55d-08c1-4c1b-be24-2f5b7548c70b",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dff502d-36f8-4330-ab88-48324118d861",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d34e1fc4-a5e4-434d-9920-16f585972ceb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91f0854c-5d8e-4b4f-90c0-40f35228b309",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ada1edf3-18a2-49d4-a778-f10d6f74faad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9c558ef-329f-4909-a26b-036765d48e9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdb91ed8-a21e-4e76-960c-ab5f6d232277",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d06f1d7-9325-4d18-8b5a-28bca1b6bb95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72c824e7-cf12-4f01-a5a2-d91ccf5694a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fa202ce-3872-435d-ae32-b36e034308f3",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dada205-b9f8-4d01-b236-b2c40db90cc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "998d5f44-4781-41c2-b4c9-db03ca70ae9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34e9ee02-c69c-47f7-9c65-780995c38ffc",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c87934a6-7228-4782-9a95-622a0c6fb95b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dae7db3f-d9cd-4753-8723-5e5cd5fc9e21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4c5a6c5-db0c-46c6-9d72-13f825e138be",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e87d921-8075-4d89-82f0-811109f51c5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61d00577-837b-4077-aa97-9811de319a1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "965e6304-ea57-466c-a2a1-ec1cba5a1e90",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73ae5694-faed-4360-a8b6-818006e9b81b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a9a9e3a-12bb-47c8-8ce2-da88322b354a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f44be3b4-2b36-461e-a86c-9fe65312e845",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "366a5104-f717-41bb-8dde-c1281e14089b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b98dddfb-555c-4486-8649-a5ee2e6536a1",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ca60d3d-3386-446d-ade4-a973a3bc2820",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1570b879-2ab4-43ee-bb4d-ed4d13e855df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36c1179b-a25a-4fe3-8b09-84774e306c37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebd0f5c5-ae55-4d20-8c26-624eadb00680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a83a1728-5cbd-49cd-8333-71c90895fd97",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27a5a103-d578-483d-b87f-9c8068a55c91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6caff95f-681c-4c11-89dc-84f0938b7e10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0281bdd-6eb7-4805-9979-0285104e94e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd538380-696f-404e-a14e-30d273006e1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8f16929-110c-456c-93ec-fb177c0e7188",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a423b580-e11a-461e-8ee0-c39847fea05b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fb02fce-e850-4756-acf2-ec7c4a64c1de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c369ec52-3758-49eb-9304-31861279739a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bcd8396-0bd1-413c-b5a3-243ff157d786"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b8b5152-3947-4564-97fa-d4c967a6e86a",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c90378c-6d8c-48fc-8157-62222f04fff5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d37ad3d-3165-4d29-a86c-627d792cd61b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e22a2da-6820-436a-85ee-976574695c28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e8902f0-ac4a-463c-a786-d4faa9064f07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a38c66ef-04e7-476b-94cf-97b6959fc3a3",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17a1ece5-9ea1-49aa-bbbc-c92fc211bf2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33ec2ad7-8b5d-49f1-8918-ac6cea6b08bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "152cd94d-c78b-43f8-a8d0-b7f2044ccb01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96d877f3-2bce-4983-8e0b-4ac6c8161ed4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42711a28-d21b-4f71-a5d9-9865d3d57f22",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75dbcf91-39e9-4475-9b83-d802be4e7869",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c955b363-1d49-4e27-8cb0-c6241d573758"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f00306cb-610e-48bb-bcea-3d6b56bb2b07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3f2e513-6c7c-4624-a450-45d0c8c0558b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7de749a9-8d74-45a7-8f76-a3b75e8c69a5",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd240216-180e-4bd9-a6da-ba873db0d04e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "769d635f-28f1-45d2-9a95-ebece2cf0792"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c23e2f5-d232-4678-90bb-703cdbd4d57d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f61326ae-37d6-454c-bba3-4e590cd4f854"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eaa5e75-c351-412c-9cd9-731d24c59704",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a769d3f-33d4-434b-871a-5922e11161a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "165f7889-44fd-44a0-b832-43ca1da61213"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2868ba3-0a0d-4f94-8d16-3478c98f7934",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12c8c3cb-3cb0-4203-ba2e-9bb30701d6ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1017917-be58-4d95-bf89-9cf0a7fc17c1",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53b29ef2-2cf3-421f-9928-29df6436f2c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8c29ec4-5ce5-4302-a1d6-3b97cf969d61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45b30fe3-787e-47e0-bad6-1d500741e3b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1d0e8b6-c496-404f-80a8-9a08a70fed18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6e9da38-2006-4162-99e0-a8eeafc196cb",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fe9274c-e79e-4164-8e6e-7fee36fcfa8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5af77b6-1f8e-486e-be46-7fa8a3ca04dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28e6886c-b3c9-48f7-b247-2f2446ed4bb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3004f07-2eeb-4e84-80f6-08568e0a9d7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f183626-dd26-4c0b-8294-8432ee14cde5",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f670314-ac2b-4c4e-a6aa-d073b1d2c269",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4ce3197-33fa-45b2-931b-c5202ea8ec90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1170632a-60c0-456d-bf25-78376b27fbbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81023012-025d-49e5-86d7-7c027de2f670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7463178-51df-436d-ad18-4bdaea40d0af",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1616fed9-a4af-43fe-85c3-155ed24ddf9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b73e94e-44b9-4f5b-bba3-cbb97a47eee5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ae37cd2-a7c4-47a5-8efb-fabe81ae8bfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7fb2fb0-534d-4481-b7a9-2a52eb2d3cd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "618b8222-a222-44e4-bebd-0534b3e3d40b",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09953ef0-2c8e-413f-9c2b-43e99ef67dd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6be1f56a-fa11-4705-a38b-1efe1a82e45c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01aa25a5-5a38-4635-b86a-b20231eaf157",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59e6fdc6-0e78-485e-9170-4f93b4300134"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba153599-30ea-4839-b915-f96569a0ab26",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79bc1fe5-782f-48ca-8a73-e5a13357b729",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79b8718b-544f-44ba-930a-8c5d29e63d7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2f200bb-0b1b-4bf8-a70a-e13a8af92333",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f21b801-8b8c-4e8d-9bea-475cd922cbb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e898210-ea4e-4219-98e7-b19bd00bcfe0",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d0c96a7-0615-4f39-b3b8-00d5f8020d5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "711b3127-c271-4db3-954c-26a78c9639d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfd0d2b9-e42c-4686-8339-8a4398280bbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab112296-75cc-4245-95fc-81185c441741"
                        }
                      }
                    ]
                  },
                  {
                    "id": "301f54d1-9310-41b8-a2e3-925f4358d9cc",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14c5222c-5927-41e3-be52-6422c3bb2562",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b2bed5b-e559-45ad-b541-d3724771467d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89218337-ee3c-4afd-a302-e7249eab7543",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "152546bd-6dfe-4a90-84a5-8866c569a08e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a49f711-a46d-4b06-aece-cac5b832314c",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15e93ae8-0a60-4593-a2a3-b7807828f8f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b849d40-f8a2-4275-b88a-afdf661bfd3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53ec3022-a872-42b4-ad7f-038623608729",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b59b443-e5da-4e50-8c83-18ce97a3cf28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55949768-dfd2-4c0f-8802-8509dcc5cffc",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33b2b686-dcba-4f36-9714-c91087832e0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76ec2ab9-70d6-43c0-acc4-0f367f890f40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b1e76fe-f1e8-486d-9409-70528d3e7d35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caecff53-4758-4f41-a260-a2e37d7e2522"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e134832-034d-419c-903c-ce5d2f9db8fe",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f19d38d8-33cb-4c84-bee3-9eda9b80524b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14415d9e-ed26-4d2f-ab51-530668a010a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8813574e-9381-4648-9a8f-37809a7c7f4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b95d6b14-12c3-466a-8e1e-d3efecb586e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "839734e8-f2ae-436a-a328-ea6dce328062",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4ec72b0-a75a-478c-b2ac-1917189c14d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0a9f2e2-26f1-4652-899c-7a145e47ae9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6645d32e-8d27-4337-858c-f357c67cde44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56f033fd-9d33-45ad-96fc-49886b4effe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66a083cd-8e95-4553-b31a-d8ca895130c0",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09e09e9a-7b23-425e-89e3-29d289fcfe62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58d03647-efe9-4761-b62c-89795a43df57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6661fc74-847d-4d5a-b9d4-8fb38ecf142c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bff1d594-fe93-4e63-a887-7082f7de68a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "822a09f8-b780-4c33-8be8-23cb7f63f93b",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "205f33db-44bf-4ce0-8aaa-41d829e063de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3bdc94f-75a0-4643-aab3-32ef51d30093"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8929c37b-653c-4fe4-ac43-36443785a8c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6dd87ac-f5c7-401a-922d-c91099126458"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de3681f2-65b4-4e3b-940c-ace29c31161c",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "051308fb-4719-433d-8c91-47288ca8f2e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df06f21f-a93a-4265-b518-97bbf2f79201"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "268bc864-913e-453d-a43b-546e1da7f02a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "196226ce-18d0-4df3-a9d3-dd73af630cbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d64039d-9eac-47cf-a1a6-f621e43eeada",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc3a6da8-69c2-49b3-bbeb-df12f610c61b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f34d3666-aaf6-4669-b853-ac525264a1fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81b0e201-3214-4fe5-824c-8fb29714446f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f779e608-2d70-4e7f-b3ce-34775ef75dce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbab93e2-e122-4d8f-902a-ae4e5d9d327c",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdcd1dc0-a034-4772-82c8-3b7b4edac8fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6801d053-9188-46b5-85d8-36bc14f01ad1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54d3d994-c443-4114-95cd-818a612fb8b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22918cd5-668e-4f89-9017-63db71989064"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3ae745f-eda3-43cf-9080-52a61aa91a29",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cc8cc91-09c7-4792-806f-0b25b1670823",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d594750-c4ef-4d96-8264-d8e9dde40487"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c057982b-b232-48b9-968d-04b21bfa3027",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32e9200e-19db-4bb7-b813-2c4fd56782de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97b3220d-d214-4fd2-8665-ed2a20711452",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3054012c-5a81-4f7b-8459-ca73d133bd69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f966ae1-5d3a-4d11-8937-f7b7260a1b3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b74fb1c-f807-454a-92f7-eb51856b1dc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8011ed7f-8920-453a-9988-fcf74b5b75ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32887a0b-be1f-4b2c-973f-4e7a192168ce",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fcd8dab-c150-41aa-af16-5d5bf68d985b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e50b360-fa1a-48c7-867c-bdfc2ea67bd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74014f14-0079-4574-ad39-540299148f10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a174102a-446b-452a-a674-2559b0077e66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3273b2c1-5534-42b5-a3de-e756177ee90d",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f72ca942-29d5-44a0-a953-538af13c64a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d03844b8-ad49-4e27-998b-9a168f48bb93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "086e0289-b909-49f2-8637-fa9c2950aab0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2aff06cd-b2bd-4380-8111-4961143725d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a86b3d5-94fa-4dae-88d3-002324d66c00",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c701553-bc0b-4ee3-8f16-a97333ca3667",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c012ab84-89df-4b2d-918f-f8af9138089a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "881c4aa3-78f4-4c95-b8b7-a2554300f5ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46fdf660-8d81-4abd-985e-d0333dac4b86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fac28ff-201e-44ed-8e7b-b2e4450c84a5",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b15636b6-471d-4e8c-9400-db5c465bcbbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98aaf5f3-c5e1-4382-802c-0cd640900413"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fd59288-d3d8-40ca-a635-5727e8b61799",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cfc1036-6be6-4448-83f5-8952d76d1bb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ca74e6c-09e2-4d8f-8775-6341e98decb8",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fa4f654-93c0-4e4d-aa4f-883d83efea18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "436218f9-66f1-44a3-9b10-25d404c8470e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "091eadb5-6e37-43aa-9911-3624d86b2669",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bae3a25-e5d9-4eac-9663-8564470ad40f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8229ebb-e3d9-4a94-ab21-c1658fb58cbc",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ffa9b43-f3a4-4a6e-9a65-92b631eb7df9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b9dd7fa-2616-43c4-8874-9f8aadb04790"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c73355d6-66d4-40ce-aab5-56ed7898f137",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97a4f9b6-c870-4c28-90b6-350cd5ecd6eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db695c83-818c-425c-93e7-8cda5d887995",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24b371c6-57b9-49bc-9068-6a8b80291a19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9545a2c-f2de-44f8-9594-0d74102f1c3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f490732d-6574-432c-b6f8-c964d13353cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05b11f11-a61d-4cee-9370-3595bb3c5241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a287e547-985e-4c7e-a799-66f8a6f6da07",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7521306c-9963-4287-bcac-a7ec4a210864",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9a40f4e-400f-4b5f-abf8-32475fcc79cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4a74aaf-0515-4bc5-83a8-256906f53424",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cb70f56-386f-4bc8-b7cf-40694500b5ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b1ee397-c1dc-4ae8-9969-bdc3381585dd",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90287621-aa1b-45f6-a4b1-7762d1b0a466",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80f763b5-776e-4df0-82ea-c8986cfbc9d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3125c875-be62-4be0-a6a2-7b4791806ffc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1f5d851-e1e6-4c06-8a7a-ba38235ac98b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5725c8cb-4b17-4095-8323-037b2067f0c9",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5260871d-05e3-4a1d-bdf7-6c05df320f75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2583fbe0-68ed-4a4e-8c45-d97b27dbaf07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d5e180f-fcbd-4e62-b98a-cde01cec1327",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "972ff551-ab26-422a-b3c7-ac34c64e86f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fd6693c-7b80-41b1-b3cc-acaa5f6b73d9",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0314d75e-25a8-4b52-8ece-964892ba7be9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bacea88-8f73-4bd1-bb6f-4c74c5960800"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d471c50d-d03a-4b63-bfca-a2b68c10697a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff022ed9-2a72-49b2-abb4-9fb6ea512f1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86a302a4-1fca-4f1a-9c00-b26897c9e652",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6210a664-c4df-45cc-ba8d-2451bd6cfbeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59b1868f-80af-435b-aba7-4881b0cdf9c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15566640-a8b2-417c-9b0b-0d45d7daa265",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9374892-4b7a-4313-9682-428ba8948353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "162352aa-10fe-4a43-99e0-9658bff7617d",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "065f4d7e-a199-4fc1-8626-bb3f9622748a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6023864-f551-4ef7-a1f7-b1ccc361f330"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a8d1c43-12d3-46ba-a17f-2d0f4c031e80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66b1180b-deac-4e2f-8e5d-aaf4290560cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcc8fea0-8950-4ab7-819a-efb84b7b3eda",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f31343b-0f02-42eb-8caf-bfc6d7d662e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53a2a7fe-c37a-480d-ab80-5359a007fa3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d9af119-91e7-471c-ae0f-53bb26cd5fbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba8b3aed-a223-421f-9477-5e96534387a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48ce266f-d692-4dc6-9da1-babaeee7d48c",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df390356-ea2e-4db0-a50f-0a2c0daad258",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39da7271-463a-4909-9b46-3f12c88b0914"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7880b8f-66d2-477c-b190-3158127dc3ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54a491a9-dfba-4d51-b750-25f7e20437cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dfafc95-dd1f-4dd6-adbd-02c1c043f2b7",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11886e3a-600e-4b3f-9c7e-fccecf6b0df3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd21edd5-5495-4ba9-8a24-c5deaf29d3a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f4af947-1d35-4cd2-8c42-90a48441ccb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c47b9ac1-203c-42e7-a9e7-6da4461b4d40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "404c1b25-b28d-4771-8778-5f9fefc4e895",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa752dfb-a9f2-4f1a-a252-4f01ed41e1bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "061b0815-0a90-4cab-ad22-77a2c1fade55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1895d4d1-feb5-4e04-a260-2a1d96be3a3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2aa82d60-b0b3-48a0-8d5e-c2e72dfb7876"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb8a090e-82ae-48a3-b697-7d7052ecfaf5",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65d10c46-e50f-40e4-82df-d2ad8e5ff084",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70dea76e-e430-4d3c-b9f9-1cd6b7ec2f31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e54ded9-6949-4323-992e-be0fdeb29cd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaa3b714-21bf-4066-9a36-095d449b06f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1aa343d-37a6-486c-a947-cf36af71c237",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ef269d4-ef8b-4156-8a78-0fcbdc426cbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f70e3b9-fd0a-45ee-a11a-4f2871166194"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c0b9780-3692-4659-bd82-3dc495ed42fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52790f8f-1bc8-43a4-8859-9ad8dc069cd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "537beb13-803b-4abb-b6ef-6a6f4cd74ddd",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b075301-a640-4858-b97f-451b8d2be440",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66323f56-f861-4ff9-af4e-32b99e3eb599"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "642d6261-01c4-4701-9924-556972d58c7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "185cc3d9-67fa-41d0-a69b-6804cb21aa0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "521a0db5-ed44-4c27-86e4-fcb9c3f847c0",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8baeea0-3737-4be1-a9db-f4c0f3091b70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd2a63d4-f355-4a5f-8d39-dafb40dae916"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c19421af-b963-4470-af7d-51c111a94f29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01ed6f20-5266-4bbd-bb76-fd8c0e0eff5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "395ea75e-ca12-47d0-8d48-8c4a72ee673f",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71540e01-a81a-4f19-a773-17d1f2b1665c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e8ca8f8-a70f-427d-81a3-5eeb04603cca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d82aa1b6-caed-4b23-a493-a85023a547f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c75f9a96-57af-49e3-af0c-5a673e1c6184"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c3c22eb-4a62-479b-9e4f-109cee057722",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8228603-694b-4c36-9e23-e18b0ebceb28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7432b1c-e3c1-40e8-9ee6-48e6190c22e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa191ee6-bb1e-46c7-93cb-c759b8476bbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e40007e4-0074-4d1c-b901-2798f20fcc93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90b1d459-5d04-485b-96f9-c3a52785fbb0",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ce0b076-30d6-4dd1-a2f0-646cba7a19bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "967be82b-f176-4527-a49b-b683ae419efc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fce95e7-14ad-4e34-bfa9-ad89331f3f48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db5c306e-e1ef-40e0-9212-7a383b8a30c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3339e32d-73c8-4d1f-bf27-f68d1a9126b4",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3e5fb78-5142-4ba7-8f74-07df2c4366b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a5d4bd3-40b2-4985-91bf-61089c849a36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "655eecfd-aaf5-4482-97f6-d55578fc3104",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "799f4164-ce69-4a73-87d8-2a4467677124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d489e7c4-c036-46b1-8edc-9ac08c4bc60c",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2da22d2-f4dc-4551-b62b-a9f81c749547",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d3869c1-5f93-4970-8703-9cdced65cb28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4784bf53-738f-4c77-9f1f-34fc5a2c8e14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d783368-3b6b-4c4d-80fc-7f6d45fb325a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3aadaa5-9ed6-492c-9f38-7d60e31d778b",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a22c882-86ae-4d4d-8b94-b23c0954548b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a621624-064a-4bf9-8f5d-afc4b975e76f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fab6515-a185-4aed-8e36-96af2e1fc2d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68b3e12d-fabd-4cdd-a4e0-de91f9557cf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba3345fe-b0b3-4981-aa7e-764ffa087feb",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ad0c7d3-333f-421b-92f5-b1ae348e5241",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5288eb5-15f5-41f2-a89d-42bc7a304a86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9d5f961-09c5-4927-8843-40889bfa44cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3149dbbb-b4bc-4e40-94ee-57f7db7009d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0de30481-189c-4fcf-a87d-a4037cb67604",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbc65246-2c25-4665-9358-60680086668d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59f20729-74f9-43e7-b0f0-ad4da80e93f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e01b8dd0-7e5f-41b3-870c-9ae81de0a2cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4890a227-9be4-4af1-ac7e-e1ee4247c9e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e174957-ad8f-45ac-99e3-9e203829bd2b",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d14e30d-6044-43cb-8433-eebb64ca4684",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6fc860be-88e9-4766-93fd-54bdb11e12e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52d51133-4771-402c-bed4-757af22bf3e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f9bfb28-4c98-4c24-b92f-bbb753f2fe4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "029b6ea5-529d-411a-967b-094803934303",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2264ea1-04b6-45d4-b7b3-ad3ed84c220c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d905f355-7a31-4cf0-af83-e84514926a26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "790ab9c2-3b17-47d2-84ed-fad7bdb578d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5299de9f-8e96-4fff-8146-879bf38fd65f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cfa59c1-69dd-46e3-9cdb-aec7e6741b76",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1080b464-6161-4c3b-a737-484207b5f12d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cadd58ab-28e8-4b86-bfbd-8c159abf91a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbe0bf56-99e4-4eb1-b4de-c3105b7771e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b872e960-38f8-4e47-a869-c0cc7ac660d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "380841ed-038b-4bd8-8f47-42bb2414e717",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ea18ec7-5bf8-43c6-ac0d-43b8e6b8db71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7dba5c3-f556-40f1-bc96-ba0789c3c632"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b759b9d-1988-406d-b83c-10af4e4d5d5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b884c529-41fe-4be9-8d80-369152e98029"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8df76220-aeb7-479b-8e49-f13787741318",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e4f1ec1-9415-48f8-b968-5226e04d907f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5508221-48ec-42d5-8f97-fbe91fd865ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7765c711-5b06-4c53-a6f4-54ee9641a13e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "142ccfa0-a63e-4309-ad4f-edc017f15f24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7167f114-dfad-4045-bf7e-74c43ba14ffd",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb6293ab-e1c7-4806-83a5-fa0819f056e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18a5d0a9-8ae2-4391-bbae-bf77ab4702c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95d5f4cf-a6e3-4e2a-9991-e4d52362ba21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6231417-24de-4eb7-b819-274062910db0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f4d4e3e-c809-4df5-bde4-691329d64e94",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e21255f-bf72-412d-8efa-1a4c9a759138",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b10b9aa-3e0f-4a12-a8ae-79c2ca97cad1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dd6cc59-8585-4dcf-8307-23f51e11ef0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4ddf2cc-ff43-49dd-9dcb-fa64cc749dba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d2c2dd1-f1a3-499a-975d-0ba75a1ce691",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a47a6e41-4998-49db-875a-d3f7d84a64c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6cee7171-4f22-419b-8400-cef5200b8e8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe2214f4-cc94-44f1-88db-5c805e63f7a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c374d29-aaa6-439f-8744-81a1b43d8039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1156508-92c2-4455-b7ec-20b4daa75f6b",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c115f102-24d0-4ae6-8eb2-3ea84f90ce7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8c00e6b-aa1d-4e24-a34a-66b73e73a97f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d62f092-2d5b-4fa0-9235-879bd4d17fab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18688a5b-7a91-4430-838f-632734ce02ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cee19eb2-9691-48bf-bb2d-8f6aef6c0acd",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce43b21c-67f5-4cc2-a056-e5e9c31e8243",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52f0b503-a003-4c64-8285-4084362fa66d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f628c3dd-4309-4244-a684-64d80ca762f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26946400-069c-411c-9ae7-e6dcd8c31859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d21a6567-442f-467f-a307-1dc1cc39498a",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a9cb610-2814-42e1-8762-313c99367c97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e368aa53-e846-41e5-9c23-776e54663645"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddce096b-1f7e-4273-9442-789c06d9f1d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40a418d0-c83e-4abe-8f11-227ad640086b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c38fefad-d051-478e-830d-4639a9c120b0",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50fff492-45dd-47d4-8937-926238ff2b7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9129547-7ddb-4e9e-923a-3835cb1a0508"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "128b211a-deef-40d9-b0b0-c66234952700",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f10546ae-0e7c-4ceb-bde1-e27caf4506a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffd87aee-011c-44f9-8353-bfd3c74214f4",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6d940b1-823e-400c-bae3-69b576455717",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1dcd843-c766-4815-bb40-803f9a0ae34b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d225435c-2c40-4043-a51d-b6aac26df187",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aeab1599-9546-4a29-8ab4-050e77a7e354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfab0ebc-8fea-4c28-9c26-4f665e6f04ba",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff5ebfd9-2a27-4f99-bb73-841d2d569deb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48395353-6365-475a-ad3b-d54efeae392b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3336e0fa-01e9-4dd9-9fbf-65d70a7d0d4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1cf22a1-8d87-4ee7-87e3-a3116a562abf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b96526cd-2fc0-44d0-b0ad-e5f7371560cb",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eed5542-6208-45c6-9885-3e919088719c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c461b3c-f076-4013-8cd3-666b1ac46a7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95bcee1a-54b2-41bc-9130-c93f8656048a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e044ff8-cb5b-45db-bb4d-27d411276049"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b460eab-45b1-4db9-a19a-7b6511c3acac",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f65c8955-c239-4f5e-8f36-21c6a60ce9a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "842833e5-06dd-475f-9a3c-e829ea405ff9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67b0ab59-a99a-4ab3-8864-b8abb4ef0055",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01628886-e6d3-49be-92b9-893067425942"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7050f3f-1013-430d-ba11-c085ae7126e1",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf331e11-94b5-430b-b24a-34f1fb45d3a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2cdc654-0fe9-4beb-a32f-d570413f59e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa50a65a-3728-4873-b6da-278b82a00b6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e791a2d-0bc8-4c72-a5eb-81a0b2ecbbd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5889e61-de25-4810-ae1c-6715ff6a9c5f",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf1e764d-42b9-4f10-82e3-ccc25621cd5f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec1e0afb-dcae-4e13-965e-f959d2a88eb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96e443a4-63cf-4a1b-a0b1-ea5cf6582267",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3589e3e1-f039-44ef-9bd4-467bef8b211c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f80d3c7b-5d90-475d-aadb-96d18e8dafca",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c62d139-9c58-4958-9aa5-671a61c70b7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22781f9e-fc0d-47cf-b27c-c529202b8140"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bfb872b-6293-4b74-a773-8f4421836368",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1f5fe33-dc39-4d5a-aa26-e484c8c12b0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "132c8a1a-4e74-428b-9e9a-e8c443786391",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29a54c49-9c28-4c65-8e9c-791df95099b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20b05655-cff8-43dd-8026-bb8c0e817127"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc38f572-680d-4828-8b9e-458365e623af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e111391f-e4c3-4030-b922-3a62b154fd41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "020d86e5-a81c-49b4-bf55-2554a035acd5",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deae25c8-652a-4c2b-99cb-8473455692e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b3b7a3d-1a82-4c60-9d66-7181bd07b572"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "347bf640-da21-4a68-87ff-41392d2b4e32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee4e2f95-6ab2-41c5-b387-e7946d959982"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f9525a2-102d-4e27-b762-825b421b233b",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cb8e6ba-0833-4d74-aca3-94339a5e8737",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "773c3973-5f85-4971-b96d-46da88e35827"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f716366c-d3a9-4ff1-bc07-45a35b98d56b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e86e4ff8-36de-4efd-b78d-e5694b5ea9a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d97eebdd-74b1-45e2-a96d-ea742443887b",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f1c74a3-1ca8-4d72-883b-42c28d3f39e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5cd633be-2eeb-4c80-9cfb-5d98ad7a8dc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22ea3399-be5f-4028-a503-8666ad845f9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fbca972-ae27-4173-8191-3f925181c23d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc493505-262e-4671-b029-d0f54d3c568c",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d80c50a-b8fc-4fc0-a7a5-08aa1f74a9e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "386fd414-3597-4133-98f1-7334be70500c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07eca1f9-c034-41d6-a9a3-b1d9d7e59be6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c9003ed-064f-4e53-8a23-2361facc76c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2378faae-6913-465a-91b4-7dc338d1124c",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73fb9869-4350-4f9f-8d2e-119020aec4e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59574250-966c-4e97-9ab8-eb8e556e1344"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c35a523-1305-4069-852f-563f8ed57066",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d8f03d8-42e1-4839-a0c0-19671f058e88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "643a4b93-159f-4f1c-84cf-424a62a6b969",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e99f498-7138-46ca-aa70-92dd44636d40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67cbf089-d3d9-40b1-a481-04eeb4f1aa15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef3e681e-2deb-4b3d-bd49-031f123d9922",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9be6786-22d8-46a3-8ecd-37bdf6d1a776"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6391983-39c6-4283-b86a-e4d281c6ff1e",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30be31fc-9326-49a4-9c40-5cfaa7b17c35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffdb8dd9-295e-49c0-aeef-3fb068a36560"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71f28824-65d6-4b4e-8c2c-0c67c5e89485",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de7e2afe-861c-45f0-8767-6b9f42f334ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfef6ef2-1813-4291-b571-b4ed77608364",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "154a2551-05cc-447d-bdf9-4f0ca1607973",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac02af6f-2446-4e54-befd-d71448320cf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98b37532-4452-4516-b576-ed076fe3f7b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d4c6cb4-2448-4e76-abd2-0b67c41b4ed5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a89fa1e-d913-4e11-96c7-611ffd6eacb9",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bae7d5a3-fd7e-49d8-b6f5-87f3f812cfde",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bdca9f09-34aa-4d47-a273-5a0053dc798c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03b8ce0a-0fd7-4f0f-a7af-f3cc45f5c1d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9220bbd6-5038-457e-8f07-2086c718f51f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2e9a3d3-00d0-45c4-b056-612e692eca45",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c96b3839-84d2-4890-acca-a273a6b10460",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a995cf9-52b9-4833-807e-0ccf4aad3b01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92a2ce96-15ca-4875-a06d-17ea873e3256",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91f18357-56b7-4037-8a6b-f383fe38f392"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9690224a-3d94-467a-ab3e-c63b0b270305",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d27dd16-14a2-4741-9bcc-dbe395aa6862",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f8aaa98-1d64-4097-880e-b5da27c08166"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a180c0a-8048-43eb-bd7a-7cbe525f5f9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b036a489-3f0c-408f-9c38-46c9588c358c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91715af6-9921-4f5e-a9e3-018fed8586e9",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a5ffd41-091a-41d0-b229-f6336b96d937",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d1f5086-8cfb-4b29-87a7-c0feb081e840"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce5da9a6-b21f-43a8-9158-a8433e93fd98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5f925e8-4233-4782-9d07-9af38d0f5a43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8bc6bd8-7281-4388-befd-f9b56d547fd4",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09a7eaed-d305-410b-bf1f-019af756627c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a3e39a6-52ba-401e-a0c1-c69aa8789e5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "626e9843-e776-4822-a1ee-a43b6d2a3c3e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33b8ba51-a5f4-409c-9611-ba0c42a3d9f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c0521c5-aba2-42de-80d9-1332864b5319",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c04d5964-7c6a-40fa-aabf-11ffbd39ccdc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91f8657b-fa71-4758-b5ef-1f24b3207e14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b98d5f0-beb6-4bb8-a1a6-dd058607c6eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4f43128-e087-4391-99b7-eb3672e7bc35"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "126aa058-6411-4173-8da8-15d3fa6fa747",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d5b98f0e-1a42-475a-8580-20fe55f2ba59"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dcb4a019-fe18-45c6-9234-9d2fa22330b5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f0b33a35-94d5-4f0e-b01a-a05826a65db7"
                    }
                  }
                ]
              },
              {
                "id": "e9751d16-8919-4af5-bbe5-e864a12d920b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4ed01d32-f405-4574-ba40-ed5488192f85",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65b7f5c9-1d49-4c9a-9ad1-000ec95ec0b5",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "a1c60a31-76e4-4da2-b195-cb620df7cc96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77ab53e4-d088-417e-acb9-b141b7e057da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3ad224cf-a3fc-485a-a987-ce5c9e5b812e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "03cc2921-b95b-4c6a-919e-155c165c9dbf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f11b6ba6-164c-40d6-916f-fbe0569612bd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7ca3be7f-eaec-4562-b7bb-406e482ff6a9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "477efb02-009f-4bbb-bd48-e768aa4d425d"
                    }
                  }
                ]
              },
              {
                "id": "fac9b567-ce94-4874-ab31-fb8106e7f96d",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "fb7fb7c8-09a7-4fa7-b3ce-547276bf77d7",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74a78fa3-af0d-4ce7-b6af-b197427e83b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "fecc3216-490f-4505-9785-eb6a93d74a1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48e95029-2cb0-4002-995e-273f519f7084",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0eb3adac-c246-4edc-a15d-de02834935cc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "426f8dd5-3326-4d1c-b775-b52dd69a7144",
            "name": "Positive Testing",
            "item": [
              {
                "id": "745a8e5f-60f0-4087-84c3-f5904a681311",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c647b579-9914-45fa-8639-c74a5ceba06d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "82c5770d-26e8-4983-93e3-a2c755e03da8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "76d7ee71-9ead-4c79-9608-5dfd5f57b81d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "04eda12c-a8bf-4f5c-9642-068a48ecc5d0"
                    }
                  }
                ]
              },
              {
                "id": "0dbc7996-c6e0-42a1-989f-477365642018",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6122184d-5c32-4b86-9aa7-39a20dcc5101",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f62d606f-9132-4127-a641-37d5df27a787"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6847bca5-ec4b-4c0a-81f7-06fbe68b5d7d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6a4727e3-9070-46c5-8fa1-b5ce83dc3d08"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fd214afb-bd3e-4fb6-b402-7893518be8dd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "f15f5dd6-5e32-4cbd-ada4-497de9b2b6cc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f4b1a648-c82b-479c-bcd4-f49029516212",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2a93c929-bd55-445b-92d7-fec598f929b3"
            }
          }
        ]
      },
      {
        "id": "1fa44c65-4320-4e67-8cbe-c5af15f7b0ec",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "464fca78-2de6-4149-9409-83bfdcb9d1d5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f5360a4c-2a77-456d-b35e-a868df7bc253",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a4cc3714-9c82-4616-abe1-b79eac716838",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4cbadbb-e33e-4e4f-973a-5f8ec411b33b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "19750d87-fc38-416f-9a30-c75ebcbfeb29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0b99437-e40d-4699-b513-0ae96f63cd67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "91d22e1e-5464-426b-913d-6c3d5f2810c4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bb07095c-480c-4989-bac5-48957ec82be3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8d719cd6-4abd-412f-98ea-2f7cb8cd03e9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "740d0ed5-84c8-40af-a38f-f902fd727ae0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4814eeca-b388-4e2c-a568-8a16e992e6e3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "10749fb4-9cb1-4e31-8c29-7874f64d2c56",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "bb4b7551-4123-4144-adab-e9c068b4d407"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d0e59081-62b5-4385-ab4c-47751d58a04b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a801ec88-5cf0-4a4d-952e-0ac5c85af847"
            }
          }
        ]
      },
      {
        "id": "4a7b0ca7-8657-4f1e-8451-3229846a4da3",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "d6106704-5686-43eb-bb22-14c7bd06d446",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a9a57b99-f4ad-45b7-a591-d0299b3fd2f6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9d459985-0073-4ae2-8bfe-c27a3c7454f3",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "653a6783-cfa7-4d7e-ad57-0987ce6389a6",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0428c274-7061-45a4-87d9-5eee2b6d8400"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fe0c536-4468-4784-8af1-01c90b494061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b528898a-6d02-4793-a98c-552d47832f12"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "95be1a97-1f35-4d43-8e56-a3387a28a441",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7a04e277-e086-483e-9a42-24b248f94e5a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d85a1b78-d11b-482d-b5d7-7434f5fa6eb3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2958a480-7094-4729-9b4c-1b2cee9d4842"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c8adff1f-1000-40b3-a64f-c3979cdced1c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7a1155e5-86ea-4b96-a6ca-cab44562b177"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d2579a75-1556-40a3-b194-9cf9636d0c24",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "aa933c10-3afe-452a-9767-fb9409b74435"
            }
          }
        ]
      },
      {
        "id": "a519b460-834f-4cda-ade7-835f76b1c6c2",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "e3e74129-cbaa-4aa6-90c1-09e2e31ee20b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2cfcd5d6-ab9b-40cc-9137-682549ae0070",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6346eb12-3426-4ace-9da5-46cd65cc2e75",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f2eeed8-3e46-4a94-a42e-2df4dc809e9a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ffe3f93a-6bbf-48b2-a381-8268b3a5f9eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04ad1476-5b07-4474-b08f-66bdd7933d9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a72de67f-0630-43f2-804b-831e0156006a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "26f156ee-4a40-4f72-98ca-613c266c470b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1a4f3b96-12c9-4c86-9fbc-1953ca29e3be"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ecd109d2-d52b-4ece-bae1-2000b6065432",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a57d3468-7f7f-4ba1-be7b-8ffcabf3e784"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "602d5b68-1e34-477c-b152-145dd75e6c58",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6334f0ff-f9d6-4f3c-8383-2c4f4b09c1d2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ea73faeb-2d4d-45d9-8cc9-1bb7b21b84e1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "88d79731-96d5-43c0-b51a-2b5d8cc61c84"
            }
          }
        ]
      },
      {
        "id": "f75d99c7-6639-44e8-976b-afc02eb71d00",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "805693ad-4679-4aed-833e-80b441e9b531",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "29830537-329f-48b9-8919-a094fa80d8a7",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "ad98b19b-1550-4244-b0e8-c3f7d20742af",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7780b7c6-b2ed-40ef-a259-5cc9b2fb6d86",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "502649bc-34c1-41d7-9fb7-d45f8795269b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 63.291228070175464,
      "responseMin": 8,
      "responseMax": 736,
      "responseSd": 85.9552480067119,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1709598821268,
      "completed": 1709598848548
    },
    "executions": [
      {
        "id": "53a0108f-a19f-4bf5-b68e-242d438be2fd",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ce822247-649b-4a52-97ef-72fcd0dcbb79",
          "httpRequestId": "dd364915-c0de-49d2-9143-6e61ce4879dc"
        },
        "item": {
          "id": "53a0108f-a19f-4bf5-b68e-242d438be2fd",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "2e5c0b02-91ef-4ad1-a1d0-8146ff195bca",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 0
        }
      },
      {
        "id": "2e9cfc66-1a9d-4bc9-9c18-c2132ed33c33",
        "cursor": {
          "ref": "dfa39577-05a2-4c0e-8a30-2676a24fac24",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "60d40f53-f583-45e1-9a63-a52ace0553b6"
        },
        "item": {
          "id": "2e9cfc66-1a9d-4bc9-9c18-c2132ed33c33",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "d4061578-b869-49ca-ae14-ff97dd2e2007",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "da656a15-1aa6-4aaf-847f-482efeb99854",
        "cursor": {
          "ref": "fb643474-e2f0-41df-bdf5-9d1bcfbbc86c",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "b80aca8b-883b-47fe-b153-f17060b2ab9f"
        },
        "item": {
          "id": "da656a15-1aa6-4aaf-847f-482efeb99854",
          "name": "did_json"
        },
        "response": {
          "id": "df3364fd-964d-4b62-b772-01f491ee9a17",
          "status": "OK",
          "code": 200,
          "responseTime": 278,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c0000a1-9d41-403c-afe9-84c39e610fce",
        "cursor": {
          "ref": "40d2d191-9748-4e85-860d-a28712aa2c40",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "3a303395-1516-473e-ae44-b55786c33f87"
        },
        "item": {
          "id": "0c0000a1-9d41-403c-afe9-84c39e610fce",
          "name": "did:invalid"
        },
        "response": {
          "id": "03ba17cc-a960-4c87-bca7-4e3226a1f37e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c0000a1-9d41-403c-afe9-84c39e610fce",
        "cursor": {
          "ref": "40d2d191-9748-4e85-860d-a28712aa2c40",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "3a303395-1516-473e-ae44-b55786c33f87"
        },
        "item": {
          "id": "0c0000a1-9d41-403c-afe9-84c39e610fce",
          "name": "did:invalid"
        },
        "response": {
          "id": "03ba17cc-a960-4c87-bca7-4e3226a1f37e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dd67150-501e-47be-97d9-8d0195b6fd76",
        "cursor": {
          "ref": "4d32ab47-b0ac-4eea-93b2-2a071d0c4b19",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "eb373f0b-1aa4-486e-9ad3-5160165b4ce8"
        },
        "item": {
          "id": "0dd67150-501e-47be-97d9-8d0195b6fd76",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "30fe1a4e-093a-4118-96ca-232bf0e491cf",
          "status": "Not Found",
          "code": 404,
          "responseTime": 84,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad98a83e-6552-4fe5-911b-27928257f98c",
        "cursor": {
          "ref": "f098a125-dbcf-4d59-b1df-4a7d3e8a3236",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "b9d15f29-fd3e-4ab8-ad14-d47ea5936cae"
        },
        "item": {
          "id": "ad98a83e-6552-4fe5-911b-27928257f98c",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "fb52b307-d88a-44b2-9955-62626c2413f6",
          "status": "Not Found",
          "code": 404,
          "responseTime": 33,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "352cfe04-472f-45f1-851a-700a9e7330dc",
        "cursor": {
          "ref": "9bbbc315-6fba-4c4a-acc5-5aeddb069b49",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "90823b98-f182-4d0b-bedb-920c0c74fc54"
        },
        "item": {
          "id": "352cfe04-472f-45f1-851a-700a9e7330dc",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "15b861dc-72d9-4fea-ac50-15436748bf9c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff3e10c8-65bc-40fd-a05d-853bdd605a3f",
        "cursor": {
          "ref": "6c996293-4a87-4391-ba3e-36dc5b11f6f7",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "d15e8fcf-6714-48d8-96ac-4c6f50358b54"
        },
        "item": {
          "id": "ff3e10c8-65bc-40fd-a05d-853bdd605a3f",
          "name": "identifiers"
        },
        "response": {
          "id": "8a94fbff-f3b5-4ceb-a314-f8070ba79bba",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f1cdf31-b4d0-4cc6-abfb-04cd65560109",
        "cursor": {
          "ref": "6b0da67f-e90e-4101-b822-61a31f2e074e",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "3be46d18-860d-43e8-8283-38e58100098f"
        },
        "item": {
          "id": "1f1cdf31-b4d0-4cc6-abfb-04cd65560109",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "727b3157-e87a-402d-8167-051eda9e2587",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4871b561-66c9-44a1-a136-2def4e716474",
        "cursor": {
          "ref": "8c282e26-9e19-41e7-b27b-6eabdc71d9e2",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5a82c7f1-d291-4616-9fe2-142510a207ff"
        },
        "item": {
          "id": "4871b561-66c9-44a1-a136-2def4e716474",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "4ec33dfc-58c2-4587-8a2d-52f7145a82f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16cd5d65-e71b-4ae1-be4f-9c351e52ca1d",
        "cursor": {
          "ref": "8426c82c-c581-40c8-b1e2-8ad031f349f7",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "c28752ee-04fc-41a0-a0b5-c720fb8cb39f"
        },
        "item": {
          "id": "16cd5d65-e71b-4ae1-be4f-9c351e52ca1d",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "87df44b3-f338-494c-ab4e-acaebd412585",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49f08110-0574-4335-9a6f-3a345f387e89",
        "cursor": {
          "ref": "41e6718d-e8c2-4297-865a-3ca2998e0f89",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "ce7c77bb-602c-4172-8287-ad9640a51028"
        },
        "item": {
          "id": "49f08110-0574-4335-9a6f-3a345f387e89",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "74fbd337-b870-4ba8-b87a-35086f6e6daa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d3bf8e8-7998-4df2-bb47-a4f67a90fb51",
        "cursor": {
          "ref": "b1519894-b372-4d87-8b30-75c569d43778",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "781a410a-97ee-42b9-a85b-909c613effff"
        },
        "item": {
          "id": "2d3bf8e8-7998-4df2-bb47-a4f67a90fb51",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "c1170c23-d08e-40c8-8b43-28e3bed02ca4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b804494-5307-4a29-9339-26392c85c12d",
        "cursor": {
          "ref": "7aa52330-73fe-4a15-81b0-fe7926609656",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "e6faad31-5798-4ba5-b84b-cd43d608784f"
        },
        "item": {
          "id": "5b804494-5307-4a29-9339-26392c85c12d",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "54383ea3-3fa9-41d9-b8e6-bdc6c4148417",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "664fb114-7a3b-4fb5-81f5-74f64415e563",
        "cursor": {
          "ref": "de5c9bbc-ee54-41e8-a031-6d9c18bec524",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "4a52dffb-36a9-4974-8931-daa546f4c13d"
        },
        "item": {
          "id": "664fb114-7a3b-4fb5-81f5-74f64415e563",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "829c1aff-c755-46e3-aac7-72b2ec8f3ba8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bbd70aa-49fb-43a3-a75c-dff11c649ecb",
        "cursor": {
          "ref": "b28fbfc9-3cad-4304-b6f4-b1214df5f754",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "d6a8be59-077d-4e65-894a-d2d32a6a0c5c"
        },
        "item": {
          "id": "6bbd70aa-49fb-43a3-a75c-dff11c649ecb",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "c556ed64-e132-4a33-a5a3-72140da46387",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bebec1d-0401-4434-9f94-7a0057672864",
        "cursor": {
          "ref": "0f397c1a-fb74-4556-9ba7-87ac4d9624f6",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "9dd46286-f37b-41c1-b419-36a58da47d3d"
        },
        "item": {
          "id": "0bebec1d-0401-4434-9f94-7a0057672864",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "b55244d8-6f4b-4626-bfbd-a71fe1176e9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e22f415-0b26-4081-9f77-7951d1a1854b",
        "cursor": {
          "ref": "23dc7693-a7b1-47c8-bfbe-e970ecd7c484",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "1a3a83d1-2cb4-404a-bfee-dae62acc192d"
        },
        "item": {
          "id": "4e22f415-0b26-4081-9f77-7951d1a1854b",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "70cf355b-a337-41f9-9198-36ae465ded41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7ec1b9f-7abc-4c8c-96be-6a0c75680d85",
        "cursor": {
          "ref": "b6b4190c-6a2a-4c89-afbc-74e09b51e922",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "c81ebce5-3622-4d45-9060-64e5f050198c"
        },
        "item": {
          "id": "e7ec1b9f-7abc-4c8c-96be-6a0c75680d85",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "688fe69a-ea0c-4d63-a941-1cf6790ee52d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "444ee707-2e5a-4127-a03b-aad471e85a7a",
        "cursor": {
          "ref": "810d11a8-6b32-49a6-98e1-34a982a8101d",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "07b06c26-4723-4c49-bff1-f64221e057e9"
        },
        "item": {
          "id": "444ee707-2e5a-4127-a03b-aad471e85a7a",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "4973e157-a54b-490d-8271-32e571ef6930",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec015524-81da-4bca-8329-734e067e40c9",
        "cursor": {
          "ref": "b3a19bd6-6e1a-4647-816d-b2481160ade6",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "db54f1d1-e56a-4c36-bc8f-27f1e2351229"
        },
        "item": {
          "id": "ec015524-81da-4bca-8329-734e067e40c9",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "c68f898f-6433-47ba-bf3e-ba7fcb0d7053",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "265b73a7-1e41-4fcd-bb66-5bd53624fa46",
        "cursor": {
          "ref": "cf4b5448-e936-4445-8d75-f77939a8ddfc",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "917dfb01-9b7f-4b78-ae02-fc52867b99e8"
        },
        "item": {
          "id": "265b73a7-1e41-4fcd-bb66-5bd53624fa46",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "9f3a791d-960c-4afa-a907-b5e8e37547f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a94c939-518a-4ce2-bdd8-9748cec07630",
        "cursor": {
          "ref": "a0381f87-b0f0-4aa2-a587-3dc8533e6253",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "da69249e-b93d-4815-b2c7-49e83701891d"
        },
        "item": {
          "id": "6a94c939-518a-4ce2-bdd8-9748cec07630",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "9bf0b3c5-16de-47e9-b072-4e5bc0384eab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4430c4b3-f119-41ef-81ad-b9b3345eb815",
        "cursor": {
          "ref": "8b5e99c4-8959-4764-b0d4-d291e5166235",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "33c63394-58e2-4d4e-a921-36c38088db0c"
        },
        "item": {
          "id": "4430c4b3-f119-41ef-81ad-b9b3345eb815",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "1e1880da-0729-44cd-aae7-e54058865c72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f6ea87c-b701-4562-90ce-9f34c33c30d4",
        "cursor": {
          "ref": "aa98500a-93a6-47b0-8909-962446401bb7",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "77b5b363-5c13-47eb-be40-89a71bde5fcb"
        },
        "item": {
          "id": "2f6ea87c-b701-4562-90ce-9f34c33c30d4",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "1f7883d2-58a0-4752-9992-b42c9bcefb48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb0e1973-b758-4b7e-b917-b705186ccd0a",
        "cursor": {
          "ref": "d81643e5-db3e-4231-b665-29458e9f1f1c",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "be198c39-01c1-4488-a114-25d867dbbede"
        },
        "item": {
          "id": "bb0e1973-b758-4b7e-b917-b705186ccd0a",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "9ad6efe7-139b-4943-b4dd-698e463a02c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbd17f35-76ae-4f3c-87c5-e78bdb39a8ff",
        "cursor": {
          "ref": "8d3a0bd4-662d-4c2b-bf5c-1f989860ad16",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "1c681157-9ebe-4538-a394-65121e06fd23"
        },
        "item": {
          "id": "cbd17f35-76ae-4f3c-87c5-e78bdb39a8ff",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "e7ef410e-c625-4298-adc3-cf18a236c57e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4a8f893-ce7f-4860-a47b-d89a71fe7716",
        "cursor": {
          "ref": "d2e745a1-b690-4b54-9f8d-69eb7ecd0f5b",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "a6638c37-3eb9-41ce-8d24-23e236ca63ff"
        },
        "item": {
          "id": "c4a8f893-ce7f-4860-a47b-d89a71fe7716",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "254a37fa-e384-489f-a04a-5ef045db3135",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be07a7fe-2dac-4bb1-8315-462046c7d6f5",
        "cursor": {
          "ref": "46a8faaf-598a-4abf-9243-7a204386ac50",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "9b6c4fd2-b5cd-4109-ab85-76fdd90ef4bf"
        },
        "item": {
          "id": "be07a7fe-2dac-4bb1-8315-462046c7d6f5",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "6a6b3abe-6ba5-4507-9f83-aa8ee5b32a64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dd70947-45b2-4e16-8090-a2951b5f0a7d",
        "cursor": {
          "ref": "30b29341-f0e0-4164-abb8-42c07b0486c1",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "6524c20d-3513-4548-b2b7-aaeee74341fa"
        },
        "item": {
          "id": "6dd70947-45b2-4e16-8090-a2951b5f0a7d",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "de938232-69b7-4ed9-90f1-8758964c3c0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4b0af77-6440-4728-b34d-0ca93c0431b0",
        "cursor": {
          "ref": "e640b0ab-7f60-4548-aa3a-704e9271b1fa",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "d6a4ef10-c8ee-4f30-8160-ba4943c50df5"
        },
        "item": {
          "id": "d4b0af77-6440-4728-b34d-0ca93c0431b0",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "1c5d09fc-8e2b-4e8f-8737-2d7db849e5e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ee5cafa-2b50-4945-8439-aba48b218728",
        "cursor": {
          "ref": "89469812-0fa1-4938-9dd0-d235a888c7af",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "3c68f5f6-e43a-48d3-8b2f-a15359733eaa"
        },
        "item": {
          "id": "3ee5cafa-2b50-4945-8439-aba48b218728",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "49cadcd3-c8dc-4b21-a61d-64f56d31ae07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dddcebfd-3e94-4bfe-9e57-4f277cdd3b9d",
        "cursor": {
          "ref": "63c7b248-189e-4829-896a-54290cc04cfe",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "4767bf0b-e33c-43a1-bfd6-44ac5870e452"
        },
        "item": {
          "id": "dddcebfd-3e94-4bfe-9e57-4f277cdd3b9d",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "92f9ed2f-864c-474c-8751-7afb56cf5ea3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26eb3240-1986-4a22-8712-1a559a0b30c8",
        "cursor": {
          "ref": "8b5cbf05-7998-4223-b19c-efc1093b5a59",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "a2cbf236-2aca-4c21-8aec-f788263a1ab7"
        },
        "item": {
          "id": "26eb3240-1986-4a22-8712-1a559a0b30c8",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "99d004a6-17b6-4b4d-8d99-dcbf9e02bccf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29618c69-cb5a-4e00-9799-3621bdb65c30",
        "cursor": {
          "ref": "56550b4f-6efb-42ba-91dc-15623bc3983c",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "acd6522a-9f43-401f-905e-62fb91c261e5"
        },
        "item": {
          "id": "29618c69-cb5a-4e00-9799-3621bdb65c30",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "834b0ae7-bd4c-4b92-be13-ec26d23a3cdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79eb6f70-1ce1-4bb3-b095-262113e9a77c",
        "cursor": {
          "ref": "7826fe7a-cabc-44d7-a0e7-284f5aa26b78",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "3b4bfe2f-610c-4db3-8c22-a20f5f8559cc"
        },
        "item": {
          "id": "79eb6f70-1ce1-4bb3-b095-262113e9a77c",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "792cdf6c-20f4-46a6-9893-cec0e7ae9c7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dbb8f6d-2681-4c8f-bdf3-eb379dce0e73",
        "cursor": {
          "ref": "dd73584d-9310-4eb4-af11-b8b114e8d93d",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "dc4dddee-1075-45bb-b519-8552c7fc277f"
        },
        "item": {
          "id": "9dbb8f6d-2681-4c8f-bdf3-eb379dce0e73",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "95ef1479-c793-4ce5-aab5-0cf5c52447b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3514fbff-b3d8-49c4-b3d6-85879e99712a",
        "cursor": {
          "ref": "fbd82e7e-01c9-438e-ab5e-d975a1c40e10",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "37e01a1e-1468-4347-8f90-bfbf7a731cf1"
        },
        "item": {
          "id": "3514fbff-b3d8-49c4-b3d6-85879e99712a",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "cb4e41d2-d6ef-4d47-bfbf-311ad0f91dc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80152eb9-c5b9-4f84-b1ee-33d356917293",
        "cursor": {
          "ref": "a9e4c144-22b2-4913-bab6-41e54cbc9461",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "9d9ba1bb-426e-4e3d-b27e-42a2a69461a4"
        },
        "item": {
          "id": "80152eb9-c5b9-4f84-b1ee-33d356917293",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "c3627197-8eb5-4674-b93d-5de83ac1d4ef",
          "status": "Created",
          "code": 201,
          "responseTime": 736,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "b09000c9-eb04-42bc-b2bc-0591c10814b5",
        "cursor": {
          "ref": "d7694f5a-141c-4c7c-933e-fbb6dd9127dd",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "2150e4ad-9a6c-4339-a39b-90f01a32dae5"
        },
        "item": {
          "id": "b09000c9-eb04-42bc-b2bc-0591c10814b5",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "2ef3f20f-aa2e-46a5-a1aa-d74d5b85b684",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "42a23f22-81cf-44f9-b507-ca2467864e5e",
        "cursor": {
          "ref": "b2e24a69-fbcc-4ea7-aa49-f7ac96db8ebf",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "0778f43b-9e69-4c24-9374-0d68ee4cb0e8"
        },
        "item": {
          "id": "42a23f22-81cf-44f9-b507-ca2467864e5e",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "9b0b93fd-5330-452e-b6e9-e0f9ea2c6324",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "58d4eee1-fdd5-4166-8979-81ceefbd1543",
        "cursor": {
          "ref": "b1503ec6-6192-4b80-938c-9497e1fa8941",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "b01dfda2-1a3d-407d-b26b-6151a4000681"
        },
        "item": {
          "id": "58d4eee1-fdd5-4166-8979-81ceefbd1543",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "0530ba9f-1ebb-468b-b379-7b1abccae6cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c0d4dea-0e63-4ecf-9819-64bcc23e296d",
        "cursor": {
          "ref": "91bfd8cc-239b-4d14-a88a-2088927d1b7f",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "1de3ef61-b7b6-4824-880f-d198f365c9cb"
        },
        "item": {
          "id": "3c0d4dea-0e63-4ecf-9819-64bcc23e296d",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "372c1cca-d16b-44e9-b11a-01d85cda3b00",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "0ac8910e-22d1-4a1c-a48d-cf4db1dbe2bc",
        "cursor": {
          "ref": "d4119fea-06dc-4434-b196-568be2fb8add",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "c626316f-3c03-4399-bf04-556a1064024f"
        },
        "item": {
          "id": "0ac8910e-22d1-4a1c-a48d-cf4db1dbe2bc",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "17ddaab2-4292-46c3-b11f-c06c71b98699",
          "status": "Created",
          "code": 201,
          "responseTime": 394,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "4d41f88e-c49a-4724-af72-e871819b7473",
        "cursor": {
          "ref": "ddc6f864-402a-4f9e-89c9-79c1c40cb131",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "3e7277ee-a04c-4a2a-b39a-52ba15daf6a9"
        },
        "item": {
          "id": "4d41f88e-c49a-4724-af72-e871819b7473",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "4b1946f3-2fa3-49f7-bb0e-d62b5c731591",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "e5b39867-f243-4fde-a8ba-158e8bc43ffe",
        "cursor": {
          "ref": "e26892a3-80cd-490a-830f-477563b6ea38",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "ee8c78c9-c34e-4ae9-afc1-20811f2a188f"
        },
        "item": {
          "id": "e5b39867-f243-4fde-a8ba-158e8bc43ffe",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "ad3f654d-2e4c-4b44-bf05-165296f12efb",
          "status": "Created",
          "code": 201,
          "responseTime": 305,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "0951577b-7180-44d7-a96e-ba5e7f79d98d",
        "cursor": {
          "ref": "fddf7887-e9be-41bc-80a4-0e8c7ec7e5c7",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "dc4e6471-5cee-43e5-afd3-27cb146e4907"
        },
        "item": {
          "id": "0951577b-7180-44d7-a96e-ba5e7f79d98d",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "d81f83ae-1f82-4de6-beac-6e553fd50f5f",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "05000d15-2bda-4c67-bbac-20aa93ec944e",
        "cursor": {
          "ref": "4bb03984-4fd6-4309-b9a4-48436715eccf",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "63e050ea-aaf2-4457-b4ba-ecfad01a05b9"
        },
        "item": {
          "id": "05000d15-2bda-4c67-bbac-20aa93ec944e",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "2ced7a7c-d6b4-4732-be34-34181aa7affb",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "546eadc7-c089-45b3-a2a1-a01220cb49ac",
        "cursor": {
          "ref": "ef689557-53d5-449e-acb9-ef665de04605",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "7a483e02-3385-41bf-bb15-4f0464e24b05"
        },
        "item": {
          "id": "546eadc7-c089-45b3-a2a1-a01220cb49ac",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "2b12069f-8476-4760-9907-1521ca5468d0",
          "status": "Created",
          "code": 201,
          "responseTime": 279,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "8b76bb5f-52f3-49da-8f36-ec37ccba4e12",
        "cursor": {
          "ref": "3f2b0855-16ee-435a-9d2e-565349c25ea5",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "648b01df-09bf-4342-99fa-3dd99f5b42fb"
        },
        "item": {
          "id": "8b76bb5f-52f3-49da-8f36-ec37ccba4e12",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "74307bf6-d4ca-4c68-82e3-0047e9928af3",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "504c1604-7b94-4744-b716-e1de387e77a8",
        "cursor": {
          "ref": "fa183fc4-42e0-48cd-91b3-e3dab1a892e3",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "22168ea0-322d-43e7-8bc3-94c1daae5f71"
        },
        "item": {
          "id": "504c1604-7b94-4744-b716-e1de387e77a8",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a83347ef-db07-4c56-89e1-44b2b881a75c",
          "status": "Created",
          "code": 201,
          "responseTime": 296,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "1f5d1d11-2ecb-4c83-b433-4d48ded83166",
        "cursor": {
          "ref": "a6d0114c-f7f9-46f0-8785-96de9135ff4f",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "64eb568a-c1b8-438a-bb2c-bb485c85fd1f"
        },
        "item": {
          "id": "1f5d1d11-2ecb-4c83-b433-4d48ded83166",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "44685d41-8cc7-4529-b5bc-53905901b05b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be13a75f-a285-456f-a66d-a5d5b9264f98",
        "cursor": {
          "ref": "7c3a9e72-16c9-42ac-a4ff-d59f5e789c70",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "8b984242-b17e-419f-b43c-e061eeae9bb7"
        },
        "item": {
          "id": "be13a75f-a285-456f-a66d-a5d5b9264f98",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "ca03558b-fc02-4921-a5fa-9850b4b38d89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c79d1753-c8c4-4e8c-b35a-ccd22a894eb4",
        "cursor": {
          "ref": "62460d15-9225-4bfd-b303-81a167836dfe",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "d23e4388-8422-4e2c-b6cf-23bc5919e14a"
        },
        "item": {
          "id": "c79d1753-c8c4-4e8c-b35a-ccd22a894eb4",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "c51d8948-75b6-449a-8d61-d5fd5a1c3752",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16ce768b-d0a8-4bf7-a627-f4cd5027bde0",
        "cursor": {
          "ref": "b0961c0f-8c7e-4dc4-9bf8-05ffd23c287d",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "ed0d07a2-3d5a-4756-aebb-a598d52bf462"
        },
        "item": {
          "id": "16ce768b-d0a8-4bf7-a627-f4cd5027bde0",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "0a3d774a-dd4e-4066-97ae-a7131b4d8fad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65a631c7-9b49-4823-9128-acbb676d0f19",
        "cursor": {
          "ref": "4d3a99fa-86c3-4552-963c-aea45ee7705d",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "2d0f58fc-af1d-42ee-a3e7-74083c918764"
        },
        "item": {
          "id": "65a631c7-9b49-4823-9128-acbb676d0f19",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "c8b062b2-8207-4a10-beab-5b7d4ec07b89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00fdb16d-b111-424e-8724-e0aecfa6fa5a",
        "cursor": {
          "ref": "33d0b28b-c54f-43f6-b4ce-36c21a2ff105",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "ec443b40-42cb-4161-b05e-31fb92e62576"
        },
        "item": {
          "id": "00fdb16d-b111-424e-8724-e0aecfa6fa5a",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "61b425d0-bbc8-424b-9b85-6092591fcd5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1decdbbf-ca09-4973-ac6b-3b98adc102df",
        "cursor": {
          "ref": "adbe766a-afd8-4110-9c53-9c1000bf61d9",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "a646d39d-bd29-4f2c-83f4-16d8411987f1"
        },
        "item": {
          "id": "1decdbbf-ca09-4973-ac6b-3b98adc102df",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "1063004c-ac11-4d82-a3ae-9e6c3024c602",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ef204e1-8b8a-40fa-9dd1-653d254c42c0",
        "cursor": {
          "ref": "939b09d8-3002-46de-87a5-414aa88c2bad",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "511cf556-5c91-4df9-9a43-076ea3a9ecfe"
        },
        "item": {
          "id": "2ef204e1-8b8a-40fa-9dd1-653d254c42c0",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "6479859a-9d45-4581-8f7f-e2bd0bfd98b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ffd5437-8dd0-424c-9fe0-6f9a9c6fd8d7",
        "cursor": {
          "ref": "8a6bae40-08d7-4c45-8f24-0d873b41b663",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "22b516c6-eade-4e0f-9c66-22c813e6ead0"
        },
        "item": {
          "id": "4ffd5437-8dd0-424c-9fe0-6f9a9c6fd8d7",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "7ff950bb-b33d-43cb-a172-0213f8c624d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3dfc26b-144d-45ed-8b6c-f0aa271483b8",
        "cursor": {
          "ref": "57be45fa-4853-4689-92bf-e17f30b440e6",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "a9030b51-aaff-4435-a7be-4421a0d83412"
        },
        "item": {
          "id": "a3dfc26b-144d-45ed-8b6c-f0aa271483b8",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "b21207bc-1a79-4141-a2a7-3872a372ba0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba62eee8-d4be-4ad7-abd0-4d0185e550e6",
        "cursor": {
          "ref": "a46644ce-b2c9-451e-b2db-fd4d768003bc",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "a2169d31-790e-47ec-bb3c-4303cb00e135"
        },
        "item": {
          "id": "ba62eee8-d4be-4ad7-abd0-4d0185e550e6",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "d152190c-d06c-4e7f-9750-4b9b09768f36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "078fd34d-4e3a-4ab2-8fa1-554f2d3aac04",
        "cursor": {
          "ref": "01659f39-ba93-49ec-a758-4c964e311f66",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "e74672d5-65e9-44f4-ad94-0269ebaa6e3b"
        },
        "item": {
          "id": "078fd34d-4e3a-4ab2-8fa1-554f2d3aac04",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "8bdb6b91-21e2-4062-ade8-c992b0cd075f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c056829-14ea-4b38-a189-2264772884de",
        "cursor": {
          "ref": "3ca5b368-bddf-4f95-9dac-83d33f21f433",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "bdcab6f2-5999-4d51-97ca-c90e1bd4e677"
        },
        "item": {
          "id": "7c056829-14ea-4b38-a189-2264772884de",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "27cc1789-90ab-4999-81be-f6e6c3288084",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d65376b-8cdc-48db-9401-2da289c4824c",
        "cursor": {
          "ref": "404fcaa0-5fdf-4ca2-a7b4-d4c29b80bf8f",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "fad0ed2e-4bcd-4d6c-87e5-c5b0e498e48a"
        },
        "item": {
          "id": "0d65376b-8cdc-48db-9401-2da289c4824c",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "a134ce9b-8afb-4a98-8838-107aaa961531",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "66a77a62-52f8-407f-ad66-67c0a243e244",
        "cursor": {
          "ref": "8a51dd8c-21fe-4169-8ac2-b9465735ea16",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "fab18ff9-8001-4a9b-a165-b9dcb8506782"
        },
        "item": {
          "id": "66a77a62-52f8-407f-ad66-67c0a243e244",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "75f02360-36d9-4b7a-b991-c462a1d452ab",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "8d0dfa62-ff70-4e07-be2c-1262cd0cfc00",
        "cursor": {
          "ref": "a6d9993c-2346-4994-80f4-23c68598628a",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "e1491c9e-4448-4570-9a81-f7418d3e9b5f"
        },
        "item": {
          "id": "8d0dfa62-ff70-4e07-be2c-1262cd0cfc00",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "1a138076-b389-41d7-b8ac-3ff7f87728ae",
          "status": "Created",
          "code": 201,
          "responseTime": 380,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "592544a3-8ac4-446a-b0b5-44c1b38136c4",
        "cursor": {
          "ref": "28e8d828-c30d-4043-bec2-fe25cbe4eab5",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "beaf3171-6299-46fc-a828-a0ea215c1e73"
        },
        "item": {
          "id": "592544a3-8ac4-446a-b0b5-44c1b38136c4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "f8606ed7-c639-470a-a115-9f597261e32b",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "27c6b25c-472e-4277-88db-5a69aa143770",
        "cursor": {
          "ref": "466b3b8f-d311-4fa4-b109-20c43b78a495",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "2f006f19-fa6e-461c-9f62-9fcac8949abf"
        },
        "item": {
          "id": "27c6b25c-472e-4277-88db-5a69aa143770",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "7c8fb0f6-6579-4707-8896-872c94a23d4d",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "1d67fb9c-646e-40fc-9046-c5d01b6fab19",
        "cursor": {
          "ref": "df8cfaa9-cec3-4d16-96a1-547f4055eeb8",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "d9847ac2-c9e4-4df5-ad48-b9e67dac647d"
        },
        "item": {
          "id": "1d67fb9c-646e-40fc-9046-c5d01b6fab19",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "60f9897f-daad-45ac-ae82-6b3fb0d33231",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5583507b-f8e6-42ef-9b34-3a02c970eb71",
        "cursor": {
          "ref": "f2a65d5f-1299-4770-a715-d03e88d5c491",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "eda8a4b9-8b36-440c-b483-d90c983cbb1b"
        },
        "item": {
          "id": "5583507b-f8e6-42ef-9b34-3a02c970eb71",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "6417df6e-4a16-40b6-abde-5db986869fa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3688176b-1b18-4c49-8441-e447d46fb2a5",
        "cursor": {
          "ref": "7b10c51d-482d-4ace-bb6e-75db9a4571ba",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "3c5ea0f3-16ad-42c5-98f5-537df440bda4"
        },
        "item": {
          "id": "3688176b-1b18-4c49-8441-e447d46fb2a5",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "88c3ae67-c69e-4cb9-8158-a5aadd23fc37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "155322a0-5411-4a9b-8685-08d394cc5532",
        "cursor": {
          "ref": "722ddbea-cfe6-446e-9709-89c6d4cfb123",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "44ee43ae-1bee-4654-9c5a-6663fe18d293"
        },
        "item": {
          "id": "155322a0-5411-4a9b-8685-08d394cc5532",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "13e92b0f-ca4d-408e-ba36-bac7bdc20bb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "609c36d5-9049-4673-8d70-6ae61b13aa56",
        "cursor": {
          "ref": "69d8356c-5521-4888-97bd-597ba3a3b571",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "139d7fb8-760f-4792-bc85-ec665922a291"
        },
        "item": {
          "id": "609c36d5-9049-4673-8d70-6ae61b13aa56",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "3200b37f-88ec-4261-bd7c-dccfac6053ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e81f3f0-8e6e-4560-a60e-80141b1c75e9",
        "cursor": {
          "ref": "518af9fb-1e06-49c9-8a44-6d8fbabb5875",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "0e180976-b71d-4444-a9bd-2714ddd93cd6"
        },
        "item": {
          "id": "9e81f3f0-8e6e-4560-a60e-80141b1c75e9",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "0d59d2e1-1884-4f2b-aa8a-f15df4b7c767",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09d34d0c-a731-4b4a-99c3-c62494b0641b",
        "cursor": {
          "ref": "7fa94528-3b04-4708-922b-f88f9e37acb5",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "17543886-53c2-4fe9-865f-248587ef1ce5"
        },
        "item": {
          "id": "09d34d0c-a731-4b4a-99c3-c62494b0641b",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "c821f761-d67f-415e-a879-668f82ac4640",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "912053d0-30f5-4480-8e08-e74b9aada4ca",
        "cursor": {
          "ref": "5eb0fd47-7f07-45d4-a0b4-62b800dbaea6",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "cbc64c42-bfaa-4562-b05a-30721ae2ee48"
        },
        "item": {
          "id": "912053d0-30f5-4480-8e08-e74b9aada4ca",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "4ecf71b4-f3f1-41da-91f3-475b10e01e7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "410f6cfe-4024-4a34-8495-952afae1fe6e",
        "cursor": {
          "ref": "38c13c98-b84a-47b8-b104-cfb667844ff2",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "8065f6ca-c188-4faf-bcc2-cb2b1ff5b224"
        },
        "item": {
          "id": "410f6cfe-4024-4a34-8495-952afae1fe6e",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "d9459d36-9b82-4d96-977b-63481b55b8c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7f6e158-482b-4df4-9175-aca9c394e5e1",
        "cursor": {
          "ref": "ac9674f0-5580-434b-9b33-3de70d14f97a",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "426a2d33-f6f4-4bfd-8f60-30ea0cdaf657"
        },
        "item": {
          "id": "d7f6e158-482b-4df4-9175-aca9c394e5e1",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "d5df6e90-e91b-4243-a454-930141214bf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eab0934-5942-4ad1-9ae3-56a2c1b728b0",
        "cursor": {
          "ref": "ab503dae-c974-441d-aaac-c1912b3ad0a9",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "f17912d2-c556-44ab-9ba4-76b825a1516c"
        },
        "item": {
          "id": "5eab0934-5942-4ad1-9ae3-56a2c1b728b0",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "dc61d2ca-9eb8-4a81-bdfc-1c0d8e892c11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18bccbc5-19eb-4704-81b3-731f7777c808",
        "cursor": {
          "ref": "c1fa96c9-4023-4ba3-8e0a-e168d3e6d362",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "f7d6e69f-0c4f-419b-bea0-1555539b81eb"
        },
        "item": {
          "id": "18bccbc5-19eb-4704-81b3-731f7777c808",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "4f65d411-a1bc-4717-ab80-52acfa07e623",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7005e61d-4eda-46c3-83ce-f2708e68bb15",
        "cursor": {
          "ref": "bd3619fb-e492-43d0-be59-f44d6cae1fde",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "28c6fdbe-64f2-4ace-aca0-1d46b4ee5d93"
        },
        "item": {
          "id": "7005e61d-4eda-46c3-83ce-f2708e68bb15",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "e3c302a4-f216-4271-94e9-edd51f8f1e49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a41f0616-f599-41bd-b8d2-bf9057e16836",
        "cursor": {
          "ref": "3446416a-d413-45bb-b8ff-efa05124f7ce",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "49b9196e-e931-431b-97be-7f50477c9838"
        },
        "item": {
          "id": "a41f0616-f599-41bd-b8d2-bf9057e16836",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "9f7859d3-aac1-4431-8556-68134fad029e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f933553-1311-4fd3-8bba-8f9a558eda4d",
        "cursor": {
          "ref": "37008ef5-a210-4721-a96f-fbc55629fb41",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "7411cf31-3698-4d81-8c29-74cdb905c425"
        },
        "item": {
          "id": "1f933553-1311-4fd3-8bba-8f9a558eda4d",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "7ec34637-c1e2-416c-8757-d8919c078a45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4e03181-e09e-4a62-9340-21b87a2cec19",
        "cursor": {
          "ref": "53e6eb3e-d2a1-491b-bcaf-6fb323d5899e",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "1b7ec9a4-02d0-498d-bc7c-4b58f2b91577"
        },
        "item": {
          "id": "f4e03181-e09e-4a62-9340-21b87a2cec19",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "78546c5c-3afd-482f-a39f-f4571b1dcd19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff50fc0b-2c64-4ab6-957c-a99aa17c878b",
        "cursor": {
          "ref": "890d7781-84ed-446b-8e3c-93906ee88e23",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "31a69dda-f826-47f7-8542-7a713e95adde"
        },
        "item": {
          "id": "ff50fc0b-2c64-4ab6-957c-a99aa17c878b",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "253a23de-1ce7-4e6f-834c-c69293d00947",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55b0a084-2742-431a-86e4-29e55abb888d",
        "cursor": {
          "ref": "c9fbffff-3507-46c8-9825-1791da5a4e2e",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "a6177496-218b-4b9d-84b3-1487b7c1f959"
        },
        "item": {
          "id": "55b0a084-2742-431a-86e4-29e55abb888d",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "a3da0076-406d-4856-afab-ca16150b7cd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21aa316a-06e3-4a5e-8188-4bf14a5ba222",
        "cursor": {
          "ref": "55c48165-ab95-4879-a219-9c3700688866",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "73a89de5-3ed5-4c35-9e40-904351827c0d"
        },
        "item": {
          "id": "21aa316a-06e3-4a5e-8188-4bf14a5ba222",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "c99fdff5-31aa-4089-a13a-733a26d6b7e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f6c5c4a-9288-44fb-9ddd-b3ee791815d6",
        "cursor": {
          "ref": "80038e87-1add-47b9-9dda-91765f3152da",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "196f6c83-2926-429e-bb5e-5841cab45d3d"
        },
        "item": {
          "id": "2f6c5c4a-9288-44fb-9ddd-b3ee791815d6",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "502d169a-be57-4032-973d-0b87429ba7db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7618647-39dc-468c-bd86-4f9862db71d7",
        "cursor": {
          "ref": "3b031517-fd82-494e-b079-685b6c0fa6e3",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "deebd9e5-cdd2-4dfb-adf4-aabb9a4905b9"
        },
        "item": {
          "id": "c7618647-39dc-468c-bd86-4f9862db71d7",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "7620856e-a1fd-4889-897b-70cbdd8af429",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77a800b1-e1c4-44e0-b821-c87f022c95a0",
        "cursor": {
          "ref": "8ab0ae24-3acc-4a47-97f4-31e9e389973d",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "51e1e3c2-f269-402b-a240-e618d5e5261f"
        },
        "item": {
          "id": "77a800b1-e1c4-44e0-b821-c87f022c95a0",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "5a7f8a4a-e1cf-436d-9031-15bdf9edacf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80e88557-6320-44b9-8ce6-31e957482b95",
        "cursor": {
          "ref": "2f168c86-c99d-4d9a-a390-394583858e1a",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "25906640-2077-408b-a543-53c25361c90e"
        },
        "item": {
          "id": "80e88557-6320-44b9-8ce6-31e957482b95",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "22fbcc29-bdb8-47b1-be72-7e21be6c8985",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a275ab60-2044-4ac7-a4a0-0c30217552ff",
        "cursor": {
          "ref": "089bb39d-d722-4273-8a27-f6e74db8eec3",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "50f056e0-8b41-4ec1-8b9e-bc3bf7240613"
        },
        "item": {
          "id": "a275ab60-2044-4ac7-a4a0-0c30217552ff",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "e26859f7-626a-4f7b-b330-dbc9ff7c9f3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9c0e7ef-b56e-43d7-acc8-de54be2e6313",
        "cursor": {
          "ref": "48a0e7ea-5b3f-4f01-9b61-ed20a10fa411",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "12f7356f-8212-477a-8b28-a71a3324a7b9"
        },
        "item": {
          "id": "b9c0e7ef-b56e-43d7-acc8-de54be2e6313",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "80ba7379-37d9-4c14-921c-69a884fe8f46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80b3921b-4483-49e7-93f9-1eff1bcf0246",
        "cursor": {
          "ref": "8f648661-64eb-4d5a-ae1f-e1296a6fb629",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "e39ee0c5-fbb6-4104-8f52-5e8a6a185142"
        },
        "item": {
          "id": "80b3921b-4483-49e7-93f9-1eff1bcf0246",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "455f91d1-ba44-4ca5-b515-fd7295434395",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa00c764-413c-42f9-b6af-0e9c0bfb93d6",
        "cursor": {
          "ref": "3acb9a61-589d-4e17-aeae-8bfeeabd84c5",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "e099de14-d249-40ed-a979-4a7213182963"
        },
        "item": {
          "id": "fa00c764-413c-42f9-b6af-0e9c0bfb93d6",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "2615cf37-7486-41ee-8fef-ce0f12eafcc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86e42c9a-a9a1-4310-b968-9e0eb59207be",
        "cursor": {
          "ref": "1ea89635-5982-4a52-bed5-ebbe4a27a845",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "854ae4cf-a0d9-443d-b2ab-bee01999c8c3"
        },
        "item": {
          "id": "86e42c9a-a9a1-4310-b968-9e0eb59207be",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "656bc6b3-9c90-4293-b823-3e00633e2025",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbbf89a6-5b7c-49e6-abbf-28b42c1dc2b2",
        "cursor": {
          "ref": "18baa38a-f846-470a-ba71-8e414f661670",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "fd0f6b84-4ac2-461b-812f-c4182f6011f2"
        },
        "item": {
          "id": "bbbf89a6-5b7c-49e6-abbf-28b42c1dc2b2",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "01c35d49-47ab-4c23-bf13-25bc9b89bb07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37034215-4494-4612-8034-2324cbc3543f",
        "cursor": {
          "ref": "51116a2c-289e-43fa-af02-564e46c39e7d",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "e2ad82a6-3f8c-44bf-8b3b-a6ab4e840336"
        },
        "item": {
          "id": "37034215-4494-4612-8034-2324cbc3543f",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "6f80bf4e-3121-4307-943a-cbfded730634",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b7958ee-ff47-439a-a466-32f5e94b9135",
        "cursor": {
          "ref": "fc21b114-217a-4bae-9770-7d90e6c56a9f",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "7f2c1015-d864-4ef0-8de9-ec71c40836b6"
        },
        "item": {
          "id": "4b7958ee-ff47-439a-a466-32f5e94b9135",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "21c3c11e-3cf2-4576-8e22-d1139d4612a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c186b9c-8ab2-46bf-9013-1878cc03fdce",
        "cursor": {
          "ref": "9377eb67-4952-4b54-89e3-1874badb9c00",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "480ec1be-cf00-474b-ae26-efbc3682eec9"
        },
        "item": {
          "id": "9c186b9c-8ab2-46bf-9013-1878cc03fdce",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "5c32964e-1aee-4393-b773-988c70f6ebdf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f7d6bf7-0951-4bca-95af-1d3505513f0f",
        "cursor": {
          "ref": "34ea444d-666e-42e9-8525-e23cb0a2a939",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "d305b614-04e0-4b7b-8cbc-78855db379b1"
        },
        "item": {
          "id": "7f7d6bf7-0951-4bca-95af-1d3505513f0f",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "38ab9771-7785-4280-9220-bed89120b2f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "f264fa4f-11e1-468d-8b7f-9ba857516e7b",
        "cursor": {
          "ref": "9a33ac1b-85b0-4b81-95b8-9b90e88f61bd",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "07d85b20-b6eb-4ede-b7e1-d7574e1f2089"
        },
        "item": {
          "id": "f264fa4f-11e1-468d-8b7f-9ba857516e7b",
          "name": "credentials_issue"
        },
        "response": {
          "id": "3c58571b-5d11-4f3a-9367-b65a7e3a15bf",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "a34788c2-6de5-42d3-b740-7875a007c750",
        "cursor": {
          "ref": "46674364-7c63-4bda-a778-a864dc0d43e1",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "4606ec3c-d82c-45c5-98b4-c76087d8c630"
        },
        "item": {
          "id": "a34788c2-6de5-42d3-b740-7875a007c750",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "61a0484b-3496-4d20-8b18-cf8e0a95a2ba",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8508927-08cb-4afe-a0cc-bd46720d46a2",
        "cursor": {
          "ref": "eb8c9776-5acb-4195-ae38-87009a791161",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "056d170a-a8b2-4de6-939b-b12b5263f019"
        },
        "item": {
          "id": "f8508927-08cb-4afe-a0cc-bd46720d46a2",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "2781cc49-3e86-455e-8a7e-3c085dd4fc9a",
          "status": "Created",
          "code": 201,
          "responseTime": 272,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "91980433-2611-410c-af89-f428a5607e0d",
        "cursor": {
          "ref": "38f665ab-a4fc-4855-bc66-4d2dc5baf8a2",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "108562f5-4985-4910-9bdf-596a7b44d4f4"
        },
        "item": {
          "id": "91980433-2611-410c-af89-f428a5607e0d",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "49d7fa98-e181-4222-ade0-79e5ef2d4c91",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f37bd0d8-3748-467b-8e84-c8eb2543e577",
        "cursor": {
          "ref": "64b07215-d481-422e-8313-899fca5f5345",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "0c26daac-be1a-49bb-b245-148b20792d6a"
        },
        "item": {
          "id": "f37bd0d8-3748-467b-8e84-c8eb2543e577",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "c316fff4-fa0c-4a05-9d3e-a66f34b3c870",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-03-05T00:33:55.146Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-03-05T00:33:55.146Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "44cfc59f-7616-48f4-b788-ecd1e5313a41",
        "cursor": {
          "ref": "da1ebc91-9fce-4439-a142-d41383991d2c",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "2f878077-5a42-42f5-b188-1e76c10df268"
        },
        "item": {
          "id": "44cfc59f-7616-48f4-b788-ecd1e5313a41",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "7ee88b46-8578-4162-8104-1586a6d3b1cd",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5b7d3ed-e762-4212-8a82-80a1bbf50642",
        "cursor": {
          "ref": "a9206c83-b2eb-4ef6-ad55-11470ace1cb5",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "c357ef4f-3c80-43a1-91c0-5109feaf9205"
        },
        "item": {
          "id": "b5b7d3ed-e762-4212-8a82-80a1bbf50642",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ad624a0b-0518-4dd9-bbdb-4a8436e49bc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bb83848-639a-4051-8d32-652bc690a991",
        "cursor": {
          "ref": "b74031a8-7235-45f7-b7f4-c43a30c4de19",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "a7d3335b-1b65-4d92-954d-507777e5eebf"
        },
        "item": {
          "id": "0bb83848-639a-4051-8d32-652bc690a991",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "5f90bc07-f95f-4b90-888b-be28ee47ed72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87abe8e4-89ab-44de-9f18-17716d9a6810",
        "cursor": {
          "ref": "6f68e02f-5212-43a6-862c-f4b18310cdff",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "9197112b-35d1-49cc-b0b4-c6094b865688"
        },
        "item": {
          "id": "87abe8e4-89ab-44de-9f18-17716d9a6810",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "1b6911e8-07ad-40ba-b141-e2aa3a656006",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "976f2d39-bf09-4ecb-8a53-7e60a6457c0c",
        "cursor": {
          "ref": "40a321f9-527e-4bb1-b412-707c57c1434f",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "7fc53e01-3d26-411b-947b-5360eb73292f"
        },
        "item": {
          "id": "976f2d39-bf09-4ecb-8a53-7e60a6457c0c",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "db5b9a17-46fe-414e-9596-c919ade8f868",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4267078-dc31-4148-8ec7-adedf9e1a150",
        "cursor": {
          "ref": "7f345ddc-1cbd-48dc-9671-bfb2920eb5ec",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "51e9890d-29a5-4851-84b9-8bd5b019633d"
        },
        "item": {
          "id": "d4267078-dc31-4148-8ec7-adedf9e1a150",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "0eb5f292-9c14-42e3-9293-8a4039b58dfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48bde594-a206-4053-ae4c-090a3c7a3825",
        "cursor": {
          "ref": "a13ad53a-86b3-496b-8ba3-975e9a3a10a8",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "716c01d8-2402-4a92-ab04-eac0c8647d55"
        },
        "item": {
          "id": "48bde594-a206-4053-ae4c-090a3c7a3825",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "12895758-e631-4786-b87b-833a4fc98351",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ba7fdea-3823-49de-a0fa-d8d7c82aa159",
        "cursor": {
          "ref": "b4d051db-9750-485c-a467-1bdd7a45b1e2",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "27bd45a3-7620-4e20-a695-82f3698b8c2a"
        },
        "item": {
          "id": "9ba7fdea-3823-49de-a0fa-d8d7c82aa159",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "02a39bc3-3b7d-4178-9d0b-f5f3b891156e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bd3da83-cdcd-4bb0-86e6-70505e3346ed",
        "cursor": {
          "ref": "01621b9a-78d7-4b3b-99e8-dab17bd90644",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "4672b71e-d270-47ce-b5a5-fd652e321721"
        },
        "item": {
          "id": "9bd3da83-cdcd-4bb0-86e6-70505e3346ed",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "804e030c-ea66-4c51-bb6b-d5b24c275b71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30e95d0a-6726-4535-8849-3636032020e4",
        "cursor": {
          "ref": "bdbd9acd-01be-4595-b0fd-d7ec19621efe",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "de9703b7-35a8-403a-a767-827915411015"
        },
        "item": {
          "id": "30e95d0a-6726-4535-8849-3636032020e4",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "366cd815-bde0-4c06-b39b-7f54f20a39c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "977c4b93-f248-4170-883d-8fe71b3b17c5",
        "cursor": {
          "ref": "32b88ef6-4c14-4d87-ad3b-341b80e131e3",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "30ca111c-b217-4187-b34e-d774acfc92bb"
        },
        "item": {
          "id": "977c4b93-f248-4170-883d-8fe71b3b17c5",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "fe8204fb-e6e7-4314-aa31-e7a81aa429a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9ea1d30-ca2d-4ab1-b26b-9b227d2d8744",
        "cursor": {
          "ref": "c1950d11-25e7-4d98-a167-79ed72b9b185",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "b21f5f5b-113b-4182-bcce-866fc4ceaecb"
        },
        "item": {
          "id": "f9ea1d30-ca2d-4ab1-b26b-9b227d2d8744",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "2bde6d6b-8d64-4efa-a07b-ae7ae5a3b36b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "837658fa-2862-495f-9106-5b6da3913f39",
        "cursor": {
          "ref": "2434e510-76d2-4d2d-9745-74dcb0f62716",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "6832b86e-7b97-47da-9a9a-1d0cc751196e"
        },
        "item": {
          "id": "837658fa-2862-495f-9106-5b6da3913f39",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "6e212b1e-1076-4d83-b874-537ec3d4fa90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0356eec-8d39-4659-929e-4fe444945c96",
        "cursor": {
          "ref": "cf5738f8-0e6d-4dba-99d4-5a6915fdc663",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "5094a383-9a39-452c-b485-3f5367957690"
        },
        "item": {
          "id": "e0356eec-8d39-4659-929e-4fe444945c96",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "9579d8bc-f71e-4e13-989b-2218e6012c08",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 80,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "7b6d9e27-1c3e-4c25-9dba-033940397fa2",
        "cursor": {
          "ref": "15b62442-8d0e-4b73-bc7e-d9e8cdd03985",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "5d0b3b00-552c-4136-9911-48503ac07b4e"
        },
        "item": {
          "id": "7b6d9e27-1c3e-4c25-9dba-033940397fa2",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "dba5cc03-d2c4-4551-9796-9c95912e9277",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 77,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "99286234-533e-4eb3-b8d4-d4071849cbf7",
        "cursor": {
          "ref": "b1c00330-7af3-4d99-af0a-d98af8434dcb",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "f2f2230f-b5fd-444a-a4d8-18805a46140c"
        },
        "item": {
          "id": "99286234-533e-4eb3-b8d4-d4071849cbf7",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "c7469845-1914-448f-bf0d-021b55929886",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc7215af-ae1c-4155-8243-0870a2ec3c5b",
        "cursor": {
          "ref": "69b5f1f0-203b-4987-b9c3-f55dca978982",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "ff348de7-ede6-4373-ac6f-a509d2a40717"
        },
        "item": {
          "id": "dc7215af-ae1c-4155-8243-0870a2ec3c5b",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "eaf73a30-d872-4d99-919f-0b2d7618a3a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6daa685d-8f6f-474b-a9cc-5df16cf8cb40",
        "cursor": {
          "ref": "240f56e0-fbfa-444a-bd81-008975fdc7a5",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "533b5dec-9686-4508-a482-f32eb64dde7b"
        },
        "item": {
          "id": "6daa685d-8f6f-474b-a9cc-5df16cf8cb40",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "cbf9b0c2-3373-4768-89a8-b8256d4fe949",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5121fd06-44eb-4bbf-85d7-3a9deb55c531",
        "cursor": {
          "ref": "8a74e6c1-9616-499b-ae3b-6b160633b1de",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "f569bcf5-197d-45a9-896d-963616ea6ab2"
        },
        "item": {
          "id": "5121fd06-44eb-4bbf-85d7-3a9deb55c531",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "650e45e4-5e19-4e94-ac21-ddc30ad9e0c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5fd0d9b-5c5a-4277-8279-3b3d37aab95e",
        "cursor": {
          "ref": "7f124080-a4e8-4129-bfef-0fa1db1d3405",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "769716ec-7602-4ca5-a24b-1445e4f2ca1f"
        },
        "item": {
          "id": "d5fd0d9b-5c5a-4277-8279-3b3d37aab95e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "44498f15-1a1e-4df6-b075-35b4ffc6725d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da9c5273-7daf-4766-99d2-337e8b517589",
        "cursor": {
          "ref": "3668019b-2fac-4ffa-94aa-4a3c22b1d763",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "089319fe-2d5c-4f39-8a66-5e3737243500"
        },
        "item": {
          "id": "da9c5273-7daf-4766-99d2-337e8b517589",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "3a591af8-57b1-4441-9235-77f69f8cd06c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f0e6825-2ce4-4ed3-99d0-3dc84af2234b",
        "cursor": {
          "ref": "fb2029d1-6b86-4e39-8871-9f992967886e",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "14895bc5-e97b-4769-aa06-e6b9e327d8f7"
        },
        "item": {
          "id": "8f0e6825-2ce4-4ed3-99d0-3dc84af2234b",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "997e90ca-5f80-49c4-bb46-ffad9a4d0b25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a544073-1e0d-482a-b028-30ac2e9cb306",
        "cursor": {
          "ref": "f7bee28a-8a46-46a4-a08c-e29a7af6e62f",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "af818681-a233-4712-95a9-007eb89eb31f"
        },
        "item": {
          "id": "4a544073-1e0d-482a-b028-30ac2e9cb306",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "395eb1e0-4e41-4fdb-ad50-891586e4522c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4836f62c-de9a-47d6-93a9-e177d8fd4839",
        "cursor": {
          "ref": "16b6cec6-a391-4c8c-b47f-3115f2c1c12c",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "f804f797-d514-4d29-99dc-c5259dcfb36e"
        },
        "item": {
          "id": "4836f62c-de9a-47d6-93a9-e177d8fd4839",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "4799b3f2-c9dd-4171-8cae-f1a2a01bd429",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5075de9c-316f-40f0-975f-8a018c4a940e",
        "cursor": {
          "ref": "a7991a11-c9eb-49a7-96fb-c94951182b16",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "332d6152-5fcb-4545-942c-3817e1e23810"
        },
        "item": {
          "id": "5075de9c-316f-40f0-975f-8a018c4a940e",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "c29a6d9d-7cbd-414d-977f-bf85d7b907e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b969764-2684-4b51-9bce-88787a337ebe",
        "cursor": {
          "ref": "04399adf-204f-4f65-bfdc-f843364482d8",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "e02fe568-d12b-4c1e-b97a-377d1ad67dec"
        },
        "item": {
          "id": "5b969764-2684-4b51-9bce-88787a337ebe",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "8685d6bf-c5c0-4e6d-ac20-6a217fe85534",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cae97aa8-0774-4c69-b1d0-3a46ad8bda10",
        "cursor": {
          "ref": "c7338f86-c0ec-4ef6-b6d5-2a382064db3f",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "fb40e56d-cbbc-4bcd-977e-bbd83c7f80ec"
        },
        "item": {
          "id": "cae97aa8-0774-4c69-b1d0-3a46ad8bda10",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "829e6225-b615-4789-b307-dff7bcb1d31f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "576bafac-8d4d-47eb-bd59-382012f1539d",
        "cursor": {
          "ref": "993077d4-6688-43df-9421-19d6307e3839",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "05fea3fc-5896-415c-be76-43bf5be43e5d"
        },
        "item": {
          "id": "576bafac-8d4d-47eb-bd59-382012f1539d",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "732208cc-c384-4995-8e7f-9aff7a9b41a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33cba7af-2ea2-4bd7-8f4a-e4e7b0085eca",
        "cursor": {
          "ref": "2a5ab689-728c-415e-bf64-375f3df467ec",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "49fd64b4-e73b-4b1f-9751-658efb1fe1cb"
        },
        "item": {
          "id": "33cba7af-2ea2-4bd7-8f4a-e4e7b0085eca",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "4f4e1da0-7d9e-47e9-889c-174277397dea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab57271d-db6a-457e-993c-542687652258",
        "cursor": {
          "ref": "8dce42e2-503c-41a8-8250-16ab0964ab88",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "583d9698-b65b-4587-8645-fb36633af77e"
        },
        "item": {
          "id": "ab57271d-db6a-457e-993c-542687652258",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "0947f384-0015-4b09-8af0-4cb6741d252c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b0a99d4-664f-4338-a972-fa4c95fe15ce",
        "cursor": {
          "ref": "aef8c361-1439-48b8-991e-bc4561c691f9",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "9e6ef8b3-781c-4a23-8984-a831896ecc4e"
        },
        "item": {
          "id": "1b0a99d4-664f-4338-a972-fa4c95fe15ce",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "40d7a219-45dd-49b8-b67a-fb0b1660ae27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44c1f2ba-32b0-4dfd-b852-1894e47e127d",
        "cursor": {
          "ref": "4dc4a2b3-8feb-4639-b31b-16910f4a1128",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "d8aaf420-5be9-4f5b-b708-75880df9b933"
        },
        "item": {
          "id": "44c1f2ba-32b0-4dfd-b852-1894e47e127d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "29dafc6f-5474-453d-86b6-b70350b18f6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29b22a71-2ba4-4fc0-9e82-e0a58ddda74e",
        "cursor": {
          "ref": "278f6500-8295-41cc-ac22-cfddd1560e25",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "d59db70e-eb22-4143-85e8-2813923ba2af"
        },
        "item": {
          "id": "29b22a71-2ba4-4fc0-9e82-e0a58ddda74e",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "4b47efa9-eda5-4843-a63e-5b046976bad6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "c1b24d8b-d2eb-48fd-9475-c574d96cf805",
        "cursor": {
          "ref": "f2b65551-d393-422a-9eda-91e29874fbce",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "99fc9193-8bcc-4c99-a3e4-e9059ea80e24"
        },
        "item": {
          "id": "c1b24d8b-d2eb-48fd-9475-c574d96cf805",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "4fd659a7-ba4b-43d2-85e9-22551ed58233",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f723319c-1b3e-45de-b8f7-05790b9e7266",
        "cursor": {
          "ref": "407dfc49-ef86-49cc-b021-e59751210c08",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "47f8d62b-6175-4749-8789-9d64221b019f"
        },
        "item": {
          "id": "f723319c-1b3e-45de-b8f7-05790b9e7266",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ceaaf151-7d5a-4eeb-ab5e-53bb84a60fca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b0d55d4-993b-4694-b748-f9bfc0fb110b",
        "cursor": {
          "ref": "73c6016c-ebfb-4405-8397-57b4f3110720",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "484282cd-6907-4dc4-90e4-fd4e850bdb9e"
        },
        "item": {
          "id": "1b0d55d4-993b-4694-b748-f9bfc0fb110b",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "96932482-734c-4b01-86b4-1a4e007f7447",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e07b70eb-0cea-41c7-9e68-e68db41b97fe",
        "cursor": {
          "ref": "f8b7455d-c9a6-464c-965d-c9bab4879d26",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "402a3aca-f6e3-4af8-b42c-08d309aff2ad"
        },
        "item": {
          "id": "e07b70eb-0cea-41c7-9e68-e68db41b97fe",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "cb8f5418-4ae5-4814-92a2-e842d72085e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d04cb33-6eaf-4947-bfa7-271adc5bf1c6",
        "cursor": {
          "ref": "4d642fc8-8546-4f26-89d3-4095acf449e2",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "81896869-b584-48aa-9ec6-f6e49563bb0b"
        },
        "item": {
          "id": "1d04cb33-6eaf-4947-bfa7-271adc5bf1c6",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "63a8b52e-3c93-4078-89a1-277ddbe697de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33d5c81a-f918-4c37-8584-573afad05721",
        "cursor": {
          "ref": "972fa38e-a636-46f5-8cbd-8ae61c0353c5",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "2387c174-c0d2-4b80-88ec-e9f5af31c3e0"
        },
        "item": {
          "id": "33d5c81a-f918-4c37-8584-573afad05721",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "64b7c023-dd3d-4cb3-b2b0-f0a2f3f255ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69ca7efa-b606-4039-8d97-70a18b0ee3ea",
        "cursor": {
          "ref": "8d469b95-3f14-41ca-bcbd-e89f23bcb5ab",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "09dc544b-5524-4bbc-9900-8d19afdcd936"
        },
        "item": {
          "id": "69ca7efa-b606-4039-8d97-70a18b0ee3ea",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e9f2e7c0-e404-45eb-94e9-f070162ae7e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7966238f-b24f-4730-bb77-0449ad17efdf",
        "cursor": {
          "ref": "a97d1d13-29ca-4605-9e70-239a998eae02",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "d8d87c96-d7c2-41e4-899c-f99bc9034ae1"
        },
        "item": {
          "id": "7966238f-b24f-4730-bb77-0449ad17efdf",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "0525ccf9-c83d-4b82-b6ae-b791f455c735",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a9ca78f-b114-49fb-97cd-d56e3cd29868",
        "cursor": {
          "ref": "6ab3a12c-8d02-4f03-834c-01548c2980a6",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "31864738-cc4a-4514-933e-ee50dc982b2e"
        },
        "item": {
          "id": "6a9ca78f-b114-49fb-97cd-d56e3cd29868",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "d021b443-61ee-41b7-8697-0ce2019d0232",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebda42a2-6dbe-47ee-bf5b-b8763ef8e27e",
        "cursor": {
          "ref": "bcbee51f-101e-42ac-939e-02cd625e4d13",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "58b5af41-018b-4da6-be23-9d8190ad5e59"
        },
        "item": {
          "id": "ebda42a2-6dbe-47ee-bf5b-b8763ef8e27e",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "827dbc73-1502-49c3-99e0-588af828fd1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "341c3aec-c4dd-45f0-8362-31a2b5489350",
        "cursor": {
          "ref": "b5e4109b-f256-488b-ae1d-fe0296500659",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "60de97ad-3410-47d7-a366-a39c878943ad"
        },
        "item": {
          "id": "341c3aec-c4dd-45f0-8362-31a2b5489350",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "7f6b9781-af1c-4fb8-9863-a5dc176b6f5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d89ebb45-75f4-4865-8423-739f3662b4f5",
        "cursor": {
          "ref": "329644be-695e-4c27-82e9-cda3d5c1b55a",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "16d0f7b6-a7b2-4659-b13e-2310f59ef579"
        },
        "item": {
          "id": "d89ebb45-75f4-4865-8423-739f3662b4f5",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "68c74d89-c0cb-43a5-bb19-307891ec160d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18ff496b-1435-4e40-b01e-72db5b04dc23",
        "cursor": {
          "ref": "7634c17f-d505-4f9f-a3f2-bb3b6ed9fae7",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "b367145a-518a-4e02-ba26-b81b362381bd"
        },
        "item": {
          "id": "18ff496b-1435-4e40-b01e-72db5b04dc23",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "f7d69dfe-09c7-40ce-832a-e919560096f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "383f3a34-473f-4ccc-b3ab-2c62717c3668",
        "cursor": {
          "ref": "812daa76-2ae8-413e-b4c1-62c7b1695262",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "079c8363-2c2c-4719-bb4b-19733222d480"
        },
        "item": {
          "id": "383f3a34-473f-4ccc-b3ab-2c62717c3668",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "229d29e0-ea65-491c-8386-c4830ef52df3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32dfa6b0-4278-460e-9e7b-54a39baaae36",
        "cursor": {
          "ref": "88b0d5b7-a200-4fbb-b2c2-417989cee2e3",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "02be50c7-4995-4ba0-b398-98df7a78c161"
        },
        "item": {
          "id": "32dfa6b0-4278-460e-9e7b-54a39baaae36",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "7cb8408d-47f3-4d89-b3ad-c70620a34fac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 81,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "a67baf46-16d6-4ed5-a377-a5dec5eb39ad",
        "cursor": {
          "ref": "8b410a58-f139-40ec-85ff-f163133ec5f1",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "c7d738c2-0814-41cd-94d9-b7b85fbdfd0b"
        },
        "item": {
          "id": "a67baf46-16d6-4ed5-a377-a5dec5eb39ad",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "3973dfaf-41d0-4315-808a-edae9d4442c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fce24e10-f68d-4591-b42e-68f68f89dd37",
        "cursor": {
          "ref": "44f3e33b-02eb-4c8f-8ee9-ea516f0b986d",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "87fb55cf-4f74-4564-bcb0-836007603ee6"
        },
        "item": {
          "id": "fce24e10-f68d-4591-b42e-68f68f89dd37",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "10533ef3-5144-4f81-bde6-b35e99f075b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96f6f2ce-0a9b-4d00-ba0b-dbdf13935337",
        "cursor": {
          "ref": "f464f3e7-de64-45d8-a59e-d3c5823e6b5d",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "339b30d0-0e42-4918-97de-d467d17f7e6e"
        },
        "item": {
          "id": "96f6f2ce-0a9b-4d00-ba0b-dbdf13935337",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "aa654d99-12f9-43fe-9474-2d5840441bdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca9d43cd-beb5-40b3-9da1-1948c50a9f08",
        "cursor": {
          "ref": "55cd15a8-b0b0-48ca-84e5-f003ff587c4a",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "8b10ac53-c4c2-4d27-a917-2da746377180"
        },
        "item": {
          "id": "ca9d43cd-beb5-40b3-9da1-1948c50a9f08",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "616d03c9-dfec-4bc3-a9ed-1938abfffc75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8724a9d9-2016-4977-8339-fb1611cf2f04",
        "cursor": {
          "ref": "2d36a38b-a8b8-4131-be3d-54ff0ff18d39",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "579c0456-09ff-4a1d-8ed5-534f6021d255"
        },
        "item": {
          "id": "8724a9d9-2016-4977-8339-fb1611cf2f04",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b185e805-9b36-42b3-bd5e-ed02a9e43a76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ecd33c7-eb84-493d-b272-e5f93ab78c00",
        "cursor": {
          "ref": "4138105d-93b5-45f6-94cc-92f9a3673f32",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "cade37d6-46ea-408b-9907-4a3c5239915e"
        },
        "item": {
          "id": "8ecd33c7-eb84-493d-b272-e5f93ab78c00",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "9186fb6d-abcb-48ce-87a1-5f8697a63d9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4022c42b-4d57-43b1-bb1a-c5de6c164b0e",
        "cursor": {
          "ref": "83cee30f-5582-4f39-a58e-648036867c19",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "a02a7b23-4c94-4340-a8bc-7c5158460508"
        },
        "item": {
          "id": "4022c42b-4d57-43b1-bb1a-c5de6c164b0e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ddf1f996-89b7-4291-9fa0-12ed07c95a49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fbde7ed-35c9-479f-890f-bbd758b70cf2",
        "cursor": {
          "ref": "6f9ae2bb-1698-40f8-b3b0-28ebbc99988a",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "eaed023f-a7a6-44bc-8ee6-a505354d0080"
        },
        "item": {
          "id": "3fbde7ed-35c9-479f-890f-bbd758b70cf2",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "998221a2-eeed-4660-8985-ace27f3c7e5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbeb840d-8c5b-4d8b-a6b3-d906b3047ad7",
        "cursor": {
          "ref": "877f6aab-057a-489f-a3b7-075e3df39b5f",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "c56a4925-1e96-45c6-8bcd-a1a23202600f"
        },
        "item": {
          "id": "cbeb840d-8c5b-4d8b-a6b3-d906b3047ad7",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "12f768eb-d7f2-437c-a4e4-bebf600d9fc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c217e49-ed1b-490b-b890-fe882ee68ba7",
        "cursor": {
          "ref": "2d02b34f-cace-451a-8472-3d780f08b006",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "c4b668f1-d4bf-4343-9315-093470934eca"
        },
        "item": {
          "id": "5c217e49-ed1b-490b-b890-fe882ee68ba7",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "71dcab8e-c222-4d99-80dc-2eca17ec3e84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e950d7d-550b-4f6b-ba98-aabd54fec14c",
        "cursor": {
          "ref": "96022277-c526-439b-8a97-a348c22ce3df",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "ac444b97-a656-43aa-9380-f18f22f857d2"
        },
        "item": {
          "id": "9e950d7d-550b-4f6b-ba98-aabd54fec14c",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "418efd5f-7cb9-42bf-afca-7a15b5745522",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23596472-b77d-416d-8537-16dfffdd649b",
        "cursor": {
          "ref": "4fbc7d8e-5089-492d-9c4a-162e22ae1aaa",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "da6e1d96-bc10-4d8a-a4ab-eac5e4c55ec0"
        },
        "item": {
          "id": "23596472-b77d-416d-8537-16dfffdd649b",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "c0450b83-e6d5-48e5-a27a-362df02180b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfdfb294-1c16-4cb2-8bcf-56379e348d74",
        "cursor": {
          "ref": "769223ee-f6a8-46db-8e0c-1025f1af3682",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "73b74452-d117-4060-be94-8a6f27b7c624"
        },
        "item": {
          "id": "dfdfb294-1c16-4cb2-8bcf-56379e348d74",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c4136eae-31a5-4cb0-919d-2582743bcf65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "354c24ae-4194-40bd-9140-9f72fb4b4682",
        "cursor": {
          "ref": "7a01330a-cc36-453c-bcfb-ef5304ebf917",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "090bbfe5-5b1d-4709-a6f4-bca8eeaf4a09"
        },
        "item": {
          "id": "354c24ae-4194-40bd-9140-9f72fb4b4682",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "5b632fb9-e1f6-47a2-9d6e-e082615b9ab3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "529269aa-3d5d-4d1f-ac49-b80d97418c2f",
        "cursor": {
          "ref": "6350e44e-23c1-4295-937e-4adcaa22517c",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "663c7d83-6928-4fd5-82d3-1605833a8565"
        },
        "item": {
          "id": "529269aa-3d5d-4d1f-ac49-b80d97418c2f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "54899a86-1bc0-4f68-b33a-b1a60371fedc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12f1ac82-76c2-4711-982d-3e5469c554e9",
        "cursor": {
          "ref": "293c3a90-366b-42ee-be0d-72f2c02e2220",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "8e75f11b-070b-4890-81d2-937336d0781d"
        },
        "item": {
          "id": "12f1ac82-76c2-4711-982d-3e5469c554e9",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "704aff29-d971-4758-acea-91cad56df10f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fb973cc-dd00-4771-b6ac-73e4d27d5b48",
        "cursor": {
          "ref": "22dc4a0a-e761-432c-9fd3-5d6f05f58186",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "ebfed549-c223-4583-9fe5-9d1faa5075c6"
        },
        "item": {
          "id": "3fb973cc-dd00-4771-b6ac-73e4d27d5b48",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "5c548441-0a6c-4b37-8643-b9b9b94f7e61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3eca9af-5f47-411f-8dbe-15a04f4dd4ee",
        "cursor": {
          "ref": "e9bc09df-fec3-4fe4-8180-ae38b88b3602",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "c323cb42-652a-4137-bab9-1704c3c1c879"
        },
        "item": {
          "id": "b3eca9af-5f47-411f-8dbe-15a04f4dd4ee",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "1aed8c73-bd93-4d6a-b124-3d2e2ccf65a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b221e3ca-e6c7-4bbd-b503-a38fe68852d0",
        "cursor": {
          "ref": "064a1679-ee56-4151-b9b4-13e46bdddd2e",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "e89ce2b7-91df-4de6-863b-e59021a87290"
        },
        "item": {
          "id": "b221e3ca-e6c7-4bbd-b503-a38fe68852d0",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "8cc7621c-d6ed-49b0-a8ae-425eda69594e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aae97514-af1c-406a-927b-3026a39ee7e1",
        "cursor": {
          "ref": "bf689a2c-d6af-4d90-a971-66f7c73fee12",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "bb646059-cc2c-4de3-81f5-e0be52c0411d"
        },
        "item": {
          "id": "aae97514-af1c-406a-927b-3026a39ee7e1",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "dcbf0be1-5c57-4bc9-b457-adc22dc4d48b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9faf8073-2251-4e74-87c8-e948969ab2e3",
        "cursor": {
          "ref": "90f04ab3-799e-484e-b37a-0453bb137d1e",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "646e3a2c-ab61-45f6-9f94-9b01b9f99760"
        },
        "item": {
          "id": "9faf8073-2251-4e74-87c8-e948969ab2e3",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "da810582-e7cf-4261-afe0-85ec95346064",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cd34a5f-c137-4da0-a1cc-5894c164de33",
        "cursor": {
          "ref": "4c3a8403-7689-4916-ae51-eda263d3bc3f",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "46e05b87-1012-4dee-b008-4c35b83fe7ce"
        },
        "item": {
          "id": "5cd34a5f-c137-4da0-a1cc-5894c164de33",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "6f33b70e-c369-4841-8695-99ae7e20762c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c31361f-10df-4002-9cc6-badd51823a27",
        "cursor": {
          "ref": "64c868ea-f2d2-4ca9-a379-52951dfdbf5c",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "e559e71a-112b-433c-a699-88edec56179d"
        },
        "item": {
          "id": "7c31361f-10df-4002-9cc6-badd51823a27",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "c2a9c624-aa53-4119-bdf5-324283f8d501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6797c90e-35c6-4582-9c54-5e5fe9012d7d",
        "cursor": {
          "ref": "7a59444a-5c44-42a9-bc23-00df0c6e9211",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "8e663a32-f396-496b-a6a4-15a57312e205"
        },
        "item": {
          "id": "6797c90e-35c6-4582-9c54-5e5fe9012d7d",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "9f4efd0e-35b6-41e5-ac5d-77dd30ebc8c0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3673c55d-08c1-4c1b-be24-2f5b7548c70b",
        "cursor": {
          "ref": "abad5c6c-ba54-4bb4-804a-ab9745b10a54",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "16dae31d-6018-4028-99db-927a0f02a20b"
        },
        "item": {
          "id": "3673c55d-08c1-4c1b-be24-2f5b7548c70b",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "d717ccf8-c632-4466-9df2-715d0837f334",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91f0854c-5d8e-4b4f-90c0-40f35228b309",
        "cursor": {
          "ref": "aa580447-7d2f-4a66-9097-3be770b20d36",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "a1c2d4a8-539a-45da-b520-ccbde6b7ed2b"
        },
        "item": {
          "id": "91f0854c-5d8e-4b4f-90c0-40f35228b309",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "5bc714e7-8f91-444c-afac-231cdb12871b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdb91ed8-a21e-4e76-960c-ab5f6d232277",
        "cursor": {
          "ref": "c9323104-32ce-45f2-9c62-ed2908b86fe2",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "76be3af2-8aee-4503-b842-2f00cb711839"
        },
        "item": {
          "id": "bdb91ed8-a21e-4e76-960c-ab5f6d232277",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "a7564f7b-91ef-4207-8590-ac7921e53576",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fa202ce-3872-435d-ae32-b36e034308f3",
        "cursor": {
          "ref": "b83df988-9ebf-4494-b9df-1877dce64aee",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "0c9696e7-e569-4500-9eb9-d86470abafc7"
        },
        "item": {
          "id": "2fa202ce-3872-435d-ae32-b36e034308f3",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "522c15f8-9f7e-4e71-8f33-838b1e6d2409",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34e9ee02-c69c-47f7-9c65-780995c38ffc",
        "cursor": {
          "ref": "f5aa43a5-0e3f-4bb3-8b0d-736ae892cae6",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "c0e466d0-9795-4909-9b83-7e2a70dcf519"
        },
        "item": {
          "id": "34e9ee02-c69c-47f7-9c65-780995c38ffc",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "2fd5a9cb-83af-4700-9c62-0711bb1d3e69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4c5a6c5-db0c-46c6-9d72-13f825e138be",
        "cursor": {
          "ref": "3103f230-5dd2-4a5e-82cb-79fd0baed7a9",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "0ec4fbf4-1238-4f7b-a469-33345fdb5dc7"
        },
        "item": {
          "id": "c4c5a6c5-db0c-46c6-9d72-13f825e138be",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "d47e7648-d2d6-4bdf-a341-1e4c478dc8bd",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "965e6304-ea57-466c-a2a1-ec1cba5a1e90",
        "cursor": {
          "ref": "1a5788b0-5659-488b-87b1-8201e5b1f33d",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "fb1910a2-0e24-42a2-b545-7ee4cfc26012"
        },
        "item": {
          "id": "965e6304-ea57-466c-a2a1-ec1cba5a1e90",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "d0193de2-814a-41ef-89f9-9ee41b5124a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b98dddfb-555c-4486-8649-a5ee2e6536a1",
        "cursor": {
          "ref": "e59b1916-333c-45a0-9b51-168097f80a12",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "e1b67029-336d-427e-8b7e-468304341a40"
        },
        "item": {
          "id": "b98dddfb-555c-4486-8649-a5ee2e6536a1",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "9315e802-bdc2-403f-a66f-d6280eec878a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a83a1728-5cbd-49cd-8333-71c90895fd97",
        "cursor": {
          "ref": "0df9594f-6b73-4372-ab4d-df29b4682c39",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "1f9f2a05-e974-4ce4-953c-f57c6f8bb8f2"
        },
        "item": {
          "id": "a83a1728-5cbd-49cd-8333-71c90895fd97",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "ea043320-4ac5-4163-877c-b46711b3886e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8f16929-110c-456c-93ec-fb177c0e7188",
        "cursor": {
          "ref": "7a54c547-a934-40b0-8127-fe4d767cb1c1",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "9911396a-f2de-4b3c-9b58-19dec582165b"
        },
        "item": {
          "id": "f8f16929-110c-456c-93ec-fb177c0e7188",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "9c787775-e001-4e4d-a856-4c744f4e5452",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b8b5152-3947-4564-97fa-d4c967a6e86a",
        "cursor": {
          "ref": "47862acb-fdf3-4e17-9e4a-57fb4465e347",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "1115c3c9-1c0b-4ed7-8c07-7aa68524958b"
        },
        "item": {
          "id": "1b8b5152-3947-4564-97fa-d4c967a6e86a",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "16689cd3-a42b-4a34-a4cf-1c05508b2c85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a38c66ef-04e7-476b-94cf-97b6959fc3a3",
        "cursor": {
          "ref": "5741e82f-1215-465f-b188-03e3e7c6c02a",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "55a5c18f-fa2c-446f-9753-fffef2a395fd"
        },
        "item": {
          "id": "a38c66ef-04e7-476b-94cf-97b6959fc3a3",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "b8cbb417-6cb9-4b11-87b1-c36d86a25c60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42711a28-d21b-4f71-a5d9-9865d3d57f22",
        "cursor": {
          "ref": "9ad6f2c0-5401-4bdf-861e-987a2a4f9938",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "0091c79f-a49e-4ba0-b16a-edfe725083e7"
        },
        "item": {
          "id": "42711a28-d21b-4f71-a5d9-9865d3d57f22",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "886424f7-722e-416a-a190-a9fc73d33763",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7de749a9-8d74-45a7-8f76-a3b75e8c69a5",
        "cursor": {
          "ref": "b6420d0b-2fb5-4a3c-baa1-6f38ae6578de",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "042ea63d-5fd2-49c5-ad67-793c8f0c7296"
        },
        "item": {
          "id": "7de749a9-8d74-45a7-8f76-a3b75e8c69a5",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "a7e730e9-6703-41a8-b120-ed737cb72041",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eaa5e75-c351-412c-9cd9-731d24c59704",
        "cursor": {
          "ref": "931e2301-a951-4916-8b67-20efe0b3a741",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "e08abd7d-89e2-44a6-8470-d03b850410a5"
        },
        "item": {
          "id": "0eaa5e75-c351-412c-9cd9-731d24c59704",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "d7db2d7c-bd72-45f0-9d5e-8b0b0d396780",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1017917-be58-4d95-bf89-9cf0a7fc17c1",
        "cursor": {
          "ref": "04c2b87f-cef0-4844-8ed3-3f9b5f40664a",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "0e41df57-e05e-4e63-8f6a-4a5dbe894b31"
        },
        "item": {
          "id": "f1017917-be58-4d95-bf89-9cf0a7fc17c1",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "8a7ef19d-1e0d-4104-856d-25edf2e19183",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6e9da38-2006-4162-99e0-a8eeafc196cb",
        "cursor": {
          "ref": "4bb414a2-8909-430d-bf61-bca1cfb43ce1",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "39d91223-e95a-4f51-8aca-2decf449d38b"
        },
        "item": {
          "id": "e6e9da38-2006-4162-99e0-a8eeafc196cb",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "1127e221-7596-471c-81fc-64a965d103ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f183626-dd26-4c0b-8294-8432ee14cde5",
        "cursor": {
          "ref": "b1c78a7f-3cf2-4eb4-8461-4bf049e47a74",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "3d187f87-21a7-4248-90e2-014ef7959da4"
        },
        "item": {
          "id": "5f183626-dd26-4c0b-8294-8432ee14cde5",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "2c6a4803-9b21-4161-aa0d-0668389f51d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7463178-51df-436d-ad18-4bdaea40d0af",
        "cursor": {
          "ref": "4f7e2e4c-0bbd-42d3-97c1-39f47af32b17",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "9d4a2c28-22f0-4691-b30e-f8b5f1655735"
        },
        "item": {
          "id": "a7463178-51df-436d-ad18-4bdaea40d0af",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "855aa0a3-abe8-4cd7-9544-970f17a182d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "618b8222-a222-44e4-bebd-0534b3e3d40b",
        "cursor": {
          "ref": "dafe839b-4b2b-4763-a8eb-d3b891a95ed9",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "0ce754c1-8045-46ff-b4c6-8c1ad62408e6"
        },
        "item": {
          "id": "618b8222-a222-44e4-bebd-0534b3e3d40b",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "9347f5aa-580a-4742-addb-48873e0452d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba153599-30ea-4839-b915-f96569a0ab26",
        "cursor": {
          "ref": "1e0da413-533d-4315-899e-6f18ac221530",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "662ef492-7793-498c-be75-908cd25da958"
        },
        "item": {
          "id": "ba153599-30ea-4839-b915-f96569a0ab26",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "03d8a482-9e8c-468b-9986-279811ab619a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e898210-ea4e-4219-98e7-b19bd00bcfe0",
        "cursor": {
          "ref": "e88f0c7a-38fb-478c-b067-5028a6f2c359",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "7addd35e-fa1a-4f51-b15b-5ca10afc5add"
        },
        "item": {
          "id": "0e898210-ea4e-4219-98e7-b19bd00bcfe0",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "ffd1f64e-aa5c-48de-ba0b-ecbd42f90266",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "301f54d1-9310-41b8-a2e3-925f4358d9cc",
        "cursor": {
          "ref": "99f4e0fc-0103-4bc4-a72b-c8f5961892b0",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "f68ea6cc-41e7-4b8c-9b24-6ace69d3ef73"
        },
        "item": {
          "id": "301f54d1-9310-41b8-a2e3-925f4358d9cc",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "a39a0030-66e0-4983-8892-822ff5bc25c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a49f711-a46d-4b06-aece-cac5b832314c",
        "cursor": {
          "ref": "9bd3704f-325e-4334-af55-0e53bbd09531",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "10900fb1-f58a-4543-bb1e-00f22d2890fb"
        },
        "item": {
          "id": "9a49f711-a46d-4b06-aece-cac5b832314c",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "17084d4a-d90e-46e7-b4dc-7029120f645e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55949768-dfd2-4c0f-8802-8509dcc5cffc",
        "cursor": {
          "ref": "ef530bda-7312-4e9f-9a87-ba5bb74e211e",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "a7ab81b8-2241-4bee-90d9-4b23a44f5bb0"
        },
        "item": {
          "id": "55949768-dfd2-4c0f-8802-8509dcc5cffc",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "20837f3a-d90d-4207-ab80-4093b66b1cb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e134832-034d-419c-903c-ce5d2f9db8fe",
        "cursor": {
          "ref": "ddffdfc0-610e-42b3-99af-a3cc45728f65",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "29807d07-72e2-4608-962e-f8e1706cf4be"
        },
        "item": {
          "id": "4e134832-034d-419c-903c-ce5d2f9db8fe",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "53066119-08e6-4ee3-8fe5-eea4c8743e1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "839734e8-f2ae-436a-a328-ea6dce328062",
        "cursor": {
          "ref": "e0a7fad8-402d-45b2-9b58-fab253e0bec3",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "3ae35052-3382-4e62-9f1e-e31f61ec5f81"
        },
        "item": {
          "id": "839734e8-f2ae-436a-a328-ea6dce328062",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "6d5b6ba4-e4a9-4128-8bbc-e70d62e7e4ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66a083cd-8e95-4553-b31a-d8ca895130c0",
        "cursor": {
          "ref": "d0ecebd7-a19f-43dc-af0a-bcc7d8420c19",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "9aba7f6e-ea5b-4260-9105-740bdd17917a"
        },
        "item": {
          "id": "66a083cd-8e95-4553-b31a-d8ca895130c0",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "502c918d-69da-435e-9eb1-692b3ac5af6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "822a09f8-b780-4c33-8be8-23cb7f63f93b",
        "cursor": {
          "ref": "bf36a087-73b7-4f88-979b-dba40e8acbc6",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "8ae82a88-add7-4931-a586-3c82e797186e"
        },
        "item": {
          "id": "822a09f8-b780-4c33-8be8-23cb7f63f93b",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "6b16144f-e4d0-449b-ab8f-d350a5c3c13b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 130,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de3681f2-65b4-4e3b-940c-ace29c31161c",
        "cursor": {
          "ref": "c3732162-e7de-4638-aa7a-4a5442bd18d0",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "118b1002-76a7-4f2d-b727-4169ca2243b4"
        },
        "item": {
          "id": "de3681f2-65b4-4e3b-940c-ace29c31161c",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "cac6e752-ba55-4bf7-a4a7-0fb61205c41b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d64039d-9eac-47cf-a1a6-f621e43eeada",
        "cursor": {
          "ref": "5ffed24a-1172-4f0d-9781-1184dd717df8",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "e06c2da7-b54b-4b37-8b6b-3b5b5f4b2358"
        },
        "item": {
          "id": "0d64039d-9eac-47cf-a1a6-f621e43eeada",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "476cb8f7-2e66-43c8-89c0-d12c0227f1df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbab93e2-e122-4d8f-902a-ae4e5d9d327c",
        "cursor": {
          "ref": "901c9299-062f-4467-9b80-af1066d20329",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "95a61c08-0202-4a6e-b850-51601d61c3ed"
        },
        "item": {
          "id": "dbab93e2-e122-4d8f-902a-ae4e5d9d327c",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "98f56305-5c35-49ed-a577-e9805fed2cf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3ae745f-eda3-43cf-9080-52a61aa91a29",
        "cursor": {
          "ref": "ef3e64d8-de9a-4a06-a408-0848ebc13a0c",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "8e41e649-5da4-4ade-b2fc-536c80aaf025"
        },
        "item": {
          "id": "e3ae745f-eda3-43cf-9080-52a61aa91a29",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "68d2217b-7280-4f0c-8a03-c776c2f63905",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97b3220d-d214-4fd2-8665-ed2a20711452",
        "cursor": {
          "ref": "35470a00-546b-4b91-bfaa-25f1bc81435a",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "6ae75d3b-4511-4993-9888-301685015c15"
        },
        "item": {
          "id": "97b3220d-d214-4fd2-8665-ed2a20711452",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "15bac9b0-398d-4c11-82ac-91183bb81eb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32887a0b-be1f-4b2c-973f-4e7a192168ce",
        "cursor": {
          "ref": "e8886f5a-bcd8-47f9-9ba5-0fa48987af59",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "ce3d5f78-1676-427e-93a3-4afa308eb63b"
        },
        "item": {
          "id": "32887a0b-be1f-4b2c-973f-4e7a192168ce",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "0d5199cf-091f-4b8b-9e73-27af72c7ccc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3273b2c1-5534-42b5-a3de-e756177ee90d",
        "cursor": {
          "ref": "1e741778-bfd1-4ed7-9fca-af8f5c96e48d",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "146d8a74-eb88-4e3c-84f6-09744a71f061"
        },
        "item": {
          "id": "3273b2c1-5534-42b5-a3de-e756177ee90d",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "b6b93c12-8e4a-4752-b5ee-5a9d046a16c4",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "9a86b3d5-94fa-4dae-88d3-002324d66c00",
        "cursor": {
          "ref": "89782c30-fe3f-4675-8e0b-873c487bec0c",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "c052d10a-aba6-4719-955b-132f760769b9"
        },
        "item": {
          "id": "9a86b3d5-94fa-4dae-88d3-002324d66c00",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "a975c294-b335-406c-ad3b-87595721bf16",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "3fac28ff-201e-44ed-8e7b-b2e4450c84a5",
        "cursor": {
          "ref": "214bc99f-e0db-4915-b871-5d5f1d5e92e7",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "5268984b-af42-4efe-9648-8e5c3a1ac801"
        },
        "item": {
          "id": "3fac28ff-201e-44ed-8e7b-b2e4450c84a5",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "79db1c27-61f9-48b7-8676-c98e5db20c86",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "7ca74e6c-09e2-4d8f-8775-6341e98decb8",
        "cursor": {
          "ref": "6628b26a-9506-4f07-af0b-ec76b9c9ccfc",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "642ceb66-503a-46d9-9177-e49344f0060e"
        },
        "item": {
          "id": "7ca74e6c-09e2-4d8f-8775-6341e98decb8",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "83b9245e-0069-49d8-a0da-c55477a685a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8229ebb-e3d9-4a94-ab21-c1658fb58cbc",
        "cursor": {
          "ref": "b5a64219-1f63-4d8a-8ed2-6e85801394dc",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "d18e902a-0134-49a6-b918-d06bef503a49"
        },
        "item": {
          "id": "a8229ebb-e3d9-4a94-ab21-c1658fb58cbc",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "34c5c439-7941-4b71-aa0b-d57113514f3f",
          "status": "OK",
          "code": 200,
          "responseTime": 148,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "db695c83-818c-425c-93e7-8cda5d887995",
        "cursor": {
          "ref": "914b4f38-5231-4831-9f8a-4ebdab0a179d",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "424c361d-0e9b-4d16-8ca2-d9798b8872d3"
        },
        "item": {
          "id": "db695c83-818c-425c-93e7-8cda5d887995",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "db1044ef-ae07-4d41-ae9a-4832f423b226",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "a287e547-985e-4c7e-a799-66f8a6f6da07",
        "cursor": {
          "ref": "e86aead8-8392-4775-a709-2603bcd72273",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "48f5005e-f375-4de7-90cb-81faf9398e54"
        },
        "item": {
          "id": "a287e547-985e-4c7e-a799-66f8a6f6da07",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "73dae071-1777-440d-afb9-9ac61e691c61",
          "status": "OK",
          "code": 200,
          "responseTime": 159,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "3b1ee397-c1dc-4ae8-9969-bdc3381585dd",
        "cursor": {
          "ref": "891436e4-8e7c-417e-b68e-0cf75cd8e290",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "8fc949fc-95ca-4c78-a68c-7c70a5fb17ad"
        },
        "item": {
          "id": "3b1ee397-c1dc-4ae8-9969-bdc3381585dd",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "c83dadda-a3bf-4ff0-a5bb-a815a6e5ec49",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "5725c8cb-4b17-4095-8323-037b2067f0c9",
        "cursor": {
          "ref": "cb0fbc35-ec35-45fe-b2fa-411009c4eab4",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "225e55f3-d930-4b73-8d74-f061083808fe"
        },
        "item": {
          "id": "5725c8cb-4b17-4095-8323-037b2067f0c9",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "bb7280f6-7dd8-4038-b20f-329d7b5c9634",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "6fd6693c-7b80-41b1-b3cc-acaa5f6b73d9",
        "cursor": {
          "ref": "5b33b293-3b02-4c47-bad9-0f0b9d17ddf6",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "2fc3c435-1382-4dd4-8502-97be596a94e9"
        },
        "item": {
          "id": "6fd6693c-7b80-41b1-b3cc-acaa5f6b73d9",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "f106eec8-a9e2-4edf-bc9d-f0de44d8ffe6",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "86a302a4-1fca-4f1a-9c00-b26897c9e652",
        "cursor": {
          "ref": "5aff5164-c369-47ee-8b4f-1fcc5bdea0f9",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "5b045be0-9919-4063-8984-e4655ef56572"
        },
        "item": {
          "id": "86a302a4-1fca-4f1a-9c00-b26897c9e652",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "dc8a20ba-1061-4e31-9098-34ec34bb36c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "162352aa-10fe-4a43-99e0-9658bff7617d",
        "cursor": {
          "ref": "5c9f0856-f62c-46cf-9483-b8e1044710bb",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "4384ea2f-8422-4cb8-8ac5-9a6b0a2ad4fa"
        },
        "item": {
          "id": "162352aa-10fe-4a43-99e0-9658bff7617d",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "6d5bea69-0575-448d-b0fb-6dd2d2d3a67b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcc8fea0-8950-4ab7-819a-efb84b7b3eda",
        "cursor": {
          "ref": "6d1a5a0b-3422-4018-91b0-71c6a7d91ccc",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "7200cd88-1b4f-42ec-ae8c-e72eebd02740"
        },
        "item": {
          "id": "bcc8fea0-8950-4ab7-819a-efb84b7b3eda",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "f66c1212-b9f0-4d31-be89-4cc1002e6c9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48ce266f-d692-4dc6-9da1-babaeee7d48c",
        "cursor": {
          "ref": "d96608bf-3af7-467b-9cd9-43aa68602012",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "3ec05143-f696-46ed-a069-64a605aaaf43"
        },
        "item": {
          "id": "48ce266f-d692-4dc6-9da1-babaeee7d48c",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "116c0de2-b955-4c3b-9c80-5e948050125f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dfafc95-dd1f-4dd6-adbd-02c1c043f2b7",
        "cursor": {
          "ref": "ab619c74-b40c-4576-b670-a4ff3c74a9c3",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "86d8c44e-a310-4663-b089-8a328dfaa6dd"
        },
        "item": {
          "id": "4dfafc95-dd1f-4dd6-adbd-02c1c043f2b7",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "7e626cbb-4d75-42ca-9d41-375eba900309",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "404c1b25-b28d-4771-8778-5f9fefc4e895",
        "cursor": {
          "ref": "809df1ac-53e4-4516-a6d5-289203896c6f",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "67a24518-0eae-49cc-af14-2639c6cfd4d7"
        },
        "item": {
          "id": "404c1b25-b28d-4771-8778-5f9fefc4e895",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "c699cd6d-b3b9-4fa3-8a49-0ada611181b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb8a090e-82ae-48a3-b697-7d7052ecfaf5",
        "cursor": {
          "ref": "37117d45-dcf2-4034-9e25-36e132bbb2af",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "7803b205-5bb6-4ab4-868a-de86efbe604a"
        },
        "item": {
          "id": "cb8a090e-82ae-48a3-b697-7d7052ecfaf5",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "d3de7b9e-bc2e-48e6-9da7-e356bb13b437",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1aa343d-37a6-486c-a947-cf36af71c237",
        "cursor": {
          "ref": "c70e8625-9643-4289-a5b4-28c031ecfc3b",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "689f5dc7-7e32-4477-b904-f65716cb8d54"
        },
        "item": {
          "id": "e1aa343d-37a6-486c-a947-cf36af71c237",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "5869a938-dccd-4f3f-8366-4faacbcdc245",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "537beb13-803b-4abb-b6ef-6a6f4cd74ddd",
        "cursor": {
          "ref": "f99a9be3-07f5-4c4a-8247-db698ac6ecd4",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "773af346-45d6-477d-9ac5-b16795031ff6"
        },
        "item": {
          "id": "537beb13-803b-4abb-b6ef-6a6f4cd74ddd",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "54c680a2-bce5-4b0c-96f5-2244e54cea8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "521a0db5-ed44-4c27-86e4-fcb9c3f847c0",
        "cursor": {
          "ref": "a523fb43-7d69-4556-ae7e-1ed1fec36953",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "c7896b8c-dd53-4929-8922-8afda35ae163"
        },
        "item": {
          "id": "521a0db5-ed44-4c27-86e4-fcb9c3f847c0",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "4a76453f-21c8-4116-bc47-0f71a82dab6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "395ea75e-ca12-47d0-8d48-8c4a72ee673f",
        "cursor": {
          "ref": "67455ed7-8c9d-4cac-a47d-516f251770cd",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "a2abefdf-9cfc-4492-95c2-270cc5ba85d6"
        },
        "item": {
          "id": "395ea75e-ca12-47d0-8d48-8c4a72ee673f",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "5506c075-32f5-4a4e-bb12-502ae3ad4e9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c3c22eb-4a62-479b-9e4f-109cee057722",
        "cursor": {
          "ref": "c9d9a975-d727-4dbc-984f-3035cd00377f",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "0996b688-33f0-401a-af51-b5184ac252b9"
        },
        "item": {
          "id": "7c3c22eb-4a62-479b-9e4f-109cee057722",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "5b3e15a2-4651-46eb-90ef-14a74b26a8ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90b1d459-5d04-485b-96f9-c3a52785fbb0",
        "cursor": {
          "ref": "017b68c6-24f1-4fb3-9722-8874bae73405",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "cf1d27fc-9a35-4f9a-9a10-13e81834ac36"
        },
        "item": {
          "id": "90b1d459-5d04-485b-96f9-c3a52785fbb0",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "b0f2acd1-9c26-4113-8366-f3d69c6d65d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3339e32d-73c8-4d1f-bf27-f68d1a9126b4",
        "cursor": {
          "ref": "90c7e166-ae7c-4e5b-aec5-5b525e494f8e",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "1895ef12-8396-49fc-9a40-603c5e579ac2"
        },
        "item": {
          "id": "3339e32d-73c8-4d1f-bf27-f68d1a9126b4",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "d8b665d4-5860-4e99-9b8c-54a50fc094fb",
          "status": "OK",
          "code": 200,
          "responseTime": 146,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "d489e7c4-c036-46b1-8edc-9ac08c4bc60c",
        "cursor": {
          "ref": "c0999400-ba4e-4ed9-919b-77450b0f29bb",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "7a30bf96-19bf-4855-b8af-687a18112dfe"
        },
        "item": {
          "id": "d489e7c4-c036-46b1-8edc-9ac08c4bc60c",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "cc7e053a-eac4-404b-8646-92a900d065a2",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "b3aadaa5-9ed6-492c-9f38-7d60e31d778b",
        "cursor": {
          "ref": "acb4745e-b60b-4880-b985-bafa422a9379",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "517dcffb-77e9-4a1f-aac9-1e00530db84c"
        },
        "item": {
          "id": "b3aadaa5-9ed6-492c-9f38-7d60e31d778b",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "f7ec35da-279f-497f-b0c3-56086ca62c37",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "ba3345fe-b0b3-4981-aa7e-764ffa087feb",
        "cursor": {
          "ref": "dcc05de5-6afe-4855-9191-aac97505161d",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "5d271fac-11d3-4d2f-bc9b-77b7ad2c2a06"
        },
        "item": {
          "id": "ba3345fe-b0b3-4981-aa7e-764ffa087feb",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "d8819e05-b49f-468b-9ee9-54a2e399b597",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "0de30481-189c-4fcf-a87d-a4037cb67604",
        "cursor": {
          "ref": "c7a2b45a-fc8c-406d-8014-b14273758460",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "384748bf-00bc-4a38-88b1-b316e6752c32"
        },
        "item": {
          "id": "0de30481-189c-4fcf-a87d-a4037cb67604",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "9030f909-852a-47c7-a1a8-ee6a470ee8e3",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "7e174957-ad8f-45ac-99e3-9e203829bd2b",
        "cursor": {
          "ref": "1c893918-c516-44ae-8f78-22aaa7b0d9f9",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "3dc8ddb3-2918-4733-8076-a05048f342fd"
        },
        "item": {
          "id": "7e174957-ad8f-45ac-99e3-9e203829bd2b",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "1296c1bb-0d7a-457e-98d2-55d8e57cddbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "029b6ea5-529d-411a-967b-094803934303",
        "cursor": {
          "ref": "df6fe5ea-6e4c-422e-862a-3e4d985def8f",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "7d967a0d-1221-4d6c-bd54-fe3f9f5e16e9"
        },
        "item": {
          "id": "029b6ea5-529d-411a-967b-094803934303",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "5ef6e8d5-cfb1-43a1-8490-ca8ae17b22c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cfa59c1-69dd-46e3-9cdb-aec7e6741b76",
        "cursor": {
          "ref": "a115f2d1-49bb-4099-b3d7-d459448e5165",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "8d4772c1-1719-4499-b943-0a7dd57f6ae0"
        },
        "item": {
          "id": "7cfa59c1-69dd-46e3-9cdb-aec7e6741b76",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "b447b492-ec8d-4382-afec-61f60a48e1ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "380841ed-038b-4bd8-8f47-42bb2414e717",
        "cursor": {
          "ref": "6090bcab-33ef-4eab-a1cf-49a190cd69a2",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "5d4dba67-8f4b-483d-8b1e-d91a0baa0947"
        },
        "item": {
          "id": "380841ed-038b-4bd8-8f47-42bb2414e717",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "90edc4bb-dc3d-41d4-9d3d-615e8fb84b24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8df76220-aeb7-479b-8e49-f13787741318",
        "cursor": {
          "ref": "b0f7d89c-21f0-49f5-963b-81b4bfb83c3b",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "29c0dd2c-2a31-4470-968f-cea51f359caf"
        },
        "item": {
          "id": "8df76220-aeb7-479b-8e49-f13787741318",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "6baa0378-64c9-497c-97e4-549228eaa009",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7167f114-dfad-4045-bf7e-74c43ba14ffd",
        "cursor": {
          "ref": "a3835454-4058-404c-92a3-28fa191766ae",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "80797153-ae7a-4a9b-8eb0-74c934fa5667"
        },
        "item": {
          "id": "7167f114-dfad-4045-bf7e-74c43ba14ffd",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "da607968-25c3-4416-8e61-3746e06ed1eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f4d4e3e-c809-4df5-bde4-691329d64e94",
        "cursor": {
          "ref": "65dd4af1-1672-4b76-b90a-9b6cdd3e2890",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "b44ad260-1bfb-4f65-8d5b-0ef13b13bbab"
        },
        "item": {
          "id": "7f4d4e3e-c809-4df5-bde4-691329d64e94",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "10e1dbdf-c18e-48ce-b09d-d98ac5cec180",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d2c2dd1-f1a3-499a-975d-0ba75a1ce691",
        "cursor": {
          "ref": "61fa5f84-7d68-4aaa-a4a1-371276b7ab3a",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "86acef6b-5e8b-49fc-ba6e-91d53dc919b0"
        },
        "item": {
          "id": "7d2c2dd1-f1a3-499a-975d-0ba75a1ce691",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "d664c5b8-5f04-459e-a19d-c0ad792f3bfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1156508-92c2-4455-b7ec-20b4daa75f6b",
        "cursor": {
          "ref": "1ca35250-4694-4f17-9f45-1b05a7786b36",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "51f4f88c-4e07-484b-861c-83634e1e11a7"
        },
        "item": {
          "id": "a1156508-92c2-4455-b7ec-20b4daa75f6b",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "fcdc5c39-2e20-4425-b810-d85f28ea22a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cee19eb2-9691-48bf-bb2d-8f6aef6c0acd",
        "cursor": {
          "ref": "2e935b7f-af35-43a4-9d5b-39486de91791",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "f7837e12-1534-41f4-b90a-8db5525e3d6a"
        },
        "item": {
          "id": "cee19eb2-9691-48bf-bb2d-8f6aef6c0acd",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "43e8fd53-8949-4db8-860d-5ca2bd1fb86b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d21a6567-442f-467f-a307-1dc1cc39498a",
        "cursor": {
          "ref": "9d7778b6-c175-4e83-8cc9-f769972e97cb",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "a78eb9a0-bfb6-49b4-aa46-a4faf8bea65f"
        },
        "item": {
          "id": "d21a6567-442f-467f-a307-1dc1cc39498a",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "130b4690-f478-4be2-99bf-0a68f3d4d5f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c38fefad-d051-478e-830d-4639a9c120b0",
        "cursor": {
          "ref": "bdd153d8-fd07-41fc-bd61-f40d5c810eb8",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "7cb747cc-c429-4996-b0a8-129617e7bc30"
        },
        "item": {
          "id": "c38fefad-d051-478e-830d-4639a9c120b0",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "63e47317-9d55-4e19-a8ca-ce04b7e0cb82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffd87aee-011c-44f9-8353-bfd3c74214f4",
        "cursor": {
          "ref": "35fc6c16-c4e0-4c5a-beba-cd0954cd5356",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "86a4c487-f6ce-401d-bef5-fd9f16d9b735"
        },
        "item": {
          "id": "ffd87aee-011c-44f9-8353-bfd3c74214f4",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "fcd64dae-bc60-4ed4-aa05-fcd2b13f24cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfab0ebc-8fea-4c28-9c26-4f665e6f04ba",
        "cursor": {
          "ref": "9ce27301-994a-43ff-bf91-1a745efc0122",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "bad7fbec-baae-43b5-ac12-070921305a55"
        },
        "item": {
          "id": "dfab0ebc-8fea-4c28-9c26-4f665e6f04ba",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "ba5e31c6-daf9-4d11-bc10-7119fe81dd28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b96526cd-2fc0-44d0-b0ad-e5f7371560cb",
        "cursor": {
          "ref": "cba6f4b1-8faa-45cb-9bc6-7f5bfc7ccc6c",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "37496c90-c666-478c-9e54-44b426a37207"
        },
        "item": {
          "id": "b96526cd-2fc0-44d0-b0ad-e5f7371560cb",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "221a70f7-6d88-4847-9e84-507425867a3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b460eab-45b1-4db9-a19a-7b6511c3acac",
        "cursor": {
          "ref": "7fe05c31-7b8c-4a8f-aaa2-875e5a3bc69f",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "aec9d81c-3a1e-4e0b-849e-2fa112f0049b"
        },
        "item": {
          "id": "9b460eab-45b1-4db9-a19a-7b6511c3acac",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "0d577310-7a27-4768-9524-fa05caa3853d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7050f3f-1013-430d-ba11-c085ae7126e1",
        "cursor": {
          "ref": "16977357-1d12-4c17-adf4-8ffd642267a9",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "dc254d24-c682-4d2f-970b-391ee55ecff8"
        },
        "item": {
          "id": "e7050f3f-1013-430d-ba11-c085ae7126e1",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "6b0816e1-95e3-437b-b538-3edbfadd6e6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5889e61-de25-4810-ae1c-6715ff6a9c5f",
        "cursor": {
          "ref": "55a7beff-6e7a-4a38-b1f3-c4cfea41f5e7",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "72f11e19-b8d1-4ed0-82e7-34cc3f5227c9"
        },
        "item": {
          "id": "f5889e61-de25-4810-ae1c-6715ff6a9c5f",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "b7d62a18-4d1e-4d74-b9bb-aa86faa80467",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f80d3c7b-5d90-475d-aadb-96d18e8dafca",
        "cursor": {
          "ref": "7d25faa6-6540-4ae7-8c73-c94b5b7d0528",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "4c364e0f-bcee-41d6-8dd9-f035b26e1348"
        },
        "item": {
          "id": "f80d3c7b-5d90-475d-aadb-96d18e8dafca",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "d1dfbcba-ef59-4de2-8227-6ed2e1082daa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "132c8a1a-4e74-428b-9e9a-e8c443786391",
        "cursor": {
          "ref": "67c61fd1-7dbb-4d25-ac84-07f647564472",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "1692da8e-a5c3-4f3c-815c-6c5e812427fe"
        },
        "item": {
          "id": "132c8a1a-4e74-428b-9e9a-e8c443786391",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "f05dad77-c788-4fd8-bfbf-433791ec87cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "020d86e5-a81c-49b4-bf55-2554a035acd5",
        "cursor": {
          "ref": "27ce1aa1-8bb8-4f88-9a76-96cc9f6c9cf1",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "6c6b62bc-2c91-48f5-91ad-9399684b073e"
        },
        "item": {
          "id": "020d86e5-a81c-49b4-bf55-2554a035acd5",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "d0073ef0-2ddb-42da-a691-391453f80d3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f9525a2-102d-4e27-b762-825b421b233b",
        "cursor": {
          "ref": "5fa4bc3b-1fbc-49af-ac75-97efffea7ea5",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "475ab175-6c90-4464-8b11-23742edfac47"
        },
        "item": {
          "id": "6f9525a2-102d-4e27-b762-825b421b233b",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "98c66c4f-ae39-4619-8cc5-e049702d8f74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d97eebdd-74b1-45e2-a96d-ea742443887b",
        "cursor": {
          "ref": "91a6482d-931d-4a05-9e3a-509fde89cfef",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "13b86554-d0f3-4da7-b26e-46ca97bfb0bb"
        },
        "item": {
          "id": "d97eebdd-74b1-45e2-a96d-ea742443887b",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "ac66d429-371e-417b-96c1-ea8050fe2480",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc493505-262e-4671-b029-d0f54d3c568c",
        "cursor": {
          "ref": "e32fc8a2-b81e-491d-bfe0-59835f6e8d78",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "ca8bb244-6fd4-4524-b7fe-f90c62141b43"
        },
        "item": {
          "id": "cc493505-262e-4671-b029-d0f54d3c568c",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "d4ff19b8-8540-4119-be02-1ae3a9a67b53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2378faae-6913-465a-91b4-7dc338d1124c",
        "cursor": {
          "ref": "21784513-2743-4589-9663-b543234a661d",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "865e4172-6cc2-4320-a616-bb01652cb2c2"
        },
        "item": {
          "id": "2378faae-6913-465a-91b4-7dc338d1124c",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "84a790f9-d264-4c66-8246-95f544e2f817",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "643a4b93-159f-4f1c-84cf-424a62a6b969",
        "cursor": {
          "ref": "63593b4f-8584-492d-8fc8-5fcbd6008f33",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "20d75bb0-2718-47c5-a390-b856869ddfda"
        },
        "item": {
          "id": "643a4b93-159f-4f1c-84cf-424a62a6b969",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "c5350bf3-f36b-4277-a68e-187fa2347629",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6391983-39c6-4283-b86a-e4d281c6ff1e",
        "cursor": {
          "ref": "cd96aeda-d5d1-4c82-b4b9-9414b52632d9",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "3a54b395-de7b-4749-babc-6145e56b2087"
        },
        "item": {
          "id": "e6391983-39c6-4283-b86a-e4d281c6ff1e",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "2be29b4a-6b36-4530-9863-e6f4753d8411",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfef6ef2-1813-4291-b571-b4ed77608364",
        "cursor": {
          "ref": "f955f86b-d4b1-4f8c-8e61-94073f582b79",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "20685ac6-6459-47f5-be63-d896a6aa9743"
        },
        "item": {
          "id": "cfef6ef2-1813-4291-b571-b4ed77608364",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "5efb8edd-7c45-49c5-af2d-283d142bc06c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a89fa1e-d913-4e11-96c7-611ffd6eacb9",
        "cursor": {
          "ref": "28dd31e4-4b0a-4865-aa06-e332827f56e4",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "bc22d508-8d64-47d8-ad1a-f90f98495f9d"
        },
        "item": {
          "id": "8a89fa1e-d913-4e11-96c7-611ffd6eacb9",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "9429217e-025c-489c-8a64-d1e13e32ae29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2e9a3d3-00d0-45c4-b056-612e692eca45",
        "cursor": {
          "ref": "841a50de-c17a-4df9-8da6-e6a8b899885f",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "56b47fbe-5c72-4683-a111-4ebad2ac697f"
        },
        "item": {
          "id": "a2e9a3d3-00d0-45c4-b056-612e692eca45",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "2a1fa0c0-a014-417f-899b-e7bbab9c7d8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9690224a-3d94-467a-ab3e-c63b0b270305",
        "cursor": {
          "ref": "2dc3abe6-e310-41bd-8994-70cb3d730bfd",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "fab5e781-f78b-4fdd-bd96-e1f7c5025edf"
        },
        "item": {
          "id": "9690224a-3d94-467a-ab3e-c63b0b270305",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "30c4d236-8d51-4069-b0c2-90ec98504169",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91715af6-9921-4f5e-a9e3-018fed8586e9",
        "cursor": {
          "ref": "73ade9fb-b487-4699-ba98-f18515a6a0dd",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "997d1c01-1c89-4904-96b3-69234d4be9d9"
        },
        "item": {
          "id": "91715af6-9921-4f5e-a9e3-018fed8586e9",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "6c3d6b5c-cc53-4b32-87bb-21ef54acdd52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8bc6bd8-7281-4388-befd-f9b56d547fd4",
        "cursor": {
          "ref": "d035817a-2330-4ff3-ae53-dceeed39d596",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "fd3a2e7c-8bab-4600-a4b3-1c2207670efb"
        },
        "item": {
          "id": "e8bc6bd8-7281-4388-befd-f9b56d547fd4",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "31659a84-19db-4d63-a6b6-9a83dc03f99a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c0521c5-aba2-42de-80d9-1332864b5319",
        "cursor": {
          "ref": "ff04c401-fdba-4867-8b6b-f0f219ff4e9b",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "a8380d11-7fc1-45d6-a6a3-2ca4a0fe0bfd"
        },
        "item": {
          "id": "3c0521c5-aba2-42de-80d9-1332864b5319",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "457609eb-e0fc-4d85-941b-67af4684e6b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ed01d32-f405-4574-ba40-ed5488192f85",
        "cursor": {
          "ref": "317aee36-739a-476d-b2c0-40bfaf31c540",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "57df6b09-7775-4869-9c85-be0f5b2a4c86"
        },
        "item": {
          "id": "4ed01d32-f405-4574-ba40-ed5488192f85",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "a495af86-5224-4d97-a6b5-d81fc9d60108",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb7fb7c8-09a7-4fa7-b3ce-547276bf77d7",
        "cursor": {
          "ref": "18618982-2e71-4f7b-b49e-081f4c61dee0",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "63d95615-bc43-4a13-be13-aca42407371f"
        },
        "item": {
          "id": "fb7fb7c8-09a7-4fa7-b3ce-547276bf77d7",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "d23f04e7-9a09-4f3b-88ba-1daec12a17ab",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "745a8e5f-60f0-4087-84c3-f5904a681311",
        "cursor": {
          "ref": "1abb2a5a-4015-4001-afab-770abde4239c",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "5b30f46e-0914-4941-9c40-b94529504b4c"
        },
        "item": {
          "id": "745a8e5f-60f0-4087-84c3-f5904a681311",
          "name": "credentials_verify"
        },
        "response": {
          "id": "11b930a1-c95b-4090-82cd-ad2263ecc119",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dbc7996-c6e0-42a1-989f-477365642018",
        "cursor": {
          "ref": "3c83b9c8-89a3-451e-a603-7677f8f60d69",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "968dcae1-9906-4878-b028-0636d405954d"
        },
        "item": {
          "id": "0dbc7996-c6e0-42a1-989f-477365642018",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "d2fa5e26-73e0-4003-8bce-29fca3b39aaa",
          "status": "OK",
          "code": 200,
          "responseTime": 153,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4cc3714-9c82-4616-abe1-b79eac716838",
        "cursor": {
          "ref": "4efe0180-1775-4f8d-9f2c-182bf901a462",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "ec2bcd2a-169b-4a8b-bb0e-d4b3ded69ec4"
        },
        "item": {
          "id": "a4cc3714-9c82-4616-abe1-b79eac716838",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "7c242f11-e11e-4d8c-ab6c-de0ad8fbd236",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4cc3714-9c82-4616-abe1-b79eac716838",
        "cursor": {
          "ref": "4efe0180-1775-4f8d-9f2c-182bf901a462",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "ec2bcd2a-169b-4a8b-bb0e-d4b3ded69ec4"
        },
        "item": {
          "id": "a4cc3714-9c82-4616-abe1-b79eac716838",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "7c242f11-e11e-4d8c-ab6c-de0ad8fbd236",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d459985-0073-4ae2-8bfe-c27a3c7454f3",
        "cursor": {
          "ref": "55f427eb-4549-415a-937e-3cffe6b5b338",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "a9f32129-8455-4346-81ff-f9588a9c9606"
        },
        "item": {
          "id": "9d459985-0073-4ae2-8bfe-c27a3c7454f3",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "bee7ef7b-1ee1-4f00-afc6-4e8370e0b094",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6346eb12-3426-4ace-9da5-46cd65cc2e75",
        "cursor": {
          "ref": "0f4eb05f-bb89-4049-a93d-aba526833a78",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "5b0e9536-8e9c-439b-b2f1-5f60e8623424"
        },
        "item": {
          "id": "6346eb12-3426-4ace-9da5-46cd65cc2e75",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "06d6a828-c532-4b9c-925e-cc0518e08398",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}